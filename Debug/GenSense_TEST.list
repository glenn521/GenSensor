
GenSense_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c94c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800caf0  0800caf0  0001caf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d260  0800d260  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d260  0800d260  0001d260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d268  0800d268  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d268  0800d268  0001d268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d26c  0800d26c  0001d26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001e8  0800d458  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  0800d458  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e71  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002880  00000000  00000000  00034089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00036910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00037a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019772  00000000  00000000  00038b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150ff  00000000  00000000  000522b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef0e  00000000  00000000  000673b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001062bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000633c  00000000  00000000  00106310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cad4 	.word	0x0800cad4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800cad4 	.word	0x0800cad4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <AS7343_read>:
#include "main.h"
#include "AS7343.h"

#include <assert.h>

uint8_t AS7343_read(as7343_handle_t *handle, uint8_t regAddress){
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buffer;
	HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address<<1, regAddress, 1, &rx_buffer, 1, 10);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	889b      	ldrh	r3, [r3, #4]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b299      	uxth	r1, r3
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	b29a      	uxth	r2, r3
 8001024:	230a      	movs	r3, #10
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030f 	add.w	r3, r7, #15
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	f003 fb3c 	bl	80046b0 <HAL_I2C_Mem_Read>

	return rx_buffer;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <AS7343_write>:

bool AS7343_write(as7343_handle_t *handle, uint8_t regAddress, uint8_t data){
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af04      	add	r7, sp, #16
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	70fb      	strb	r3, [r7, #3]
 800104e:	4613      	mov	r3, r2
 8001050:	70bb      	strb	r3, [r7, #2]
	if(HAL_I2C_Mem_Write(handle->i2c_handle, handle->device_address<<1, regAddress, 1, &data, 1, 10) == HAL_OK) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	889b      	ldrh	r3, [r3, #4]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b299      	uxth	r1, r3
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	b29a      	uxth	r2, r3
 8001062:	230a      	movs	r3, #10
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1cbb      	adds	r3, r7, #2
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	f003 fa24 	bl	80044bc <HAL_I2C_Mem_Write>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <AS7343_write+0x3c>
		return true;
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <AS7343_write+0x3e>
	}
	return false;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <AS7343_power>:

void AS7343_power(as7343_handle_t *handle, bool power){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]

	AS7343_write(handle, AS7343_ENABLE, 0x01);
 8001094:	2201      	movs	r2, #1
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffd2 	bl	8001042 <AS7343_write>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <AS7343_read_spectral_data>:

uint16_t AS7343_read_spectral_data(as7343_handle_t *handle, uint8_t channel) {
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b088      	sub	sp, #32
 80010aa:	af04      	add	r7, sp, #16
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buffer[2];
	HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address<<1, AS7343_DATA_0_L + (2*channel), 1, rx_buffer, 2, 10);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	889b      	ldrh	r3, [r3, #4]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	b299      	uxth	r1, r3
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	3395      	adds	r3, #149	; 0x95
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	230a      	movs	r3, #10
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2302      	movs	r3, #2
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	f003 fae9 	bl	80046b0 <HAL_I2C_Mem_Read>

	return ((uint16_t)rx_buffer[1]<<8) | (uint16_t)rx_buffer[0];
 80010de:	7b7b      	ldrb	r3, [r7, #13]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	b29b      	uxth	r3, r3
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <AS7343_enable_spectral_measurement>:

void AS7343_enable_spectral_measurement(as7343_handle_t *handle, bool enable) {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	70fb      	strb	r3, [r7, #3]
	AS7343_write(handle, AS7343_ENABLE, 0x01 | ((uint8_t)enable)<<1);
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	b25b      	sxtb	r3, r3
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	b25b      	sxtb	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	2180      	movs	r1, #128	; 0x80
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff94 	bl	8001042 <AS7343_write>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <AS7343_set_cycle>:

void AS7343_set_cycle(as7343_handle_t *handle, uint8_t cycle) {
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	70fb      	strb	r3, [r7, #3]
	AS7343_write(handle, AS7343_CFG20, cycle<<5);
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	015b      	lsls	r3, r3, #5
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	21d6      	movs	r1, #214	; 0xd6
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff82 	bl	8001042 <AS7343_write>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <AS7343_direct_config_3_chain>:
	AS7343_write(handle, 0x08, 0x06);
	AS7343_write(handle, 0x09, 0x00);
	AS7343_write(handle, 0x80, 0x11);
}

void AS7343_direct_config_3_chain(as7343_handle_t *handle) {
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	AS7343_write(handle, AS7343_CFG6, 0x0);
 800114e:	2200      	movs	r2, #0
 8001150:	21f5      	movs	r1, #245	; 0xf5
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff75 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_FD_CFG0, 0xa1);
 8001158:	22a1      	movs	r2, #161	; 0xa1
 800115a:	21df      	movs	r1, #223	; 0xdf
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff70 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_CFG10, 0xf2);
 8001162:	22f2      	movs	r2, #242	; 0xf2
 8001164:	2165      	movs	r1, #101	; 0x65
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff6b 	bl	8001042 <AS7343_write>

	AS7343_write(handle, AS7343_CFG0, 0x10);
 800116c:	2210      	movs	r2, #16
 800116e:	21bf      	movs	r1, #191	; 0xbf
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff66 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_CFG1, 0x0c);
 8001176:	220c      	movs	r2, #12
 8001178:	21c6      	movs	r1, #198	; 0xc6
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff61 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_CFG8, 0xc8);
 8001180:	22c8      	movs	r2, #200	; 0xc8
 8001182:	21c9      	movs	r1, #201	; 0xc9
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff5c 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_CFG20, 0x62);
 800118a:	2262      	movs	r2, #98	; 0x62
 800118c:	21d6      	movs	r1, #214	; 0xd6
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff57 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_AGC_GAIN_MAX, 0x99);
 8001194:	2299      	movs	r2, #153	; 0x99
 8001196:	21d7      	movs	r1, #215	; 0xd7
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff52 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_FD_TIME_1, 0x64);
 800119e:	2264      	movs	r2, #100	; 0x64
 80011a0:	21e0      	movs	r1, #224	; 0xe0
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff4d 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_FD_TIME_2, 0x21);
 80011a8:	2221      	movs	r2, #33	; 0x21
 80011aa:	21e2      	movs	r1, #226	; 0xe2
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff48 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 80011b2:	2200      	movs	r2, #0
 80011b4:	21e7      	movs	r1, #231	; 0xe7
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff43 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 80011bc:	2246      	movs	r2, #70	; 0x46
 80011be:	21e4      	movs	r1, #228	; 0xe4
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff3e 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x04);
 80011c6:	2204      	movs	r2, #4
 80011c8:	21e7      	movs	r1, #231	; 0xe7
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff39 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 80011d0:	2246      	movs	r2, #70	; 0x46
 80011d2:	21e4      	movs	r1, #228	; 0xe4
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff34 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x65);
 80011da:	2265      	movs	r2, #101	; 0x65
 80011dc:	21e7      	movs	r1, #231	; 0xe7
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff2f 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 80011e4:	2246      	movs	r2, #70	; 0x46
 80011e6:	21e4      	movs	r1, #228	; 0xe4
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff2a 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x02);
 80011ee:	2202      	movs	r2, #2
 80011f0:	21e7      	movs	r1, #231	; 0xe7
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff25 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 80011f8:	2246      	movs	r2, #70	; 0x46
 80011fa:	21e4      	movs	r1, #228	; 0xe4
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff20 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 8001202:	2200      	movs	r2, #0
 8001204:	21e7      	movs	r1, #231	; 0xe7
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff1b 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 800120c:	2246      	movs	r2, #70	; 0x46
 800120e:	21e4      	movs	r1, #228	; 0xe4
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff16 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x05);
 8001216:	2205      	movs	r2, #5
 8001218:	21e7      	movs	r1, #231	; 0xe7
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff11 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 8001220:	2246      	movs	r2, #70	; 0x46
 8001222:	21e4      	movs	r1, #228	; 0xe4
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff0c 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 800122a:	2200      	movs	r2, #0
 800122c:	21e7      	movs	r1, #231	; 0xe7
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff07 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 8001234:	2246      	movs	r2, #70	; 0x46
 8001236:	21e4      	movs	r1, #228	; 0xe4
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff02 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x01);
 800123e:	2201      	movs	r2, #1
 8001240:	21e7      	movs	r1, #231	; 0xe7
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fefd 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 8001248:	2246      	movs	r2, #70	; 0x46
 800124a:	21e4      	movs	r1, #228	; 0xe4
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fef8 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 8001252:	2200      	movs	r2, #0
 8001254:	21e7      	movs	r1, #231	; 0xe7
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fef3 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 800125c:	2246      	movs	r2, #70	; 0x46
 800125e:	21e4      	movs	r1, #228	; 0xe4
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff feee 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x30);
 8001266:	2230      	movs	r2, #48	; 0x30
 8001268:	21e7      	movs	r1, #231	; 0xe7
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fee9 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 8001270:	2246      	movs	r2, #70	; 0x46
 8001272:	21e4      	movs	r1, #228	; 0xe4
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fee4 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 800127a:	2200      	movs	r2, #0
 800127c:	21e7      	movs	r1, #231	; 0xe7
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fedf 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 8001284:	2256      	movs	r2, #86	; 0x56
 8001286:	21e4      	movs	r1, #228	; 0xe4
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff feda 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 800128e:	2200      	movs	r2, #0
 8001290:	21e7      	movs	r1, #231	; 0xe7
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fed5 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 8001298:	2256      	movs	r2, #86	; 0x56
 800129a:	21e4      	movs	r1, #228	; 0xe4
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fed0 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x60);
 80012a2:	2260      	movs	r2, #96	; 0x60
 80012a4:	21e7      	movs	r1, #231	; 0xe7
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fecb 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 80012ac:	2256      	movs	r2, #86	; 0x56
 80012ae:	21e4      	movs	r1, #228	; 0xe4
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fec6 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x20);
 80012b6:	2220      	movs	r2, #32
 80012b8:	21e7      	movs	r1, #231	; 0xe7
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fec1 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 80012c0:	2256      	movs	r2, #86	; 0x56
 80012c2:	21e4      	movs	r1, #228	; 0xe4
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff febc 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x04);
 80012ca:	2204      	movs	r2, #4
 80012cc:	21e7      	movs	r1, #231	; 0xe7
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff feb7 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 80012d4:	2256      	movs	r2, #86	; 0x56
 80012d6:	21e4      	movs	r1, #228	; 0xe4
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff feb2 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x50);
 80012de:	2250      	movs	r2, #80	; 0x50
 80012e0:	21e7      	movs	r1, #231	; 0xe7
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fead 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 80012e8:	2256      	movs	r2, #86	; 0x56
 80012ea:	21e4      	movs	r1, #228	; 0xe4
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fea8 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x03);
 80012f2:	2203      	movs	r2, #3
 80012f4:	21e7      	movs	r1, #231	; 0xe7
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fea3 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 80012fc:	2256      	movs	r2, #86	; 0x56
 80012fe:	21e4      	movs	r1, #228	; 0xe4
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fe9e 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 8001306:	2200      	movs	r2, #0
 8001308:	21e7      	movs	r1, #231	; 0xe7
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fe99 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 8001310:	2256      	movs	r2, #86	; 0x56
 8001312:	21e4      	movs	r1, #228	; 0xe4
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fe94 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x01);
 800131a:	2201      	movs	r2, #1
 800131c:	21e7      	movs	r1, #231	; 0xe7
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fe8f 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 8001324:	2256      	movs	r2, #86	; 0x56
 8001326:	21e4      	movs	r1, #228	; 0xe4
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fe8a 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x05);
 800132e:	2205      	movs	r2, #5
 8001330:	21e7      	movs	r1, #231	; 0xe7
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fe85 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 8001338:	2256      	movs	r2, #86	; 0x56
 800133a:	21e4      	movs	r1, #228	; 0xe4
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe80 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x05);
 8001342:	2205      	movs	r2, #5
 8001344:	21e7      	movs	r1, #231	; 0xe7
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fe7b 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 800134c:	2266      	movs	r2, #102	; 0x66
 800134e:	21e4      	movs	r1, #228	; 0xe4
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fe76 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 8001356:	2200      	movs	r2, #0
 8001358:	21e7      	movs	r1, #231	; 0xe7
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fe71 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 8001360:	2266      	movs	r2, #102	; 0x66
 8001362:	21e4      	movs	r1, #228	; 0xe4
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fe6c 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x60);
 800136a:	2260      	movs	r2, #96	; 0x60
 800136c:	21e7      	movs	r1, #231	; 0xe7
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fe67 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 8001374:	2266      	movs	r2, #102	; 0x66
 8001376:	21e4      	movs	r1, #228	; 0xe4
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fe62 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 800137e:	2200      	movs	r2, #0
 8001380:	21e7      	movs	r1, #231	; 0xe7
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fe5d 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 8001388:	2266      	movs	r2, #102	; 0x66
 800138a:	21e4      	movs	r1, #228	; 0xe4
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fe58 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x30);
 8001392:	2230      	movs	r2, #48	; 0x30
 8001394:	21e7      	movs	r1, #231	; 0xe7
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fe53 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 800139c:	2266      	movs	r2, #102	; 0x66
 800139e:	21e4      	movs	r1, #228	; 0xe4
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fe4e 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 80013a6:	2200      	movs	r2, #0
 80013a8:	21e7      	movs	r1, #231	; 0xe7
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fe49 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 80013b0:	2266      	movs	r2, #102	; 0x66
 80013b2:	21e4      	movs	r1, #228	; 0xe4
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fe44 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x40);
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	21e7      	movs	r1, #231	; 0xe7
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fe3f 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 80013c4:	2266      	movs	r2, #102	; 0x66
 80013c6:	21e4      	movs	r1, #228	; 0xe4
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fe3a 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x10);
 80013ce:	2210      	movs	r2, #16
 80013d0:	21e7      	movs	r1, #231	; 0xe7
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fe35 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 80013d8:	2266      	movs	r2, #102	; 0x66
 80013da:	21e4      	movs	r1, #228	; 0xe4
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fe30 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x20);
 80013e2:	2220      	movs	r2, #32
 80013e4:	21e7      	movs	r1, #231	; 0xe7
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fe2b 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 80013ec:	2266      	movs	r2, #102	; 0x66
 80013ee:	21e4      	movs	r1, #228	; 0xe4
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fe26 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 80013f6:	2200      	movs	r2, #0
 80013f8:	21e7      	movs	r1, #231	; 0xe7
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe21 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 8001400:	2266      	movs	r2, #102	; 0x66
 8001402:	21e4      	movs	r1, #228	; 0xe4
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fe1c 	bl	8001042 <AS7343_write>

//	AS7343_write(handle, 0x80, 0x11);
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <AS7343_get_AVALID_bit>:

bool AS7343_get_AVALID_bit(as7343_handle_t *handle) {
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	uint8_t status2 = AS7343_read(handle, AS7343_STATUS2);
 800141a:	2190      	movs	r1, #144	; 0x90
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fdf3 	bl	8001008 <AS7343_read>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]

	return (status2 & 0x40) > 0;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142c:	2b00      	cmp	r3, #0
 800142e:	bfcc      	ite	gt
 8001430:	2301      	movgt	r3, #1
 8001432:	2300      	movle	r3, #0
 8001434:	b2db      	uxtb	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <AS7343_delay_for_reading>:
	uint8_t status2 = AS7343_read(handle, AS7343_STATUS2);

	return (status2 & 0x10) > 0;
}

void AS7343_delay_for_reading(as7343_handle_t *handle) {
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	while(!AS7343_get_AVALID_bit(handle)) {
 8001446:	e002      	b.n	800144e <AS7343_delay_for_reading+0x10>
		HAL_Delay(10);
 8001448:	200a      	movs	r0, #10
 800144a:	f001 fe6f 	bl	800312c <HAL_Delay>
	while(!AS7343_get_AVALID_bit(handle)) {
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffdf 	bl	8001412 <AS7343_get_AVALID_bit>
 8001454:	4603      	mov	r3, r0
 8001456:	f083 0301 	eor.w	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f3      	bne.n	8001448 <AS7343_delay_for_reading+0xa>
	}
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <AS7343_read_18>:

void AS7343_read_18(as7343_handle_t *handle, uint16_t* data) {
 800146a:	b590      	push	{r4, r7, lr}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
	AS7343_enable_spectral_measurement(handle, true);
 8001474:	2101      	movs	r1, #1
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fe3d 	bl	80010f6 <AS7343_enable_spectral_measurement>
	AS7343_delay_for_reading(handle);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffde 	bl	800143e <AS7343_delay_for_reading>
	AS7343_enable_spectral_measurement(handle, false);
 8001482:	2100      	movs	r1, #0
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fe36 	bl	80010f6 <AS7343_enable_spectral_measurement>

	for(uint8_t i = 0; i<18; i++) {
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e00d      	b.n	80014ac <AS7343_read_18+0x42>
		data[i] = AS7343_read_spectral_data(handle, i);
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	18d4      	adds	r4, r2, r3
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fe02 	bl	80010a6 <AS7343_read_spectral_data>
 80014a2:	4603      	mov	r3, r0
 80014a4:	8023      	strh	r3, [r4, #0]
	for(uint8_t i = 0; i<18; i++) {
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	3301      	adds	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b11      	cmp	r3, #17
 80014b0:	d9ee      	bls.n	8001490 <AS7343_read_18+0x26>
	}

}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <AS7343_set_gain>:

void AS7343_set_gain(as7343_handle_t *handle, uint8_t gain_raw) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
	AS7343_write(handle, AS7343_CFG1, gain_raw);
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	461a      	mov	r2, r3
 80014cc:	21c6      	movs	r1, #198	; 0xc6
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdb7 	bl	8001042 <AS7343_write>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <AS7343_get_gain>:

uint8_t AS7343_get_gain(as7343_handle_t *handle) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	return AS7343_read(handle, AS7343_CFG1);
 80014e4:	21c6      	movs	r1, #198	; 0xc6
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fd8e 	bl	8001008 <AS7343_read>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <AS7343_set_TINT>:

void AS7343_set_TINT(as7343_handle_t *handle, double TINT) {
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	ed87 0b00 	vstr	d0, [r7]
	uint8_t ATIME = 0x00;
 8001504:	2300      	movs	r3, #0
 8001506:	75fb      	strb	r3, [r7, #23]
	uint16_t ASTEP = 0x0000;
 8001508:	2300      	movs	r3, #0
 800150a:	82bb      	strh	r3, [r7, #20]
	while(true) {
		ASTEP = ((TINT/(double)(ATIME+1))*720.0/2.0);
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	3301      	adds	r3, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f80f 	bl	8000534 <__aeabi_i2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800151e:	f7ff f99d 	bl	800085c <__aeabi_ddiv>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <AS7343_set_TINT+0xf8>)
 8001530:	f7ff f86a 	bl	8000608 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001544:	f7ff f98a 	bl	800085c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fb32 	bl	8000bb8 <__aeabi_d2uiz>
 8001554:	4603      	mov	r3, r0
 8001556:	82bb      	strh	r3, [r7, #20]

		if(abs(((ATIME+1)*(ASTEP+1)*2/720) - (uint16_t)TINT) <=1) {
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	3301      	adds	r3, #1
 800155c:	8aba      	ldrh	r2, [r7, #20]
 800155e:	3201      	adds	r2, #1
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <AS7343_set_TINT+0xfc>)
 8001566:	fb82 1203 	smull	r1, r2, r2, r3
 800156a:	441a      	add	r2, r3
 800156c:	1212      	asrs	r2, r2, #8
 800156e:	17db      	asrs	r3, r3, #31
 8001570:	1ad4      	subs	r4, r2, r3
 8001572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001576:	f7ff fb1f 	bl	8000bb8 <__aeabi_d2uiz>
 800157a:	4603      	mov	r3, r0
 800157c:	b29b      	uxth	r3, r3
 800157e:	1ae3      	subs	r3, r4, r3
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	db15      	blt.n	80015b2 <AS7343_set_TINT+0xba>
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	3301      	adds	r3, #1
 800158a:	8aba      	ldrh	r2, [r7, #20]
 800158c:	3201      	adds	r2, #1
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a18      	ldr	r2, [pc, #96]	; (80015f4 <AS7343_set_TINT+0xfc>)
 8001594:	fb82 1203 	smull	r1, r2, r2, r3
 8001598:	441a      	add	r2, r3
 800159a:	1212      	asrs	r2, r2, #8
 800159c:	17db      	asrs	r3, r3, #31
 800159e:	1ad4      	subs	r4, r2, r3
 80015a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015a4:	f7ff fb08 	bl	8000bb8 <__aeabi_d2uiz>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	1ae3      	subs	r3, r4, r3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	dd03      	ble.n	80015ba <AS7343_set_TINT+0xc2>
			break;
		}
		else {
			ATIME += 1;
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	3301      	adds	r3, #1
 80015b6:	75fb      	strb	r3, [r7, #23]
		ASTEP = ((TINT/(double)(ATIME+1))*720.0/2.0);
 80015b8:	e7a8      	b.n	800150c <AS7343_set_TINT+0x14>
		}
	}
	AS7343_write(handle, AS7343_ATIME, ATIME);
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	461a      	mov	r2, r3
 80015be:	2181      	movs	r1, #129	; 0x81
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fd3e 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_ASTEP_LSB, (uint8_t)(ASTEP & 0xFF));
 80015c6:	8abb      	ldrh	r3, [r7, #20]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	21d4      	movs	r1, #212	; 0xd4
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff fd37 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_ASTEP_MSB, (uint8_t)(ASTEP>>8));
 80015d4:	8abb      	ldrh	r3, [r7, #20]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	21d5      	movs	r1, #213	; 0xd5
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff fd2e 	bl	8001042 <AS7343_write>
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40868000 	.word	0x40868000
 80015f4:	b60b60b7 	.word	0xb60b60b7

080015f8 <AS7343_get_TINT>:

double AS7343_get_TINT(as7343_handle_t *handle) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	uint16_t ASTEP = (AS7343_read(handle, AS7343_ASTEP_MSB) << 8) | (AS7343_read(handle, AS7343_ASTEP_LSB));
 8001600:	21d5      	movs	r1, #213	; 0xd5
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fd00 	bl	8001008 <AS7343_read>
 8001608:	4603      	mov	r3, r0
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21c      	sxth	r4, r3
 800160e:	21d4      	movs	r1, #212	; 0xd4
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fcf9 	bl	8001008 <AS7343_read>
 8001616:	4603      	mov	r3, r0
 8001618:	b21b      	sxth	r3, r3
 800161a:	4323      	orrs	r3, r4
 800161c:	b21b      	sxth	r3, r3
 800161e:	82fb      	strh	r3, [r7, #22]
	uint8_t ATIME = AS7343_read(handle, AS7343_ATIME);
 8001620:	2181      	movs	r1, #129	; 0x81
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fcf0 	bl	8001008 <AS7343_read>
 8001628:	4603      	mov	r3, r0
 800162a:	757b      	strb	r3, [r7, #21]

	double TINT = (ASTEP+1)*(ATIME+1)*(2.0/720.0);
 800162c:	8afb      	ldrh	r3, [r7, #22]
 800162e:	3301      	adds	r3, #1
 8001630:	7d7a      	ldrb	r2, [r7, #21]
 8001632:	3201      	adds	r2, #1
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff7b 	bl	8000534 <__aeabi_i2d>
 800163e:	a30a      	add	r3, pc, #40	; (adr r3, 8001668 <AS7343_get_TINT+0x70>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe ffe0 	bl	8000608 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return TINT;
 8001650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001654:	ec43 2b17 	vmov	d7, r2, r3
}
 8001658:	eeb0 0a47 	vmov.f32	s0, s14
 800165c:	eef0 0a67 	vmov.f32	s1, s15
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd90      	pop	{r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	16c16c17 	.word	0x16c16c17
 800166c:	3f66c16c 	.word	0x3f66c16c

08001670 <AS7343_optimizer>:

void AS7343_optimizer(as7343_handle_t *handle, float max_TINT) {
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b094      	sub	sp, #80	; 0x50
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	ed87 0a00 	vstr	s0, [r7]
	uint8_t currentGain = 12;
 800167c:	230c      	movs	r3, #12
 800167e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	uint16_t FSR = 65535;
 8001682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001686:	873b      	strh	r3, [r7, #56]	; 0x38
	float TINT = 182.0;
 8001688:	4bc9      	ldr	r3, [pc, #804]	; (80019b0 <AS7343_optimizer+0x340>)
 800168a:	64bb      	str	r3, [r7, #72]	; 0x48
	AS7343_set_TINT(handle, TINT);
 800168c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800168e:	f7fe ff63 	bl	8000558 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	ec43 2b10 	vmov	d0, r2, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff2c 	bl	80014f8 <AS7343_set_TINT>

	uint16_t max_count;
	uint16_t min_count;

	while(true) {
		max_count = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		min_count = 0xffff;
 80016a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		AS7343_set_gain(handle, currentGain);
 80016ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff01 	bl	80014bc <AS7343_set_gain>

		uint16_t data[18];
		AS7343_enable_spectral_measurement(handle, true);
 80016ba:	2101      	movs	r1, #1
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fd1a 	bl	80010f6 <AS7343_enable_spectral_measurement>
		AS7343_read_18(handle, data);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fece 	bl	800146a <AS7343_read_18>
		AS7343_enable_spectral_measurement(handle, false);
 80016ce:	2100      	movs	r1, #0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fd10 	bl	80010f6 <AS7343_enable_spectral_measurement>

		for(uint8_t i = 0; i<18; i++){
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80016dc:	e03a      	b.n	8001754 <AS7343_optimizer+0xe4>
			if(i == 5 || i == 11 || i == 17) {
 80016de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d030      	beq.n	8001748 <AS7343_optimizer+0xd8>
 80016e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80016ea:	2b0b      	cmp	r3, #11
 80016ec:	d02c      	beq.n	8001748 <AS7343_optimizer+0xd8>
 80016ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80016f2:	2b11      	cmp	r3, #17
 80016f4:	d028      	beq.n	8001748 <AS7343_optimizer+0xd8>
				continue;
			}
			if(data[i]>max_count) {
 80016f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	3350      	adds	r3, #80	; 0x50
 80016fe:	443b      	add	r3, r7
 8001700:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001704:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001708:	429a      	cmp	r2, r3
 800170a:	d208      	bcs.n	800171e <AS7343_optimizer+0xae>
				max_count = data[i];
 800170c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	3350      	adds	r3, #80	; 0x50
 8001714:	443b      	add	r3, r7
 8001716:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 800171a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			}
			if(data[i]<min_count) {
 800171e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	3350      	adds	r3, #80	; 0x50
 8001726:	443b      	add	r3, r7
 8001728:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 800172c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001730:	429a      	cmp	r2, r3
 8001732:	d90a      	bls.n	800174a <AS7343_optimizer+0xda>
				min_count = data[i];
 8001734:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	3350      	adds	r3, #80	; 0x50
 800173c:	443b      	add	r3, r7
 800173e:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001742:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001746:	e000      	b.n	800174a <AS7343_optimizer+0xda>
				continue;
 8001748:	bf00      	nop
		for(uint8_t i = 0; i<18; i++){
 800174a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800174e:	3301      	adds	r3, #1
 8001750:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001754:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001758:	2b11      	cmp	r3, #17
 800175a:	d9c0      	bls.n	80016de <AS7343_optimizer+0x6e>
			}
		}

		if (max_count > 0xE665) {
 800175c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001760:	f24e 6265 	movw	r2, #58981	; 0xe665
 8001764:	4293      	cmp	r3, r2
 8001766:	d909      	bls.n	800177c <AS7343_optimizer+0x10c>
			if(currentGain == 0){
 8001768:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <AS7343_optimizer+0x128>
				//TODO: send optimizer failed due to saturation message
				break;
			}
			currentGain -= 1;
 8001770:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001774:	3b01      	subs	r3, #1
 8001776:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			continue;
 800177a:	e01d      	b.n	80017b8 <AS7343_optimizer+0x148>
		}

		else if (min_count == 0) {
 800177c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <AS7343_optimizer+0x12c>
			if(currentGain == 12){
 8001784:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001788:	2b0c      	cmp	r3, #12
 800178a:	d009      	beq.n	80017a0 <AS7343_optimizer+0x130>
				//TODO: send optimizer failed due to saturation message
				break;
			}
			currentGain += 1;
 800178c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001790:	3301      	adds	r3, #1
 8001792:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			continue;
 8001796:	e00f      	b.n	80017b8 <AS7343_optimizer+0x148>
				break;
 8001798:	bf00      	nop
 800179a:	e002      	b.n	80017a2 <AS7343_optimizer+0x132>
		}

		else {

			break;
 800179c:	bf00      	nop
 800179e:	e000      	b.n	80017a2 <AS7343_optimizer+0x132>
				break;
 80017a0:	bf00      	nop
		}
	}

	float counts_expected = (float) max_count;
 80017a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float multiplier = 0.90;
 80017b2:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <AS7343_optimizer+0x344>)
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b6:	e000      	b.n	80017ba <AS7343_optimizer+0x14a>
	while(true) {
 80017b8:	e772      	b.n	80016a0 <AS7343_optimizer+0x30>

	while(true) {
		//set to loop once only, might change the algorithm in the future
		max_count = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		float exp = (multiplier*(float)FSR-counts_expected);
 80017c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		if (exp<0){
 80017de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	f100 80b9 	bmi.w	8001960 <AS7343_optimizer+0x2f0>
			break;
		}
		float temp_TINT = TINT + pow(2, log((multiplier*(float)FSR-counts_expected))/log(2))*(2.0/720.0);
 80017ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017f0:	f7fe feb2 	bl	8000558 <__aeabi_f2d>
 80017f4:	4604      	mov	r4, r0
 80017f6:	460d      	mov	r5, r1
 80017f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001802:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800180e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001812:	ee17 0a90 	vmov	r0, s15
 8001816:	f7fe fe9f 	bl	8000558 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ec43 2b10 	vmov	d0, r2, r3
 8001822:	f00a f841 	bl	800b8a8 <log>
 8001826:	ec51 0b10 	vmov	r0, r1, d0
 800182a:	a359      	add	r3, pc, #356	; (adr r3, 8001990 <AS7343_optimizer+0x320>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7ff f814 	bl	800085c <__aeabi_ddiv>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	ec43 2b17 	vmov	d7, r2, r3
 800183c:	eeb0 1a47 	vmov.f32	s2, s14
 8001840:	eef0 1a67 	vmov.f32	s3, s15
 8001844:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8001998 <AS7343_optimizer+0x328>
 8001848:	f00a f86c 	bl	800b924 <pow>
 800184c:	ec51 0b10 	vmov	r0, r1, d0
 8001850:	a353      	add	r3, pc, #332	; (adr r3, 80019a0 <AS7343_optimizer+0x330>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fed7 	bl	8000608 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4620      	mov	r0, r4
 8001860:	4629      	mov	r1, r5
 8001862:	f7fe fd1b 	bl	800029c <__adddf3>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f9c3 	bl	8000bf8 <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(temp_TINT>max_TINT){
 8001876:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800187a:	edd7 7a00 	vldr	s15, [r7]
 800187e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	dc6d      	bgt.n	8001964 <AS7343_optimizer+0x2f4>
			break;
		}

		AS7343_set_TINT(handle, temp_TINT);
 8001888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800188a:	f7fe fe65 	bl	8000558 <__aeabi_f2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b10 	vmov	d0, r2, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fe2e 	bl	80014f8 <AS7343_set_TINT>

		uint16_t data[18];
		AS7343_enable_spectral_measurement(handle, true);
 800189c:	2101      	movs	r1, #1
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fc29 	bl	80010f6 <AS7343_enable_spectral_measurement>
		AS7343_read_18(handle, data);
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	4619      	mov	r1, r3
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fddd 	bl	800146a <AS7343_read_18>
		AS7343_enable_spectral_measurement(handle, false);
 80018b0:	2100      	movs	r1, #0
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fc1f 	bl	80010f6 <AS7343_enable_spectral_measurement>

		for(uint8_t i = 0; i<18; i++){
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80018be:	e026      	b.n	800190e <AS7343_optimizer+0x29e>
			if(i == 5 || i == 11 || i == 17) {
 80018c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d01c      	beq.n	8001902 <AS7343_optimizer+0x292>
 80018c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018cc:	2b0b      	cmp	r3, #11
 80018ce:	d018      	beq.n	8001902 <AS7343_optimizer+0x292>
 80018d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018d4:	2b11      	cmp	r3, #17
 80018d6:	d014      	beq.n	8001902 <AS7343_optimizer+0x292>
				continue;
			}
			if(data[i]>max_count) {
 80018d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	3350      	adds	r3, #80	; 0x50
 80018e0:	443b      	add	r3, r7
 80018e2:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 80018e6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20a      	bcs.n	8001904 <AS7343_optimizer+0x294>
				max_count = data[i];
 80018ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	3350      	adds	r3, #80	; 0x50
 80018f6:	443b      	add	r3, r7
 80018f8:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 80018fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001900:	e000      	b.n	8001904 <AS7343_optimizer+0x294>
				continue;
 8001902:	bf00      	nop
		for(uint8_t i = 0; i<18; i++){
 8001904:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001908:	3301      	adds	r3, #1
 800190a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800190e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001912:	2b11      	cmp	r3, #17
 8001914:	d9d4      	bls.n	80018c0 <AS7343_optimizer+0x250>
			}
		}

		if (max_count >= multiplier*0xFFEE) {
 8001916:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001922:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001926:	eddf 6a24 	vldr	s13, [pc, #144]	; 80019b8 <AS7343_optimizer+0x348>
 800192a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800192e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	db10      	blt.n	800195a <AS7343_optimizer+0x2ea>
			multiplier = multiplier - 0.05;
 8001938:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800193a:	f7fe fe0d 	bl	8000558 <__aeabi_f2d>
 800193e:	a31a      	add	r3, pc, #104	; (adr r3, 80019a8 <AS7343_optimizer+0x338>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe fca8 	bl	8000298 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f952 	bl	8000bf8 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(true) {
 8001958:	e72f      	b.n	80017ba <AS7343_optimizer+0x14a>
			continue;
		}
		else {
			TINT = temp_TINT;
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;
 800195e:	e002      	b.n	8001966 <AS7343_optimizer+0x2f6>
			break;
 8001960:	bf00      	nop
 8001962:	e000      	b.n	8001966 <AS7343_optimizer+0x2f6>
			break;
 8001964:	bf00      	nop
	}
	AS7343_set_gain(handle, currentGain);
 8001966:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fda5 	bl	80014bc <AS7343_set_gain>
	AS7343_set_TINT(handle, TINT);
 8001972:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001974:	f7fe fdf0 	bl	8000558 <__aeabi_f2d>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	ec43 2b10 	vmov	d0, r2, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fdb9 	bl	80014f8 <AS7343_set_TINT>

}
 8001986:	bf00      	nop
 8001988:	3750      	adds	r7, #80	; 0x50
 800198a:	46bd      	mov	sp, r7
 800198c:	bdb0      	pop	{r4, r5, r7, pc}
 800198e:	bf00      	nop
 8001990:	fefa39ef 	.word	0xfefa39ef
 8001994:	3fe62e42 	.word	0x3fe62e42
 8001998:	00000000 	.word	0x00000000
 800199c:	40000000 	.word	0x40000000
 80019a0:	16c16c17 	.word	0x16c16c17
 80019a4:	3f66c16c 	.word	0x3f66c16c
 80019a8:	9999999a 	.word	0x9999999a
 80019ac:	3fa99999 	.word	0x3fa99999
 80019b0:	43360000 	.word	0x43360000
 80019b4:	3f666666 	.word	0x3f666666
 80019b8:	477fee00 	.word	0x477fee00

080019bc <PASCO2_read>:
//	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
//
//
//}

uint8_t PASCO2_read(pasco2_handle_t *handle, uint8_t regAddress){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af04      	add	r7, sp, #16
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buffer;

	HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address<<1, regAddress, 1, &rx_buffer, 1, 10);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	889b      	ldrh	r3, [r3, #4]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	b299      	uxth	r1, r3
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	230a      	movs	r3, #10
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	2301      	movs	r3, #1
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	f107 030f 	add.w	r3, r7, #15
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2301      	movs	r3, #1
 80019e8:	f002 fe62 	bl	80046b0 <HAL_I2C_Mem_Read>

	return rx_buffer;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <PASCO2_write>:

bool PASCO2_write(pasco2_handle_t *handle, uint8_t regAddress, uint8_t data){
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af04      	add	r7, sp, #16
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	70fb      	strb	r3, [r7, #3]
 8001a02:	4613      	mov	r3, r2
 8001a04:	70bb      	strb	r3, [r7, #2]
	if(HAL_I2C_Mem_Write(handle->i2c_handle, handle->device_address<<1, regAddress, 1, &data, 1, 10) == HAL_OK) {
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	b299      	uxth	r1, r3
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	230a      	movs	r3, #10
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	1cbb      	adds	r3, r7, #2
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2301      	movs	r3, #1
 8001a24:	f002 fd4a 	bl	80044bc <HAL_I2C_Mem_Write>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <PASCO2_write+0x3c>
		return true;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <PASCO2_write+0x3e>
	}
	return false;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <PASCO2_init>:

void PASCO2_init(pasco2_handle_t *handle) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	//set pressure
	PASCO2_write(handle, PASCO2_PRESS_REF_H, 0x03);
 8001a44:	2203      	movs	r2, #3
 8001a46:	210b      	movs	r1, #11
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffd4 	bl	80019f6 <PASCO2_write>
	PASCO2_write(handle, PASCO2_PRESS_REF_L, 0xF5);
 8001a4e:	22f5      	movs	r2, #245	; 0xf5
 8001a50:	210c      	movs	r1, #12
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffcf 	bl	80019f6 <PASCO2_write>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <PASCO2_get_ppm>:
	else {
		return false;
	}
}

uint16_t PASCO2_get_ppm(pasco2_handle_t *handle) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

	PASCO2_write(handle, PASCO2_MEAS_CFG, 0x01);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ffc2 	bl	80019f6 <PASCO2_write>

	HAL_Delay(1000);
 8001a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a76:	f001 fb59 	bl	800312c <HAL_Delay>
	uint8_t ppm_h = PASCO2_read(handle, PASCO2_CO2PPM_H);
 8001a7a:	2105      	movs	r1, #5
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff9d 	bl	80019bc <PASCO2_read>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001a86:	200a      	movs	r0, #10
 8001a88:	f001 fb50 	bl	800312c <HAL_Delay>
	uint8_t ppm_l = PASCO2_read(handle, PASCO2_CO2PPM_L);
 8001a8c:	2106      	movs	r1, #6
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ff94 	bl	80019bc <PASCO2_read>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73bb      	strb	r3, [r7, #14]

	uint16_t ppm = (((uint16_t)ppm_h)<<8) | ppm_l;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	7bbb      	ldrb	r3, [r7, #14]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	81bb      	strh	r3, [r7, #12]

	return ppm;
 8001aa8:	89bb      	ldrh	r3, [r7, #12]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <VEML6031_read>:
#include "main.h"
#include "VEML6031.h"

#include <assert.h>

uint8_t VEML6031_read(veml6031_handle_t* handle, uint8_t reg_address) {
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b088      	sub	sp, #32
 8001ab6:	af04      	add	r7, sp, #16
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buffer;

	HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address<<1, reg_address, 1, &rx_buffer, 1, 10);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	889b      	ldrh	r3, [r3, #4]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	230a      	movs	r3, #10
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	f107 030f 	add.w	r3, r7, #15
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	f002 fde7 	bl	80046b0 <HAL_I2C_Mem_Read>

	return rx_buffer;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <VEML6031_write>:

bool VEML6031_write(veml6031_handle_t* handle, uint8_t reg_address, uint8_t data) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af04      	add	r7, sp, #16
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
 8001af8:	4613      	mov	r3, r2
 8001afa:	70bb      	strb	r3, [r7, #2]
	if(HAL_I2C_Mem_Write(handle->i2c_handle, handle->device_address<<1, reg_address, 1, &data, 1, 10) == HAL_OK) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	889b      	ldrh	r3, [r3, #4]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	b299      	uxth	r1, r3
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	230a      	movs	r3, #10
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	2301      	movs	r3, #1
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	1cbb      	adds	r3, r7, #2
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f002 fccf 	bl	80044bc <HAL_I2C_Mem_Write>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <VEML6031_write+0x3c>
		return true;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <VEML6031_write+0x3e>
	}
	return false;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <VEML6031_optimizer>:

float VEML6031_optimizer(veml6031_handle_t* handle) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	float resolution = 0.0034;  // resolution with TINT = 400ms and gain = 2
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <VEML6031_optimizer+0xfc>)
 8001b3e:	617b      	str	r3, [r7, #20]
	uint8_t current_TINT = 0x07;
 8001b40:	2307      	movs	r3, #7
 8001b42:	74fb      	strb	r3, [r7, #19]
	uint8_t current_GAIN = 0x19;
 8001b44:	2319      	movs	r3, #25
 8001b46:	74bb      	strb	r3, [r7, #18]
	bool max_saturation = false;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	747b      	strb	r3, [r7, #17]
	VEML6031_write(handle, ALS_CONF_0, 0x71);
 8001b4c:	2271      	movs	r2, #113	; 0x71
 8001b4e:	2100      	movs	r1, #0
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffcb 	bl	8001aec <VEML6031_write>
	VEML6031_write(handle, ALS_CONF_1, 0x88);
 8001b56:	2288      	movs	r2, #136	; 0x88
 8001b58:	2101      	movs	r1, #1
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffc6 	bl	8001aec <VEML6031_write>

	uint8_t conf0 = VEML6031_read(handle, ALS_CONF_0) & 0x8f;
 8001b60:	2100      	movs	r1, #0
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa5 	bl	8001ab2 <VEML6031_read>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b6e:	743b      	strb	r3, [r7, #16]
	uint8_t conf1 = VEML6031_read(handle, ALS_CONF_1) & 0xe7;
 8001b70:	2101      	movs	r1, #1
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff9d 	bl	8001ab2 <VEML6031_read>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f023 0318 	bic.w	r3, r3, #24
 8001b7e:	73fb      	strb	r3, [r7, #15]

	while(true){
		uint16_t data = VEML6031_read_light(handle);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f857 	bl	8001c34 <VEML6031_read_light>
 8001b86:	4603      	mov	r3, r0
 8001b88:	81bb      	strh	r3, [r7, #12]

		if(data>0.8*0xFFFF) { //change resolution if data is close to saturation
 8001b8a:	89bb      	ldrh	r3, [r7, #12]
 8001b8c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d944      	bls.n	8001c1e <VEML6031_optimizer+0xea>
			//change gain
			if(current_TINT == 0x1) {
 8001b94:	7cfb      	ldrb	r3, [r7, #19]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d12a      	bne.n	8001bf0 <VEML6031_optimizer+0xbc>
				if(current_GAIN == 0x3) { //min gain and TINT reached
 8001b9a:	7cbb      	ldrb	r3, [r7, #18]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d113      	bne.n	8001bc8 <VEML6031_optimizer+0x94>
					//change PD
					if(max_saturation) {
 8001ba0:	7c7b      	ldrb	r3, [r7, #17]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <VEML6031_optimizer+0x78>
						return 0;
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e03a      	b.n	8001c22 <VEML6031_optimizer+0xee>
					}
					max_saturation = true;
 8001bac:	2301      	movs	r3, #1
 8001bae:	747b      	strb	r3, [r7, #17]
					current_GAIN = 0x32;
 8001bb0:	2332      	movs	r3, #50	; 0x32
 8001bb2:	74bb      	strb	r3, [r7, #18]
					VEML6031_write(handle, ALS_CONF_1, conf1 | 0x4);
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff93 	bl	8001aec <VEML6031_write>
 8001bc6:	e023      	b.n	8001c10 <VEML6031_optimizer+0xdc>
				}
				else {
					current_GAIN = current_GAIN>>1;
 8001bc8:	7cbb      	ldrb	r3, [r7, #18]
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	74bb      	strb	r3, [r7, #18]
					VEML6031_write(handle, ALS_CONF_1, conf1 | ((current_GAIN & 0x03)<<3));
 8001bce:	7cbb      	ldrb	r3, [r7, #18]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	f003 0318 	and.w	r3, r3, #24
 8001bd8:	b25a      	sxtb	r2, r3
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	2101      	movs	r1, #1
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff7f 	bl	8001aec <VEML6031_write>
 8001bee:	e00f      	b.n	8001c10 <VEML6031_optimizer+0xdc>
				}
			}
			//change integration time
			else {
				current_TINT -= 0x1; //change TINT
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	74fb      	strb	r3, [r7, #19]
				VEML6031_write(handle, ALS_CONF_0, conf0 | current_TINT << 4);
 8001bf6:	7cfb      	ldrb	r3, [r7, #19]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	b25a      	sxtb	r2, r3
 8001bfc:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b25b      	sxtb	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	2100      	movs	r1, #0
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ff6e 	bl	8001aec <VEML6031_write>
			}
			resolution *= 2.0;
 8001c10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c18:	edc7 7a05 	vstr	s15, [r7, #20]
	while(true){
 8001c1c:	e7b0      	b.n	8001b80 <VEML6031_optimizer+0x4c>
		}
		else {
			break;
 8001c1e:	bf00      	nop
		}
	}

	return resolution;
 8001c20:	697b      	ldr	r3, [r7, #20]
}
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	3b5ed289 	.word	0x3b5ed289

08001c34 <VEML6031_read_light>:

uint16_t VEML6031_read_light(veml6031_handle_t* handle) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
//	VEML6031_write(handle, ALS_CONF_0, 0x71);
//	VEML6031_write(handle, ALS_CONF_1, 0x88);
	uint8_t conf0 = VEML6031_read(handle, ALS_CONF_0);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ff37 	bl	8001ab2 <VEML6031_read>
 8001c44:	4603      	mov	r3, r0
 8001c46:	73fb      	strb	r3, [r7, #15]
	uint8_t conf1 = VEML6031_read(handle, ALS_CONF_1);
 8001c48:	2101      	movs	r1, #1
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff31 	bl	8001ab2 <VEML6031_read>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73bb      	strb	r3, [r7, #14]

	//Trigger reading
	VEML6031_write(handle, ALS_CONF_0, conf0 & 0xFE);
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff43 	bl	8001aec <VEML6031_write>
	VEML6031_write(handle, ALS_CONF_1, conf1^0x81);
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	2101      	movs	r1, #1
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff39 	bl	8001aec <VEML6031_write>

//	VEML6031_write(handle, ALS_CONF_0, conf0 | 0x04);
	HAL_Delay(500);
 8001c7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c7e:	f001 fa55 	bl	800312c <HAL_Delay>


	uint8_t data_L = VEML6031_read(handle, ALS_DATA_L);
 8001c82:	2110      	movs	r1, #16
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff14 	bl	8001ab2 <VEML6031_read>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	737b      	strb	r3, [r7, #13]
	uint8_t data_H = VEML6031_read(handle, ALS_DATA_H);
 8001c8e:	2111      	movs	r1, #17
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff0e 	bl	8001ab2 <VEML6031_read>
 8001c96:	4603      	mov	r3, r0
 8001c98:	733b      	strb	r3, [r7, #12]

	uint16_t light_intensity = (((uint16_t)data_H)<<8) | data_L;
 8001c9a:	7b3b      	ldrb	r3, [r7, #12]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	7b7b      	ldrb	r3, [r7, #13]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	817b      	strh	r3, [r7, #10]
	//Sleep
//	VEML6031_write(handle, ALS_CONF_0, conf0 | 0x01);
//	VEML6031_write(handle, ALS_CONF_1, conf1^0x81);
//	HAL_Delay(100);

	return light_intensity;
 8001caa:	897b      	ldrh	r3, [r7, #10]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <scan_I2C_bus>:
bool AS7343_counter_timeout_flag = false;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void scan_I2C_bus(I2C_HandleTypeDef* bus, uint8_t busNo) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	char buf[20];

	sprintf(buf, "Scanning Bus %d\r\n", busNo);
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4922      	ldr	r1, [pc, #136]	; (8001d50 <scan_I2C_bus+0x9c>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 f98d 	bl	8007fe8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 100);
 8001cce:	f107 010c 	add.w	r1, r7, #12
 8001cd2:	2364      	movs	r3, #100	; 0x64
 8001cd4:	2214      	movs	r2, #20
 8001cd6:	481f      	ldr	r0, [pc, #124]	; (8001d54 <scan_I2C_bus+0xa0>)
 8001cd8:	f004 fdd5 	bl	8006886 <HAL_UART_Transmit>
	memset(buf, 0, sizeof(buf));
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2214      	movs	r2, #20
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 f99d 	bl	8007024 <memset>

	for (int i = 0; i<0x7F; i++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	e027      	b.n	8001d40 <scan_I2C_bus+0x8c>
	  {
		  result = HAL_I2C_IsDeviceReady(bus, (uint16_t) (i<<1), 3, 5);
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	b299      	uxth	r1, r3
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f002 fefd 	bl	8004afc <HAL_I2C_IsDeviceReady>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//		  {
//			  sprintf(buf, "--\r\n");
//			  HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 100);
//			  memset(buf, 0, sizeof(buf));
//		  }
		  if (result == HAL_OK)
 8001d08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d114      	bne.n	8001d3a <scan_I2C_bus+0x86>
		  {
			  sprintf(buf, "0x%X\r\n", i);
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d16:	4910      	ldr	r1, [pc, #64]	; (8001d58 <scan_I2C_bus+0xa4>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f006 f965 	bl	8007fe8 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 100);
 8001d1e:	f107 010c 	add.w	r1, r7, #12
 8001d22:	2364      	movs	r3, #100	; 0x64
 8001d24:	2214      	movs	r2, #20
 8001d26:	480b      	ldr	r0, [pc, #44]	; (8001d54 <scan_I2C_bus+0xa0>)
 8001d28:	f004 fdad 	bl	8006886 <HAL_UART_Transmit>
			  memset(buf, 0, sizeof(buf));
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	2214      	movs	r2, #20
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f005 f975 	bl	8007024 <memset>
	for (int i = 0; i<0x7F; i++)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	2b7e      	cmp	r3, #126	; 0x7e
 8001d44:	ddd4      	ble.n	8001cf0 <scan_I2C_bus+0x3c>
		  }
	  }
}
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	0800caf0 	.word	0x0800caf0
 8001d54:	2000033c 	.word	0x2000033c
 8001d58:	0800cb04 	.word	0x0800cb04

08001d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b0ac      	sub	sp, #176	; 0xb0
 8001d60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d62:	f001 f971 	bl	8003048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d66:	f000 fad5 	bl	8002314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6a:	f000 fc81 	bl	8002670 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d6e:	f000 fb81 	bl	8002474 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001d72:	f000 fbad 	bl	80024d0 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001d76:	f000 fc27 	bl	80025c8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001d7a:	f000 fbd7 	bl	800252c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001d7e:	f000 fb27 	bl	80023d0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001d82:	f000 fc4b 	bl	800261c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  scan_I2C_bus(&hi2c1, 1);
 8001d86:	2101      	movs	r1, #1
 8001d88:	4864      	ldr	r0, [pc, #400]	; (8001f1c <main+0x1c0>)
 8001d8a:	f7ff ff93 	bl	8001cb4 <scan_I2C_bus>
  scan_I2C_bus(&hi2c3, 3);
 8001d8e:	2103      	movs	r1, #3
 8001d90:	4863      	ldr	r0, [pc, #396]	; (8001f20 <main+0x1c4>)
 8001d92:	f7ff ff8f 	bl	8001cb4 <scan_I2C_bus>

  //SHT handler
  sht31d.i2c_handle = &hi2c3;
 8001d96:	4b63      	ldr	r3, [pc, #396]	; (8001f24 <main+0x1c8>)
 8001d98:	4a61      	ldr	r2, [pc, #388]	; (8001f20 <main+0x1c4>)
 8001d9a:	601a      	str	r2, [r3, #0]
  sht31d.device_address = (uint16_t)SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW;
 8001d9c:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <main+0x1c8>)
 8001d9e:	2244      	movs	r2, #68	; 0x44
 8001da0:	809a      	strh	r2, [r3, #4]
  sht3x_init(&sht31d);
 8001da2:	4860      	ldr	r0, [pc, #384]	; (8001f24 <main+0x1c8>)
 8001da4:	f000 fdae 	bl	8002904 <sht3x_init>

  //PASCO2 handler
  pasco2.i2c_handle = &hi2c3;
 8001da8:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <main+0x1cc>)
 8001daa:	4a5d      	ldr	r2, [pc, #372]	; (8001f20 <main+0x1c4>)
 8001dac:	601a      	str	r2, [r3, #0]
  pasco2.device_address = (uint16_t)PASCO2_ADDR;
 8001dae:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <main+0x1cc>)
 8001db0:	2228      	movs	r2, #40	; 0x28
 8001db2:	809a      	strh	r2, [r3, #4]
  PASCO2_init(&pasco2);
 8001db4:	485c      	ldr	r0, [pc, #368]	; (8001f28 <main+0x1cc>)
 8001db6:	f7ff fe41 	bl	8001a3c <PASCO2_init>

  //VEML6031 handler
  veml6031.i2c_handle = &hi2c3;
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <main+0x1d0>)
 8001dbc:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <main+0x1c4>)
 8001dbe:	601a      	str	r2, [r3, #0]
  veml6031.device_address = VEML6031_I2C_ADDRESS;
 8001dc0:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <main+0x1d0>)
 8001dc2:	2229      	movs	r2, #41	; 0x29
 8001dc4:	809a      	strh	r2, [r3, #4]

  //VEML6031 handler
  as7343.i2c_handle = &hi2c3;
 8001dc6:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <main+0x1d4>)
 8001dc8:	4a55      	ldr	r2, [pc, #340]	; (8001f20 <main+0x1c4>)
 8001dca:	601a      	str	r2, [r3, #0]
  as7343.device_address = AS7343_ADDR_A;
 8001dcc:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <main+0x1d4>)
 8001dce:	2239      	movs	r2, #57	; 0x39
 8001dd0:	809a      	strh	r2, [r3, #4]
  AS7343_power(&as7343, true);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4856      	ldr	r0, [pc, #344]	; (8001f30 <main+0x1d4>)
 8001dd6:	f7ff f957 	bl	8001088 <AS7343_power>
  AS7343_set_cycle(&as7343, 3);
 8001dda:	2103      	movs	r1, #3
 8001ddc:	4854      	ldr	r0, [pc, #336]	; (8001f30 <main+0x1d4>)
 8001dde:	f7ff f9a0 	bl	8001122 <AS7343_set_cycle>
  AS7343_direct_config_3_chain(&as7343);
 8001de2:	4853      	ldr	r0, [pc, #332]	; (8001f30 <main+0x1d4>)
 8001de4:	f7ff f9af 	bl	8001146 <AS7343_direct_config_3_chain>

  uint16_t as7343_channels[18];

  uint32_t uart_buf_len;
  char uart_buf[100];
  HAL_Delay(100);
 8001de8:	2064      	movs	r0, #100	; 0x64
 8001dea:	f001 f99f 	bl	800312c <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim3);
 8001dee:	4851      	ldr	r0, [pc, #324]	; (8001f34 <main+0x1d8>)
 8001df0:	f004 f906 	bl	8006000 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(SHT31_counter_timeout_flag) {
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <main+0x1dc>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d032      	beq.n	8001e62 <main+0x106>
	  	//trigger SHT35 read

	  	SHT31_counter_timeout_flag = 0;
 8001dfc:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <main+0x1dc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]

	  	sht3x_read_temperature_and_humidity(&sht31d, &(sht31_temp), &(sht31_humidity) );
 8001e02:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e06:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4845      	ldr	r0, [pc, #276]	; (8001f24 <main+0x1c8>)
 8001e0e:	f000 fdb9 	bl	8002984 <sht3x_read_temperature_and_humidity>

	  	uart_buf_len = sprintf(uart_buf, "Temperature: %0.2f and Humidity: %.2f\r\n\n", sht31_temp, sht31_humidity);
 8001e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb9e 	bl	8000558 <__aeabi_f2d>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	460d      	mov	r5, r1
 8001e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb97 	bl	8000558 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4638      	mov	r0, r7
 8001e30:	e9cd 2300 	strd	r2, r3, [sp]
 8001e34:	4622      	mov	r2, r4
 8001e36:	462b      	mov	r3, r5
 8001e38:	4940      	ldr	r1, [pc, #256]	; (8001f3c <main+0x1e0>)
 8001e3a:	f006 f8d5 	bl	8007fe8 <siprintf>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001e44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4639      	mov	r1, r7
 8001e4c:	2364      	movs	r3, #100	; 0x64
 8001e4e:	483c      	ldr	r0, [pc, #240]	; (8001f40 <main+0x1e4>)
 8001e50:	f004 fd19 	bl	8006886 <HAL_UART_Transmit>
	  	memset(uart_buf, 0, sizeof(uart_buf));
 8001e54:	463b      	mov	r3, r7
 8001e56:	2264      	movs	r2, #100	; 0x64
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 f8e2 	bl	8007024 <memset>
 8001e60:	e7c8      	b.n	8001df4 <main+0x98>
	  }

	  else if(PASCO2_counter_timeout_flag) {
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <main+0x1e8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d021      	beq.n	8001eae <main+0x152>
	  	//trigger PASCO2 read

	  	PASCO2_counter_timeout_flag = 0;
 8001e6a:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <main+0x1e8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]

		co2_ppm = PASCO2_get_ppm(&pasco2);
 8001e70:	482d      	ldr	r0, [pc, #180]	; (8001f28 <main+0x1cc>)
 8001e72:	f7ff fdf5 	bl	8001a60 <PASCO2_get_ppm>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

		uart_buf_len = sprintf(uart_buf, "CO2 Concentration (ppm): %d\r\n\n", co2_ppm);
 8001e7c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8001e80:	463b      	mov	r3, r7
 8001e82:	4931      	ldr	r1, [pc, #196]	; (8001f48 <main+0x1ec>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f006 f8af 	bl	8007fe8 <siprintf>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001e90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	4639      	mov	r1, r7
 8001e98:	2364      	movs	r3, #100	; 0x64
 8001e9a:	4829      	ldr	r0, [pc, #164]	; (8001f40 <main+0x1e4>)
 8001e9c:	f004 fcf3 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	2264      	movs	r2, #100	; 0x64
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 f8bc 	bl	8007024 <memset>
 8001eac:	e7a2      	b.n	8001df4 <main+0x98>
	  }
	  else if(VEML6031_counter_timeout_flag) {
 8001eae:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <main+0x1f0>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d04e      	beq.n	8001f54 <main+0x1f8>
	  	//trigger VEML6031 read

		VEML6031_counter_timeout_flag = 0;
 8001eb6:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <main+0x1f0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]

		resolution = VEML6031_optimizer(&veml6031);
 8001ebc:	481b      	ldr	r0, [pc, #108]	; (8001f2c <main+0x1d0>)
 8001ebe:	f7ff fe39 	bl	8001b34 <VEML6031_optimizer>
 8001ec2:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
		lux = VEML6031_read_light(&veml6031)*resolution;
 8001ec6:	4819      	ldr	r0, [pc, #100]	; (8001f2c <main+0x1d0>)
 8001ec8:	f7ff feb4 	bl	8001c34 <VEML6031_read_light>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee2:	ee17 3a90 	vmov	r3, s15
 8001ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		uart_buf_len = sprintf(uart_buf, "Light Intensity (lux): %d\r\n\n", lux);
 8001eea:	463b      	mov	r3, r7
 8001eec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ef0:	4917      	ldr	r1, [pc, #92]	; (8001f50 <main+0x1f4>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f006 f878 	bl	8007fe8 <siprintf>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001efe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4639      	mov	r1, r7
 8001f06:	2364      	movs	r3, #100	; 0x64
 8001f08:	480d      	ldr	r0, [pc, #52]	; (8001f40 <main+0x1e4>)
 8001f0a:	f004 fcbc 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2264      	movs	r2, #100	; 0x64
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f005 f885 	bl	8007024 <memset>
 8001f1a:	e76b      	b.n	8001df4 <main+0x98>
 8001f1c:	2000024c 	.word	0x2000024c
 8001f20:	200002a0 	.word	0x200002a0
 8001f24:	200003c4 	.word	0x200003c4
 8001f28:	200003cc 	.word	0x200003cc
 8001f2c:	200003d4 	.word	0x200003d4
 8001f30:	200003dc 	.word	0x200003dc
 8001f34:	200002f4 	.word	0x200002f4
 8001f38:	200003e4 	.word	0x200003e4
 8001f3c:	0800cb0c 	.word	0x0800cb0c
 8001f40:	2000033c 	.word	0x2000033c
 8001f44:	200003e5 	.word	0x200003e5
 8001f48:	0800cb38 	.word	0x0800cb38
 8001f4c:	200003e6 	.word	0x200003e6
 8001f50:	0800cb58 	.word	0x0800cb58
	  }
	  else if(AS7343_counter_timeout_flag) {
 8001f54:	4bdc      	ldr	r3, [pc, #880]	; (80022c8 <main+0x56c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f43f af4b 	beq.w	8001df4 <main+0x98>
	  	//trigger VEML6031 read

		AS7343_counter_timeout_flag = 0;
 8001f5e:	4bda      	ldr	r3, [pc, #872]	; (80022c8 <main+0x56c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]

		AS7343_optimizer(&as7343, 1000.0);
 8001f64:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80022cc <main+0x570>
 8001f68:	48d9      	ldr	r0, [pc, #868]	; (80022d0 <main+0x574>)
 8001f6a:	f7ff fb81 	bl	8001670 <AS7343_optimizer>
		HAL_Delay(20);
 8001f6e:	2014      	movs	r0, #20
 8001f70:	f001 f8dc 	bl	800312c <HAL_Delay>
		AS7343_read_18(&as7343, as7343_channels);
 8001f74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f78:	4619      	mov	r1, r3
 8001f7a:	48d5      	ldr	r0, [pc, #852]	; (80022d0 <main+0x574>)
 8001f7c:	f7ff fa75 	bl	800146a <AS7343_read_18>

		uart_buf_len = sprintf(uart_buf, "AS7343 F1: 0x%x - 0d%d\r\n", as7343_channels[12], as7343_channels[12]);
 8001f80:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001f84:	461a      	mov	r2, r3
 8001f86:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001f8a:	4638      	mov	r0, r7
 8001f8c:	49d1      	ldr	r1, [pc, #836]	; (80022d4 <main+0x578>)
 8001f8e:	f006 f82b 	bl	8007fe8 <siprintf>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 8001f98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	4639      	mov	r1, r7
 8001fa0:	2364      	movs	r3, #100	; 0x64
 8001fa2:	48cd      	ldr	r0, [pc, #820]	; (80022d8 <main+0x57c>)
 8001fa4:	f004 fc6f 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8001fa8:	463b      	mov	r3, r7
 8001faa:	2264      	movs	r2, #100	; 0x64
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f005 f838 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F2: 0x%x - 0d%d\r\n", as7343_channels[6], as7343_channels[6]);
 8001fb4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001fbe:	4638      	mov	r0, r7
 8001fc0:	49c6      	ldr	r1, [pc, #792]	; (80022dc <main+0x580>)
 8001fc2:	f006 f811 	bl	8007fe8 <siprintf>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 8001fcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4639      	mov	r1, r7
 8001fd4:	2364      	movs	r3, #100	; 0x64
 8001fd6:	48c0      	ldr	r0, [pc, #768]	; (80022d8 <main+0x57c>)
 8001fd8:	f004 fc55 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8001fdc:	463b      	mov	r3, r7
 8001fde:	2264      	movs	r2, #100	; 0x64
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f005 f81e 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 FZ: 0x%x - 0d%d\r\n", as7343_channels[0], as7343_channels[0]);
 8001fe8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001fec:	461a      	mov	r2, r3
 8001fee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001ff2:	4638      	mov	r0, r7
 8001ff4:	49ba      	ldr	r1, [pc, #744]	; (80022e0 <main+0x584>)
 8001ff6:	f005 fff7 	bl	8007fe8 <siprintf>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 8002000:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002004:	b29a      	uxth	r2, r3
 8002006:	4639      	mov	r1, r7
 8002008:	2364      	movs	r3, #100	; 0x64
 800200a:	48b3      	ldr	r0, [pc, #716]	; (80022d8 <main+0x57c>)
 800200c:	f004 fc3b 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002010:	463b      	mov	r3, r7
 8002012:	2264      	movs	r2, #100	; 0x64
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f005 f804 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F3: 0x%x - 0d%d\r\n", as7343_channels[7], as7343_channels[7]);
 800201c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002020:	461a      	mov	r2, r3
 8002022:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002026:	4638      	mov	r0, r7
 8002028:	49ae      	ldr	r1, [pc, #696]	; (80022e4 <main+0x588>)
 800202a:	f005 ffdd 	bl	8007fe8 <siprintf>
 800202e:	4603      	mov	r3, r0
 8002030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 8002034:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002038:	b29a      	uxth	r2, r3
 800203a:	4639      	mov	r1, r7
 800203c:	2364      	movs	r3, #100	; 0x64
 800203e:	48a6      	ldr	r0, [pc, #664]	; (80022d8 <main+0x57c>)
 8002040:	f004 fc21 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002044:	463b      	mov	r3, r7
 8002046:	2264      	movs	r2, #100	; 0x64
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f004 ffea 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F4: 0x%x - 0d%d\r\n", as7343_channels[8], as7343_channels[8]);
 8002050:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002054:	461a      	mov	r2, r3
 8002056:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800205a:	4638      	mov	r0, r7
 800205c:	49a2      	ldr	r1, [pc, #648]	; (80022e8 <main+0x58c>)
 800205e:	f005 ffc3 	bl	8007fe8 <siprintf>
 8002062:	4603      	mov	r3, r0
 8002064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 8002068:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800206c:	b29a      	uxth	r2, r3
 800206e:	4639      	mov	r1, r7
 8002070:	2364      	movs	r3, #100	; 0x64
 8002072:	4899      	ldr	r0, [pc, #612]	; (80022d8 <main+0x57c>)
 8002074:	f004 fc07 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002078:	463b      	mov	r3, r7
 800207a:	2264      	movs	r2, #100	; 0x64
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f004 ffd0 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 FY: 0x%x - 0d%d\r\n", as7343_channels[1], as7343_channels[1]);
 8002084:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002088:	461a      	mov	r2, r3
 800208a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800208e:	4638      	mov	r0, r7
 8002090:	4996      	ldr	r1, [pc, #600]	; (80022ec <main+0x590>)
 8002092:	f005 ffa9 	bl	8007fe8 <siprintf>
 8002096:	4603      	mov	r3, r0
 8002098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 800209c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4639      	mov	r1, r7
 80020a4:	2364      	movs	r3, #100	; 0x64
 80020a6:	488c      	ldr	r0, [pc, #560]	; (80022d8 <main+0x57c>)
 80020a8:	f004 fbed 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 80020ac:	463b      	mov	r3, r7
 80020ae:	2264      	movs	r2, #100	; 0x64
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f004 ffb6 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F5: 0x%x - 0d%d\r\n", as7343_channels[15], as7343_channels[15]);
 80020b8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80020bc:	461a      	mov	r2, r3
 80020be:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80020c2:	4638      	mov	r0, r7
 80020c4:	498a      	ldr	r1, [pc, #552]	; (80022f0 <main+0x594>)
 80020c6:	f005 ff8f 	bl	8007fe8 <siprintf>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 80020d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	4639      	mov	r1, r7
 80020d8:	2364      	movs	r3, #100	; 0x64
 80020da:	487f      	ldr	r0, [pc, #508]	; (80022d8 <main+0x57c>)
 80020dc:	f004 fbd3 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 80020e0:	463b      	mov	r3, r7
 80020e2:	2264      	movs	r2, #100	; 0x64
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 ff9c 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 FXL: 0x%x - 0d%d\r\n", as7343_channels[2], as7343_channels[2]);
 80020ec:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80020f0:	461a      	mov	r2, r3
 80020f2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80020f6:	4638      	mov	r0, r7
 80020f8:	497e      	ldr	r1, [pc, #504]	; (80022f4 <main+0x598>)
 80020fa:	f005 ff75 	bl	8007fe8 <siprintf>
 80020fe:	4603      	mov	r3, r0
 8002100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 8002104:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002108:	b29a      	uxth	r2, r3
 800210a:	4639      	mov	r1, r7
 800210c:	2364      	movs	r3, #100	; 0x64
 800210e:	4872      	ldr	r0, [pc, #456]	; (80022d8 <main+0x57c>)
 8002110:	f004 fbb9 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002114:	463b      	mov	r3, r7
 8002116:	2264      	movs	r2, #100	; 0x64
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f004 ff82 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F6: 0x%x - 0d%d\r\n", as7343_channels[9], as7343_channels[9]);
 8002120:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002124:	461a      	mov	r2, r3
 8002126:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800212a:	4638      	mov	r0, r7
 800212c:	4972      	ldr	r1, [pc, #456]	; (80022f8 <main+0x59c>)
 800212e:	f005 ff5b 	bl	8007fe8 <siprintf>
 8002132:	4603      	mov	r3, r0
 8002134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 8002138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800213c:	b29a      	uxth	r2, r3
 800213e:	4639      	mov	r1, r7
 8002140:	2364      	movs	r3, #100	; 0x64
 8002142:	4865      	ldr	r0, [pc, #404]	; (80022d8 <main+0x57c>)
 8002144:	f004 fb9f 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002148:	463b      	mov	r3, r7
 800214a:	2264      	movs	r2, #100	; 0x64
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f004 ff68 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F7: 0x%x - 0d%d\r\n", as7343_channels[13], as7343_channels[13]);
 8002154:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002158:	461a      	mov	r2, r3
 800215a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800215e:	4638      	mov	r0, r7
 8002160:	4966      	ldr	r1, [pc, #408]	; (80022fc <main+0x5a0>)
 8002162:	f005 ff41 	bl	8007fe8 <siprintf>
 8002166:	4603      	mov	r3, r0
 8002168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 800216c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002170:	b29a      	uxth	r2, r3
 8002172:	4639      	mov	r1, r7
 8002174:	2364      	movs	r3, #100	; 0x64
 8002176:	4858      	ldr	r0, [pc, #352]	; (80022d8 <main+0x57c>)
 8002178:	f004 fb85 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 800217c:	463b      	mov	r3, r7
 800217e:	2264      	movs	r2, #100	; 0x64
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f004 ff4e 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F8: 0x%x - 0d%d\r\n", as7343_channels[14], as7343_channels[14]);
 8002188:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800218c:	461a      	mov	r2, r3
 800218e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002192:	4638      	mov	r0, r7
 8002194:	495a      	ldr	r1, [pc, #360]	; (8002300 <main+0x5a4>)
 8002196:	f005 ff27 	bl	8007fe8 <siprintf>
 800219a:	4603      	mov	r3, r0
 800219c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 80021a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4639      	mov	r1, r7
 80021a8:	2364      	movs	r3, #100	; 0x64
 80021aa:	484b      	ldr	r0, [pc, #300]	; (80022d8 <main+0x57c>)
 80021ac:	f004 fb6b 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 80021b0:	463b      	mov	r3, r7
 80021b2:	2264      	movs	r2, #100	; 0x64
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 ff34 	bl	8007024 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 NIR: 0x%x - 0d%d\r\n", as7343_channels[3], as7343_channels[3]);
 80021bc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80021c0:	461a      	mov	r2, r3
 80021c2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80021c6:	4638      	mov	r0, r7
 80021c8:	494e      	ldr	r1, [pc, #312]	; (8002304 <main+0x5a8>)
 80021ca:	f005 ff0d 	bl	8007fe8 <siprintf>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 80021d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021d8:	b29a      	uxth	r2, r3
 80021da:	4639      	mov	r1, r7
 80021dc:	2364      	movs	r3, #100	; 0x64
 80021de:	483e      	ldr	r0, [pc, #248]	; (80022d8 <main+0x57c>)
 80021e0:	f004 fb51 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 80021e4:	463b      	mov	r3, r7
 80021e6:	2264      	movs	r2, #100	; 0x64
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f004 ff1a 	bl	8007024 <memset>

		uint16_t VIS = (as7343_channels[4]<<1)+(as7343_channels[10]<<1);
 80021f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4413      	add	r3, r2
 8002202:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
		uart_buf_len = sprintf(uart_buf, "AS7343 VIS: 0x%x - 0d%d\r\n", as7343_channels[4], as7343_channels[4]);
 8002206:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800220a:	461a      	mov	r2, r3
 800220c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002210:	4638      	mov	r0, r7
 8002212:	493d      	ldr	r1, [pc, #244]	; (8002308 <main+0x5ac>)
 8002214:	f005 fee8 	bl	8007fe8 <siprintf>
 8002218:	4603      	mov	r3, r0
 800221a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 800221e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002222:	b29a      	uxth	r2, r3
 8002224:	4639      	mov	r1, r7
 8002226:	2364      	movs	r3, #100	; 0x64
 8002228:	482b      	ldr	r0, [pc, #172]	; (80022d8 <main+0x57c>)
 800222a:	f004 fb2c 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 800222e:	463b      	mov	r3, r7
 8002230:	2264      	movs	r2, #100	; 0x64
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f004 fef5 	bl	8007024 <memset>

		uint8_t as7343_AGAIN = AS7343_get_gain(&as7343);
 800223a:	4825      	ldr	r0, [pc, #148]	; (80022d0 <main+0x574>)
 800223c:	f7ff f94e 	bl	80014dc <AS7343_get_gain>
 8002240:	4603      	mov	r3, r0
 8002242:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
		uart_buf_len = sprintf(uart_buf, "AS7343 GAIN: %d\r\n", as7343_AGAIN);
 8002246:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 800224a:	463b      	mov	r3, r7
 800224c:	492f      	ldr	r1, [pc, #188]	; (800230c <main+0x5b0>)
 800224e:	4618      	mov	r0, r3
 8002250:	f005 feca 	bl	8007fe8 <siprintf>
 8002254:	4603      	mov	r3, r0
 8002256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 800225a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800225e:	b29a      	uxth	r2, r3
 8002260:	4639      	mov	r1, r7
 8002262:	2364      	movs	r3, #100	; 0x64
 8002264:	481c      	ldr	r0, [pc, #112]	; (80022d8 <main+0x57c>)
 8002266:	f004 fb0e 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 800226a:	463b      	mov	r3, r7
 800226c:	2264      	movs	r2, #100	; 0x64
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f004 fed7 	bl	8007024 <memset>

		as7343_TINT = AS7343_get_TINT(&as7343);
 8002276:	4816      	ldr	r0, [pc, #88]	; (80022d0 <main+0x574>)
 8002278:	f7ff f9be 	bl	80015f8 <AS7343_get_TINT>
 800227c:	ec53 2b10 	vmov	r2, r3, d0
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f7fe fcb8 	bl	8000bf8 <__aeabi_d2f>
 8002288:	4603      	mov	r3, r0
 800228a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		uart_buf_len = sprintf(uart_buf, "AS7343 TINT: %f\r\n\n\n", as7343_TINT);
 800228e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002292:	f7fe f961 	bl	8000558 <__aeabi_f2d>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4638      	mov	r0, r7
 800229c:	491c      	ldr	r1, [pc, #112]	; (8002310 <main+0x5b4>)
 800229e:	f005 fea3 	bl	8007fe8 <siprintf>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		HAL_UART_Transmit(&huart1, uart_buf, uart_buf_len, 100);
 80022a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	4639      	mov	r1, r7
 80022b0:	2364      	movs	r3, #100	; 0x64
 80022b2:	4809      	ldr	r0, [pc, #36]	; (80022d8 <main+0x57c>)
 80022b4:	f004 fae7 	bl	8006886 <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 80022b8:	463b      	mov	r3, r7
 80022ba:	2264      	movs	r2, #100	; 0x64
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 feb0 	bl	8007024 <memset>
	  if(SHT31_counter_timeout_flag) {
 80022c4:	e596      	b.n	8001df4 <main+0x98>
 80022c6:	bf00      	nop
 80022c8:	200003e7 	.word	0x200003e7
 80022cc:	447a0000 	.word	0x447a0000
 80022d0:	200003dc 	.word	0x200003dc
 80022d4:	0800cb78 	.word	0x0800cb78
 80022d8:	2000033c 	.word	0x2000033c
 80022dc:	0800cb94 	.word	0x0800cb94
 80022e0:	0800cbb0 	.word	0x0800cbb0
 80022e4:	0800cbcc 	.word	0x0800cbcc
 80022e8:	0800cbe8 	.word	0x0800cbe8
 80022ec:	0800cc04 	.word	0x0800cc04
 80022f0:	0800cc20 	.word	0x0800cc20
 80022f4:	0800cc3c 	.word	0x0800cc3c
 80022f8:	0800cc58 	.word	0x0800cc58
 80022fc:	0800cc74 	.word	0x0800cc74
 8002300:	0800cc90 	.word	0x0800cc90
 8002304:	0800ccac 	.word	0x0800ccac
 8002308:	0800ccc8 	.word	0x0800ccc8
 800230c:	0800cce4 	.word	0x0800cce4
 8002310:	0800ccf8 	.word	0x0800ccf8

08002314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b094      	sub	sp, #80	; 0x50
 8002318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800231a:	f107 0320 	add.w	r3, r7, #32
 800231e:	2230      	movs	r2, #48	; 0x30
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f004 fe7e 	bl	8007024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <SystemClock_Config+0xb4>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <SystemClock_Config+0xb4>)
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002346:	6413      	str	r3, [r2, #64]	; 0x40
 8002348:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <SystemClock_Config+0xb4>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002354:	2300      	movs	r3, #0
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <SystemClock_Config+0xb8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <SystemClock_Config+0xb8>)
 800235e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <SystemClock_Config+0xb8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002370:	2302      	movs	r3, #2
 8002372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002374:	2301      	movs	r3, #1
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002378:	2310      	movs	r3, #16
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800237c:	2300      	movs	r3, #0
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002380:	f107 0320 	add.w	r3, r7, #32
 8002384:	4618      	mov	r0, r3
 8002386:	f003 f993 	bl	80056b0 <HAL_RCC_OscConfig>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002390:	f000 fa42 	bl	8002818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002394:	230f      	movs	r3, #15
 8002396:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 fbf6 	bl	8005ba0 <HAL_RCC_ClockConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80023ba:	f000 fa2d 	bl	8002818 <Error_Handler>
  }
}
 80023be:	bf00      	nop
 80023c0:	3750      	adds	r7, #80	; 0x50
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40007000 	.word	0x40007000

080023d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023d6:	463b      	mov	r3, r7
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <MX_ADC1_Init+0x98>)
 80023e4:	4a21      	ldr	r2, [pc, #132]	; (800246c <MX_ADC1_Init+0x9c>)
 80023e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023e8:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <MX_ADC1_Init+0x98>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023ee:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <MX_ADC1_Init+0x98>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023f4:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <MX_ADC1_Init+0x98>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <MX_ADC1_Init+0x98>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <MX_ADC1_Init+0x98>)
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002408:	4b17      	ldr	r3, [pc, #92]	; (8002468 <MX_ADC1_Init+0x98>)
 800240a:	2200      	movs	r2, #0
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <MX_ADC1_Init+0x98>)
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <MX_ADC1_Init+0xa0>)
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <MX_ADC1_Init+0x98>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <MX_ADC1_Init+0x98>)
 800241c:	2201      	movs	r2, #1
 800241e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_ADC1_Init+0x98>)
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <MX_ADC1_Init+0x98>)
 800242a:	2201      	movs	r2, #1
 800242c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800242e:	480e      	ldr	r0, [pc, #56]	; (8002468 <MX_ADC1_Init+0x98>)
 8002430:	f000 fea0 	bl	8003174 <HAL_ADC_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800243a:	f000 f9ed 	bl	8002818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800243e:	2309      	movs	r3, #9
 8002440:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002442:	2301      	movs	r3, #1
 8002444:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800244a:	463b      	mov	r3, r7
 800244c:	4619      	mov	r1, r3
 800244e:	4806      	ldr	r0, [pc, #24]	; (8002468 <MX_ADC1_Init+0x98>)
 8002450:	f000 fed4 	bl	80031fc <HAL_ADC_ConfigChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800245a:	f000 f9dd 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000204 	.word	0x20000204
 800246c:	40012000 	.word	0x40012000
 8002470:	0f000001 	.word	0x0f000001

08002474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <MX_I2C1_Init+0x50>)
 800247a:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <MX_I2C1_Init+0x54>)
 800247c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <MX_I2C1_Init+0x50>)
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <MX_I2C1_Init+0x58>)
 8002482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <MX_I2C1_Init+0x50>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MX_I2C1_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <MX_I2C1_Init+0x50>)
 8002492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <MX_I2C1_Init+0x50>)
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <MX_I2C1_Init+0x50>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <MX_I2C1_Init+0x50>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <MX_I2C1_Init+0x50>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024b0:	4804      	ldr	r0, [pc, #16]	; (80024c4 <MX_I2C1_Init+0x50>)
 80024b2:	f001 fb9b 	bl	8003bec <HAL_I2C_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024bc:	f000 f9ac 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	2000024c 	.word	0x2000024c
 80024c8:	40005400 	.word	0x40005400
 80024cc:	000186a0 	.word	0x000186a0

080024d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <MX_I2C3_Init+0x50>)
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <MX_I2C3_Init+0x54>)
 80024d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_I2C3_Init+0x50>)
 80024dc:	4a12      	ldr	r2, [pc, #72]	; (8002528 <MX_I2C3_Init+0x58>)
 80024de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <MX_I2C3_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <MX_I2C3_Init+0x50>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <MX_I2C3_Init+0x50>)
 80024ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <MX_I2C3_Init+0x50>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <MX_I2C3_Init+0x50>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <MX_I2C3_Init+0x50>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <MX_I2C3_Init+0x50>)
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_I2C3_Init+0x50>)
 800250e:	f001 fb6d 	bl	8003bec <HAL_I2C_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002518:	f000 f97e 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200002a0 	.word	0x200002a0
 8002524:	40005c00 	.word	0x40005c00
 8002528:	000186a0 	.word	0x000186a0

0800252c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002532:	f107 0308 	add.w	r3, r7, #8
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002540:	463b      	mov	r3, r7
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <MX_TIM3_Init+0x94>)
 800254a:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <MX_TIM3_Init+0x98>)
 800254c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 800254e:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <MX_TIM3_Init+0x94>)
 8002550:	227c      	movs	r2, #124	; 0x7c
 8002552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002554:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <MX_TIM3_Init+0x94>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63998;
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <MX_TIM3_Init+0x94>)
 800255c:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
 8002560:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <MX_TIM3_Init+0x94>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <MX_TIM3_Init+0x94>)
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800256e:	4814      	ldr	r0, [pc, #80]	; (80025c0 <MX_TIM3_Init+0x94>)
 8002570:	f003 fcf6 	bl	8005f60 <HAL_TIM_Base_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800257a:	f000 f94d 	bl	8002818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	4619      	mov	r1, r3
 800258a:	480d      	ldr	r0, [pc, #52]	; (80025c0 <MX_TIM3_Init+0x94>)
 800258c:	f003 fea2 	bl	80062d4 <HAL_TIM_ConfigClockSource>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002596:	f000 f93f 	bl	8002818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025a2:	463b      	mov	r3, r7
 80025a4:	4619      	mov	r1, r3
 80025a6:	4806      	ldr	r0, [pc, #24]	; (80025c0 <MX_TIM3_Init+0x94>)
 80025a8:	f004 f89e 	bl	80066e8 <HAL_TIMEx_MasterConfigSynchronization>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80025b2:	f000 f931 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200002f4 	.word	0x200002f4
 80025c4:	40000400 	.word	0x40000400

080025c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_USART1_UART_Init+0x4c>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <MX_USART1_UART_Init+0x50>)
 80025d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <MX_USART1_UART_Init+0x4c>)
 80025d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_USART1_UART_Init+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <MX_USART1_UART_Init+0x4c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <MX_USART1_UART_Init+0x4c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_USART1_UART_Init+0x4c>)
 80025ee:	220c      	movs	r2, #12
 80025f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <MX_USART1_UART_Init+0x4c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_USART1_UART_Init+0x4c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_USART1_UART_Init+0x4c>)
 8002600:	f004 f8f4 	bl	80067ec <HAL_UART_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800260a:	f000 f905 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000033c 	.word	0x2000033c
 8002618:	40011000 	.word	0x40011000

0800261c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_USART2_UART_Init+0x4c>)
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <MX_USART2_UART_Init+0x50>)
 8002624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <MX_USART2_UART_Init+0x4c>)
 8002628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800262c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_USART2_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <MX_USART2_UART_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <MX_USART2_UART_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <MX_USART2_UART_Init+0x4c>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <MX_USART2_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_USART2_UART_Init+0x4c>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <MX_USART2_UART_Init+0x4c>)
 8002654:	f004 f8ca 	bl	80067ec <HAL_UART_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800265e:	f000 f8db 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000380 	.word	0x20000380
 800266c:	40004400 	.word	0x40004400

08002670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b30      	ldr	r3, [pc, #192]	; (800274c <MX_GPIO_Init+0xdc>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a2f      	ldr	r2, [pc, #188]	; (800274c <MX_GPIO_Init+0xdc>)
 8002690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <MX_GPIO_Init+0xdc>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <MX_GPIO_Init+0xdc>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a28      	ldr	r2, [pc, #160]	; (800274c <MX_GPIO_Init+0xdc>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <MX_GPIO_Init+0xdc>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4b22      	ldr	r3, [pc, #136]	; (800274c <MX_GPIO_Init+0xdc>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a21      	ldr	r2, [pc, #132]	; (800274c <MX_GPIO_Init+0xdc>)
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b1f      	ldr	r3, [pc, #124]	; (800274c <MX_GPIO_Init+0xdc>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80026da:	2200      	movs	r2, #0
 80026dc:	2101      	movs	r1, #1
 80026de:	481c      	ldr	r0, [pc, #112]	; (8002750 <MX_GPIO_Init+0xe0>)
 80026e0:	f001 fa50 	bl	8003b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026ea:	481a      	ldr	r0, [pc, #104]	; (8002754 <MX_GPIO_Init+0xe4>)
 80026ec:	f001 fa4a 	bl	8003b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026f0:	2301      	movs	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f4:	2301      	movs	r3, #1
 80026f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	4619      	mov	r1, r3
 8002706:	4812      	ldr	r0, [pc, #72]	; (8002750 <MX_GPIO_Init+0xe0>)
 8002708:	f001 f8b8 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800270c:	2332      	movs	r3, #50	; 0x32
 800270e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002710:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	4619      	mov	r1, r3
 8002720:	480b      	ldr	r0, [pc, #44]	; (8002750 <MX_GPIO_Init+0xe0>)
 8002722:	f001 f8ab 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800272a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272c:	2301      	movs	r3, #1
 800272e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	4619      	mov	r1, r3
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <MX_GPIO_Init+0xe4>)
 8002740:	f001 f89c 	bl	800387c <HAL_GPIO_Init>

}
 8002744:	bf00      	nop
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	40020000 	.word	0x40020000
 8002754:	40020400 	.word	0x40020400

08002758 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	/*
	 * Calls when Timer period is reached T = 0.5s
	 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002764:	4823      	ldr	r0, [pc, #140]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002766:	f001 fa26 	bl	8003bb6 <HAL_GPIO_TogglePin>

	if(--SHT31_counter == 0) {
 800276a:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002774:	801a      	strh	r2, [r3, #0]
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_TIM_PeriodElapsedCallback+0x32>
		//SHT3x Handler
		SHT31_counter_timeout_flag = true;
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
		SHT31_counter = SHT31_COUNTER;
 8002784:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002786:	2214      	movs	r2, #20
 8002788:	801a      	strh	r2, [r3, #0]
	}
	if(--PASCO2_counter == 0) {
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <HAL_TIM_PeriodElapsedCallback+0x52>
		//PASCO2 Handler
		PASCO2_counter_timeout_flag = true;
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
		PASCO2_counter = PASCO2_COUNTER;
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80027a6:	2214      	movs	r2, #20
 80027a8:	801a      	strh	r2, [r3, #0]
	}
	if(--VEML6031_counter == 0) {
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d105      	bne.n	80027ca <HAL_TIM_PeriodElapsedCallback+0x72>
		//VEML6031 Handler
		VEML6031_counter_timeout_flag = true;
 80027be:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
		VEML6031_counter = VEML6031_COUNTER;
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80027c6:	2214      	movs	r2, #20
 80027c8:	801a      	strh	r2, [r3, #0]
	}
	if(--AS7343_counter == 0) {
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_TIM_PeriodElapsedCallback+0x92>
		//AS7343 Handler
		AS7343_counter_timeout_flag = true;
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
		AS7343_counter = AS7343_COUNTER;
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80027e6:	2214      	movs	r2, #20
 80027e8:	801a      	strh	r2, [r3, #0]
//		//MLX90614 Handler
//		MLX90614_counter_timeout_flag = true;
//		MLX90614_counter = MLX90614_COUNTER;
//	}

}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40020400 	.word	0x40020400
 80027f8:	20000000 	.word	0x20000000
 80027fc:	200003e4 	.word	0x200003e4
 8002800:	20000002 	.word	0x20000002
 8002804:	200003e5 	.word	0x200003e5
 8002808:	20000004 	.word	0x20000004
 800280c:	200003e6 	.word	0x200003e6
 8002810:	20000006 	.word	0x20000006
 8002814:	200003e7 	.word	0x200003e7

08002818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800281c:	b672      	cpsid	i
}
 800281e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002820:	e7fe      	b.n	8002820 <Error_Handler+0x8>

08002822 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8002822:	b480      	push	{r7}
 8002824:	b087      	sub	sp, #28
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 800282c:	23ff      	movs	r3, #255	; 0xff
 800282e:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e020      	b.n	8002878 <calculate_crc+0x56>
		crc ^= data[i];
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	4053      	eors	r3, r2
 8002842:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e010      	b.n	800286c <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 800284a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	da06      	bge.n	8002860 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800285c:	75fb      	strb	r3, [r7, #23]
 800285e:	e002      	b.n	8002866 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3301      	adds	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b07      	cmp	r3, #7
 8002870:	d9eb      	bls.n	800284a <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	3301      	adds	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d3da      	bcc.n	8002836 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8002880:	7dfb      	ldrb	r3, [r7, #23]
}
 8002882:	4618      	mov	r0, r3
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af02      	add	r7, sp, #8
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 800289a:	887b      	ldrh	r3, [r7, #2]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	b29b      	uxth	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	733b      	strb	r3, [r7, #12]
 80028a4:	887b      	ldrh	r3, [r7, #2]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	889b      	ldrh	r3, [r3, #4]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	b299      	uxth	r1, r3
 80028b6:	f107 020c 	add.w	r2, r7, #12
 80028ba:	231e      	movs	r3, #30
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2302      	movs	r3, #2
 80028c0:	f001 fad8 	bl	8003e74 <HAL_I2C_Master_Transmit>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <sht3x_send_command+0x42>
	}

	return true;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	460a      	mov	r2, r1
 80028e2:	71fb      	strb	r3, [r7, #7]
 80028e4:	4613      	mov	r3, r2
 80028e6:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	79bb      	ldrb	r3, [r7, #6]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b29b      	uxth	r3, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af04      	add	r7, sp, #16
 800290a:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <sht3x_init+0x1e>
 8002916:	4b18      	ldr	r3, [pc, #96]	; (8002978 <sht3x_init+0x74>)
 8002918:	4a18      	ldr	r2, [pc, #96]	; (800297c <sht3x_init+0x78>)
 800291a:	2138      	movs	r1, #56	; 0x38
 800291c:	4818      	ldr	r0, [pc, #96]	; (8002980 <sht3x_init+0x7c>)
 800291e:	f004 fb27 	bl	8006f70 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	889b      	ldrh	r3, [r3, #4]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	b299      	uxth	r1, r3
 800292e:	231e      	movs	r3, #30
 8002930:	9302      	str	r3, [sp, #8]
 8002932:	2303      	movs	r3, #3
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2302      	movs	r3, #2
 800293e:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8002942:	f001 feb5 	bl	80046b0 <HAL_I2C_Mem_Read>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 800294c:	2300      	movs	r3, #0
 800294e:	e00e      	b.n	800296e <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	2102      	movs	r1, #2
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff63 	bl	8002822 <calculate_crc>
 800295c:	4603      	mov	r3, r0
 800295e:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <sht3x_init+0x68>
		return false;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <sht3x_init+0x6a>
	}

	return true;
 800296c:	2301      	movs	r3, #1
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	0800cd0c 	.word	0x0800cd0c
 800297c:	0800cd60 	.word	0x0800cd60
 8002980:	0800cd4c 	.word	0x0800cd4c

08002984 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8002990:	f642 4106 	movw	r1, #11270	; 0x2c06
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff ff7a 	bl	800288e <sht3x_send_command>

	HAL_Delay(1);
 800299a:	2001      	movs	r0, #1
 800299c:	f000 fbc6 	bl	800312c <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	889b      	ldrh	r3, [r3, #4]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	b299      	uxth	r1, r3
 80029ac:	f107 0214 	add.w	r2, r7, #20
 80029b0:	231e      	movs	r3, #30
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2306      	movs	r3, #6
 80029b6:	f001 fb5b 	bl	8004070 <HAL_I2C_Master_Receive>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e050      	b.n	8002a66 <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2102      	movs	r1, #2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff29 	bl	8002822 <calculate_crc>
 80029d0:	4603      	mov	r3, r0
 80029d2:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	3303      	adds	r3, #3
 80029da:	2102      	movs	r1, #2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff20 	bl	8002822 <calculate_crc>
 80029e2:	4603      	mov	r3, r0
 80029e4:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 80029e6:	7dbb      	ldrb	r3, [r7, #22]
 80029e8:	7ffa      	ldrb	r2, [r7, #31]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d103      	bne.n	80029f6 <sht3x_read_temperature_and_humidity+0x72>
 80029ee:	7e7b      	ldrb	r3, [r7, #25]
 80029f0:	7fba      	ldrb	r2, [r7, #30]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d001      	beq.n	80029fa <sht3x_read_temperature_and_humidity+0x76>
		return false;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e035      	b.n	8002a66 <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 80029fa:	7d3b      	ldrb	r3, [r7, #20]
 80029fc:	7d7a      	ldrb	r2, [r7, #21]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff69 	bl	80028d8 <uint8_to_uint16>
 8002a06:	4603      	mov	r3, r0
 8002a08:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	7e3a      	ldrb	r2, [r7, #24]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff61 	bl	80028d8 <uint8_to_uint16>
 8002a16:	4603      	mov	r3, r0
 8002a18:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8002a1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a26:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002a70 <sht3x_read_temperature_and_humidity+0xec>
 8002a2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a2e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002a74 <sht3x_read_temperature_and_humidity+0xf0>
 8002a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a36:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002a78 <sht3x_read_temperature_and_humidity+0xf4>
 8002a3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8002a44:	8b7b      	ldrh	r3, [r7, #26]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002a7c <sht3x_read_temperature_and_humidity+0xf8>
 8002a52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a56:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002a74 <sht3x_read_temperature_and_humidity+0xf0>
 8002a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8002a64:	2301      	movs	r3, #1
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	432f0000 	.word	0x432f0000
 8002a74:	477fff00 	.word	0x477fff00
 8002a78:	42340000 	.word	0x42340000
 8002a7c:	42c80000 	.word	0x42c80000

08002a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <HAL_MspInit+0x4c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <HAL_MspInit+0x4c>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <HAL_MspInit+0x4c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_MspInit+0x4c>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_MspInit+0x4c>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_MspInit+0x4c>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_ADC_MspInit+0x7c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d127      	bne.n	8002b42 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6453      	str	r3, [r2, #68]	; 0x44
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_ADC_MspInit+0x80>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	f107 0314 	add.w	r3, r7, #20
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4805      	ldr	r0, [pc, #20]	; (8002b54 <HAL_ADC_MspInit+0x84>)
 8002b3e:	f000 fe9d 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b42:	bf00      	nop
 8002b44:	3728      	adds	r7, #40	; 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40012000 	.word	0x40012000
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020400 	.word	0x40020400

08002b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	; 0x30
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a42      	ldr	r2, [pc, #264]	; (8002c80 <HAL_I2C_MspInit+0x128>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d12d      	bne.n	8002bd6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a40      	ldr	r2, [pc, #256]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
 8002b94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b9c:	2312      	movs	r3, #18
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4835      	ldr	r0, [pc, #212]	; (8002c88 <HAL_I2C_MspInit+0x130>)
 8002bb4:	f000 fe62 	bl	800387c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	4a30      	ldr	r2, [pc, #192]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002bd4:	e04f      	b.n	8002c76 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2c      	ldr	r2, [pc, #176]	; (8002c8c <HAL_I2C_MspInit+0x134>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d14a      	bne.n	8002c76 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf0:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002c06:	f043 0302 	orr.w	r3, r3, #2
 8002c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c1e:	2312      	movs	r3, #18
 8002c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c26:	2303      	movs	r3, #3
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	f107 031c 	add.w	r3, r7, #28
 8002c32:	4619      	mov	r1, r3
 8002c34:	4816      	ldr	r0, [pc, #88]	; (8002c90 <HAL_I2C_MspInit+0x138>)
 8002c36:	f000 fe21 	bl	800387c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c3a:	2310      	movs	r3, #16
 8002c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3e:	2312      	movs	r3, #18
 8002c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002c4a:	2309      	movs	r3, #9
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4e:	f107 031c 	add.w	r3, r7, #28
 8002c52:	4619      	mov	r1, r3
 8002c54:	480c      	ldr	r0, [pc, #48]	; (8002c88 <HAL_I2C_MspInit+0x130>)
 8002c56:	f000 fe11 	bl	800387c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002c64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_I2C_MspInit+0x12c>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
}
 8002c76:	bf00      	nop
 8002c78:	3730      	adds	r7, #48	; 0x30
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40005400 	.word	0x40005400
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	40005c00 	.word	0x40005c00
 8002c90:	40020000 	.word	0x40020000

08002c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_TIM_Base_MspInit+0x48>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d115      	bne.n	8002cd2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_TIM_Base_MspInit+0x4c>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <HAL_TIM_Base_MspInit+0x4c>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_TIM_Base_MspInit+0x4c>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	201d      	movs	r0, #29
 8002cc8:	f000 fda1 	bl	800380e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ccc:	201d      	movs	r0, #29
 8002cce:	f000 fdba 	bl	8003846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a32      	ldr	r2, [pc, #200]	; (8002dcc <HAL_UART_MspInit+0xe8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d12d      	bne.n	8002d62 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d10:	f043 0310 	orr.w	r3, r3, #16
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b2e      	ldr	r3, [pc, #184]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d50:	2307      	movs	r3, #7
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	4619      	mov	r1, r3
 8002d5a:	481e      	ldr	r0, [pc, #120]	; (8002dd4 <HAL_UART_MspInit+0xf0>)
 8002d5c:	f000 fd8e 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d60:	e030      	b.n	8002dc4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d12b      	bne.n	8002dc4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7c:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4a0f      	ldr	r2, [pc, #60]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6313      	str	r3, [r2, #48]	; 0x30
 8002d98:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002da4:	230c      	movs	r3, #12
 8002da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db0:	2303      	movs	r3, #3
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002db4:	2307      	movs	r3, #7
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4805      	ldr	r0, [pc, #20]	; (8002dd4 <HAL_UART_MspInit+0xf0>)
 8002dc0:	f000 fd5c 	bl	800387c <HAL_GPIO_Init>
}
 8002dc4:	bf00      	nop
 8002dc6:	3730      	adds	r7, #48	; 0x30
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40011000 	.word	0x40011000
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40004400 	.word	0x40004400

08002ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <NMI_Handler+0x4>

08002de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <HardFault_Handler+0x4>

08002de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <MemManage_Handler+0x4>

08002dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df2:	e7fe      	b.n	8002df2 <BusFault_Handler+0x4>

08002df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <UsageFault_Handler+0x4>

08002dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e28:	f000 f960 	bl	80030ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <TIM3_IRQHandler+0x10>)
 8002e36:	f003 f945 	bl	80060c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200002f4 	.word	0x200002f4

08002e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return 1;
 8002e48:	2301      	movs	r3, #1
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <_kill>:

int _kill(int pid, int sig)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e5e:	f004 f8a5 	bl	8006fac <__errno>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2216      	movs	r2, #22
 8002e66:	601a      	str	r2, [r3, #0]
  return -1;
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_exit>:

void _exit (int status)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ffe7 	bl	8002e54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e86:	e7fe      	b.n	8002e86 <_exit+0x12>

08002e88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e00a      	b.n	8002eb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e9a:	f3af 8000 	nop.w
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	60ba      	str	r2, [r7, #8]
 8002ea6:	b2ca      	uxtb	r2, r1
 8002ea8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3301      	adds	r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	dbf0      	blt.n	8002e9a <_read+0x12>
  }

  return len;
 8002eb8:	687b      	ldr	r3, [r7, #4]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e009      	b.n	8002ee8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	60ba      	str	r2, [r7, #8]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	dbf1      	blt.n	8002ed4 <_write+0x12>
  }
  return len;
 8002ef0:	687b      	ldr	r3, [r7, #4]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <_close>:

int _close(int file)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f22:	605a      	str	r2, [r3, #4]
  return 0;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <_isatty>:

int _isatty(int file)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f3a:	2301      	movs	r3, #1
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f6c:	4a14      	ldr	r2, [pc, #80]	; (8002fc0 <_sbrk+0x5c>)
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <_sbrk+0x60>)
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <_sbrk+0x64>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <_sbrk+0x64>)
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <_sbrk+0x68>)
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <_sbrk+0x64>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d207      	bcs.n	8002fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f94:	f004 f80a 	bl	8006fac <__errno>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	e009      	b.n	8002fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <_sbrk+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <_sbrk+0x64>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <_sbrk+0x64>)
 8002fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20020000 	.word	0x20020000
 8002fc4:	00000400 	.word	0x00000400
 8002fc8:	200003e8 	.word	0x200003e8
 8002fcc:	20000400 	.word	0x20000400

08002fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <SystemInit+0x20>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	4a05      	ldr	r2, [pc, #20]	; (8002ff0 <SystemInit+0x20>)
 8002fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800302c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ff8:	480d      	ldr	r0, [pc, #52]	; (8003030 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ffa:	490e      	ldr	r1, [pc, #56]	; (8003034 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ffc:	4a0e      	ldr	r2, [pc, #56]	; (8003038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003000:	e002      	b.n	8003008 <LoopCopyDataInit>

08003002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003006:	3304      	adds	r3, #4

08003008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800300a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800300c:	d3f9      	bcc.n	8003002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003010:	4c0b      	ldr	r4, [pc, #44]	; (8003040 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003014:	e001      	b.n	800301a <LoopFillZerobss>

08003016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003018:	3204      	adds	r2, #4

0800301a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800301a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800301c:	d3fb      	bcc.n	8003016 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800301e:	f7ff ffd7 	bl	8002fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003022:	f003 ffdb 	bl	8006fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003026:	f7fe fe99 	bl	8001d5c <main>
  bx  lr    
 800302a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800302c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003034:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003038:	0800d270 	.word	0x0800d270
  ldr r2, =_sbss
 800303c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003040:	20000400 	.word	0x20000400

08003044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003044:	e7fe      	b.n	8003044 <ADC_IRQHandler>
	...

08003048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_Init+0x40>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0d      	ldr	r2, [pc, #52]	; (8003088 <HAL_Init+0x40>)
 8003052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_Init+0x40>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_Init+0x40>)
 800305e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_Init+0x40>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <HAL_Init+0x40>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003070:	2003      	movs	r0, #3
 8003072:	f000 fbc1 	bl	80037f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003076:	200f      	movs	r0, #15
 8003078:	f000 f808 	bl	800308c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800307c:	f7ff fd00 	bl	8002a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00

0800308c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_InitTick+0x54>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_InitTick+0x58>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fbd9 	bl	8003862 <HAL_SYSTICK_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00e      	b.n	80030d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b0f      	cmp	r3, #15
 80030be:	d80a      	bhi.n	80030d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030c0:	2200      	movs	r2, #0
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	f000 fba1 	bl	800380e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030cc:	4a06      	ldr	r2, [pc, #24]	; (80030e8 <HAL_InitTick+0x5c>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e000      	b.n	80030d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000008 	.word	0x20000008
 80030e4:	20000010 	.word	0x20000010
 80030e8:	2000000c 	.word	0x2000000c

080030ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_IncTick+0x20>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_IncTick+0x24>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4413      	add	r3, r2
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_IncTick+0x24>)
 80030fe:	6013      	str	r3, [r2, #0]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000010 	.word	0x20000010
 8003110:	200003ec 	.word	0x200003ec

08003114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return uwTick;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_GetTick+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	200003ec 	.word	0x200003ec

0800312c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7ff ffee 	bl	8003114 <HAL_GetTick>
 8003138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d005      	beq.n	8003152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_Delay+0x44>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003152:	bf00      	nop
 8003154:	f7ff ffde 	bl	8003114 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	429a      	cmp	r2, r3
 8003162:	d8f7      	bhi.n	8003154 <HAL_Delay+0x28>
  {
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000010 	.word	0x20000010

08003174 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e033      	b.n	80031f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fc9c 	bl	8002ad0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d118      	bne.n	80031e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ba:	f023 0302 	bic.w	r3, r3, #2
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f94a 	bl	8003460 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
 80031e2:	e001      	b.n	80031e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x1c>
 8003214:	2302      	movs	r3, #2
 8003216:	e113      	b.n	8003440 <HAL_ADC_ConfigChannel+0x244>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b09      	cmp	r3, #9
 8003226:	d925      	bls.n	8003274 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68d9      	ldr	r1, [r3, #12]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	3b1e      	subs	r3, #30
 800323e:	2207      	movs	r2, #7
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43da      	mvns	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	400a      	ands	r2, r1
 800324c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68d9      	ldr	r1, [r3, #12]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	4618      	mov	r0, r3
 8003260:	4603      	mov	r3, r0
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4403      	add	r3, r0
 8003266:	3b1e      	subs	r3, #30
 8003268:	409a      	lsls	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	e022      	b.n	80032ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6919      	ldr	r1, [r3, #16]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	2207      	movs	r2, #7
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43da      	mvns	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	400a      	ands	r2, r1
 8003296:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6919      	ldr	r1, [r3, #16]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	4618      	mov	r0, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4403      	add	r3, r0
 80032b0:	409a      	lsls	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d824      	bhi.n	800330c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	3b05      	subs	r3, #5
 80032d4:	221f      	movs	r2, #31
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	400a      	ands	r2, r1
 80032e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4618      	mov	r0, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	3b05      	subs	r3, #5
 80032fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	635a      	str	r2, [r3, #52]	; 0x34
 800330a:	e04c      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d824      	bhi.n	800335e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	3b23      	subs	r3, #35	; 0x23
 8003326:	221f      	movs	r2, #31
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43da      	mvns	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	400a      	ands	r2, r1
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	b29b      	uxth	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	3b23      	subs	r3, #35	; 0x23
 8003350:	fa00 f203 	lsl.w	r2, r0, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
 800335c:	e023      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	3b41      	subs	r3, #65	; 0x41
 8003370:	221f      	movs	r2, #31
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43da      	mvns	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	400a      	ands	r2, r1
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	4618      	mov	r0, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	3b41      	subs	r3, #65	; 0x41
 800339a:	fa00 f203 	lsl.w	r2, r0, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <HAL_ADC_ConfigChannel+0x250>)
 80033a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a28      	ldr	r2, [pc, #160]	; (8003450 <HAL_ADC_ConfigChannel+0x254>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10f      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1d8>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b12      	cmp	r3, #18
 80033ba:	d10b      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <HAL_ADC_ConfigChannel+0x254>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d12b      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x23a>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_ADC_ConfigChannel+0x258>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <HAL_ADC_ConfigChannel+0x1f4>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b11      	cmp	r3, #17
 80033ee:	d122      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a11      	ldr	r2, [pc, #68]	; (8003454 <HAL_ADC_ConfigChannel+0x258>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d111      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_ADC_ConfigChannel+0x25c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a11      	ldr	r2, [pc, #68]	; (800345c <HAL_ADC_ConfigChannel+0x260>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	0c9a      	lsrs	r2, r3, #18
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003428:	e002      	b.n	8003430 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3b01      	subs	r3, #1
 800342e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f9      	bne.n	800342a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40012300 	.word	0x40012300
 8003450:	40012000 	.word	0x40012000
 8003454:	10000012 	.word	0x10000012
 8003458:	20000008 	.word	0x20000008
 800345c:	431bde83 	.word	0x431bde83

08003460 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003468:	4b79      	ldr	r3, [pc, #484]	; (8003650 <ADC_Init+0x1f0>)
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	021a      	lsls	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	4a58      	ldr	r2, [pc, #352]	; (8003654 <ADC_Init+0x1f4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6899      	ldr	r1, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	e00f      	b.n	800355e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800354c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800355c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0202 	bic.w	r2, r2, #2
 800356c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7e1b      	ldrb	r3, [r3, #24]
 8003578:	005a      	lsls	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01b      	beq.n	80035c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	3b01      	subs	r3, #1
 80035b8:	035a      	lsls	r2, r3, #13
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	e007      	b.n	80035d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	051a      	lsls	r2, r3, #20
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003616:	025a      	lsls	r2, r3, #9
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	029a      	lsls	r2, r3, #10
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40012300 	.word	0x40012300
 8003654:	0f000001 	.word	0x0f000001

08003658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003674:	4013      	ands	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368a:	4a04      	ldr	r2, [pc, #16]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60d3      	str	r3, [r2, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <__NVIC_GetPriorityGrouping+0x18>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 0307 	and.w	r3, r3, #7
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	db0b      	blt.n	80036e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	4907      	ldr	r1, [pc, #28]	; (80036f4 <__NVIC_EnableIRQ+0x38>)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2001      	movs	r0, #1
 80036de:	fa00 f202 	lsl.w	r2, r0, r2
 80036e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000e100 	.word	0xe000e100

080036f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	db0a      	blt.n	8003722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	490c      	ldr	r1, [pc, #48]	; (8003744 <__NVIC_SetPriority+0x4c>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	440b      	add	r3, r1
 800371c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003720:	e00a      	b.n	8003738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4908      	ldr	r1, [pc, #32]	; (8003748 <__NVIC_SetPriority+0x50>)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	3b04      	subs	r3, #4
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	440b      	add	r3, r1
 8003736:	761a      	strb	r2, [r3, #24]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000e100 	.word	0xe000e100
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f1c3 0307 	rsb	r3, r3, #7
 8003766:	2b04      	cmp	r3, #4
 8003768:	bf28      	it	cs
 800376a:	2304      	movcs	r3, #4
 800376c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3304      	adds	r3, #4
 8003772:	2b06      	cmp	r3, #6
 8003774:	d902      	bls.n	800377c <NVIC_EncodePriority+0x30>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3b03      	subs	r3, #3
 800377a:	e000      	b.n	800377e <NVIC_EncodePriority+0x32>
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43da      	mvns	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	401a      	ands	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003794:	f04f 31ff 	mov.w	r1, #4294967295
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43d9      	mvns	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	4313      	orrs	r3, r2
         );
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c4:	d301      	bcc.n	80037ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00f      	b.n	80037ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <SysTick_Config+0x40>)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037d2:	210f      	movs	r1, #15
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	f7ff ff8e 	bl	80036f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <SysTick_Config+0x40>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e2:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <SysTick_Config+0x40>)
 80037e4:	2207      	movs	r2, #7
 80037e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	e000e010 	.word	0xe000e010

080037f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff29 	bl	8003658 <__NVIC_SetPriorityGrouping>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	4603      	mov	r3, r0
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003820:	f7ff ff3e 	bl	80036a0 <__NVIC_GetPriorityGrouping>
 8003824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	6978      	ldr	r0, [r7, #20]
 800382c:	f7ff ff8e 	bl	800374c <NVIC_EncodePriority>
 8003830:	4602      	mov	r2, r0
 8003832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff5d 	bl	80036f8 <__NVIC_SetPriority>
}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff31 	bl	80036bc <__NVIC_EnableIRQ>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ffa2 	bl	80037b4 <SysTick_Config>
 8003870:	4603      	mov	r3, r0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	e159      	b.n	8003b4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003898:	2201      	movs	r2, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	f040 8148 	bne.w	8003b46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d005      	beq.n	80038ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d130      	bne.n	8003930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 0201 	and.w	r2, r3, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b03      	cmp	r3, #3
 800393a:	d017      	beq.n	800396c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d123      	bne.n	80039c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	08da      	lsrs	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3208      	adds	r2, #8
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	220f      	movs	r2, #15
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	08da      	lsrs	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3208      	adds	r2, #8
 80039ba:	69b9      	ldr	r1, [r7, #24]
 80039bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0203 	and.w	r2, r3, #3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a2 	beq.w	8003b46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	4a56      	ldr	r2, [pc, #344]	; (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a10:	6453      	str	r3, [r2, #68]	; 0x44
 8003a12:	4b54      	ldr	r3, [pc, #336]	; (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a1e:	4a52      	ldr	r2, [pc, #328]	; (8003b68 <HAL_GPIO_Init+0x2ec>)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3302      	adds	r3, #2
 8003a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	220f      	movs	r2, #15
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a49      	ldr	r2, [pc, #292]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d019      	beq.n	8003a7e <HAL_GPIO_Init+0x202>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a48      	ldr	r2, [pc, #288]	; (8003b70 <HAL_GPIO_Init+0x2f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_GPIO_Init+0x1fe>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a47      	ldr	r2, [pc, #284]	; (8003b74 <HAL_GPIO_Init+0x2f8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00d      	beq.n	8003a76 <HAL_GPIO_Init+0x1fa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a46      	ldr	r2, [pc, #280]	; (8003b78 <HAL_GPIO_Init+0x2fc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <HAL_GPIO_Init+0x1f6>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a45      	ldr	r2, [pc, #276]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_GPIO_Init+0x1f2>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	e008      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a6e:	2307      	movs	r3, #7
 8003a70:	e006      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a72:	2303      	movs	r3, #3
 8003a74:	e004      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e002      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	f002 0203 	and.w	r2, r2, #3
 8003a86:	0092      	lsls	r2, r2, #2
 8003a88:	4093      	lsls	r3, r2
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a90:	4935      	ldr	r1, [pc, #212]	; (8003b68 <HAL_GPIO_Init+0x2ec>)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3302      	adds	r3, #2
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a9e:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac2:	4a2f      	ldr	r2, [pc, #188]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac8:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003af2:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b16:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	f67f aea2 	bls.w	8003898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3724      	adds	r7, #36	; 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40013800 	.word	0x40013800
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40020400 	.word	0x40020400
 8003b74:	40020800 	.word	0x40020800
 8003b78:	40020c00 	.word	0x40020c00
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40013c00 	.word	0x40013c00

08003b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
 8003b90:	4613      	mov	r3, r2
 8003b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b94:	787b      	ldrb	r3, [r7, #1]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ba0:	e003      	b.n	8003baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	041a      	lsls	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	619a      	str	r2, [r3, #24]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bc8:	887a      	ldrh	r2, [r7, #2]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	041a      	lsls	r2, r3, #16
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	43d9      	mvns	r1, r3
 8003bd4:	887b      	ldrh	r3, [r7, #2]
 8003bd6:	400b      	ands	r3, r1
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	619a      	str	r2, [r3, #24]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e12b      	b.n	8003e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fe ffa0 	bl	8002b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c50:	f002 f95e 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 8003c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4a81      	ldr	r2, [pc, #516]	; (8003e60 <HAL_I2C_Init+0x274>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d807      	bhi.n	8003c70 <HAL_I2C_Init+0x84>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a80      	ldr	r2, [pc, #512]	; (8003e64 <HAL_I2C_Init+0x278>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bf94      	ite	ls
 8003c68:	2301      	movls	r3, #1
 8003c6a:	2300      	movhi	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e006      	b.n	8003c7e <HAL_I2C_Init+0x92>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a7d      	ldr	r2, [pc, #500]	; (8003e68 <HAL_I2C_Init+0x27c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bf94      	ite	ls
 8003c78:	2301      	movls	r3, #1
 8003c7a:	2300      	movhi	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0e7      	b.n	8003e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a78      	ldr	r2, [pc, #480]	; (8003e6c <HAL_I2C_Init+0x280>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0c9b      	lsrs	r3, r3, #18
 8003c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4a6a      	ldr	r2, [pc, #424]	; (8003e60 <HAL_I2C_Init+0x274>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d802      	bhi.n	8003cc0 <HAL_I2C_Init+0xd4>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	e009      	b.n	8003cd4 <HAL_I2C_Init+0xe8>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	4a69      	ldr	r2, [pc, #420]	; (8003e70 <HAL_I2C_Init+0x284>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	099b      	lsrs	r3, r3, #6
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	495c      	ldr	r1, [pc, #368]	; (8003e60 <HAL_I2C_Init+0x274>)
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	d819      	bhi.n	8003d28 <HAL_I2C_Init+0x13c>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1e59      	subs	r1, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d02:	1c59      	adds	r1, r3, #1
 8003d04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d08:	400b      	ands	r3, r1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_I2C_Init+0x138>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1e59      	subs	r1, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	e051      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003d24:	2304      	movs	r3, #4
 8003d26:	e04f      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d111      	bne.n	8003d54 <HAL_I2C_Init+0x168>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1e58      	subs	r0, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6859      	ldr	r1, [r3, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	440b      	add	r3, r1
 8003d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d42:	3301      	adds	r3, #1
 8003d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e012      	b.n	8003d7a <HAL_I2C_Init+0x18e>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1e58      	subs	r0, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	0099      	lsls	r1, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Init+0x196>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e022      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10e      	bne.n	8003da8 <HAL_I2C_Init+0x1bc>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1e58      	subs	r0, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	440b      	add	r3, r1
 8003d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da6:	e00f      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1e58      	subs	r0, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6859      	ldr	r1, [r3, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	0099      	lsls	r1, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	6809      	ldr	r1, [r1, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6911      	ldr	r1, [r2, #16]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68d2      	ldr	r2, [r2, #12]
 8003e02:	4311      	orrs	r1, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	000186a0 	.word	0x000186a0
 8003e64:	001e847f 	.word	0x001e847f
 8003e68:	003d08ff 	.word	0x003d08ff
 8003e6c:	431bde83 	.word	0x431bde83
 8003e70:	10624dd3 	.word	0x10624dd3

08003e74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	460b      	mov	r3, r1
 8003e82:	817b      	strh	r3, [r7, #10]
 8003e84:	4613      	mov	r3, r2
 8003e86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e88:	f7ff f944 	bl	8003114 <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	f040 80e0 	bne.w	800405c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2319      	movs	r3, #25
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4970      	ldr	r1, [pc, #448]	; (8004068 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f001 fa24 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e0d3      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_I2C_Master_Transmit+0x50>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0cc      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d007      	beq.n	8003eea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ef8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2221      	movs	r2, #33	; 0x21
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2210      	movs	r2, #16
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	893a      	ldrh	r2, [r7, #8]
 8003f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a50      	ldr	r2, [pc, #320]	; (800406c <HAL_I2C_Master_Transmit+0x1f8>)
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f2c:	8979      	ldrh	r1, [r7, #10]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 ff10 	bl	8004d58 <I2C_MasterRequestWrite>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e08d      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f58:	e066      	b.n	8004028 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	6a39      	ldr	r1, [r7, #32]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f001 fa9e 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d107      	bne.n	8003f82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06b      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	781a      	ldrb	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d11b      	bne.n	8003ffc <HAL_I2C_Master_Transmit+0x188>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d017      	beq.n	8003ffc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	6a39      	ldr	r1, [r7, #32]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f001 fa8e 	bl	8005522 <I2C_WaitOnBTFFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	2b04      	cmp	r3, #4
 8004012:	d107      	bne.n	8004024 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004022:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e01a      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	d194      	bne.n	8003f5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	00100002 	.word	0x00100002
 800406c:	ffff0000 	.word	0xffff0000

08004070 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08c      	sub	sp, #48	; 0x30
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	461a      	mov	r2, r3
 800407c:	460b      	mov	r3, r1
 800407e:	817b      	strh	r3, [r7, #10]
 8004080:	4613      	mov	r3, r2
 8004082:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004084:	f7ff f846 	bl	8003114 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b20      	cmp	r3, #32
 8004094:	f040 820b 	bne.w	80044ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2319      	movs	r3, #25
 800409e:	2201      	movs	r2, #1
 80040a0:	497c      	ldr	r1, [pc, #496]	; (8004294 <HAL_I2C_Master_Receive+0x224>)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f001 f926 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
 80040b0:	e1fe      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_I2C_Master_Receive+0x50>
 80040bc:	2302      	movs	r3, #2
 80040be:	e1f7      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d007      	beq.n	80040e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2222      	movs	r2, #34	; 0x22
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2210      	movs	r2, #16
 8004102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	893a      	ldrh	r2, [r7, #8]
 8004116:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4a5c      	ldr	r2, [pc, #368]	; (8004298 <HAL_I2C_Master_Receive+0x228>)
 8004126:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004128:	8979      	ldrh	r1, [r7, #10]
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fe94 	bl	8004e5c <I2C_MasterRequestRead>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e1b8      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d113      	bne.n	800416e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004146:	2300      	movs	r3, #0
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	623b      	str	r3, [r7, #32]
 800415a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e18c      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	2b01      	cmp	r3, #1
 8004174:	d11b      	bne.n	80041ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e16c      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d11b      	bne.n	80041ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	e14c      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004214:	e138      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	2b03      	cmp	r3, #3
 800421c:	f200 80f1 	bhi.w	8004402 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004224:	2b01      	cmp	r3, #1
 8004226:	d123      	bne.n	8004270 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f001 f9b9 	bl	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e139      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800426e:	e10b      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	2b02      	cmp	r3, #2
 8004276:	d14e      	bne.n	8004316 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	2200      	movs	r2, #0
 8004280:	4906      	ldr	r1, [pc, #24]	; (800429c <HAL_I2C_Master_Receive+0x22c>)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f001 f836 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e10e      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
 8004292:	bf00      	nop
 8004294:	00100002 	.word	0x00100002
 8004298:	ffff0000 	.word	0xffff0000
 800429c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004314:	e0b8      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	2200      	movs	r2, #0
 800431e:	4966      	ldr	r1, [pc, #408]	; (80044b8 <HAL_I2C_Master_Receive+0x448>)
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 ffe7 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0bf      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800433e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	2200      	movs	r2, #0
 800437a:	494f      	ldr	r1, [pc, #316]	; (80044b8 <HAL_I2C_Master_Receive+0x448>)
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 ffb9 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e091      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004400:	e042      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f001 f8cc 	bl	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e04c      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d118      	bne.n	8004488 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448c:	2b00      	cmp	r3, #0
 800448e:	f47f aec2 	bne.w	8004216 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3728      	adds	r7, #40	; 0x28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	00010004 	.word	0x00010004

080044bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	4608      	mov	r0, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	817b      	strh	r3, [r7, #10]
 80044ce:	460b      	mov	r3, r1
 80044d0:	813b      	strh	r3, [r7, #8]
 80044d2:	4613      	mov	r3, r2
 80044d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044d6:	f7fe fe1d 	bl	8003114 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	f040 80d9 	bne.w	800469c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	2319      	movs	r3, #25
 80044f0:	2201      	movs	r2, #1
 80044f2:	496d      	ldr	r1, [pc, #436]	; (80046a8 <HAL_I2C_Mem_Write+0x1ec>)
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fefd 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004500:	2302      	movs	r3, #2
 8004502:	e0cc      	b.n	800469e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_I2C_Mem_Write+0x56>
 800450e:	2302      	movs	r3, #2
 8004510:	e0c5      	b.n	800469e <HAL_I2C_Mem_Write+0x1e2>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b01      	cmp	r3, #1
 8004526:	d007      	beq.n	8004538 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004546:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2221      	movs	r2, #33	; 0x21
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2240      	movs	r2, #64	; 0x40
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a3a      	ldr	r2, [r7, #32]
 8004562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a4d      	ldr	r2, [pc, #308]	; (80046ac <HAL_I2C_Mem_Write+0x1f0>)
 8004578:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800457a:	88f8      	ldrh	r0, [r7, #6]
 800457c:	893a      	ldrh	r2, [r7, #8]
 800457e:	8979      	ldrh	r1, [r7, #10]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	4603      	mov	r3, r0
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 fd34 	bl	8004ff8 <I2C_RequestMemoryWrite>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d052      	beq.n	800463c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e081      	b.n	800469e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 ff7e 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00d      	beq.n	80045c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d107      	bne.n	80045c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e06b      	b.n	800469e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b04      	cmp	r3, #4
 8004602:	d11b      	bne.n	800463c <HAL_I2C_Mem_Write+0x180>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d017      	beq.n	800463c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1aa      	bne.n	800459a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 ff6a 	bl	8005522 <I2C_WaitOnBTFFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	2b04      	cmp	r3, #4
 800465a:	d107      	bne.n	800466c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e016      	b.n	800469e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	00100002 	.word	0x00100002
 80046ac:	ffff0000 	.word	0xffff0000

080046b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08c      	sub	sp, #48	; 0x30
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	4608      	mov	r0, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	461a      	mov	r2, r3
 80046be:	4603      	mov	r3, r0
 80046c0:	817b      	strh	r3, [r7, #10]
 80046c2:	460b      	mov	r3, r1
 80046c4:	813b      	strh	r3, [r7, #8]
 80046c6:	4613      	mov	r3, r2
 80046c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046ca:	f7fe fd23 	bl	8003114 <HAL_GetTick>
 80046ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b20      	cmp	r3, #32
 80046da:	f040 8208 	bne.w	8004aee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	2319      	movs	r3, #25
 80046e4:	2201      	movs	r2, #1
 80046e6:	497b      	ldr	r1, [pc, #492]	; (80048d4 <HAL_I2C_Mem_Read+0x224>)
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fe03 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
 80046f6:	e1fb      	b.n	8004af0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_I2C_Mem_Read+0x56>
 8004702:	2302      	movs	r3, #2
 8004704:	e1f4      	b.n	8004af0 <HAL_I2C_Mem_Read+0x440>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d007      	beq.n	800472c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2222      	movs	r2, #34	; 0x22
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2240      	movs	r2, #64	; 0x40
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800475c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a5b      	ldr	r2, [pc, #364]	; (80048d8 <HAL_I2C_Mem_Read+0x228>)
 800476c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800476e:	88f8      	ldrh	r0, [r7, #6]
 8004770:	893a      	ldrh	r2, [r7, #8]
 8004772:	8979      	ldrh	r1, [r7, #10]
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	4603      	mov	r3, r0
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fcd0 	bl	8005124 <I2C_RequestMemoryRead>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e1b0      	b.n	8004af0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	d113      	bne.n	80047be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	623b      	str	r3, [r7, #32]
 80047aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e184      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d11b      	bne.n	80047fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e164      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	2b02      	cmp	r3, #2
 8004804:	d11b      	bne.n	800483e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004814:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004824:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	e144      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004854:	e138      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	2b03      	cmp	r3, #3
 800485c:	f200 80f1 	bhi.w	8004a42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	2b01      	cmp	r3, #1
 8004866:	d123      	bne.n	80048b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fe99 	bl	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e139      	b.n	8004af0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ae:	e10b      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d14e      	bne.n	8004956 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048be:	2200      	movs	r2, #0
 80048c0:	4906      	ldr	r1, [pc, #24]	; (80048dc <HAL_I2C_Mem_Read+0x22c>)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fd16 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e10e      	b.n	8004af0 <HAL_I2C_Mem_Read+0x440>
 80048d2:	bf00      	nop
 80048d4:	00100002 	.word	0x00100002
 80048d8:	ffff0000 	.word	0xffff0000
 80048dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004954:	e0b8      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	2200      	movs	r2, #0
 800495e:	4966      	ldr	r1, [pc, #408]	; (8004af8 <HAL_I2C_Mem_Read+0x448>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fcc7 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0bf      	b.n	8004af0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2200      	movs	r2, #0
 80049ba:	494f      	ldr	r1, [pc, #316]	; (8004af8 <HAL_I2C_Mem_Read+0x448>)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fc99 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e091      	b.n	8004af0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a40:	e042      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fdac 	bl	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e04c      	b.n	8004af0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d118      	bne.n	8004ac8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f aec2 	bne.w	8004856 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e000      	b.n	8004af0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
  }
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3728      	adds	r7, #40	; 0x28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	00010004 	.word	0x00010004

08004afc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	; 0x28
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004b0c:	f7fe fb02 	bl	8003114 <HAL_GetTick>
 8004b10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	f040 8111 	bne.w	8004d46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	2319      	movs	r3, #25
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4988      	ldr	r1, [pc, #544]	; (8004d50 <HAL_I2C_IsDeviceReady+0x254>)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fbe0 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e104      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_I2C_IsDeviceReady+0x50>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e0fd      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d007      	beq.n	8004b72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0201 	orr.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2224      	movs	r2, #36	; 0x24
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a70      	ldr	r2, [pc, #448]	; (8004d54 <HAL_I2C_IsDeviceReady+0x258>)
 8004b94:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fb9e 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00d      	beq.n	8004bda <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bcc:	d103      	bne.n	8004bd6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e0b6      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004be8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004bea:	f7fe fa93 	bl	8003114 <HAL_GetTick>
 8004bee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c1e:	e025      	b.n	8004c6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	f7fe fa78 	bl	8003114 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d302      	bcc.n	8004c36 <HAL_I2C_IsDeviceReady+0x13a>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d103      	bne.n	8004c3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	22a0      	movs	r2, #160	; 0xa0
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c62:	bf0c      	ite	eq
 8004c64:	2301      	moveq	r3, #1
 8004c66:	2300      	movne	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2ba0      	cmp	r3, #160	; 0xa0
 8004c76:	d005      	beq.n	8004c84 <HAL_I2C_IsDeviceReady+0x188>
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <HAL_I2C_IsDeviceReady+0x188>
 8004c7e:	7dbb      	ldrb	r3, [r7, #22]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0cd      	beq.n	8004c20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d129      	bne.n	8004cee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2319      	movs	r3, #25
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4921      	ldr	r1, [pc, #132]	; (8004d50 <HAL_I2C_IsDeviceReady+0x254>)
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 fb12 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e036      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e02c      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2319      	movs	r3, #25
 8004d0e:	2201      	movs	r2, #1
 8004d10:	490f      	ldr	r1, [pc, #60]	; (8004d50 <HAL_I2C_IsDeviceReady+0x254>)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 faee 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e012      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	3301      	adds	r3, #1
 8004d26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	f4ff af32 	bcc.w	8004b96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004d46:	2302      	movs	r3, #2
  }
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	00100002 	.word	0x00100002
 8004d54:	ffff0000 	.word	0xffff0000

08004d58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	460b      	mov	r3, r1
 8004d66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d006      	beq.n	8004d82 <I2C_MasterRequestWrite+0x2a>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d003      	beq.n	8004d82 <I2C_MasterRequestWrite+0x2a>
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d80:	d108      	bne.n	8004d94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e00b      	b.n	8004dac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	2b12      	cmp	r3, #18
 8004d9a:	d107      	bne.n	8004dac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004daa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fa9b 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd2:	d103      	bne.n	8004ddc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e035      	b.n	8004e4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de8:	d108      	bne.n	8004dfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dea:	897b      	ldrh	r3, [r7, #10]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004df8:	611a      	str	r2, [r3, #16]
 8004dfa:	e01b      	b.n	8004e34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dfc:	897b      	ldrh	r3, [r7, #10]
 8004dfe:	11db      	asrs	r3, r3, #7
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 0306 	and.w	r3, r3, #6
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f063 030f 	orn	r3, r3, #15
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	490e      	ldr	r1, [pc, #56]	; (8004e54 <I2C_MasterRequestWrite+0xfc>)
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fac1 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e010      	b.n	8004e4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e2a:	897b      	ldrh	r3, [r7, #10]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4907      	ldr	r1, [pc, #28]	; (8004e58 <I2C_MasterRequestWrite+0x100>)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fab1 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	00010008 	.word	0x00010008
 8004e58:	00010002 	.word	0x00010002

08004e5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d006      	beq.n	8004e96 <I2C_MasterRequestRead+0x3a>
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d003      	beq.n	8004e96 <I2C_MasterRequestRead+0x3a>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e94:	d108      	bne.n	8004ea8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e00b      	b.n	8004ec0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	2b11      	cmp	r3, #17
 8004eae:	d107      	bne.n	8004ec0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ebe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fa11 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00d      	beq.n	8004ef4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee6:	d103      	bne.n	8004ef0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e079      	b.n	8004fe8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efc:	d108      	bne.n	8004f10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004efe:	897b      	ldrh	r3, [r7, #10]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	611a      	str	r2, [r3, #16]
 8004f0e:	e05f      	b.n	8004fd0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f10:	897b      	ldrh	r3, [r7, #10]
 8004f12:	11db      	asrs	r3, r3, #7
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	f003 0306 	and.w	r3, r3, #6
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f063 030f 	orn	r3, r3, #15
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4930      	ldr	r1, [pc, #192]	; (8004ff0 <I2C_MasterRequestRead+0x194>)
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fa37 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e054      	b.n	8004fe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f3e:	897b      	ldrh	r3, [r7, #10]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	4929      	ldr	r1, [pc, #164]	; (8004ff4 <I2C_MasterRequestRead+0x198>)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fa27 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e044      	b.n	8004fe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	613b      	str	r3, [r7, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f9af 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00d      	beq.n	8004fb8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	d103      	bne.n	8004fb4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e017      	b.n	8004fe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004fb8:	897b      	ldrh	r3, [r7, #10]
 8004fba:	11db      	asrs	r3, r3, #7
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f003 0306 	and.w	r3, r3, #6
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f063 030e 	orn	r3, r3, #14
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	4907      	ldr	r1, [pc, #28]	; (8004ff4 <I2C_MasterRequestRead+0x198>)
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f9e3 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	00010008 	.word	0x00010008
 8004ff4:	00010002 	.word	0x00010002

08004ff8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	4603      	mov	r3, r0
 8005008:	817b      	strh	r3, [r7, #10]
 800500a:	460b      	mov	r3, r1
 800500c:	813b      	strh	r3, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005020:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	2200      	movs	r2, #0
 800502a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f960 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005048:	d103      	bne.n	8005052 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005050:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e05f      	b.n	8005116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005056:	897b      	ldrh	r3, [r7, #10]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005064:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	6a3a      	ldr	r2, [r7, #32]
 800506a:	492d      	ldr	r1, [pc, #180]	; (8005120 <I2C_RequestMemoryWrite+0x128>)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f998 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e04c      	b.n	8005116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005094:	6a39      	ldr	r1, [r7, #32]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fa02 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00d      	beq.n	80050be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d107      	bne.n	80050ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e02b      	b.n	8005116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d105      	bne.n	80050d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050c4:	893b      	ldrh	r3, [r7, #8]
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	611a      	str	r2, [r3, #16]
 80050ce:	e021      	b.n	8005114 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050d0:	893b      	ldrh	r3, [r7, #8]
 80050d2:	0a1b      	lsrs	r3, r3, #8
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	6a39      	ldr	r1, [r7, #32]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f9dc 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00d      	beq.n	800510a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d107      	bne.n	8005106 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005104:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e005      	b.n	8005116 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800510a:	893b      	ldrh	r3, [r7, #8]
 800510c:	b2da      	uxtb	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	00010002 	.word	0x00010002

08005124 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	461a      	mov	r2, r3
 8005132:	4603      	mov	r3, r0
 8005134:	817b      	strh	r3, [r7, #10]
 8005136:	460b      	mov	r3, r1
 8005138:	813b      	strh	r3, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	2200      	movs	r2, #0
 8005166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f8c2 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005184:	d103      	bne.n	800518e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e0aa      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005192:	897b      	ldrh	r3, [r7, #10]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	6a3a      	ldr	r2, [r7, #32]
 80051a6:	4952      	ldr	r1, [pc, #328]	; (80052f0 <I2C_RequestMemoryRead+0x1cc>)
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f8fa 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e097      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6a39      	ldr	r1, [r7, #32]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f964 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d107      	bne.n	80051f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e076      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d105      	bne.n	800520c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005200:	893b      	ldrh	r3, [r7, #8]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]
 800520a:	e021      	b.n	8005250 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800520c:	893b      	ldrh	r3, [r7, #8]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	b29b      	uxth	r3, r3
 8005212:	b2da      	uxtb	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800521a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521c:	6a39      	ldr	r1, [r7, #32]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f93e 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00d      	beq.n	8005246 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2b04      	cmp	r3, #4
 8005230:	d107      	bne.n	8005242 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005240:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e050      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005246:	893b      	ldrh	r3, [r7, #8]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005252:	6a39      	ldr	r1, [r7, #32]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f923 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00d      	beq.n	800527c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	2b04      	cmp	r3, #4
 8005266:	d107      	bne.n	8005278 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005276:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e035      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	2200      	movs	r2, #0
 8005294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f82b 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00d      	beq.n	80052c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b2:	d103      	bne.n	80052bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e013      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052c0:	897b      	ldrh	r3, [r7, #10]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	6a3a      	ldr	r2, [r7, #32]
 80052d4:	4906      	ldr	r1, [pc, #24]	; (80052f0 <I2C_RequestMemoryRead+0x1cc>)
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f863 	bl	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	00010002 	.word	0x00010002

080052f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005304:	e025      	b.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d021      	beq.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530e:	f7fd ff01 	bl	8003114 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d302      	bcc.n	8005324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d116      	bne.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e023      	b.n	800539a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b01      	cmp	r3, #1
 800535a:	d10d      	bne.n	8005378 <I2C_WaitOnFlagUntilTimeout+0x84>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	43da      	mvns	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4013      	ands	r3, r2
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	e00c      	b.n	8005392 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	43da      	mvns	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4013      	ands	r3, r2
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	bf0c      	ite	eq
 800538a:	2301      	moveq	r3, #1
 800538c:	2300      	movne	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	429a      	cmp	r2, r3
 8005396:	d0b6      	beq.n	8005306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053b0:	e051      	b.n	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c0:	d123      	bne.n	800540a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f043 0204 	orr.w	r2, r3, #4
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e046      	b.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d021      	beq.n	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005412:	f7fd fe7f 	bl	8003114 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d302      	bcc.n	8005428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d116      	bne.n	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e020      	b.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10c      	bne.n	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	43da      	mvns	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4013      	ands	r3, r2
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	bf14      	ite	ne
 8005472:	2301      	movne	r3, #1
 8005474:	2300      	moveq	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	e00b      	b.n	8005492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	43da      	mvns	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4013      	ands	r3, r2
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf14      	ite	ne
 800548c:	2301      	movne	r3, #1
 800548e:	2300      	moveq	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d18d      	bne.n	80053b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054ac:	e02d      	b.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f8ce 	bl	8005650 <I2C_IsAcknowledgeFailed>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e02d      	b.n	800551a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d021      	beq.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c6:	f7fd fe25 	bl	8003114 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d116      	bne.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e007      	b.n	800551a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d1ca      	bne.n	80054ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800552e:	e02d      	b.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f88d 	bl	8005650 <I2C_IsAcknowledgeFailed>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e02d      	b.n	800559c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d021      	beq.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005548:	f7fd fde4 	bl	8003114 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	429a      	cmp	r2, r3
 8005556:	d302      	bcc.n	800555e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d116      	bne.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	f043 0220 	orr.w	r2, r3, #32
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e007      	b.n	800559c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b04      	cmp	r3, #4
 8005598:	d1ca      	bne.n	8005530 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055b0:	e042      	b.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d119      	bne.n	80055f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0210 	mvn.w	r2, #16
 80055c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e029      	b.n	8005648 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f4:	f7fd fd8e 	bl	8003114 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	429a      	cmp	r2, r3
 8005602:	d302      	bcc.n	800560a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d116      	bne.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	f043 0220 	orr.w	r2, r3, #32
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e007      	b.n	8005648 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d1b5      	bne.n	80055b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d11b      	bne.n	80056a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005670:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	f043 0204 	orr.w	r2, r3, #4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e267      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d075      	beq.n	80057ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ce:	4b88      	ldr	r3, [pc, #544]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d00c      	beq.n	80056f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056da:	4b85      	ldr	r3, [pc, #532]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d112      	bne.n	800570c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056e6:	4b82      	ldr	r3, [pc, #520]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056f2:	d10b      	bne.n	800570c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f4:	4b7e      	ldr	r3, [pc, #504]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d05b      	beq.n	80057b8 <HAL_RCC_OscConfig+0x108>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d157      	bne.n	80057b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e242      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005714:	d106      	bne.n	8005724 <HAL_RCC_OscConfig+0x74>
 8005716:	4b76      	ldr	r3, [pc, #472]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a75      	ldr	r2, [pc, #468]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e01d      	b.n	8005760 <HAL_RCC_OscConfig+0xb0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800572c:	d10c      	bne.n	8005748 <HAL_RCC_OscConfig+0x98>
 800572e:	4b70      	ldr	r3, [pc, #448]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6f      	ldr	r2, [pc, #444]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4b6d      	ldr	r3, [pc, #436]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a6c      	ldr	r2, [pc, #432]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0xb0>
 8005748:	4b69      	ldr	r3, [pc, #420]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a68      	ldr	r2, [pc, #416]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800574e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	4b66      	ldr	r3, [pc, #408]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a65      	ldr	r2, [pc, #404]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800575a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800575e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fd fcd4 	bl	8003114 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005770:	f7fd fcd0 	bl	8003114 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	; 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e207      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005782:	4b5b      	ldr	r3, [pc, #364]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0xc0>
 800578e:	e014      	b.n	80057ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fd fcc0 	bl	8003114 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005798:	f7fd fcbc 	bl	8003114 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e1f3      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057aa:	4b51      	ldr	r3, [pc, #324]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0xe8>
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d063      	beq.n	800588e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057c6:	4b4a      	ldr	r3, [pc, #296]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d2:	4b47      	ldr	r3, [pc, #284]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d11c      	bne.n	8005818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057de:	4b44      	ldr	r3, [pc, #272]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d116      	bne.n	8005818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ea:	4b41      	ldr	r3, [pc, #260]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_RCC_OscConfig+0x152>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e1c7      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005802:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4937      	ldr	r1, [pc, #220]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005812:	4313      	orrs	r3, r2
 8005814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	e03a      	b.n	800588e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d020      	beq.n	8005862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005820:	4b34      	ldr	r3, [pc, #208]	; (80058f4 <HAL_RCC_OscConfig+0x244>)
 8005822:	2201      	movs	r2, #1
 8005824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005826:	f7fd fc75 	bl	8003114 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800582e:	f7fd fc71 	bl	8003114 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e1a8      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005840:	4b2b      	ldr	r3, [pc, #172]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800584c:	4b28      	ldr	r3, [pc, #160]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4925      	ldr	r1, [pc, #148]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 800585c:	4313      	orrs	r3, r2
 800585e:	600b      	str	r3, [r1, #0]
 8005860:	e015      	b.n	800588e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005862:	4b24      	ldr	r3, [pc, #144]	; (80058f4 <HAL_RCC_OscConfig+0x244>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fd fc54 	bl	8003114 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005870:	f7fd fc50 	bl	8003114 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e187      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005882:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d036      	beq.n	8005908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d016      	beq.n	80058d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_RCC_OscConfig+0x248>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a8:	f7fd fc34 	bl	8003114 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b0:	f7fd fc30 	bl	8003114 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e167      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_RCC_OscConfig+0x240>)
 80058c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0f0      	beq.n	80058b0 <HAL_RCC_OscConfig+0x200>
 80058ce:	e01b      	b.n	8005908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d0:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <HAL_RCC_OscConfig+0x248>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d6:	f7fd fc1d 	bl	8003114 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058dc:	e00e      	b.n	80058fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058de:	f7fd fc19 	bl	8003114 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d907      	bls.n	80058fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e150      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
 80058f0:	40023800 	.word	0x40023800
 80058f4:	42470000 	.word	0x42470000
 80058f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058fc:	4b88      	ldr	r3, [pc, #544]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80058fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ea      	bne.n	80058de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8097 	beq.w	8005a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005916:	2300      	movs	r3, #0
 8005918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800591a:	4b81      	ldr	r3, [pc, #516]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10f      	bne.n	8005946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005926:	2300      	movs	r3, #0
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	4b7d      	ldr	r3, [pc, #500]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	4a7c      	ldr	r2, [pc, #496]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005934:	6413      	str	r3, [r2, #64]	; 0x40
 8005936:	4b7a      	ldr	r3, [pc, #488]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005946:	4b77      	ldr	r3, [pc, #476]	; (8005b24 <HAL_RCC_OscConfig+0x474>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d118      	bne.n	8005984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005952:	4b74      	ldr	r3, [pc, #464]	; (8005b24 <HAL_RCC_OscConfig+0x474>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a73      	ldr	r2, [pc, #460]	; (8005b24 <HAL_RCC_OscConfig+0x474>)
 8005958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800595e:	f7fd fbd9 	bl	8003114 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005966:	f7fd fbd5 	bl	8003114 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e10c      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005978:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <HAL_RCC_OscConfig+0x474>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0f0      	beq.n	8005966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d106      	bne.n	800599a <HAL_RCC_OscConfig+0x2ea>
 800598c:	4b64      	ldr	r3, [pc, #400]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	4a63      	ldr	r2, [pc, #396]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	6713      	str	r3, [r2, #112]	; 0x70
 8005998:	e01c      	b.n	80059d4 <HAL_RCC_OscConfig+0x324>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b05      	cmp	r3, #5
 80059a0:	d10c      	bne.n	80059bc <HAL_RCC_OscConfig+0x30c>
 80059a2:	4b5f      	ldr	r3, [pc, #380]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a6:	4a5e      	ldr	r2, [pc, #376]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059a8:	f043 0304 	orr.w	r3, r3, #4
 80059ac:	6713      	str	r3, [r2, #112]	; 0x70
 80059ae:	4b5c      	ldr	r3, [pc, #368]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	4a5b      	ldr	r2, [pc, #364]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ba:	e00b      	b.n	80059d4 <HAL_RCC_OscConfig+0x324>
 80059bc:	4b58      	ldr	r3, [pc, #352]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	4a57      	ldr	r2, [pc, #348]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	6713      	str	r3, [r2, #112]	; 0x70
 80059c8:	4b55      	ldr	r3, [pc, #340]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	4a54      	ldr	r2, [pc, #336]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059ce:	f023 0304 	bic.w	r3, r3, #4
 80059d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d015      	beq.n	8005a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059dc:	f7fd fb9a 	bl	8003114 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059e4:	f7fd fb96 	bl	8003114 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e0cb      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fa:	4b49      	ldr	r3, [pc, #292]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ee      	beq.n	80059e4 <HAL_RCC_OscConfig+0x334>
 8005a06:	e014      	b.n	8005a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a08:	f7fd fb84 	bl	8003114 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a10:	f7fd fb80 	bl	8003114 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e0b5      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a26:	4b3e      	ldr	r3, [pc, #248]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1ee      	bne.n	8005a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d105      	bne.n	8005a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a38:	4b39      	ldr	r3, [pc, #228]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	4a38      	ldr	r2, [pc, #224]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80a1 	beq.w	8005b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a4e:	4b34      	ldr	r3, [pc, #208]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d05c      	beq.n	8005b14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d141      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a62:	4b31      	ldr	r3, [pc, #196]	; (8005b28 <HAL_RCC_OscConfig+0x478>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a68:	f7fd fb54 	bl	8003114 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a70:	f7fd fb50 	bl	8003114 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e087      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a82:	4b27      	ldr	r3, [pc, #156]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69da      	ldr	r2, [r3, #28]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	061b      	lsls	r3, r3, #24
 8005ab2:	491b      	ldr	r1, [pc, #108]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <HAL_RCC_OscConfig+0x478>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abe:	f7fd fb29 	bl	8003114 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac6:	f7fd fb25 	bl	8003114 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e05c      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad8:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x416>
 8005ae4:	e054      	b.n	8005b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <HAL_RCC_OscConfig+0x478>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7fd fb12 	bl	8003114 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af4:	f7fd fb0e 	bl	8003114 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e045      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCC_OscConfig+0x444>
 8005b12:	e03d      	b.n	8005b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e038      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40007000 	.word	0x40007000
 8005b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <HAL_RCC_OscConfig+0x4ec>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d028      	beq.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d121      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d11a      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d111      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	3b01      	subs	r3, #1
 8005b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40023800 	.word	0x40023800

08005ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0cc      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b68      	ldr	r3, [pc, #416]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d90c      	bls.n	8005bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4b65      	ldr	r3, [pc, #404]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	4b63      	ldr	r3, [pc, #396]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0b8      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d020      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d005      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bf4:	4b59      	ldr	r3, [pc, #356]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	4a58      	ldr	r2, [pc, #352]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c0c:	4b53      	ldr	r3, [pc, #332]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4a52      	ldr	r2, [pc, #328]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c18:	4b50      	ldr	r3, [pc, #320]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	494d      	ldr	r1, [pc, #308]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d044      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d107      	bne.n	8005c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c3e:	4b47      	ldr	r3, [pc, #284]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d119      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e07f      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d003      	beq.n	8005c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c5e:	4b3f      	ldr	r3, [pc, #252]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e06f      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c6e:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e067      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c7e:	4b37      	ldr	r3, [pc, #220]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f023 0203 	bic.w	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4934      	ldr	r1, [pc, #208]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c90:	f7fd fa40 	bl	8003114 <HAL_GetTick>
 8005c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c98:	f7fd fa3c 	bl	8003114 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e04f      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	4b2b      	ldr	r3, [pc, #172]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 020c 	and.w	r2, r3, #12
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d1eb      	bne.n	8005c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc0:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d20c      	bcs.n	8005ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cce:	4b22      	ldr	r3, [pc, #136]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd6:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d001      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e032      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cf4:	4b19      	ldr	r3, [pc, #100]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4916      	ldr	r1, [pc, #88]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d12:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	490e      	ldr	r1, [pc, #56]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d26:	f000 f821 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	091b      	lsrs	r3, r3, #4
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	490a      	ldr	r1, [pc, #40]	; (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005d38:	5ccb      	ldrb	r3, [r1, r3]
 8005d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3e:	4a09      	ldr	r2, [pc, #36]	; (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fd f9a0 	bl	800308c <HAL_InitTick>

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40023c00 	.word	0x40023c00
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	0800cd6c 	.word	0x0800cd6c
 8005d64:	20000008 	.word	0x20000008
 8005d68:	2000000c 	.word	0x2000000c

08005d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d70:	b090      	sub	sp, #64	; 0x40
 8005d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	637b      	str	r3, [r7, #52]	; 0x34
 8005d78:	2300      	movs	r3, #0
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d84:	4b59      	ldr	r3, [pc, #356]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 030c 	and.w	r3, r3, #12
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d00d      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x40>
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	f200 80a1 	bhi.w	8005ed8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_RCC_GetSysClockFreq+0x34>
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d9e:	e09b      	b.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005da0:	4b53      	ldr	r3, [pc, #332]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005da2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005da4:	e09b      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005da6:	4b53      	ldr	r3, [pc, #332]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005daa:	e098      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dac:	4b4f      	ldr	r3, [pc, #316]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005db6:	4b4d      	ldr	r3, [pc, #308]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d028      	beq.n	8005e14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc2:	4b4a      	ldr	r3, [pc, #296]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	099b      	lsrs	r3, r3, #6
 8005dc8:	2200      	movs	r2, #0
 8005dca:	623b      	str	r3, [r7, #32]
 8005dcc:	627a      	str	r2, [r7, #36]	; 0x24
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4b47      	ldr	r3, [pc, #284]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005dd8:	fb03 f201 	mul.w	r2, r3, r1
 8005ddc:	2300      	movs	r3, #0
 8005dde:	fb00 f303 	mul.w	r3, r0, r3
 8005de2:	4413      	add	r3, r2
 8005de4:	4a43      	ldr	r2, [pc, #268]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005de6:	fba0 1202 	umull	r1, r2, r0, r2
 8005dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dec:	460a      	mov	r2, r1
 8005dee:	62ba      	str	r2, [r7, #40]	; 0x28
 8005df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005df2:	4413      	add	r3, r2
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	2200      	movs	r2, #0
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	61fa      	str	r2, [r7, #28]
 8005dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005e06:	f7fa ff47 	bl	8000c98 <__aeabi_uldivmod>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4613      	mov	r3, r2
 8005e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e12:	e053      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e14:	4b35      	ldr	r3, [pc, #212]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	617a      	str	r2, [r7, #20]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005e26:	f04f 0b00 	mov.w	fp, #0
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	465b      	mov	r3, fp
 8005e2e:	f04f 0000 	mov.w	r0, #0
 8005e32:	f04f 0100 	mov.w	r1, #0
 8005e36:	0159      	lsls	r1, r3, #5
 8005e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e3c:	0150      	lsls	r0, r2, #5
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	ebb2 080a 	subs.w	r8, r2, sl
 8005e46:	eb63 090b 	sbc.w	r9, r3, fp
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005e56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005e5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005e5e:	ebb2 0408 	subs.w	r4, r2, r8
 8005e62:	eb63 0509 	sbc.w	r5, r3, r9
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	00eb      	lsls	r3, r5, #3
 8005e70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e74:	00e2      	lsls	r2, r4, #3
 8005e76:	4614      	mov	r4, r2
 8005e78:	461d      	mov	r5, r3
 8005e7a:	eb14 030a 	adds.w	r3, r4, sl
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	eb45 030b 	adc.w	r3, r5, fp
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e92:	4629      	mov	r1, r5
 8005e94:	028b      	lsls	r3, r1, #10
 8005e96:	4621      	mov	r1, r4
 8005e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	028a      	lsls	r2, r1, #10
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	60fa      	str	r2, [r7, #12]
 8005eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eb0:	f7fa fef2 	bl	8000c98 <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4613      	mov	r3, r2
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <HAL_RCC_GetSysClockFreq+0x180>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	0c1b      	lsrs	r3, r3, #16
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ed6:	e002      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005eda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3740      	adds	r7, #64	; 0x40
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eea:	bf00      	nop
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	00f42400 	.word	0x00f42400
 8005ef4:	017d7840 	.word	0x017d7840

08005ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000008 	.word	0x20000008

08005f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f14:	f7ff fff0 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	0a9b      	lsrs	r3, r3, #10
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4903      	ldr	r1, [pc, #12]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40023800 	.word	0x40023800
 8005f34:	0800cd7c 	.word	0x0800cd7c

08005f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f3c:	f7ff ffdc 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0b5b      	lsrs	r3, r3, #13
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4903      	ldr	r1, [pc, #12]	; (8005f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	0800cd7c 	.word	0x0800cd7c

08005f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e041      	b.n	8005ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc fe84 	bl	8002c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f000 fa88 	bl	80064b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d001      	beq.n	8006018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e044      	b.n	80060a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x6c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006042:	d013      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x6c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x6c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x6c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a17      	ldr	r2, [pc, #92]	; (80060bc <HAL_TIM_Base_Start_IT+0xbc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x6c>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d111      	bne.n	8006090 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b06      	cmp	r3, #6
 800607c:	d010      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0201 	orr.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608e:	e007      	b.n	80060a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40014000 	.word	0x40014000

080060c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d122      	bne.n	8006120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d11b      	bne.n	8006120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0202 	mvn.w	r2, #2
 80060f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f9b5 	bl	8006476 <HAL_TIM_IC_CaptureCallback>
 800610c:	e005      	b.n	800611a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f9a7 	bl	8006462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f9b8 	bl	800648a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b04      	cmp	r3, #4
 800612c:	d122      	bne.n	8006174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b04      	cmp	r3, #4
 800613a:	d11b      	bne.n	8006174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0204 	mvn.w	r2, #4
 8006144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2202      	movs	r2, #2
 800614a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f98b 	bl	8006476 <HAL_TIM_IC_CaptureCallback>
 8006160:	e005      	b.n	800616e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f97d 	bl	8006462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f98e 	bl	800648a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b08      	cmp	r3, #8
 8006180:	d122      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b08      	cmp	r3, #8
 800618e:	d11b      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0208 	mvn.w	r2, #8
 8006198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2204      	movs	r2, #4
 800619e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f961 	bl	8006476 <HAL_TIM_IC_CaptureCallback>
 80061b4:	e005      	b.n	80061c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f953 	bl	8006462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f964 	bl	800648a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d122      	bne.n	800621c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d11b      	bne.n	800621c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0210 	mvn.w	r2, #16
 80061ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2208      	movs	r2, #8
 80061f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f937 	bl	8006476 <HAL_TIM_IC_CaptureCallback>
 8006208:	e005      	b.n	8006216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f929 	bl	8006462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f93a 	bl	800648a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b01      	cmp	r3, #1
 8006228:	d10e      	bne.n	8006248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b01      	cmp	r3, #1
 8006236:	d107      	bne.n	8006248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0201 	mvn.w	r2, #1
 8006240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fc fa88 	bl	8002758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b80      	cmp	r3, #128	; 0x80
 8006254:	d10e      	bne.n	8006274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006260:	2b80      	cmp	r3, #128	; 0x80
 8006262:	d107      	bne.n	8006274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800626c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fab2 	bl	80067d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d10e      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b40      	cmp	r3, #64	; 0x40
 800628e:	d107      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f8ff 	bl	800649e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d10e      	bne.n	80062cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d107      	bne.n	80062cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0220 	mvn.w	r2, #32
 80062c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fa7c 	bl	80067c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_TIM_ConfigClockSource+0x1c>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e0b4      	b.n	800645a <HAL_TIM_ConfigClockSource+0x186>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800630e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006328:	d03e      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0xd4>
 800632a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632e:	f200 8087 	bhi.w	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	f000 8086 	beq.w	8006446 <HAL_TIM_ConfigClockSource+0x172>
 800633a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633e:	d87f      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006340:	2b70      	cmp	r3, #112	; 0x70
 8006342:	d01a      	beq.n	800637a <HAL_TIM_ConfigClockSource+0xa6>
 8006344:	2b70      	cmp	r3, #112	; 0x70
 8006346:	d87b      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006348:	2b60      	cmp	r3, #96	; 0x60
 800634a:	d050      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x11a>
 800634c:	2b60      	cmp	r3, #96	; 0x60
 800634e:	d877      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006350:	2b50      	cmp	r3, #80	; 0x50
 8006352:	d03c      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0xfa>
 8006354:	2b50      	cmp	r3, #80	; 0x50
 8006356:	d873      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d058      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x13a>
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d86f      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006360:	2b30      	cmp	r3, #48	; 0x30
 8006362:	d064      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x15a>
 8006364:	2b30      	cmp	r3, #48	; 0x30
 8006366:	d86b      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006368:	2b20      	cmp	r3, #32
 800636a:	d060      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x15a>
 800636c:	2b20      	cmp	r3, #32
 800636e:	d867      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d05c      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x15a>
 8006374:	2b10      	cmp	r3, #16
 8006376:	d05a      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x15a>
 8006378:	e062      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6899      	ldr	r1, [r3, #8]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f000 f98d 	bl	80066a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800639c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	609a      	str	r2, [r3, #8]
      break;
 80063a6:	e04f      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	6899      	ldr	r1, [r3, #8]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f000 f976 	bl	80066a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ca:	609a      	str	r2, [r3, #8]
      break;
 80063cc:	e03c      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6859      	ldr	r1, [r3, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	461a      	mov	r2, r3
 80063dc:	f000 f8ea 	bl	80065b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2150      	movs	r1, #80	; 0x50
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 f943 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 80063ec:	e02c      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6859      	ldr	r1, [r3, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	461a      	mov	r2, r3
 80063fc:	f000 f909 	bl	8006612 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2160      	movs	r1, #96	; 0x60
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f933 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 800640c:	e01c      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	461a      	mov	r2, r3
 800641c:	f000 f8ca 	bl	80065b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2140      	movs	r1, #64	; 0x40
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f923 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 800642c:	e00c      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f000 f91a 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 800643e:	e003      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	73fb      	strb	r3, [r7, #15]
      break;
 8006444:	e000      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
	...

080064b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a34      	ldr	r2, [pc, #208]	; (8006598 <TIM_Base_SetConfig+0xe4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00f      	beq.n	80064ec <TIM_Base_SetConfig+0x38>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d2:	d00b      	beq.n	80064ec <TIM_Base_SetConfig+0x38>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a31      	ldr	r2, [pc, #196]	; (800659c <TIM_Base_SetConfig+0xe8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d007      	beq.n	80064ec <TIM_Base_SetConfig+0x38>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a30      	ldr	r2, [pc, #192]	; (80065a0 <TIM_Base_SetConfig+0xec>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_Base_SetConfig+0x38>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a2f      	ldr	r2, [pc, #188]	; (80065a4 <TIM_Base_SetConfig+0xf0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d108      	bne.n	80064fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a25      	ldr	r2, [pc, #148]	; (8006598 <TIM_Base_SetConfig+0xe4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d01b      	beq.n	800653e <TIM_Base_SetConfig+0x8a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650c:	d017      	beq.n	800653e <TIM_Base_SetConfig+0x8a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a22      	ldr	r2, [pc, #136]	; (800659c <TIM_Base_SetConfig+0xe8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d013      	beq.n	800653e <TIM_Base_SetConfig+0x8a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a21      	ldr	r2, [pc, #132]	; (80065a0 <TIM_Base_SetConfig+0xec>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00f      	beq.n	800653e <TIM_Base_SetConfig+0x8a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a20      	ldr	r2, [pc, #128]	; (80065a4 <TIM_Base_SetConfig+0xf0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00b      	beq.n	800653e <TIM_Base_SetConfig+0x8a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a1f      	ldr	r2, [pc, #124]	; (80065a8 <TIM_Base_SetConfig+0xf4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d007      	beq.n	800653e <TIM_Base_SetConfig+0x8a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1e      	ldr	r2, [pc, #120]	; (80065ac <TIM_Base_SetConfig+0xf8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_Base_SetConfig+0x8a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <TIM_Base_SetConfig+0xfc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d108      	bne.n	8006550 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a08      	ldr	r2, [pc, #32]	; (8006598 <TIM_Base_SetConfig+0xe4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d103      	bne.n	8006584 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	615a      	str	r2, [r3, #20]
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40014000 	.word	0x40014000
 80065ac:	40014400 	.word	0x40014400
 80065b0:	40014800 	.word	0x40014800

080065b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f023 0201 	bic.w	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f023 030a 	bic.w	r3, r3, #10
 80065f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006612:	b480      	push	{r7}
 8006614:	b087      	sub	sp, #28
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f023 0210 	bic.w	r2, r3, #16
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800663c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	031b      	lsls	r3, r3, #12
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800664e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	f043 0307 	orr.w	r3, r3, #7
 8006694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	609a      	str	r2, [r3, #8]
}
 800669c:	bf00      	nop
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	021a      	lsls	r2, r3, #8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	609a      	str	r2, [r3, #8]
}
 80066dc:	bf00      	nop
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e050      	b.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a1c      	ldr	r2, [pc, #112]	; (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d018      	beq.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800674c:	d013      	beq.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a18      	ldr	r2, [pc, #96]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00e      	beq.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a16      	ldr	r2, [pc, #88]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a15      	ldr	r2, [pc, #84]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d004      	beq.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a13      	ldr	r2, [pc, #76]	; (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d10c      	bne.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800677c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	4313      	orrs	r3, r2
 8006786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40000400 	.word	0x40000400
 80067b8:	40000800 	.word	0x40000800
 80067bc:	40000c00 	.word	0x40000c00
 80067c0:	40014000 	.word	0x40014000

080067c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e03f      	b.n	800687e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fc fa66 	bl	8002ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2224      	movs	r2, #36	; 0x24
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800682e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f929 	bl	8006a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695a      	ldr	r2, [r3, #20]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b08a      	sub	sp, #40	; 0x28
 800688a:	af02      	add	r7, sp, #8
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d17c      	bne.n	80069a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_UART_Transmit+0x2c>
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e075      	b.n	80069a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_UART_Transmit+0x3e>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e06e      	b.n	80069a2 <HAL_UART_Transmit+0x11c>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2221      	movs	r2, #33	; 0x21
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068da:	f7fc fc1b 	bl	8003114 <HAL_GetTick>
 80068de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	88fa      	ldrh	r2, [r7, #6]
 80068e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	88fa      	ldrh	r2, [r7, #6]
 80068ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f4:	d108      	bne.n	8006908 <HAL_UART_Transmit+0x82>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d104      	bne.n	8006908 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e003      	b.n	8006910 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800690c:	2300      	movs	r3, #0
 800690e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006918:	e02a      	b.n	8006970 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2200      	movs	r2, #0
 8006922:	2180      	movs	r1, #128	; 0x80
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f840 	bl	80069aa <UART_WaitOnFlagUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e036      	b.n	80069a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006948:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	3302      	adds	r3, #2
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	e007      	b.n	8006962 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	781a      	ldrb	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	3301      	adds	r3, #1
 8006960:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1cf      	bne.n	800691a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2200      	movs	r2, #0
 8006982:	2140      	movs	r1, #64	; 0x40
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f810 	bl	80069aa <UART_WaitOnFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e006      	b.n	80069a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	e000      	b.n	80069a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069a0:	2302      	movs	r3, #2
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3720      	adds	r7, #32
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b090      	sub	sp, #64	; 0x40
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	4613      	mov	r3, r2
 80069b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ba:	e050      	b.n	8006a5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c2:	d04c      	beq.n	8006a5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d007      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0x30>
 80069ca:	f7fc fba3 	bl	8003114 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d241      	bcs.n	8006a5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069fa:	637a      	str	r2, [r7, #52]	; 0x34
 80069fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e5      	bne.n	80069da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3314      	adds	r3, #20
 8006a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a2e:	623a      	str	r2, [r7, #32]
 8006a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	69f9      	ldr	r1, [r7, #28]
 8006a34:	6a3a      	ldr	r2, [r7, #32]
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e00f      	b.n	8006a7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4013      	ands	r3, r2
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	bf0c      	ite	eq
 8006a6e:	2301      	moveq	r3, #1
 8006a70:	2300      	movne	r3, #0
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d09f      	beq.n	80069bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3740      	adds	r7, #64	; 0x40
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a8c:	b0c0      	sub	sp, #256	; 0x100
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa4:	68d9      	ldr	r1, [r3, #12]
 8006aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	ea40 0301 	orr.w	r3, r0, r1
 8006ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ae0:	f021 010c 	bic.w	r1, r1, #12
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aee:	430b      	orrs	r3, r1
 8006af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b02:	6999      	ldr	r1, [r3, #24]
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	ea40 0301 	orr.w	r3, r0, r1
 8006b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b8f      	ldr	r3, [pc, #572]	; (8006d54 <UART_SetConfig+0x2cc>)
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d005      	beq.n	8006b28 <UART_SetConfig+0xa0>
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b8d      	ldr	r3, [pc, #564]	; (8006d58 <UART_SetConfig+0x2d0>)
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d104      	bne.n	8006b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b28:	f7ff fa06 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 8006b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b30:	e003      	b.n	8006b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b32:	f7ff f9ed 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 8006b36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b44:	f040 810c 	bne.w	8006d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b5a:	4622      	mov	r2, r4
 8006b5c:	462b      	mov	r3, r5
 8006b5e:	1891      	adds	r1, r2, r2
 8006b60:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b62:	415b      	adcs	r3, r3
 8006b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	eb12 0801 	adds.w	r8, r2, r1
 8006b70:	4629      	mov	r1, r5
 8006b72:	eb43 0901 	adc.w	r9, r3, r1
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b8a:	4690      	mov	r8, r2
 8006b8c:	4699      	mov	r9, r3
 8006b8e:	4623      	mov	r3, r4
 8006b90:	eb18 0303 	adds.w	r3, r8, r3
 8006b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b98:	462b      	mov	r3, r5
 8006b9a:	eb49 0303 	adc.w	r3, r9, r3
 8006b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	18db      	adds	r3, r3, r3
 8006bba:	653b      	str	r3, [r7, #80]	; 0x50
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	eb42 0303 	adc.w	r3, r2, r3
 8006bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8006bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bcc:	f7fa f864 	bl	8000c98 <__aeabi_uldivmod>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4b61      	ldr	r3, [pc, #388]	; (8006d5c <UART_SetConfig+0x2d4>)
 8006bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	011c      	lsls	r4, r3, #4
 8006bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006be8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c00:	4641      	mov	r1, r8
 8006c02:	eb12 0a01 	adds.w	sl, r2, r1
 8006c06:	4649      	mov	r1, r9
 8006c08:	eb43 0b01 	adc.w	fp, r3, r1
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c20:	4692      	mov	sl, r2
 8006c22:	469b      	mov	fp, r3
 8006c24:	4643      	mov	r3, r8
 8006c26:	eb1a 0303 	adds.w	r3, sl, r3
 8006c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c2e:	464b      	mov	r3, r9
 8006c30:	eb4b 0303 	adc.w	r3, fp, r3
 8006c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	18db      	adds	r3, r3, r3
 8006c50:	643b      	str	r3, [r7, #64]	; 0x40
 8006c52:	4613      	mov	r3, r2
 8006c54:	eb42 0303 	adc.w	r3, r2, r3
 8006c58:	647b      	str	r3, [r7, #68]	; 0x44
 8006c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c62:	f7fa f819 	bl	8000c98 <__aeabi_uldivmod>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	4b3b      	ldr	r3, [pc, #236]	; (8006d5c <UART_SetConfig+0x2d4>)
 8006c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	2264      	movs	r2, #100	; 0x64
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	1acb      	subs	r3, r1, r3
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c82:	4b36      	ldr	r3, [pc, #216]	; (8006d5c <UART_SetConfig+0x2d4>)
 8006c84:	fba3 2302 	umull	r2, r3, r3, r2
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c90:	441c      	add	r4, r3
 8006c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	1891      	adds	r1, r2, r2
 8006caa:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cac:	415b      	adcs	r3, r3
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cb4:	4641      	mov	r1, r8
 8006cb6:	1851      	adds	r1, r2, r1
 8006cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8006cba:	4649      	mov	r1, r9
 8006cbc:	414b      	adcs	r3, r1
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ccc:	4659      	mov	r1, fp
 8006cce:	00cb      	lsls	r3, r1, #3
 8006cd0:	4651      	mov	r1, sl
 8006cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cd6:	4651      	mov	r1, sl
 8006cd8:	00ca      	lsls	r2, r1, #3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	189b      	adds	r3, r3, r2
 8006ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ce8:	464b      	mov	r3, r9
 8006cea:	460a      	mov	r2, r1
 8006cec:	eb42 0303 	adc.w	r3, r2, r3
 8006cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d08:	460b      	mov	r3, r1
 8006d0a:	18db      	adds	r3, r3, r3
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d0e:	4613      	mov	r3, r2
 8006d10:	eb42 0303 	adc.w	r3, r2, r3
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d1e:	f7f9 ffbb 	bl	8000c98 <__aeabi_uldivmod>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <UART_SetConfig+0x2d4>)
 8006d28:	fba3 1302 	umull	r1, r3, r3, r2
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	2164      	movs	r1, #100	; 0x64
 8006d30:	fb01 f303 	mul.w	r3, r1, r3
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	3332      	adds	r3, #50	; 0x32
 8006d3a:	4a08      	ldr	r2, [pc, #32]	; (8006d5c <UART_SetConfig+0x2d4>)
 8006d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	f003 0207 	and.w	r2, r3, #7
 8006d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4422      	add	r2, r4
 8006d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d50:	e105      	b.n	8006f5e <UART_SetConfig+0x4d6>
 8006d52:	bf00      	nop
 8006d54:	40011000 	.word	0x40011000
 8006d58:	40011400 	.word	0x40011400
 8006d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d72:	4642      	mov	r2, r8
 8006d74:	464b      	mov	r3, r9
 8006d76:	1891      	adds	r1, r2, r2
 8006d78:	6239      	str	r1, [r7, #32]
 8006d7a:	415b      	adcs	r3, r3
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d82:	4641      	mov	r1, r8
 8006d84:	1854      	adds	r4, r2, r1
 8006d86:	4649      	mov	r1, r9
 8006d88:	eb43 0501 	adc.w	r5, r3, r1
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	00eb      	lsls	r3, r5, #3
 8006d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d9a:	00e2      	lsls	r2, r4, #3
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	461d      	mov	r5, r3
 8006da0:	4643      	mov	r3, r8
 8006da2:	18e3      	adds	r3, r4, r3
 8006da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006da8:	464b      	mov	r3, r9
 8006daa:	eb45 0303 	adc.w	r3, r5, r3
 8006dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	f04f 0300 	mov.w	r3, #0
 8006dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006dce:	4629      	mov	r1, r5
 8006dd0:	008b      	lsls	r3, r1, #2
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dd8:	4621      	mov	r1, r4
 8006dda:	008a      	lsls	r2, r1, #2
 8006ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006de0:	f7f9 ff5a 	bl	8000c98 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4b60      	ldr	r3, [pc, #384]	; (8006f6c <UART_SetConfig+0x4e4>)
 8006dea:	fba3 2302 	umull	r2, r3, r3, r2
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	011c      	lsls	r4, r3, #4
 8006df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	1891      	adds	r1, r2, r2
 8006e0a:	61b9      	str	r1, [r7, #24]
 8006e0c:	415b      	adcs	r3, r3
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e14:	4641      	mov	r1, r8
 8006e16:	1851      	adds	r1, r2, r1
 8006e18:	6139      	str	r1, [r7, #16]
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	414b      	adcs	r3, r1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	00cb      	lsls	r3, r1, #3
 8006e30:	4651      	mov	r1, sl
 8006e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e36:	4651      	mov	r1, sl
 8006e38:	00ca      	lsls	r2, r1, #3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4642      	mov	r2, r8
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e48:	464b      	mov	r3, r9
 8006e4a:	460a      	mov	r2, r1
 8006e4c:	eb42 0303 	adc.w	r3, r2, r3
 8006e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	008b      	lsls	r3, r1, #2
 8006e70:	4641      	mov	r1, r8
 8006e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e76:	4641      	mov	r1, r8
 8006e78:	008a      	lsls	r2, r1, #2
 8006e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e7e:	f7f9 ff0b 	bl	8000c98 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4b39      	ldr	r3, [pc, #228]	; (8006f6c <UART_SetConfig+0x4e4>)
 8006e88:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	2164      	movs	r1, #100	; 0x64
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	3332      	adds	r3, #50	; 0x32
 8006e9a:	4a34      	ldr	r2, [pc, #208]	; (8006f6c <UART_SetConfig+0x4e4>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ea6:	441c      	add	r4, r3
 8006ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eac:	2200      	movs	r2, #0
 8006eae:	673b      	str	r3, [r7, #112]	; 0x70
 8006eb0:	677a      	str	r2, [r7, #116]	; 0x74
 8006eb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006eb6:	4642      	mov	r2, r8
 8006eb8:	464b      	mov	r3, r9
 8006eba:	1891      	adds	r1, r2, r2
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	415b      	adcs	r3, r3
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ec6:	4641      	mov	r1, r8
 8006ec8:	1851      	adds	r1, r2, r1
 8006eca:	6039      	str	r1, [r7, #0]
 8006ecc:	4649      	mov	r1, r9
 8006ece:	414b      	adcs	r3, r1
 8006ed0:	607b      	str	r3, [r7, #4]
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	f04f 0300 	mov.w	r3, #0
 8006eda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ede:	4659      	mov	r1, fp
 8006ee0:	00cb      	lsls	r3, r1, #3
 8006ee2:	4651      	mov	r1, sl
 8006ee4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ee8:	4651      	mov	r1, sl
 8006eea:	00ca      	lsls	r2, r1, #3
 8006eec:	4610      	mov	r0, r2
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	4642      	mov	r2, r8
 8006ef4:	189b      	adds	r3, r3, r2
 8006ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ef8:	464b      	mov	r3, r9
 8006efa:	460a      	mov	r2, r1
 8006efc:	eb42 0303 	adc.w	r3, r2, r3
 8006f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f0c:	667a      	str	r2, [r7, #100]	; 0x64
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	008b      	lsls	r3, r1, #2
 8006f1e:	4641      	mov	r1, r8
 8006f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f24:	4641      	mov	r1, r8
 8006f26:	008a      	lsls	r2, r1, #2
 8006f28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f2c:	f7f9 feb4 	bl	8000c98 <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <UART_SetConfig+0x4e4>)
 8006f36:	fba3 1302 	umull	r1, r3, r3, r2
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	2164      	movs	r1, #100	; 0x64
 8006f3e:	fb01 f303 	mul.w	r3, r1, r3
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	3332      	adds	r3, #50	; 0x32
 8006f48:	4a08      	ldr	r2, [pc, #32]	; (8006f6c <UART_SetConfig+0x4e4>)
 8006f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	f003 020f 	and.w	r2, r3, #15
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4422      	add	r2, r4
 8006f5c:	609a      	str	r2, [r3, #8]
}
 8006f5e:	bf00      	nop
 8006f60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f64:	46bd      	mov	sp, r7
 8006f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f6a:	bf00      	nop
 8006f6c:	51eb851f 	.word	0x51eb851f

08006f70 <__assert_func>:
 8006f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f72:	4614      	mov	r4, r2
 8006f74:	461a      	mov	r2, r3
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <__assert_func+0x2c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	68d8      	ldr	r0, [r3, #12]
 8006f7e:	b14c      	cbz	r4, 8006f94 <__assert_func+0x24>
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <__assert_func+0x30>)
 8006f82:	9100      	str	r1, [sp, #0]
 8006f84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f88:	4906      	ldr	r1, [pc, #24]	; (8006fa4 <__assert_func+0x34>)
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	f000 f814 	bl	8006fb8 <fiprintf>
 8006f90:	f001 ffb6 	bl	8008f00 <abort>
 8006f94:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <__assert_func+0x38>)
 8006f96:	461c      	mov	r4, r3
 8006f98:	e7f3      	b.n	8006f82 <__assert_func+0x12>
 8006f9a:	bf00      	nop
 8006f9c:	20000014 	.word	0x20000014
 8006fa0:	0800cd84 	.word	0x0800cd84
 8006fa4:	0800cd91 	.word	0x0800cd91
 8006fa8:	0800cdbf 	.word	0x0800cdbf

08006fac <__errno>:
 8006fac:	4b01      	ldr	r3, [pc, #4]	; (8006fb4 <__errno+0x8>)
 8006fae:	6818      	ldr	r0, [r3, #0]
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000014 	.word	0x20000014

08006fb8 <fiprintf>:
 8006fb8:	b40e      	push	{r1, r2, r3}
 8006fba:	b503      	push	{r0, r1, lr}
 8006fbc:	4601      	mov	r1, r0
 8006fbe:	ab03      	add	r3, sp, #12
 8006fc0:	4805      	ldr	r0, [pc, #20]	; (8006fd8 <fiprintf+0x20>)
 8006fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fc6:	6800      	ldr	r0, [r0, #0]
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	f000 f85d 	bl	8007088 <_vfiprintf_r>
 8006fce:	b002      	add	sp, #8
 8006fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fd4:	b003      	add	sp, #12
 8006fd6:	4770      	bx	lr
 8006fd8:	20000014 	.word	0x20000014

08006fdc <__libc_init_array>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4d0d      	ldr	r5, [pc, #52]	; (8007014 <__libc_init_array+0x38>)
 8006fe0:	4c0d      	ldr	r4, [pc, #52]	; (8007018 <__libc_init_array+0x3c>)
 8006fe2:	1b64      	subs	r4, r4, r5
 8006fe4:	10a4      	asrs	r4, r4, #2
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	42a6      	cmp	r6, r4
 8006fea:	d109      	bne.n	8007000 <__libc_init_array+0x24>
 8006fec:	4d0b      	ldr	r5, [pc, #44]	; (800701c <__libc_init_array+0x40>)
 8006fee:	4c0c      	ldr	r4, [pc, #48]	; (8007020 <__libc_init_array+0x44>)
 8006ff0:	f005 fd70 	bl	800cad4 <_init>
 8006ff4:	1b64      	subs	r4, r4, r5
 8006ff6:	10a4      	asrs	r4, r4, #2
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	d105      	bne.n	800700a <__libc_init_array+0x2e>
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	f855 3b04 	ldr.w	r3, [r5], #4
 8007004:	4798      	blx	r3
 8007006:	3601      	adds	r6, #1
 8007008:	e7ee      	b.n	8006fe8 <__libc_init_array+0xc>
 800700a:	f855 3b04 	ldr.w	r3, [r5], #4
 800700e:	4798      	blx	r3
 8007010:	3601      	adds	r6, #1
 8007012:	e7f2      	b.n	8006ffa <__libc_init_array+0x1e>
 8007014:	0800d268 	.word	0x0800d268
 8007018:	0800d268 	.word	0x0800d268
 800701c:	0800d268 	.word	0x0800d268
 8007020:	0800d26c 	.word	0x0800d26c

08007024 <memset>:
 8007024:	4402      	add	r2, r0
 8007026:	4603      	mov	r3, r0
 8007028:	4293      	cmp	r3, r2
 800702a:	d100      	bne.n	800702e <memset+0xa>
 800702c:	4770      	bx	lr
 800702e:	f803 1b01 	strb.w	r1, [r3], #1
 8007032:	e7f9      	b.n	8007028 <memset+0x4>

08007034 <__sfputc_r>:
 8007034:	6893      	ldr	r3, [r2, #8]
 8007036:	3b01      	subs	r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	b410      	push	{r4}
 800703c:	6093      	str	r3, [r2, #8]
 800703e:	da08      	bge.n	8007052 <__sfputc_r+0x1e>
 8007040:	6994      	ldr	r4, [r2, #24]
 8007042:	42a3      	cmp	r3, r4
 8007044:	db01      	blt.n	800704a <__sfputc_r+0x16>
 8007046:	290a      	cmp	r1, #10
 8007048:	d103      	bne.n	8007052 <__sfputc_r+0x1e>
 800704a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800704e:	f001 be97 	b.w	8008d80 <__swbuf_r>
 8007052:	6813      	ldr	r3, [r2, #0]
 8007054:	1c58      	adds	r0, r3, #1
 8007056:	6010      	str	r0, [r2, #0]
 8007058:	7019      	strb	r1, [r3, #0]
 800705a:	4608      	mov	r0, r1
 800705c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007060:	4770      	bx	lr

08007062 <__sfputs_r>:
 8007062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	4614      	mov	r4, r2
 800706a:	18d5      	adds	r5, r2, r3
 800706c:	42ac      	cmp	r4, r5
 800706e:	d101      	bne.n	8007074 <__sfputs_r+0x12>
 8007070:	2000      	movs	r0, #0
 8007072:	e007      	b.n	8007084 <__sfputs_r+0x22>
 8007074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007078:	463a      	mov	r2, r7
 800707a:	4630      	mov	r0, r6
 800707c:	f7ff ffda 	bl	8007034 <__sfputc_r>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d1f3      	bne.n	800706c <__sfputs_r+0xa>
 8007084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007088 <_vfiprintf_r>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	460d      	mov	r5, r1
 800708e:	b09d      	sub	sp, #116	; 0x74
 8007090:	4614      	mov	r4, r2
 8007092:	4698      	mov	r8, r3
 8007094:	4606      	mov	r6, r0
 8007096:	b118      	cbz	r0, 80070a0 <_vfiprintf_r+0x18>
 8007098:	6983      	ldr	r3, [r0, #24]
 800709a:	b90b      	cbnz	r3, 80070a0 <_vfiprintf_r+0x18>
 800709c:	f002 fecc 	bl	8009e38 <__sinit>
 80070a0:	4b89      	ldr	r3, [pc, #548]	; (80072c8 <_vfiprintf_r+0x240>)
 80070a2:	429d      	cmp	r5, r3
 80070a4:	d11b      	bne.n	80070de <_vfiprintf_r+0x56>
 80070a6:	6875      	ldr	r5, [r6, #4]
 80070a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070aa:	07d9      	lsls	r1, r3, #31
 80070ac:	d405      	bmi.n	80070ba <_vfiprintf_r+0x32>
 80070ae:	89ab      	ldrh	r3, [r5, #12]
 80070b0:	059a      	lsls	r2, r3, #22
 80070b2:	d402      	bmi.n	80070ba <_vfiprintf_r+0x32>
 80070b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b6:	f003 fad0 	bl	800a65a <__retarget_lock_acquire_recursive>
 80070ba:	89ab      	ldrh	r3, [r5, #12]
 80070bc:	071b      	lsls	r3, r3, #28
 80070be:	d501      	bpl.n	80070c4 <_vfiprintf_r+0x3c>
 80070c0:	692b      	ldr	r3, [r5, #16]
 80070c2:	b9eb      	cbnz	r3, 8007100 <_vfiprintf_r+0x78>
 80070c4:	4629      	mov	r1, r5
 80070c6:	4630      	mov	r0, r6
 80070c8:	f001 feac 	bl	8008e24 <__swsetup_r>
 80070cc:	b1c0      	cbz	r0, 8007100 <_vfiprintf_r+0x78>
 80070ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d0:	07dc      	lsls	r4, r3, #31
 80070d2:	d50e      	bpl.n	80070f2 <_vfiprintf_r+0x6a>
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295
 80070d8:	b01d      	add	sp, #116	; 0x74
 80070da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070de:	4b7b      	ldr	r3, [pc, #492]	; (80072cc <_vfiprintf_r+0x244>)
 80070e0:	429d      	cmp	r5, r3
 80070e2:	d101      	bne.n	80070e8 <_vfiprintf_r+0x60>
 80070e4:	68b5      	ldr	r5, [r6, #8]
 80070e6:	e7df      	b.n	80070a8 <_vfiprintf_r+0x20>
 80070e8:	4b79      	ldr	r3, [pc, #484]	; (80072d0 <_vfiprintf_r+0x248>)
 80070ea:	429d      	cmp	r5, r3
 80070ec:	bf08      	it	eq
 80070ee:	68f5      	ldreq	r5, [r6, #12]
 80070f0:	e7da      	b.n	80070a8 <_vfiprintf_r+0x20>
 80070f2:	89ab      	ldrh	r3, [r5, #12]
 80070f4:	0598      	lsls	r0, r3, #22
 80070f6:	d4ed      	bmi.n	80070d4 <_vfiprintf_r+0x4c>
 80070f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070fa:	f003 faaf 	bl	800a65c <__retarget_lock_release_recursive>
 80070fe:	e7e9      	b.n	80070d4 <_vfiprintf_r+0x4c>
 8007100:	2300      	movs	r3, #0
 8007102:	9309      	str	r3, [sp, #36]	; 0x24
 8007104:	2320      	movs	r3, #32
 8007106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800710a:	f8cd 800c 	str.w	r8, [sp, #12]
 800710e:	2330      	movs	r3, #48	; 0x30
 8007110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072d4 <_vfiprintf_r+0x24c>
 8007114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007118:	f04f 0901 	mov.w	r9, #1
 800711c:	4623      	mov	r3, r4
 800711e:	469a      	mov	sl, r3
 8007120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007124:	b10a      	cbz	r2, 800712a <_vfiprintf_r+0xa2>
 8007126:	2a25      	cmp	r2, #37	; 0x25
 8007128:	d1f9      	bne.n	800711e <_vfiprintf_r+0x96>
 800712a:	ebba 0b04 	subs.w	fp, sl, r4
 800712e:	d00b      	beq.n	8007148 <_vfiprintf_r+0xc0>
 8007130:	465b      	mov	r3, fp
 8007132:	4622      	mov	r2, r4
 8007134:	4629      	mov	r1, r5
 8007136:	4630      	mov	r0, r6
 8007138:	f7ff ff93 	bl	8007062 <__sfputs_r>
 800713c:	3001      	adds	r0, #1
 800713e:	f000 80aa 	beq.w	8007296 <_vfiprintf_r+0x20e>
 8007142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007144:	445a      	add	r2, fp
 8007146:	9209      	str	r2, [sp, #36]	; 0x24
 8007148:	f89a 3000 	ldrb.w	r3, [sl]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80a2 	beq.w	8007296 <_vfiprintf_r+0x20e>
 8007152:	2300      	movs	r3, #0
 8007154:	f04f 32ff 	mov.w	r2, #4294967295
 8007158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800715c:	f10a 0a01 	add.w	sl, sl, #1
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	9307      	str	r3, [sp, #28]
 8007164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007168:	931a      	str	r3, [sp, #104]	; 0x68
 800716a:	4654      	mov	r4, sl
 800716c:	2205      	movs	r2, #5
 800716e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007172:	4858      	ldr	r0, [pc, #352]	; (80072d4 <_vfiprintf_r+0x24c>)
 8007174:	f7f9 f83c 	bl	80001f0 <memchr>
 8007178:	9a04      	ldr	r2, [sp, #16]
 800717a:	b9d8      	cbnz	r0, 80071b4 <_vfiprintf_r+0x12c>
 800717c:	06d1      	lsls	r1, r2, #27
 800717e:	bf44      	itt	mi
 8007180:	2320      	movmi	r3, #32
 8007182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007186:	0713      	lsls	r3, r2, #28
 8007188:	bf44      	itt	mi
 800718a:	232b      	movmi	r3, #43	; 0x2b
 800718c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007190:	f89a 3000 	ldrb.w	r3, [sl]
 8007194:	2b2a      	cmp	r3, #42	; 0x2a
 8007196:	d015      	beq.n	80071c4 <_vfiprintf_r+0x13c>
 8007198:	9a07      	ldr	r2, [sp, #28]
 800719a:	4654      	mov	r4, sl
 800719c:	2000      	movs	r0, #0
 800719e:	f04f 0c0a 	mov.w	ip, #10
 80071a2:	4621      	mov	r1, r4
 80071a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071a8:	3b30      	subs	r3, #48	; 0x30
 80071aa:	2b09      	cmp	r3, #9
 80071ac:	d94e      	bls.n	800724c <_vfiprintf_r+0x1c4>
 80071ae:	b1b0      	cbz	r0, 80071de <_vfiprintf_r+0x156>
 80071b0:	9207      	str	r2, [sp, #28]
 80071b2:	e014      	b.n	80071de <_vfiprintf_r+0x156>
 80071b4:	eba0 0308 	sub.w	r3, r0, r8
 80071b8:	fa09 f303 	lsl.w	r3, r9, r3
 80071bc:	4313      	orrs	r3, r2
 80071be:	9304      	str	r3, [sp, #16]
 80071c0:	46a2      	mov	sl, r4
 80071c2:	e7d2      	b.n	800716a <_vfiprintf_r+0xe2>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	1d19      	adds	r1, r3, #4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	9103      	str	r1, [sp, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	bfbb      	ittet	lt
 80071d0:	425b      	neglt	r3, r3
 80071d2:	f042 0202 	orrlt.w	r2, r2, #2
 80071d6:	9307      	strge	r3, [sp, #28]
 80071d8:	9307      	strlt	r3, [sp, #28]
 80071da:	bfb8      	it	lt
 80071dc:	9204      	strlt	r2, [sp, #16]
 80071de:	7823      	ldrb	r3, [r4, #0]
 80071e0:	2b2e      	cmp	r3, #46	; 0x2e
 80071e2:	d10c      	bne.n	80071fe <_vfiprintf_r+0x176>
 80071e4:	7863      	ldrb	r3, [r4, #1]
 80071e6:	2b2a      	cmp	r3, #42	; 0x2a
 80071e8:	d135      	bne.n	8007256 <_vfiprintf_r+0x1ce>
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	1d1a      	adds	r2, r3, #4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	9203      	str	r2, [sp, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfb8      	it	lt
 80071f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80071fa:	3402      	adds	r4, #2
 80071fc:	9305      	str	r3, [sp, #20]
 80071fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072e4 <_vfiprintf_r+0x25c>
 8007202:	7821      	ldrb	r1, [r4, #0]
 8007204:	2203      	movs	r2, #3
 8007206:	4650      	mov	r0, sl
 8007208:	f7f8 fff2 	bl	80001f0 <memchr>
 800720c:	b140      	cbz	r0, 8007220 <_vfiprintf_r+0x198>
 800720e:	2340      	movs	r3, #64	; 0x40
 8007210:	eba0 000a 	sub.w	r0, r0, sl
 8007214:	fa03 f000 	lsl.w	r0, r3, r0
 8007218:	9b04      	ldr	r3, [sp, #16]
 800721a:	4303      	orrs	r3, r0
 800721c:	3401      	adds	r4, #1
 800721e:	9304      	str	r3, [sp, #16]
 8007220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007224:	482c      	ldr	r0, [pc, #176]	; (80072d8 <_vfiprintf_r+0x250>)
 8007226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800722a:	2206      	movs	r2, #6
 800722c:	f7f8 ffe0 	bl	80001f0 <memchr>
 8007230:	2800      	cmp	r0, #0
 8007232:	d03f      	beq.n	80072b4 <_vfiprintf_r+0x22c>
 8007234:	4b29      	ldr	r3, [pc, #164]	; (80072dc <_vfiprintf_r+0x254>)
 8007236:	bb1b      	cbnz	r3, 8007280 <_vfiprintf_r+0x1f8>
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	3307      	adds	r3, #7
 800723c:	f023 0307 	bic.w	r3, r3, #7
 8007240:	3308      	adds	r3, #8
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007246:	443b      	add	r3, r7
 8007248:	9309      	str	r3, [sp, #36]	; 0x24
 800724a:	e767      	b.n	800711c <_vfiprintf_r+0x94>
 800724c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007250:	460c      	mov	r4, r1
 8007252:	2001      	movs	r0, #1
 8007254:	e7a5      	b.n	80071a2 <_vfiprintf_r+0x11a>
 8007256:	2300      	movs	r3, #0
 8007258:	3401      	adds	r4, #1
 800725a:	9305      	str	r3, [sp, #20]
 800725c:	4619      	mov	r1, r3
 800725e:	f04f 0c0a 	mov.w	ip, #10
 8007262:	4620      	mov	r0, r4
 8007264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007268:	3a30      	subs	r2, #48	; 0x30
 800726a:	2a09      	cmp	r2, #9
 800726c:	d903      	bls.n	8007276 <_vfiprintf_r+0x1ee>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0c5      	beq.n	80071fe <_vfiprintf_r+0x176>
 8007272:	9105      	str	r1, [sp, #20]
 8007274:	e7c3      	b.n	80071fe <_vfiprintf_r+0x176>
 8007276:	fb0c 2101 	mla	r1, ip, r1, r2
 800727a:	4604      	mov	r4, r0
 800727c:	2301      	movs	r3, #1
 800727e:	e7f0      	b.n	8007262 <_vfiprintf_r+0x1da>
 8007280:	ab03      	add	r3, sp, #12
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	462a      	mov	r2, r5
 8007286:	4b16      	ldr	r3, [pc, #88]	; (80072e0 <_vfiprintf_r+0x258>)
 8007288:	a904      	add	r1, sp, #16
 800728a:	4630      	mov	r0, r6
 800728c:	f000 f8cc 	bl	8007428 <_printf_float>
 8007290:	4607      	mov	r7, r0
 8007292:	1c78      	adds	r0, r7, #1
 8007294:	d1d6      	bne.n	8007244 <_vfiprintf_r+0x1bc>
 8007296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007298:	07d9      	lsls	r1, r3, #31
 800729a:	d405      	bmi.n	80072a8 <_vfiprintf_r+0x220>
 800729c:	89ab      	ldrh	r3, [r5, #12]
 800729e:	059a      	lsls	r2, r3, #22
 80072a0:	d402      	bmi.n	80072a8 <_vfiprintf_r+0x220>
 80072a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072a4:	f003 f9da 	bl	800a65c <__retarget_lock_release_recursive>
 80072a8:	89ab      	ldrh	r3, [r5, #12]
 80072aa:	065b      	lsls	r3, r3, #25
 80072ac:	f53f af12 	bmi.w	80070d4 <_vfiprintf_r+0x4c>
 80072b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072b2:	e711      	b.n	80070d8 <_vfiprintf_r+0x50>
 80072b4:	ab03      	add	r3, sp, #12
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	462a      	mov	r2, r5
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <_vfiprintf_r+0x258>)
 80072bc:	a904      	add	r1, sp, #16
 80072be:	4630      	mov	r0, r6
 80072c0:	f000 fb56 	bl	8007970 <_printf_i>
 80072c4:	e7e4      	b.n	8007290 <_vfiprintf_r+0x208>
 80072c6:	bf00      	nop
 80072c8:	0800d014 	.word	0x0800d014
 80072cc:	0800d034 	.word	0x0800d034
 80072d0:	0800cff4 	.word	0x0800cff4
 80072d4:	0800cdc4 	.word	0x0800cdc4
 80072d8:	0800cdce 	.word	0x0800cdce
 80072dc:	08007429 	.word	0x08007429
 80072e0:	08007063 	.word	0x08007063
 80072e4:	0800cdca 	.word	0x0800cdca

080072e8 <__cvt>:
 80072e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	ec55 4b10 	vmov	r4, r5, d0
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	460e      	mov	r6, r1
 80072f4:	4619      	mov	r1, r3
 80072f6:	462b      	mov	r3, r5
 80072f8:	bfbb      	ittet	lt
 80072fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072fe:	461d      	movlt	r5, r3
 8007300:	2300      	movge	r3, #0
 8007302:	232d      	movlt	r3, #45	; 0x2d
 8007304:	700b      	strb	r3, [r1, #0]
 8007306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007308:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800730c:	4691      	mov	r9, r2
 800730e:	f023 0820 	bic.w	r8, r3, #32
 8007312:	bfbc      	itt	lt
 8007314:	4622      	movlt	r2, r4
 8007316:	4614      	movlt	r4, r2
 8007318:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800731c:	d005      	beq.n	800732a <__cvt+0x42>
 800731e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007322:	d100      	bne.n	8007326 <__cvt+0x3e>
 8007324:	3601      	adds	r6, #1
 8007326:	2102      	movs	r1, #2
 8007328:	e000      	b.n	800732c <__cvt+0x44>
 800732a:	2103      	movs	r1, #3
 800732c:	ab03      	add	r3, sp, #12
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	ab02      	add	r3, sp, #8
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	ec45 4b10 	vmov	d0, r4, r5
 8007338:	4653      	mov	r3, sl
 800733a:	4632      	mov	r2, r6
 800733c:	f001 fe74 	bl	8009028 <_dtoa_r>
 8007340:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007344:	4607      	mov	r7, r0
 8007346:	d102      	bne.n	800734e <__cvt+0x66>
 8007348:	f019 0f01 	tst.w	r9, #1
 800734c:	d022      	beq.n	8007394 <__cvt+0xac>
 800734e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007352:	eb07 0906 	add.w	r9, r7, r6
 8007356:	d110      	bne.n	800737a <__cvt+0x92>
 8007358:	783b      	ldrb	r3, [r7, #0]
 800735a:	2b30      	cmp	r3, #48	; 0x30
 800735c:	d10a      	bne.n	8007374 <__cvt+0x8c>
 800735e:	2200      	movs	r2, #0
 8007360:	2300      	movs	r3, #0
 8007362:	4620      	mov	r0, r4
 8007364:	4629      	mov	r1, r5
 8007366:	f7f9 fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800736a:	b918      	cbnz	r0, 8007374 <__cvt+0x8c>
 800736c:	f1c6 0601 	rsb	r6, r6, #1
 8007370:	f8ca 6000 	str.w	r6, [sl]
 8007374:	f8da 3000 	ldr.w	r3, [sl]
 8007378:	4499      	add	r9, r3
 800737a:	2200      	movs	r2, #0
 800737c:	2300      	movs	r3, #0
 800737e:	4620      	mov	r0, r4
 8007380:	4629      	mov	r1, r5
 8007382:	f7f9 fba9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007386:	b108      	cbz	r0, 800738c <__cvt+0xa4>
 8007388:	f8cd 900c 	str.w	r9, [sp, #12]
 800738c:	2230      	movs	r2, #48	; 0x30
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	454b      	cmp	r3, r9
 8007392:	d307      	bcc.n	80073a4 <__cvt+0xbc>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007398:	1bdb      	subs	r3, r3, r7
 800739a:	4638      	mov	r0, r7
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	b004      	add	sp, #16
 80073a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a4:	1c59      	adds	r1, r3, #1
 80073a6:	9103      	str	r1, [sp, #12]
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	e7f0      	b.n	800738e <__cvt+0xa6>

080073ac <__exponent>:
 80073ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073ae:	4603      	mov	r3, r0
 80073b0:	2900      	cmp	r1, #0
 80073b2:	bfb8      	it	lt
 80073b4:	4249      	neglt	r1, r1
 80073b6:	f803 2b02 	strb.w	r2, [r3], #2
 80073ba:	bfb4      	ite	lt
 80073bc:	222d      	movlt	r2, #45	; 0x2d
 80073be:	222b      	movge	r2, #43	; 0x2b
 80073c0:	2909      	cmp	r1, #9
 80073c2:	7042      	strb	r2, [r0, #1]
 80073c4:	dd2a      	ble.n	800741c <__exponent+0x70>
 80073c6:	f10d 0407 	add.w	r4, sp, #7
 80073ca:	46a4      	mov	ip, r4
 80073cc:	270a      	movs	r7, #10
 80073ce:	46a6      	mov	lr, r4
 80073d0:	460a      	mov	r2, r1
 80073d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80073d6:	fb07 1516 	mls	r5, r7, r6, r1
 80073da:	3530      	adds	r5, #48	; 0x30
 80073dc:	2a63      	cmp	r2, #99	; 0x63
 80073de:	f104 34ff 	add.w	r4, r4, #4294967295
 80073e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073e6:	4631      	mov	r1, r6
 80073e8:	dcf1      	bgt.n	80073ce <__exponent+0x22>
 80073ea:	3130      	adds	r1, #48	; 0x30
 80073ec:	f1ae 0502 	sub.w	r5, lr, #2
 80073f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073f4:	1c44      	adds	r4, r0, #1
 80073f6:	4629      	mov	r1, r5
 80073f8:	4561      	cmp	r1, ip
 80073fa:	d30a      	bcc.n	8007412 <__exponent+0x66>
 80073fc:	f10d 0209 	add.w	r2, sp, #9
 8007400:	eba2 020e 	sub.w	r2, r2, lr
 8007404:	4565      	cmp	r5, ip
 8007406:	bf88      	it	hi
 8007408:	2200      	movhi	r2, #0
 800740a:	4413      	add	r3, r2
 800740c:	1a18      	subs	r0, r3, r0
 800740e:	b003      	add	sp, #12
 8007410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007416:	f804 2f01 	strb.w	r2, [r4, #1]!
 800741a:	e7ed      	b.n	80073f8 <__exponent+0x4c>
 800741c:	2330      	movs	r3, #48	; 0x30
 800741e:	3130      	adds	r1, #48	; 0x30
 8007420:	7083      	strb	r3, [r0, #2]
 8007422:	70c1      	strb	r1, [r0, #3]
 8007424:	1d03      	adds	r3, r0, #4
 8007426:	e7f1      	b.n	800740c <__exponent+0x60>

08007428 <_printf_float>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	ed2d 8b02 	vpush	{d8}
 8007430:	b08d      	sub	sp, #52	; 0x34
 8007432:	460c      	mov	r4, r1
 8007434:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007438:	4616      	mov	r6, r2
 800743a:	461f      	mov	r7, r3
 800743c:	4605      	mov	r5, r0
 800743e:	f003 f907 	bl	800a650 <_localeconv_r>
 8007442:	f8d0 a000 	ldr.w	sl, [r0]
 8007446:	4650      	mov	r0, sl
 8007448:	f7f8 feca 	bl	80001e0 <strlen>
 800744c:	2300      	movs	r3, #0
 800744e:	930a      	str	r3, [sp, #40]	; 0x28
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	f8d8 3000 	ldr.w	r3, [r8]
 8007458:	f894 b018 	ldrb.w	fp, [r4, #24]
 800745c:	3307      	adds	r3, #7
 800745e:	f023 0307 	bic.w	r3, r3, #7
 8007462:	f103 0208 	add.w	r2, r3, #8
 8007466:	f8c8 2000 	str.w	r2, [r8]
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007472:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007476:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800747a:	9307      	str	r3, [sp, #28]
 800747c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007480:	ee08 0a10 	vmov	s16, r0
 8007484:	4b9f      	ldr	r3, [pc, #636]	; (8007704 <_printf_float+0x2dc>)
 8007486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800748a:	f04f 32ff 	mov.w	r2, #4294967295
 800748e:	f7f9 fb55 	bl	8000b3c <__aeabi_dcmpun>
 8007492:	bb88      	cbnz	r0, 80074f8 <_printf_float+0xd0>
 8007494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007498:	4b9a      	ldr	r3, [pc, #616]	; (8007704 <_printf_float+0x2dc>)
 800749a:	f04f 32ff 	mov.w	r2, #4294967295
 800749e:	f7f9 fb2f 	bl	8000b00 <__aeabi_dcmple>
 80074a2:	bb48      	cbnz	r0, 80074f8 <_printf_float+0xd0>
 80074a4:	2200      	movs	r2, #0
 80074a6:	2300      	movs	r3, #0
 80074a8:	4640      	mov	r0, r8
 80074aa:	4649      	mov	r1, r9
 80074ac:	f7f9 fb1e 	bl	8000aec <__aeabi_dcmplt>
 80074b0:	b110      	cbz	r0, 80074b8 <_printf_float+0x90>
 80074b2:	232d      	movs	r3, #45	; 0x2d
 80074b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074b8:	4b93      	ldr	r3, [pc, #588]	; (8007708 <_printf_float+0x2e0>)
 80074ba:	4894      	ldr	r0, [pc, #592]	; (800770c <_printf_float+0x2e4>)
 80074bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074c0:	bf94      	ite	ls
 80074c2:	4698      	movls	r8, r3
 80074c4:	4680      	movhi	r8, r0
 80074c6:	2303      	movs	r3, #3
 80074c8:	6123      	str	r3, [r4, #16]
 80074ca:	9b05      	ldr	r3, [sp, #20]
 80074cc:	f023 0204 	bic.w	r2, r3, #4
 80074d0:	6022      	str	r2, [r4, #0]
 80074d2:	f04f 0900 	mov.w	r9, #0
 80074d6:	9700      	str	r7, [sp, #0]
 80074d8:	4633      	mov	r3, r6
 80074da:	aa0b      	add	r2, sp, #44	; 0x2c
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 f9d8 	bl	8007894 <_printf_common>
 80074e4:	3001      	adds	r0, #1
 80074e6:	f040 8090 	bne.w	800760a <_printf_float+0x1e2>
 80074ea:	f04f 30ff 	mov.w	r0, #4294967295
 80074ee:	b00d      	add	sp, #52	; 0x34
 80074f0:	ecbd 8b02 	vpop	{d8}
 80074f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f8:	4642      	mov	r2, r8
 80074fa:	464b      	mov	r3, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	4649      	mov	r1, r9
 8007500:	f7f9 fb1c 	bl	8000b3c <__aeabi_dcmpun>
 8007504:	b140      	cbz	r0, 8007518 <_printf_float+0xf0>
 8007506:	464b      	mov	r3, r9
 8007508:	2b00      	cmp	r3, #0
 800750a:	bfbc      	itt	lt
 800750c:	232d      	movlt	r3, #45	; 0x2d
 800750e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007512:	487f      	ldr	r0, [pc, #508]	; (8007710 <_printf_float+0x2e8>)
 8007514:	4b7f      	ldr	r3, [pc, #508]	; (8007714 <_printf_float+0x2ec>)
 8007516:	e7d1      	b.n	80074bc <_printf_float+0x94>
 8007518:	6863      	ldr	r3, [r4, #4]
 800751a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800751e:	9206      	str	r2, [sp, #24]
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	d13f      	bne.n	80075a4 <_printf_float+0x17c>
 8007524:	2306      	movs	r3, #6
 8007526:	6063      	str	r3, [r4, #4]
 8007528:	9b05      	ldr	r3, [sp, #20]
 800752a:	6861      	ldr	r1, [r4, #4]
 800752c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007530:	2300      	movs	r3, #0
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	ab0a      	add	r3, sp, #40	; 0x28
 8007536:	e9cd b301 	strd	fp, r3, [sp, #4]
 800753a:	ab09      	add	r3, sp, #36	; 0x24
 800753c:	ec49 8b10 	vmov	d0, r8, r9
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	6022      	str	r2, [r4, #0]
 8007544:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007548:	4628      	mov	r0, r5
 800754a:	f7ff fecd 	bl	80072e8 <__cvt>
 800754e:	9b06      	ldr	r3, [sp, #24]
 8007550:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007552:	2b47      	cmp	r3, #71	; 0x47
 8007554:	4680      	mov	r8, r0
 8007556:	d108      	bne.n	800756a <_printf_float+0x142>
 8007558:	1cc8      	adds	r0, r1, #3
 800755a:	db02      	blt.n	8007562 <_printf_float+0x13a>
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	4299      	cmp	r1, r3
 8007560:	dd41      	ble.n	80075e6 <_printf_float+0x1be>
 8007562:	f1ab 0b02 	sub.w	fp, fp, #2
 8007566:	fa5f fb8b 	uxtb.w	fp, fp
 800756a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800756e:	d820      	bhi.n	80075b2 <_printf_float+0x18a>
 8007570:	3901      	subs	r1, #1
 8007572:	465a      	mov	r2, fp
 8007574:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007578:	9109      	str	r1, [sp, #36]	; 0x24
 800757a:	f7ff ff17 	bl	80073ac <__exponent>
 800757e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007580:	1813      	adds	r3, r2, r0
 8007582:	2a01      	cmp	r2, #1
 8007584:	4681      	mov	r9, r0
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	dc02      	bgt.n	8007590 <_printf_float+0x168>
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	07d2      	lsls	r2, r2, #31
 800758e:	d501      	bpl.n	8007594 <_printf_float+0x16c>
 8007590:	3301      	adds	r3, #1
 8007592:	6123      	str	r3, [r4, #16]
 8007594:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007598:	2b00      	cmp	r3, #0
 800759a:	d09c      	beq.n	80074d6 <_printf_float+0xae>
 800759c:	232d      	movs	r3, #45	; 0x2d
 800759e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a2:	e798      	b.n	80074d6 <_printf_float+0xae>
 80075a4:	9a06      	ldr	r2, [sp, #24]
 80075a6:	2a47      	cmp	r2, #71	; 0x47
 80075a8:	d1be      	bne.n	8007528 <_printf_float+0x100>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1bc      	bne.n	8007528 <_printf_float+0x100>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e7b9      	b.n	8007526 <_printf_float+0xfe>
 80075b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075b6:	d118      	bne.n	80075ea <_printf_float+0x1c2>
 80075b8:	2900      	cmp	r1, #0
 80075ba:	6863      	ldr	r3, [r4, #4]
 80075bc:	dd0b      	ble.n	80075d6 <_printf_float+0x1ae>
 80075be:	6121      	str	r1, [r4, #16]
 80075c0:	b913      	cbnz	r3, 80075c8 <_printf_float+0x1a0>
 80075c2:	6822      	ldr	r2, [r4, #0]
 80075c4:	07d0      	lsls	r0, r2, #31
 80075c6:	d502      	bpl.n	80075ce <_printf_float+0x1a6>
 80075c8:	3301      	adds	r3, #1
 80075ca:	440b      	add	r3, r1
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80075d0:	f04f 0900 	mov.w	r9, #0
 80075d4:	e7de      	b.n	8007594 <_printf_float+0x16c>
 80075d6:	b913      	cbnz	r3, 80075de <_printf_float+0x1b6>
 80075d8:	6822      	ldr	r2, [r4, #0]
 80075da:	07d2      	lsls	r2, r2, #31
 80075dc:	d501      	bpl.n	80075e2 <_printf_float+0x1ba>
 80075de:	3302      	adds	r3, #2
 80075e0:	e7f4      	b.n	80075cc <_printf_float+0x1a4>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e7f2      	b.n	80075cc <_printf_float+0x1a4>
 80075e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ec:	4299      	cmp	r1, r3
 80075ee:	db05      	blt.n	80075fc <_printf_float+0x1d4>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	6121      	str	r1, [r4, #16]
 80075f4:	07d8      	lsls	r0, r3, #31
 80075f6:	d5ea      	bpl.n	80075ce <_printf_float+0x1a6>
 80075f8:	1c4b      	adds	r3, r1, #1
 80075fa:	e7e7      	b.n	80075cc <_printf_float+0x1a4>
 80075fc:	2900      	cmp	r1, #0
 80075fe:	bfd4      	ite	le
 8007600:	f1c1 0202 	rsble	r2, r1, #2
 8007604:	2201      	movgt	r2, #1
 8007606:	4413      	add	r3, r2
 8007608:	e7e0      	b.n	80075cc <_printf_float+0x1a4>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	055a      	lsls	r2, r3, #21
 800760e:	d407      	bmi.n	8007620 <_printf_float+0x1f8>
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	4642      	mov	r2, r8
 8007614:	4631      	mov	r1, r6
 8007616:	4628      	mov	r0, r5
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	d12c      	bne.n	8007678 <_printf_float+0x250>
 800761e:	e764      	b.n	80074ea <_printf_float+0xc2>
 8007620:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007624:	f240 80e0 	bls.w	80077e8 <_printf_float+0x3c0>
 8007628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800762c:	2200      	movs	r2, #0
 800762e:	2300      	movs	r3, #0
 8007630:	f7f9 fa52 	bl	8000ad8 <__aeabi_dcmpeq>
 8007634:	2800      	cmp	r0, #0
 8007636:	d034      	beq.n	80076a2 <_printf_float+0x27a>
 8007638:	4a37      	ldr	r2, [pc, #220]	; (8007718 <_printf_float+0x2f0>)
 800763a:	2301      	movs	r3, #1
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	f43f af51 	beq.w	80074ea <_printf_float+0xc2>
 8007648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800764c:	429a      	cmp	r2, r3
 800764e:	db02      	blt.n	8007656 <_printf_float+0x22e>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	07d8      	lsls	r0, r3, #31
 8007654:	d510      	bpl.n	8007678 <_printf_float+0x250>
 8007656:	ee18 3a10 	vmov	r3, s16
 800765a:	4652      	mov	r2, sl
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f af41 	beq.w	80074ea <_printf_float+0xc2>
 8007668:	f04f 0800 	mov.w	r8, #0
 800766c:	f104 091a 	add.w	r9, r4, #26
 8007670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007672:	3b01      	subs	r3, #1
 8007674:	4543      	cmp	r3, r8
 8007676:	dc09      	bgt.n	800768c <_printf_float+0x264>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	079b      	lsls	r3, r3, #30
 800767c:	f100 8105 	bmi.w	800788a <_printf_float+0x462>
 8007680:	68e0      	ldr	r0, [r4, #12]
 8007682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007684:	4298      	cmp	r0, r3
 8007686:	bfb8      	it	lt
 8007688:	4618      	movlt	r0, r3
 800768a:	e730      	b.n	80074ee <_printf_float+0xc6>
 800768c:	2301      	movs	r3, #1
 800768e:	464a      	mov	r2, r9
 8007690:	4631      	mov	r1, r6
 8007692:	4628      	mov	r0, r5
 8007694:	47b8      	blx	r7
 8007696:	3001      	adds	r0, #1
 8007698:	f43f af27 	beq.w	80074ea <_printf_float+0xc2>
 800769c:	f108 0801 	add.w	r8, r8, #1
 80076a0:	e7e6      	b.n	8007670 <_printf_float+0x248>
 80076a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	dc39      	bgt.n	800771c <_printf_float+0x2f4>
 80076a8:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <_printf_float+0x2f0>)
 80076aa:	2301      	movs	r3, #1
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	47b8      	blx	r7
 80076b2:	3001      	adds	r0, #1
 80076b4:	f43f af19 	beq.w	80074ea <_printf_float+0xc2>
 80076b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076bc:	4313      	orrs	r3, r2
 80076be:	d102      	bne.n	80076c6 <_printf_float+0x29e>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	07d9      	lsls	r1, r3, #31
 80076c4:	d5d8      	bpl.n	8007678 <_printf_float+0x250>
 80076c6:	ee18 3a10 	vmov	r3, s16
 80076ca:	4652      	mov	r2, sl
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	f43f af09 	beq.w	80074ea <_printf_float+0xc2>
 80076d8:	f04f 0900 	mov.w	r9, #0
 80076dc:	f104 0a1a 	add.w	sl, r4, #26
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	425b      	negs	r3, r3
 80076e4:	454b      	cmp	r3, r9
 80076e6:	dc01      	bgt.n	80076ec <_printf_float+0x2c4>
 80076e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ea:	e792      	b.n	8007612 <_printf_float+0x1ea>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4652      	mov	r2, sl
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	f43f aef7 	beq.w	80074ea <_printf_float+0xc2>
 80076fc:	f109 0901 	add.w	r9, r9, #1
 8007700:	e7ee      	b.n	80076e0 <_printf_float+0x2b8>
 8007702:	bf00      	nop
 8007704:	7fefffff 	.word	0x7fefffff
 8007708:	0800cdd5 	.word	0x0800cdd5
 800770c:	0800cdd9 	.word	0x0800cdd9
 8007710:	0800cde1 	.word	0x0800cde1
 8007714:	0800cddd 	.word	0x0800cddd
 8007718:	0800cde5 	.word	0x0800cde5
 800771c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800771e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007720:	429a      	cmp	r2, r3
 8007722:	bfa8      	it	ge
 8007724:	461a      	movge	r2, r3
 8007726:	2a00      	cmp	r2, #0
 8007728:	4691      	mov	r9, r2
 800772a:	dc37      	bgt.n	800779c <_printf_float+0x374>
 800772c:	f04f 0b00 	mov.w	fp, #0
 8007730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007734:	f104 021a 	add.w	r2, r4, #26
 8007738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800773a:	9305      	str	r3, [sp, #20]
 800773c:	eba3 0309 	sub.w	r3, r3, r9
 8007740:	455b      	cmp	r3, fp
 8007742:	dc33      	bgt.n	80077ac <_printf_float+0x384>
 8007744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007748:	429a      	cmp	r2, r3
 800774a:	db3b      	blt.n	80077c4 <_printf_float+0x39c>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	07da      	lsls	r2, r3, #31
 8007750:	d438      	bmi.n	80077c4 <_printf_float+0x39c>
 8007752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007754:	9a05      	ldr	r2, [sp, #20]
 8007756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007758:	1a9a      	subs	r2, r3, r2
 800775a:	eba3 0901 	sub.w	r9, r3, r1
 800775e:	4591      	cmp	r9, r2
 8007760:	bfa8      	it	ge
 8007762:	4691      	movge	r9, r2
 8007764:	f1b9 0f00 	cmp.w	r9, #0
 8007768:	dc35      	bgt.n	80077d6 <_printf_float+0x3ae>
 800776a:	f04f 0800 	mov.w	r8, #0
 800776e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007772:	f104 0a1a 	add.w	sl, r4, #26
 8007776:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	eba3 0309 	sub.w	r3, r3, r9
 8007780:	4543      	cmp	r3, r8
 8007782:	f77f af79 	ble.w	8007678 <_printf_float+0x250>
 8007786:	2301      	movs	r3, #1
 8007788:	4652      	mov	r2, sl
 800778a:	4631      	mov	r1, r6
 800778c:	4628      	mov	r0, r5
 800778e:	47b8      	blx	r7
 8007790:	3001      	adds	r0, #1
 8007792:	f43f aeaa 	beq.w	80074ea <_printf_float+0xc2>
 8007796:	f108 0801 	add.w	r8, r8, #1
 800779a:	e7ec      	b.n	8007776 <_printf_float+0x34e>
 800779c:	4613      	mov	r3, r2
 800779e:	4631      	mov	r1, r6
 80077a0:	4642      	mov	r2, r8
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	d1c0      	bne.n	800772c <_printf_float+0x304>
 80077aa:	e69e      	b.n	80074ea <_printf_float+0xc2>
 80077ac:	2301      	movs	r3, #1
 80077ae:	4631      	mov	r1, r6
 80077b0:	4628      	mov	r0, r5
 80077b2:	9205      	str	r2, [sp, #20]
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f ae97 	beq.w	80074ea <_printf_float+0xc2>
 80077bc:	9a05      	ldr	r2, [sp, #20]
 80077be:	f10b 0b01 	add.w	fp, fp, #1
 80077c2:	e7b9      	b.n	8007738 <_printf_float+0x310>
 80077c4:	ee18 3a10 	vmov	r3, s16
 80077c8:	4652      	mov	r2, sl
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	d1be      	bne.n	8007752 <_printf_float+0x32a>
 80077d4:	e689      	b.n	80074ea <_printf_float+0xc2>
 80077d6:	9a05      	ldr	r2, [sp, #20]
 80077d8:	464b      	mov	r3, r9
 80077da:	4442      	add	r2, r8
 80077dc:	4631      	mov	r1, r6
 80077de:	4628      	mov	r0, r5
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	d1c1      	bne.n	800776a <_printf_float+0x342>
 80077e6:	e680      	b.n	80074ea <_printf_float+0xc2>
 80077e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ea:	2a01      	cmp	r2, #1
 80077ec:	dc01      	bgt.n	80077f2 <_printf_float+0x3ca>
 80077ee:	07db      	lsls	r3, r3, #31
 80077f0:	d538      	bpl.n	8007864 <_printf_float+0x43c>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4642      	mov	r2, r8
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	f43f ae74 	beq.w	80074ea <_printf_float+0xc2>
 8007802:	ee18 3a10 	vmov	r3, s16
 8007806:	4652      	mov	r2, sl
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	f43f ae6b 	beq.w	80074ea <_printf_float+0xc2>
 8007814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007818:	2200      	movs	r2, #0
 800781a:	2300      	movs	r3, #0
 800781c:	f7f9 f95c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007820:	b9d8      	cbnz	r0, 800785a <_printf_float+0x432>
 8007822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007824:	f108 0201 	add.w	r2, r8, #1
 8007828:	3b01      	subs	r3, #1
 800782a:	4631      	mov	r1, r6
 800782c:	4628      	mov	r0, r5
 800782e:	47b8      	blx	r7
 8007830:	3001      	adds	r0, #1
 8007832:	d10e      	bne.n	8007852 <_printf_float+0x42a>
 8007834:	e659      	b.n	80074ea <_printf_float+0xc2>
 8007836:	2301      	movs	r3, #1
 8007838:	4652      	mov	r2, sl
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f ae52 	beq.w	80074ea <_printf_float+0xc2>
 8007846:	f108 0801 	add.w	r8, r8, #1
 800784a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784c:	3b01      	subs	r3, #1
 800784e:	4543      	cmp	r3, r8
 8007850:	dcf1      	bgt.n	8007836 <_printf_float+0x40e>
 8007852:	464b      	mov	r3, r9
 8007854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007858:	e6dc      	b.n	8007614 <_printf_float+0x1ec>
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	f104 0a1a 	add.w	sl, r4, #26
 8007862:	e7f2      	b.n	800784a <_printf_float+0x422>
 8007864:	2301      	movs	r3, #1
 8007866:	4642      	mov	r2, r8
 8007868:	e7df      	b.n	800782a <_printf_float+0x402>
 800786a:	2301      	movs	r3, #1
 800786c:	464a      	mov	r2, r9
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	f43f ae38 	beq.w	80074ea <_printf_float+0xc2>
 800787a:	f108 0801 	add.w	r8, r8, #1
 800787e:	68e3      	ldr	r3, [r4, #12]
 8007880:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007882:	1a5b      	subs	r3, r3, r1
 8007884:	4543      	cmp	r3, r8
 8007886:	dcf0      	bgt.n	800786a <_printf_float+0x442>
 8007888:	e6fa      	b.n	8007680 <_printf_float+0x258>
 800788a:	f04f 0800 	mov.w	r8, #0
 800788e:	f104 0919 	add.w	r9, r4, #25
 8007892:	e7f4      	b.n	800787e <_printf_float+0x456>

08007894 <_printf_common>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	4616      	mov	r6, r2
 800789a:	4699      	mov	r9, r3
 800789c:	688a      	ldr	r2, [r1, #8]
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bfb8      	it	lt
 80078a8:	4613      	movlt	r3, r2
 80078aa:	6033      	str	r3, [r6, #0]
 80078ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b0:	4607      	mov	r7, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	b10a      	cbz	r2, 80078ba <_printf_common+0x26>
 80078b6:	3301      	adds	r3, #1
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	0699      	lsls	r1, r3, #26
 80078be:	bf42      	ittt	mi
 80078c0:	6833      	ldrmi	r3, [r6, #0]
 80078c2:	3302      	addmi	r3, #2
 80078c4:	6033      	strmi	r3, [r6, #0]
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	f015 0506 	ands.w	r5, r5, #6
 80078cc:	d106      	bne.n	80078dc <_printf_common+0x48>
 80078ce:	f104 0a19 	add.w	sl, r4, #25
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	6832      	ldr	r2, [r6, #0]
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc26      	bgt.n	800792a <_printf_common+0x96>
 80078dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078e0:	1e13      	subs	r3, r2, #0
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	bf18      	it	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	0692      	lsls	r2, r2, #26
 80078ea:	d42b      	bmi.n	8007944 <_printf_common+0xb0>
 80078ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f0:	4649      	mov	r1, r9
 80078f2:	4638      	mov	r0, r7
 80078f4:	47c0      	blx	r8
 80078f6:	3001      	adds	r0, #1
 80078f8:	d01e      	beq.n	8007938 <_printf_common+0xa4>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	68e5      	ldr	r5, [r4, #12]
 80078fe:	6832      	ldr	r2, [r6, #0]
 8007900:	f003 0306 	and.w	r3, r3, #6
 8007904:	2b04      	cmp	r3, #4
 8007906:	bf08      	it	eq
 8007908:	1aad      	subeq	r5, r5, r2
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	6922      	ldr	r2, [r4, #16]
 800790e:	bf0c      	ite	eq
 8007910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007914:	2500      	movne	r5, #0
 8007916:	4293      	cmp	r3, r2
 8007918:	bfc4      	itt	gt
 800791a:	1a9b      	subgt	r3, r3, r2
 800791c:	18ed      	addgt	r5, r5, r3
 800791e:	2600      	movs	r6, #0
 8007920:	341a      	adds	r4, #26
 8007922:	42b5      	cmp	r5, r6
 8007924:	d11a      	bne.n	800795c <_printf_common+0xc8>
 8007926:	2000      	movs	r0, #0
 8007928:	e008      	b.n	800793c <_printf_common+0xa8>
 800792a:	2301      	movs	r3, #1
 800792c:	4652      	mov	r2, sl
 800792e:	4649      	mov	r1, r9
 8007930:	4638      	mov	r0, r7
 8007932:	47c0      	blx	r8
 8007934:	3001      	adds	r0, #1
 8007936:	d103      	bne.n	8007940 <_printf_common+0xac>
 8007938:	f04f 30ff 	mov.w	r0, #4294967295
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007940:	3501      	adds	r5, #1
 8007942:	e7c6      	b.n	80078d2 <_printf_common+0x3e>
 8007944:	18e1      	adds	r1, r4, r3
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	2030      	movs	r0, #48	; 0x30
 800794a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800794e:	4422      	add	r2, r4
 8007950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007958:	3302      	adds	r3, #2
 800795a:	e7c7      	b.n	80078ec <_printf_common+0x58>
 800795c:	2301      	movs	r3, #1
 800795e:	4622      	mov	r2, r4
 8007960:	4649      	mov	r1, r9
 8007962:	4638      	mov	r0, r7
 8007964:	47c0      	blx	r8
 8007966:	3001      	adds	r0, #1
 8007968:	d0e6      	beq.n	8007938 <_printf_common+0xa4>
 800796a:	3601      	adds	r6, #1
 800796c:	e7d9      	b.n	8007922 <_printf_common+0x8e>
	...

08007970 <_printf_i>:
 8007970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	7e0f      	ldrb	r7, [r1, #24]
 8007976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007978:	2f78      	cmp	r7, #120	; 0x78
 800797a:	4691      	mov	r9, r2
 800797c:	4680      	mov	r8, r0
 800797e:	460c      	mov	r4, r1
 8007980:	469a      	mov	sl, r3
 8007982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007986:	d807      	bhi.n	8007998 <_printf_i+0x28>
 8007988:	2f62      	cmp	r7, #98	; 0x62
 800798a:	d80a      	bhi.n	80079a2 <_printf_i+0x32>
 800798c:	2f00      	cmp	r7, #0
 800798e:	f000 80d8 	beq.w	8007b42 <_printf_i+0x1d2>
 8007992:	2f58      	cmp	r7, #88	; 0x58
 8007994:	f000 80a3 	beq.w	8007ade <_printf_i+0x16e>
 8007998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800799c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079a0:	e03a      	b.n	8007a18 <_printf_i+0xa8>
 80079a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079a6:	2b15      	cmp	r3, #21
 80079a8:	d8f6      	bhi.n	8007998 <_printf_i+0x28>
 80079aa:	a101      	add	r1, pc, #4	; (adr r1, 80079b0 <_printf_i+0x40>)
 80079ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a1d 	.word	0x08007a1d
 80079b8:	08007999 	.word	0x08007999
 80079bc:	08007999 	.word	0x08007999
 80079c0:	08007999 	.word	0x08007999
 80079c4:	08007999 	.word	0x08007999
 80079c8:	08007a1d 	.word	0x08007a1d
 80079cc:	08007999 	.word	0x08007999
 80079d0:	08007999 	.word	0x08007999
 80079d4:	08007999 	.word	0x08007999
 80079d8:	08007999 	.word	0x08007999
 80079dc:	08007b29 	.word	0x08007b29
 80079e0:	08007a4d 	.word	0x08007a4d
 80079e4:	08007b0b 	.word	0x08007b0b
 80079e8:	08007999 	.word	0x08007999
 80079ec:	08007999 	.word	0x08007999
 80079f0:	08007b4b 	.word	0x08007b4b
 80079f4:	08007999 	.word	0x08007999
 80079f8:	08007a4d 	.word	0x08007a4d
 80079fc:	08007999 	.word	0x08007999
 8007a00:	08007999 	.word	0x08007999
 8007a04:	08007b13 	.word	0x08007b13
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	1d1a      	adds	r2, r3, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	602a      	str	r2, [r5, #0]
 8007a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e0a3      	b.n	8007b64 <_printf_i+0x1f4>
 8007a1c:	6820      	ldr	r0, [r4, #0]
 8007a1e:	6829      	ldr	r1, [r5, #0]
 8007a20:	0606      	lsls	r6, r0, #24
 8007a22:	f101 0304 	add.w	r3, r1, #4
 8007a26:	d50a      	bpl.n	8007a3e <_printf_i+0xce>
 8007a28:	680e      	ldr	r6, [r1, #0]
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	da03      	bge.n	8007a38 <_printf_i+0xc8>
 8007a30:	232d      	movs	r3, #45	; 0x2d
 8007a32:	4276      	negs	r6, r6
 8007a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a38:	485e      	ldr	r0, [pc, #376]	; (8007bb4 <_printf_i+0x244>)
 8007a3a:	230a      	movs	r3, #10
 8007a3c:	e019      	b.n	8007a72 <_printf_i+0x102>
 8007a3e:	680e      	ldr	r6, [r1, #0]
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a46:	bf18      	it	ne
 8007a48:	b236      	sxthne	r6, r6
 8007a4a:	e7ef      	b.n	8007a2c <_printf_i+0xbc>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	6820      	ldr	r0, [r4, #0]
 8007a50:	1d19      	adds	r1, r3, #4
 8007a52:	6029      	str	r1, [r5, #0]
 8007a54:	0601      	lsls	r1, r0, #24
 8007a56:	d501      	bpl.n	8007a5c <_printf_i+0xec>
 8007a58:	681e      	ldr	r6, [r3, #0]
 8007a5a:	e002      	b.n	8007a62 <_printf_i+0xf2>
 8007a5c:	0646      	lsls	r6, r0, #25
 8007a5e:	d5fb      	bpl.n	8007a58 <_printf_i+0xe8>
 8007a60:	881e      	ldrh	r6, [r3, #0]
 8007a62:	4854      	ldr	r0, [pc, #336]	; (8007bb4 <_printf_i+0x244>)
 8007a64:	2f6f      	cmp	r7, #111	; 0x6f
 8007a66:	bf0c      	ite	eq
 8007a68:	2308      	moveq	r3, #8
 8007a6a:	230a      	movne	r3, #10
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a72:	6865      	ldr	r5, [r4, #4]
 8007a74:	60a5      	str	r5, [r4, #8]
 8007a76:	2d00      	cmp	r5, #0
 8007a78:	bfa2      	ittt	ge
 8007a7a:	6821      	ldrge	r1, [r4, #0]
 8007a7c:	f021 0104 	bicge.w	r1, r1, #4
 8007a80:	6021      	strge	r1, [r4, #0]
 8007a82:	b90e      	cbnz	r6, 8007a88 <_printf_i+0x118>
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	d04d      	beq.n	8007b24 <_printf_i+0x1b4>
 8007a88:	4615      	mov	r5, r2
 8007a8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a8e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a92:	5dc7      	ldrb	r7, [r0, r7]
 8007a94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a98:	4637      	mov	r7, r6
 8007a9a:	42bb      	cmp	r3, r7
 8007a9c:	460e      	mov	r6, r1
 8007a9e:	d9f4      	bls.n	8007a8a <_printf_i+0x11a>
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d10b      	bne.n	8007abc <_printf_i+0x14c>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	07de      	lsls	r6, r3, #31
 8007aa8:	d508      	bpl.n	8007abc <_printf_i+0x14c>
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	6861      	ldr	r1, [r4, #4]
 8007aae:	4299      	cmp	r1, r3
 8007ab0:	bfde      	ittt	le
 8007ab2:	2330      	movle	r3, #48	; 0x30
 8007ab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ab8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007abc:	1b52      	subs	r2, r2, r5
 8007abe:	6122      	str	r2, [r4, #16]
 8007ac0:	f8cd a000 	str.w	sl, [sp]
 8007ac4:	464b      	mov	r3, r9
 8007ac6:	aa03      	add	r2, sp, #12
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4640      	mov	r0, r8
 8007acc:	f7ff fee2 	bl	8007894 <_printf_common>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d14c      	bne.n	8007b6e <_printf_i+0x1fe>
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	b004      	add	sp, #16
 8007ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ade:	4835      	ldr	r0, [pc, #212]	; (8007bb4 <_printf_i+0x244>)
 8007ae0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ae4:	6829      	ldr	r1, [r5, #0]
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007aec:	6029      	str	r1, [r5, #0]
 8007aee:	061d      	lsls	r5, r3, #24
 8007af0:	d514      	bpl.n	8007b1c <_printf_i+0x1ac>
 8007af2:	07df      	lsls	r7, r3, #31
 8007af4:	bf44      	itt	mi
 8007af6:	f043 0320 	orrmi.w	r3, r3, #32
 8007afa:	6023      	strmi	r3, [r4, #0]
 8007afc:	b91e      	cbnz	r6, 8007b06 <_printf_i+0x196>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	f023 0320 	bic.w	r3, r3, #32
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	2310      	movs	r3, #16
 8007b08:	e7b0      	b.n	8007a6c <_printf_i+0xfc>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	f043 0320 	orr.w	r3, r3, #32
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	2378      	movs	r3, #120	; 0x78
 8007b14:	4828      	ldr	r0, [pc, #160]	; (8007bb8 <_printf_i+0x248>)
 8007b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b1a:	e7e3      	b.n	8007ae4 <_printf_i+0x174>
 8007b1c:	0659      	lsls	r1, r3, #25
 8007b1e:	bf48      	it	mi
 8007b20:	b2b6      	uxthmi	r6, r6
 8007b22:	e7e6      	b.n	8007af2 <_printf_i+0x182>
 8007b24:	4615      	mov	r5, r2
 8007b26:	e7bb      	b.n	8007aa0 <_printf_i+0x130>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	6826      	ldr	r6, [r4, #0]
 8007b2c:	6961      	ldr	r1, [r4, #20]
 8007b2e:	1d18      	adds	r0, r3, #4
 8007b30:	6028      	str	r0, [r5, #0]
 8007b32:	0635      	lsls	r5, r6, #24
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	d501      	bpl.n	8007b3c <_printf_i+0x1cc>
 8007b38:	6019      	str	r1, [r3, #0]
 8007b3a:	e002      	b.n	8007b42 <_printf_i+0x1d2>
 8007b3c:	0670      	lsls	r0, r6, #25
 8007b3e:	d5fb      	bpl.n	8007b38 <_printf_i+0x1c8>
 8007b40:	8019      	strh	r1, [r3, #0]
 8007b42:	2300      	movs	r3, #0
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	4615      	mov	r5, r2
 8007b48:	e7ba      	b.n	8007ac0 <_printf_i+0x150>
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	602a      	str	r2, [r5, #0]
 8007b50:	681d      	ldr	r5, [r3, #0]
 8007b52:	6862      	ldr	r2, [r4, #4]
 8007b54:	2100      	movs	r1, #0
 8007b56:	4628      	mov	r0, r5
 8007b58:	f7f8 fb4a 	bl	80001f0 <memchr>
 8007b5c:	b108      	cbz	r0, 8007b62 <_printf_i+0x1f2>
 8007b5e:	1b40      	subs	r0, r0, r5
 8007b60:	6060      	str	r0, [r4, #4]
 8007b62:	6863      	ldr	r3, [r4, #4]
 8007b64:	6123      	str	r3, [r4, #16]
 8007b66:	2300      	movs	r3, #0
 8007b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b6c:	e7a8      	b.n	8007ac0 <_printf_i+0x150>
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	462a      	mov	r2, r5
 8007b72:	4649      	mov	r1, r9
 8007b74:	4640      	mov	r0, r8
 8007b76:	47d0      	blx	sl
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d0ab      	beq.n	8007ad4 <_printf_i+0x164>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	079b      	lsls	r3, r3, #30
 8007b80:	d413      	bmi.n	8007baa <_printf_i+0x23a>
 8007b82:	68e0      	ldr	r0, [r4, #12]
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	4298      	cmp	r0, r3
 8007b88:	bfb8      	it	lt
 8007b8a:	4618      	movlt	r0, r3
 8007b8c:	e7a4      	b.n	8007ad8 <_printf_i+0x168>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4632      	mov	r2, r6
 8007b92:	4649      	mov	r1, r9
 8007b94:	4640      	mov	r0, r8
 8007b96:	47d0      	blx	sl
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d09b      	beq.n	8007ad4 <_printf_i+0x164>
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	68e3      	ldr	r3, [r4, #12]
 8007ba0:	9903      	ldr	r1, [sp, #12]
 8007ba2:	1a5b      	subs	r3, r3, r1
 8007ba4:	42ab      	cmp	r3, r5
 8007ba6:	dcf2      	bgt.n	8007b8e <_printf_i+0x21e>
 8007ba8:	e7eb      	b.n	8007b82 <_printf_i+0x212>
 8007baa:	2500      	movs	r5, #0
 8007bac:	f104 0619 	add.w	r6, r4, #25
 8007bb0:	e7f5      	b.n	8007b9e <_printf_i+0x22e>
 8007bb2:	bf00      	nop
 8007bb4:	0800cde7 	.word	0x0800cde7
 8007bb8:	0800cdf8 	.word	0x0800cdf8

08007bbc <_scanf_float>:
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	b087      	sub	sp, #28
 8007bc2:	4617      	mov	r7, r2
 8007bc4:	9303      	str	r3, [sp, #12]
 8007bc6:	688b      	ldr	r3, [r1, #8]
 8007bc8:	1e5a      	subs	r2, r3, #1
 8007bca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007bce:	bf83      	ittte	hi
 8007bd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007bd4:	195b      	addhi	r3, r3, r5
 8007bd6:	9302      	strhi	r3, [sp, #8]
 8007bd8:	2300      	movls	r3, #0
 8007bda:	bf86      	itte	hi
 8007bdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007be0:	608b      	strhi	r3, [r1, #8]
 8007be2:	9302      	strls	r3, [sp, #8]
 8007be4:	680b      	ldr	r3, [r1, #0]
 8007be6:	468b      	mov	fp, r1
 8007be8:	2500      	movs	r5, #0
 8007bea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007bee:	f84b 3b1c 	str.w	r3, [fp], #28
 8007bf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007bf6:	4680      	mov	r8, r0
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	465e      	mov	r6, fp
 8007bfc:	46aa      	mov	sl, r5
 8007bfe:	46a9      	mov	r9, r5
 8007c00:	9501      	str	r5, [sp, #4]
 8007c02:	68a2      	ldr	r2, [r4, #8]
 8007c04:	b152      	cbz	r2, 8007c1c <_scanf_float+0x60>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b4e      	cmp	r3, #78	; 0x4e
 8007c0c:	d864      	bhi.n	8007cd8 <_scanf_float+0x11c>
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	d83c      	bhi.n	8007c8c <_scanf_float+0xd0>
 8007c12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007c16:	b2c8      	uxtb	r0, r1
 8007c18:	280e      	cmp	r0, #14
 8007c1a:	d93a      	bls.n	8007c92 <_scanf_float+0xd6>
 8007c1c:	f1b9 0f00 	cmp.w	r9, #0
 8007c20:	d003      	beq.n	8007c2a <_scanf_float+0x6e>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c2e:	f1ba 0f01 	cmp.w	sl, #1
 8007c32:	f200 8113 	bhi.w	8007e5c <_scanf_float+0x2a0>
 8007c36:	455e      	cmp	r6, fp
 8007c38:	f200 8105 	bhi.w	8007e46 <_scanf_float+0x28a>
 8007c3c:	2501      	movs	r5, #1
 8007c3e:	4628      	mov	r0, r5
 8007c40:	b007      	add	sp, #28
 8007c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007c4a:	2a0d      	cmp	r2, #13
 8007c4c:	d8e6      	bhi.n	8007c1c <_scanf_float+0x60>
 8007c4e:	a101      	add	r1, pc, #4	; (adr r1, 8007c54 <_scanf_float+0x98>)
 8007c50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c54:	08007d93 	.word	0x08007d93
 8007c58:	08007c1d 	.word	0x08007c1d
 8007c5c:	08007c1d 	.word	0x08007c1d
 8007c60:	08007c1d 	.word	0x08007c1d
 8007c64:	08007df3 	.word	0x08007df3
 8007c68:	08007dcb 	.word	0x08007dcb
 8007c6c:	08007c1d 	.word	0x08007c1d
 8007c70:	08007c1d 	.word	0x08007c1d
 8007c74:	08007da1 	.word	0x08007da1
 8007c78:	08007c1d 	.word	0x08007c1d
 8007c7c:	08007c1d 	.word	0x08007c1d
 8007c80:	08007c1d 	.word	0x08007c1d
 8007c84:	08007c1d 	.word	0x08007c1d
 8007c88:	08007d59 	.word	0x08007d59
 8007c8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007c90:	e7db      	b.n	8007c4a <_scanf_float+0x8e>
 8007c92:	290e      	cmp	r1, #14
 8007c94:	d8c2      	bhi.n	8007c1c <_scanf_float+0x60>
 8007c96:	a001      	add	r0, pc, #4	; (adr r0, 8007c9c <_scanf_float+0xe0>)
 8007c98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c9c:	08007d4b 	.word	0x08007d4b
 8007ca0:	08007c1d 	.word	0x08007c1d
 8007ca4:	08007d4b 	.word	0x08007d4b
 8007ca8:	08007ddf 	.word	0x08007ddf
 8007cac:	08007c1d 	.word	0x08007c1d
 8007cb0:	08007cf9 	.word	0x08007cf9
 8007cb4:	08007d35 	.word	0x08007d35
 8007cb8:	08007d35 	.word	0x08007d35
 8007cbc:	08007d35 	.word	0x08007d35
 8007cc0:	08007d35 	.word	0x08007d35
 8007cc4:	08007d35 	.word	0x08007d35
 8007cc8:	08007d35 	.word	0x08007d35
 8007ccc:	08007d35 	.word	0x08007d35
 8007cd0:	08007d35 	.word	0x08007d35
 8007cd4:	08007d35 	.word	0x08007d35
 8007cd8:	2b6e      	cmp	r3, #110	; 0x6e
 8007cda:	d809      	bhi.n	8007cf0 <_scanf_float+0x134>
 8007cdc:	2b60      	cmp	r3, #96	; 0x60
 8007cde:	d8b2      	bhi.n	8007c46 <_scanf_float+0x8a>
 8007ce0:	2b54      	cmp	r3, #84	; 0x54
 8007ce2:	d077      	beq.n	8007dd4 <_scanf_float+0x218>
 8007ce4:	2b59      	cmp	r3, #89	; 0x59
 8007ce6:	d199      	bne.n	8007c1c <_scanf_float+0x60>
 8007ce8:	2d07      	cmp	r5, #7
 8007cea:	d197      	bne.n	8007c1c <_scanf_float+0x60>
 8007cec:	2508      	movs	r5, #8
 8007cee:	e029      	b.n	8007d44 <_scanf_float+0x188>
 8007cf0:	2b74      	cmp	r3, #116	; 0x74
 8007cf2:	d06f      	beq.n	8007dd4 <_scanf_float+0x218>
 8007cf4:	2b79      	cmp	r3, #121	; 0x79
 8007cf6:	e7f6      	b.n	8007ce6 <_scanf_float+0x12a>
 8007cf8:	6821      	ldr	r1, [r4, #0]
 8007cfa:	05c8      	lsls	r0, r1, #23
 8007cfc:	d51a      	bpl.n	8007d34 <_scanf_float+0x178>
 8007cfe:	9b02      	ldr	r3, [sp, #8]
 8007d00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007d04:	6021      	str	r1, [r4, #0]
 8007d06:	f109 0901 	add.w	r9, r9, #1
 8007d0a:	b11b      	cbz	r3, 8007d14 <_scanf_float+0x158>
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	3201      	adds	r2, #1
 8007d10:	9302      	str	r3, [sp, #8]
 8007d12:	60a2      	str	r2, [r4, #8]
 8007d14:	68a3      	ldr	r3, [r4, #8]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	60a3      	str	r3, [r4, #8]
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	6123      	str	r3, [r4, #16]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	f340 8084 	ble.w	8007e34 <_scanf_float+0x278>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	603b      	str	r3, [r7, #0]
 8007d32:	e766      	b.n	8007c02 <_scanf_float+0x46>
 8007d34:	eb1a 0f05 	cmn.w	sl, r5
 8007d38:	f47f af70 	bne.w	8007c1c <_scanf_float+0x60>
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007d42:	6022      	str	r2, [r4, #0]
 8007d44:	f806 3b01 	strb.w	r3, [r6], #1
 8007d48:	e7e4      	b.n	8007d14 <_scanf_float+0x158>
 8007d4a:	6822      	ldr	r2, [r4, #0]
 8007d4c:	0610      	lsls	r0, r2, #24
 8007d4e:	f57f af65 	bpl.w	8007c1c <_scanf_float+0x60>
 8007d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d56:	e7f4      	b.n	8007d42 <_scanf_float+0x186>
 8007d58:	f1ba 0f00 	cmp.w	sl, #0
 8007d5c:	d10e      	bne.n	8007d7c <_scanf_float+0x1c0>
 8007d5e:	f1b9 0f00 	cmp.w	r9, #0
 8007d62:	d10e      	bne.n	8007d82 <_scanf_float+0x1c6>
 8007d64:	6822      	ldr	r2, [r4, #0]
 8007d66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007d6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007d6e:	d108      	bne.n	8007d82 <_scanf_float+0x1c6>
 8007d70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d74:	6022      	str	r2, [r4, #0]
 8007d76:	f04f 0a01 	mov.w	sl, #1
 8007d7a:	e7e3      	b.n	8007d44 <_scanf_float+0x188>
 8007d7c:	f1ba 0f02 	cmp.w	sl, #2
 8007d80:	d055      	beq.n	8007e2e <_scanf_float+0x272>
 8007d82:	2d01      	cmp	r5, #1
 8007d84:	d002      	beq.n	8007d8c <_scanf_float+0x1d0>
 8007d86:	2d04      	cmp	r5, #4
 8007d88:	f47f af48 	bne.w	8007c1c <_scanf_float+0x60>
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	b2ed      	uxtb	r5, r5
 8007d90:	e7d8      	b.n	8007d44 <_scanf_float+0x188>
 8007d92:	f1ba 0f01 	cmp.w	sl, #1
 8007d96:	f47f af41 	bne.w	8007c1c <_scanf_float+0x60>
 8007d9a:	f04f 0a02 	mov.w	sl, #2
 8007d9e:	e7d1      	b.n	8007d44 <_scanf_float+0x188>
 8007da0:	b97d      	cbnz	r5, 8007dc2 <_scanf_float+0x206>
 8007da2:	f1b9 0f00 	cmp.w	r9, #0
 8007da6:	f47f af3c 	bne.w	8007c22 <_scanf_float+0x66>
 8007daa:	6822      	ldr	r2, [r4, #0]
 8007dac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007db0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007db4:	f47f af39 	bne.w	8007c2a <_scanf_float+0x6e>
 8007db8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007dbc:	6022      	str	r2, [r4, #0]
 8007dbe:	2501      	movs	r5, #1
 8007dc0:	e7c0      	b.n	8007d44 <_scanf_float+0x188>
 8007dc2:	2d03      	cmp	r5, #3
 8007dc4:	d0e2      	beq.n	8007d8c <_scanf_float+0x1d0>
 8007dc6:	2d05      	cmp	r5, #5
 8007dc8:	e7de      	b.n	8007d88 <_scanf_float+0x1cc>
 8007dca:	2d02      	cmp	r5, #2
 8007dcc:	f47f af26 	bne.w	8007c1c <_scanf_float+0x60>
 8007dd0:	2503      	movs	r5, #3
 8007dd2:	e7b7      	b.n	8007d44 <_scanf_float+0x188>
 8007dd4:	2d06      	cmp	r5, #6
 8007dd6:	f47f af21 	bne.w	8007c1c <_scanf_float+0x60>
 8007dda:	2507      	movs	r5, #7
 8007ddc:	e7b2      	b.n	8007d44 <_scanf_float+0x188>
 8007dde:	6822      	ldr	r2, [r4, #0]
 8007de0:	0591      	lsls	r1, r2, #22
 8007de2:	f57f af1b 	bpl.w	8007c1c <_scanf_float+0x60>
 8007de6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007dea:	6022      	str	r2, [r4, #0]
 8007dec:	f8cd 9004 	str.w	r9, [sp, #4]
 8007df0:	e7a8      	b.n	8007d44 <_scanf_float+0x188>
 8007df2:	6822      	ldr	r2, [r4, #0]
 8007df4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007df8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007dfc:	d006      	beq.n	8007e0c <_scanf_float+0x250>
 8007dfe:	0550      	lsls	r0, r2, #21
 8007e00:	f57f af0c 	bpl.w	8007c1c <_scanf_float+0x60>
 8007e04:	f1b9 0f00 	cmp.w	r9, #0
 8007e08:	f43f af0f 	beq.w	8007c2a <_scanf_float+0x6e>
 8007e0c:	0591      	lsls	r1, r2, #22
 8007e0e:	bf58      	it	pl
 8007e10:	9901      	ldrpl	r1, [sp, #4]
 8007e12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e16:	bf58      	it	pl
 8007e18:	eba9 0101 	subpl.w	r1, r9, r1
 8007e1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007e20:	bf58      	it	pl
 8007e22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e26:	6022      	str	r2, [r4, #0]
 8007e28:	f04f 0900 	mov.w	r9, #0
 8007e2c:	e78a      	b.n	8007d44 <_scanf_float+0x188>
 8007e2e:	f04f 0a03 	mov.w	sl, #3
 8007e32:	e787      	b.n	8007d44 <_scanf_float+0x188>
 8007e34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	4798      	blx	r3
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f43f aedf 	beq.w	8007c02 <_scanf_float+0x46>
 8007e44:	e6ea      	b.n	8007c1c <_scanf_float+0x60>
 8007e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e4e:	463a      	mov	r2, r7
 8007e50:	4640      	mov	r0, r8
 8007e52:	4798      	blx	r3
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	6123      	str	r3, [r4, #16]
 8007e5a:	e6ec      	b.n	8007c36 <_scanf_float+0x7a>
 8007e5c:	1e6b      	subs	r3, r5, #1
 8007e5e:	2b06      	cmp	r3, #6
 8007e60:	d825      	bhi.n	8007eae <_scanf_float+0x2f2>
 8007e62:	2d02      	cmp	r5, #2
 8007e64:	d836      	bhi.n	8007ed4 <_scanf_float+0x318>
 8007e66:	455e      	cmp	r6, fp
 8007e68:	f67f aee8 	bls.w	8007c3c <_scanf_float+0x80>
 8007e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e74:	463a      	mov	r2, r7
 8007e76:	4640      	mov	r0, r8
 8007e78:	4798      	blx	r3
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	6123      	str	r3, [r4, #16]
 8007e80:	e7f1      	b.n	8007e66 <_scanf_float+0x2aa>
 8007e82:	9802      	ldr	r0, [sp, #8]
 8007e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007e8c:	9002      	str	r0, [sp, #8]
 8007e8e:	463a      	mov	r2, r7
 8007e90:	4640      	mov	r0, r8
 8007e92:	4798      	blx	r3
 8007e94:	6923      	ldr	r3, [r4, #16]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	6123      	str	r3, [r4, #16]
 8007e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e9e:	fa5f fa8a 	uxtb.w	sl, sl
 8007ea2:	f1ba 0f02 	cmp.w	sl, #2
 8007ea6:	d1ec      	bne.n	8007e82 <_scanf_float+0x2c6>
 8007ea8:	3d03      	subs	r5, #3
 8007eaa:	b2ed      	uxtb	r5, r5
 8007eac:	1b76      	subs	r6, r6, r5
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	05da      	lsls	r2, r3, #23
 8007eb2:	d52f      	bpl.n	8007f14 <_scanf_float+0x358>
 8007eb4:	055b      	lsls	r3, r3, #21
 8007eb6:	d510      	bpl.n	8007eda <_scanf_float+0x31e>
 8007eb8:	455e      	cmp	r6, fp
 8007eba:	f67f aebf 	bls.w	8007c3c <_scanf_float+0x80>
 8007ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ec6:	463a      	mov	r2, r7
 8007ec8:	4640      	mov	r0, r8
 8007eca:	4798      	blx	r3
 8007ecc:	6923      	ldr	r3, [r4, #16]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	6123      	str	r3, [r4, #16]
 8007ed2:	e7f1      	b.n	8007eb8 <_scanf_float+0x2fc>
 8007ed4:	46aa      	mov	sl, r5
 8007ed6:	9602      	str	r6, [sp, #8]
 8007ed8:	e7df      	b.n	8007e9a <_scanf_float+0x2de>
 8007eda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	2965      	cmp	r1, #101	; 0x65
 8007ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ee6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007eea:	6123      	str	r3, [r4, #16]
 8007eec:	d00c      	beq.n	8007f08 <_scanf_float+0x34c>
 8007eee:	2945      	cmp	r1, #69	; 0x45
 8007ef0:	d00a      	beq.n	8007f08 <_scanf_float+0x34c>
 8007ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ef6:	463a      	mov	r2, r7
 8007ef8:	4640      	mov	r0, r8
 8007efa:	4798      	blx	r3
 8007efc:	6923      	ldr	r3, [r4, #16]
 8007efe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	1eb5      	subs	r5, r6, #2
 8007f06:	6123      	str	r3, [r4, #16]
 8007f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f0c:	463a      	mov	r2, r7
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4798      	blx	r3
 8007f12:	462e      	mov	r6, r5
 8007f14:	6825      	ldr	r5, [r4, #0]
 8007f16:	f015 0510 	ands.w	r5, r5, #16
 8007f1a:	d159      	bne.n	8007fd0 <_scanf_float+0x414>
 8007f1c:	7035      	strb	r5, [r6, #0]
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f28:	d11b      	bne.n	8007f62 <_scanf_float+0x3a6>
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	454b      	cmp	r3, r9
 8007f2e:	eba3 0209 	sub.w	r2, r3, r9
 8007f32:	d123      	bne.n	8007f7c <_scanf_float+0x3c0>
 8007f34:	2200      	movs	r2, #0
 8007f36:	4659      	mov	r1, fp
 8007f38:	4640      	mov	r0, r8
 8007f3a:	f000 fe97 	bl	8008c6c <_strtod_r>
 8007f3e:	6822      	ldr	r2, [r4, #0]
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	f012 0f02 	tst.w	r2, #2
 8007f46:	ec57 6b10 	vmov	r6, r7, d0
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	d021      	beq.n	8007f92 <_scanf_float+0x3d6>
 8007f4e:	9903      	ldr	r1, [sp, #12]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	600a      	str	r2, [r1, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	e9c3 6700 	strd	r6, r7, [r3]
 8007f5a:	68e3      	ldr	r3, [r4, #12]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	60e3      	str	r3, [r4, #12]
 8007f60:	e66d      	b.n	8007c3e <_scanf_float+0x82>
 8007f62:	9b04      	ldr	r3, [sp, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0e5      	beq.n	8007f34 <_scanf_float+0x378>
 8007f68:	9905      	ldr	r1, [sp, #20]
 8007f6a:	230a      	movs	r3, #10
 8007f6c:	462a      	mov	r2, r5
 8007f6e:	3101      	adds	r1, #1
 8007f70:	4640      	mov	r0, r8
 8007f72:	f000 ff03 	bl	8008d7c <_strtol_r>
 8007f76:	9b04      	ldr	r3, [sp, #16]
 8007f78:	9e05      	ldr	r6, [sp, #20]
 8007f7a:	1ac2      	subs	r2, r0, r3
 8007f7c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007f80:	429e      	cmp	r6, r3
 8007f82:	bf28      	it	cs
 8007f84:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007f88:	4912      	ldr	r1, [pc, #72]	; (8007fd4 <_scanf_float+0x418>)
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f000 f82c 	bl	8007fe8 <siprintf>
 8007f90:	e7d0      	b.n	8007f34 <_scanf_float+0x378>
 8007f92:	9903      	ldr	r1, [sp, #12]
 8007f94:	f012 0f04 	tst.w	r2, #4
 8007f98:	f103 0204 	add.w	r2, r3, #4
 8007f9c:	600a      	str	r2, [r1, #0]
 8007f9e:	d1d9      	bne.n	8007f54 <_scanf_float+0x398>
 8007fa0:	f8d3 8000 	ldr.w	r8, [r3]
 8007fa4:	ee10 2a10 	vmov	r2, s0
 8007fa8:	ee10 0a10 	vmov	r0, s0
 8007fac:	463b      	mov	r3, r7
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 fdc4 	bl	8000b3c <__aeabi_dcmpun>
 8007fb4:	b128      	cbz	r0, 8007fc2 <_scanf_float+0x406>
 8007fb6:	4808      	ldr	r0, [pc, #32]	; (8007fd8 <_scanf_float+0x41c>)
 8007fb8:	f000 f810 	bl	8007fdc <nanf>
 8007fbc:	ed88 0a00 	vstr	s0, [r8]
 8007fc0:	e7cb      	b.n	8007f5a <_scanf_float+0x39e>
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	f7f8 fe17 	bl	8000bf8 <__aeabi_d2f>
 8007fca:	f8c8 0000 	str.w	r0, [r8]
 8007fce:	e7c4      	b.n	8007f5a <_scanf_float+0x39e>
 8007fd0:	2500      	movs	r5, #0
 8007fd2:	e634      	b.n	8007c3e <_scanf_float+0x82>
 8007fd4:	0800ce09 	.word	0x0800ce09
 8007fd8:	0800cdbf 	.word	0x0800cdbf

08007fdc <nanf>:
 8007fdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fe4 <nanf+0x8>
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	7fc00000 	.word	0x7fc00000

08007fe8 <siprintf>:
 8007fe8:	b40e      	push	{r1, r2, r3}
 8007fea:	b500      	push	{lr}
 8007fec:	b09c      	sub	sp, #112	; 0x70
 8007fee:	ab1d      	add	r3, sp, #116	; 0x74
 8007ff0:	9002      	str	r0, [sp, #8]
 8007ff2:	9006      	str	r0, [sp, #24]
 8007ff4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ff8:	4809      	ldr	r0, [pc, #36]	; (8008020 <siprintf+0x38>)
 8007ffa:	9107      	str	r1, [sp, #28]
 8007ffc:	9104      	str	r1, [sp, #16]
 8007ffe:	4909      	ldr	r1, [pc, #36]	; (8008024 <siprintf+0x3c>)
 8008000:	f853 2b04 	ldr.w	r2, [r3], #4
 8008004:	9105      	str	r1, [sp, #20]
 8008006:	6800      	ldr	r0, [r0, #0]
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	a902      	add	r1, sp, #8
 800800c:	f003 fa10 	bl	800b430 <_svfiprintf_r>
 8008010:	9b02      	ldr	r3, [sp, #8]
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
 8008016:	b01c      	add	sp, #112	; 0x70
 8008018:	f85d eb04 	ldr.w	lr, [sp], #4
 800801c:	b003      	add	sp, #12
 800801e:	4770      	bx	lr
 8008020:	20000014 	.word	0x20000014
 8008024:	ffff0208 	.word	0xffff0208

08008028 <sulp>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	4604      	mov	r4, r0
 800802c:	460d      	mov	r5, r1
 800802e:	ec45 4b10 	vmov	d0, r4, r5
 8008032:	4616      	mov	r6, r2
 8008034:	f002 ff2c 	bl	800ae90 <__ulp>
 8008038:	ec51 0b10 	vmov	r0, r1, d0
 800803c:	b17e      	cbz	r6, 800805e <sulp+0x36>
 800803e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008042:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008046:	2b00      	cmp	r3, #0
 8008048:	dd09      	ble.n	800805e <sulp+0x36>
 800804a:	051b      	lsls	r3, r3, #20
 800804c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008050:	2400      	movs	r4, #0
 8008052:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008056:	4622      	mov	r2, r4
 8008058:	462b      	mov	r3, r5
 800805a:	f7f8 fad5 	bl	8000608 <__aeabi_dmul>
 800805e:	bd70      	pop	{r4, r5, r6, pc}

08008060 <_strtod_l>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	ed2d 8b02 	vpush	{d8}
 8008068:	b09d      	sub	sp, #116	; 0x74
 800806a:	461f      	mov	r7, r3
 800806c:	2300      	movs	r3, #0
 800806e:	9318      	str	r3, [sp, #96]	; 0x60
 8008070:	4ba2      	ldr	r3, [pc, #648]	; (80082fc <_strtod_l+0x29c>)
 8008072:	9213      	str	r2, [sp, #76]	; 0x4c
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	9305      	str	r3, [sp, #20]
 8008078:	4604      	mov	r4, r0
 800807a:	4618      	mov	r0, r3
 800807c:	4688      	mov	r8, r1
 800807e:	f7f8 f8af 	bl	80001e0 <strlen>
 8008082:	f04f 0a00 	mov.w	sl, #0
 8008086:	4605      	mov	r5, r0
 8008088:	f04f 0b00 	mov.w	fp, #0
 800808c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008092:	781a      	ldrb	r2, [r3, #0]
 8008094:	2a2b      	cmp	r2, #43	; 0x2b
 8008096:	d04e      	beq.n	8008136 <_strtod_l+0xd6>
 8008098:	d83b      	bhi.n	8008112 <_strtod_l+0xb2>
 800809a:	2a0d      	cmp	r2, #13
 800809c:	d834      	bhi.n	8008108 <_strtod_l+0xa8>
 800809e:	2a08      	cmp	r2, #8
 80080a0:	d834      	bhi.n	800810c <_strtod_l+0xac>
 80080a2:	2a00      	cmp	r2, #0
 80080a4:	d03e      	beq.n	8008124 <_strtod_l+0xc4>
 80080a6:	2300      	movs	r3, #0
 80080a8:	930a      	str	r3, [sp, #40]	; 0x28
 80080aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80080ac:	7833      	ldrb	r3, [r6, #0]
 80080ae:	2b30      	cmp	r3, #48	; 0x30
 80080b0:	f040 80b0 	bne.w	8008214 <_strtod_l+0x1b4>
 80080b4:	7873      	ldrb	r3, [r6, #1]
 80080b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080ba:	2b58      	cmp	r3, #88	; 0x58
 80080bc:	d168      	bne.n	8008190 <_strtod_l+0x130>
 80080be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	ab18      	add	r3, sp, #96	; 0x60
 80080c4:	9702      	str	r7, [sp, #8]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	4a8d      	ldr	r2, [pc, #564]	; (8008300 <_strtod_l+0x2a0>)
 80080ca:	ab19      	add	r3, sp, #100	; 0x64
 80080cc:	a917      	add	r1, sp, #92	; 0x5c
 80080ce:	4620      	mov	r0, r4
 80080d0:	f001 ffb6 	bl	800a040 <__gethex>
 80080d4:	f010 0707 	ands.w	r7, r0, #7
 80080d8:	4605      	mov	r5, r0
 80080da:	d005      	beq.n	80080e8 <_strtod_l+0x88>
 80080dc:	2f06      	cmp	r7, #6
 80080de:	d12c      	bne.n	800813a <_strtod_l+0xda>
 80080e0:	3601      	adds	r6, #1
 80080e2:	2300      	movs	r3, #0
 80080e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80080e6:	930a      	str	r3, [sp, #40]	; 0x28
 80080e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f040 8590 	bne.w	8008c10 <_strtod_l+0xbb0>
 80080f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f2:	b1eb      	cbz	r3, 8008130 <_strtod_l+0xd0>
 80080f4:	4652      	mov	r2, sl
 80080f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80080fa:	ec43 2b10 	vmov	d0, r2, r3
 80080fe:	b01d      	add	sp, #116	; 0x74
 8008100:	ecbd 8b02 	vpop	{d8}
 8008104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008108:	2a20      	cmp	r2, #32
 800810a:	d1cc      	bne.n	80080a6 <_strtod_l+0x46>
 800810c:	3301      	adds	r3, #1
 800810e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008110:	e7be      	b.n	8008090 <_strtod_l+0x30>
 8008112:	2a2d      	cmp	r2, #45	; 0x2d
 8008114:	d1c7      	bne.n	80080a6 <_strtod_l+0x46>
 8008116:	2201      	movs	r2, #1
 8008118:	920a      	str	r2, [sp, #40]	; 0x28
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	9217      	str	r2, [sp, #92]	; 0x5c
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1c2      	bne.n	80080aa <_strtod_l+0x4a>
 8008124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008126:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800812a:	2b00      	cmp	r3, #0
 800812c:	f040 856e 	bne.w	8008c0c <_strtod_l+0xbac>
 8008130:	4652      	mov	r2, sl
 8008132:	465b      	mov	r3, fp
 8008134:	e7e1      	b.n	80080fa <_strtod_l+0x9a>
 8008136:	2200      	movs	r2, #0
 8008138:	e7ee      	b.n	8008118 <_strtod_l+0xb8>
 800813a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800813c:	b13a      	cbz	r2, 800814e <_strtod_l+0xee>
 800813e:	2135      	movs	r1, #53	; 0x35
 8008140:	a81a      	add	r0, sp, #104	; 0x68
 8008142:	f002 ffb0 	bl	800b0a6 <__copybits>
 8008146:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008148:	4620      	mov	r0, r4
 800814a:	f002 fb6f 	bl	800a82c <_Bfree>
 800814e:	3f01      	subs	r7, #1
 8008150:	2f04      	cmp	r7, #4
 8008152:	d806      	bhi.n	8008162 <_strtod_l+0x102>
 8008154:	e8df f007 	tbb	[pc, r7]
 8008158:	1714030a 	.word	0x1714030a
 800815c:	0a          	.byte	0x0a
 800815d:	00          	.byte	0x00
 800815e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008162:	0728      	lsls	r0, r5, #28
 8008164:	d5c0      	bpl.n	80080e8 <_strtod_l+0x88>
 8008166:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800816a:	e7bd      	b.n	80080e8 <_strtod_l+0x88>
 800816c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008170:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008172:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008176:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800817a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800817e:	e7f0      	b.n	8008162 <_strtod_l+0x102>
 8008180:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008304 <_strtod_l+0x2a4>
 8008184:	e7ed      	b.n	8008162 <_strtod_l+0x102>
 8008186:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800818a:	f04f 3aff 	mov.w	sl, #4294967295
 800818e:	e7e8      	b.n	8008162 <_strtod_l+0x102>
 8008190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	9217      	str	r2, [sp, #92]	; 0x5c
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	2b30      	cmp	r3, #48	; 0x30
 800819a:	d0f9      	beq.n	8008190 <_strtod_l+0x130>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0a3      	beq.n	80080e8 <_strtod_l+0x88>
 80081a0:	2301      	movs	r3, #1
 80081a2:	f04f 0900 	mov.w	r9, #0
 80081a6:	9304      	str	r3, [sp, #16]
 80081a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081aa:	9308      	str	r3, [sp, #32]
 80081ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80081b0:	464f      	mov	r7, r9
 80081b2:	220a      	movs	r2, #10
 80081b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80081b6:	7806      	ldrb	r6, [r0, #0]
 80081b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80081bc:	b2d9      	uxtb	r1, r3
 80081be:	2909      	cmp	r1, #9
 80081c0:	d92a      	bls.n	8008218 <_strtod_l+0x1b8>
 80081c2:	9905      	ldr	r1, [sp, #20]
 80081c4:	462a      	mov	r2, r5
 80081c6:	f003 fad2 	bl	800b76e <strncmp>
 80081ca:	b398      	cbz	r0, 8008234 <_strtod_l+0x1d4>
 80081cc:	2000      	movs	r0, #0
 80081ce:	4632      	mov	r2, r6
 80081d0:	463d      	mov	r5, r7
 80081d2:	9005      	str	r0, [sp, #20]
 80081d4:	4603      	mov	r3, r0
 80081d6:	2a65      	cmp	r2, #101	; 0x65
 80081d8:	d001      	beq.n	80081de <_strtod_l+0x17e>
 80081da:	2a45      	cmp	r2, #69	; 0x45
 80081dc:	d118      	bne.n	8008210 <_strtod_l+0x1b0>
 80081de:	b91d      	cbnz	r5, 80081e8 <_strtod_l+0x188>
 80081e0:	9a04      	ldr	r2, [sp, #16]
 80081e2:	4302      	orrs	r2, r0
 80081e4:	d09e      	beq.n	8008124 <_strtod_l+0xc4>
 80081e6:	2500      	movs	r5, #0
 80081e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80081ec:	f108 0201 	add.w	r2, r8, #1
 80081f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80081f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80081f6:	2a2b      	cmp	r2, #43	; 0x2b
 80081f8:	d075      	beq.n	80082e6 <_strtod_l+0x286>
 80081fa:	2a2d      	cmp	r2, #45	; 0x2d
 80081fc:	d07b      	beq.n	80082f6 <_strtod_l+0x296>
 80081fe:	f04f 0c00 	mov.w	ip, #0
 8008202:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008206:	2909      	cmp	r1, #9
 8008208:	f240 8082 	bls.w	8008310 <_strtod_l+0x2b0>
 800820c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008210:	2600      	movs	r6, #0
 8008212:	e09d      	b.n	8008350 <_strtod_l+0x2f0>
 8008214:	2300      	movs	r3, #0
 8008216:	e7c4      	b.n	80081a2 <_strtod_l+0x142>
 8008218:	2f08      	cmp	r7, #8
 800821a:	bfd8      	it	le
 800821c:	9907      	ldrle	r1, [sp, #28]
 800821e:	f100 0001 	add.w	r0, r0, #1
 8008222:	bfda      	itte	le
 8008224:	fb02 3301 	mlale	r3, r2, r1, r3
 8008228:	9307      	strle	r3, [sp, #28]
 800822a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800822e:	3701      	adds	r7, #1
 8008230:	9017      	str	r0, [sp, #92]	; 0x5c
 8008232:	e7bf      	b.n	80081b4 <_strtod_l+0x154>
 8008234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008236:	195a      	adds	r2, r3, r5
 8008238:	9217      	str	r2, [sp, #92]	; 0x5c
 800823a:	5d5a      	ldrb	r2, [r3, r5]
 800823c:	2f00      	cmp	r7, #0
 800823e:	d037      	beq.n	80082b0 <_strtod_l+0x250>
 8008240:	9005      	str	r0, [sp, #20]
 8008242:	463d      	mov	r5, r7
 8008244:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008248:	2b09      	cmp	r3, #9
 800824a:	d912      	bls.n	8008272 <_strtod_l+0x212>
 800824c:	2301      	movs	r3, #1
 800824e:	e7c2      	b.n	80081d6 <_strtod_l+0x176>
 8008250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	9217      	str	r2, [sp, #92]	; 0x5c
 8008256:	785a      	ldrb	r2, [r3, #1]
 8008258:	3001      	adds	r0, #1
 800825a:	2a30      	cmp	r2, #48	; 0x30
 800825c:	d0f8      	beq.n	8008250 <_strtod_l+0x1f0>
 800825e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008262:	2b08      	cmp	r3, #8
 8008264:	f200 84d9 	bhi.w	8008c1a <_strtod_l+0xbba>
 8008268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800826a:	9005      	str	r0, [sp, #20]
 800826c:	2000      	movs	r0, #0
 800826e:	9308      	str	r3, [sp, #32]
 8008270:	4605      	mov	r5, r0
 8008272:	3a30      	subs	r2, #48	; 0x30
 8008274:	f100 0301 	add.w	r3, r0, #1
 8008278:	d014      	beq.n	80082a4 <_strtod_l+0x244>
 800827a:	9905      	ldr	r1, [sp, #20]
 800827c:	4419      	add	r1, r3
 800827e:	9105      	str	r1, [sp, #20]
 8008280:	462b      	mov	r3, r5
 8008282:	eb00 0e05 	add.w	lr, r0, r5
 8008286:	210a      	movs	r1, #10
 8008288:	4573      	cmp	r3, lr
 800828a:	d113      	bne.n	80082b4 <_strtod_l+0x254>
 800828c:	182b      	adds	r3, r5, r0
 800828e:	2b08      	cmp	r3, #8
 8008290:	f105 0501 	add.w	r5, r5, #1
 8008294:	4405      	add	r5, r0
 8008296:	dc1c      	bgt.n	80082d2 <_strtod_l+0x272>
 8008298:	9907      	ldr	r1, [sp, #28]
 800829a:	230a      	movs	r3, #10
 800829c:	fb03 2301 	mla	r3, r3, r1, r2
 80082a0:	9307      	str	r3, [sp, #28]
 80082a2:	2300      	movs	r3, #0
 80082a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80082a6:	1c51      	adds	r1, r2, #1
 80082a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80082aa:	7852      	ldrb	r2, [r2, #1]
 80082ac:	4618      	mov	r0, r3
 80082ae:	e7c9      	b.n	8008244 <_strtod_l+0x1e4>
 80082b0:	4638      	mov	r0, r7
 80082b2:	e7d2      	b.n	800825a <_strtod_l+0x1fa>
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	dc04      	bgt.n	80082c2 <_strtod_l+0x262>
 80082b8:	9e07      	ldr	r6, [sp, #28]
 80082ba:	434e      	muls	r6, r1
 80082bc:	9607      	str	r6, [sp, #28]
 80082be:	3301      	adds	r3, #1
 80082c0:	e7e2      	b.n	8008288 <_strtod_l+0x228>
 80082c2:	f103 0c01 	add.w	ip, r3, #1
 80082c6:	f1bc 0f10 	cmp.w	ip, #16
 80082ca:	bfd8      	it	le
 80082cc:	fb01 f909 	mulle.w	r9, r1, r9
 80082d0:	e7f5      	b.n	80082be <_strtod_l+0x25e>
 80082d2:	2d10      	cmp	r5, #16
 80082d4:	bfdc      	itt	le
 80082d6:	230a      	movle	r3, #10
 80082d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80082dc:	e7e1      	b.n	80082a2 <_strtod_l+0x242>
 80082de:	2300      	movs	r3, #0
 80082e0:	9305      	str	r3, [sp, #20]
 80082e2:	2301      	movs	r3, #1
 80082e4:	e77c      	b.n	80081e0 <_strtod_l+0x180>
 80082e6:	f04f 0c00 	mov.w	ip, #0
 80082ea:	f108 0202 	add.w	r2, r8, #2
 80082ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80082f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80082f4:	e785      	b.n	8008202 <_strtod_l+0x1a2>
 80082f6:	f04f 0c01 	mov.w	ip, #1
 80082fa:	e7f6      	b.n	80082ea <_strtod_l+0x28a>
 80082fc:	0800d0bc 	.word	0x0800d0bc
 8008300:	0800ce10 	.word	0x0800ce10
 8008304:	7ff00000 	.word	0x7ff00000
 8008308:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800830a:	1c51      	adds	r1, r2, #1
 800830c:	9117      	str	r1, [sp, #92]	; 0x5c
 800830e:	7852      	ldrb	r2, [r2, #1]
 8008310:	2a30      	cmp	r2, #48	; 0x30
 8008312:	d0f9      	beq.n	8008308 <_strtod_l+0x2a8>
 8008314:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008318:	2908      	cmp	r1, #8
 800831a:	f63f af79 	bhi.w	8008210 <_strtod_l+0x1b0>
 800831e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008322:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008324:	9206      	str	r2, [sp, #24]
 8008326:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008328:	1c51      	adds	r1, r2, #1
 800832a:	9117      	str	r1, [sp, #92]	; 0x5c
 800832c:	7852      	ldrb	r2, [r2, #1]
 800832e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008332:	2e09      	cmp	r6, #9
 8008334:	d937      	bls.n	80083a6 <_strtod_l+0x346>
 8008336:	9e06      	ldr	r6, [sp, #24]
 8008338:	1b89      	subs	r1, r1, r6
 800833a:	2908      	cmp	r1, #8
 800833c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008340:	dc02      	bgt.n	8008348 <_strtod_l+0x2e8>
 8008342:	4576      	cmp	r6, lr
 8008344:	bfa8      	it	ge
 8008346:	4676      	movge	r6, lr
 8008348:	f1bc 0f00 	cmp.w	ip, #0
 800834c:	d000      	beq.n	8008350 <_strtod_l+0x2f0>
 800834e:	4276      	negs	r6, r6
 8008350:	2d00      	cmp	r5, #0
 8008352:	d14d      	bne.n	80083f0 <_strtod_l+0x390>
 8008354:	9904      	ldr	r1, [sp, #16]
 8008356:	4301      	orrs	r1, r0
 8008358:	f47f aec6 	bne.w	80080e8 <_strtod_l+0x88>
 800835c:	2b00      	cmp	r3, #0
 800835e:	f47f aee1 	bne.w	8008124 <_strtod_l+0xc4>
 8008362:	2a69      	cmp	r2, #105	; 0x69
 8008364:	d027      	beq.n	80083b6 <_strtod_l+0x356>
 8008366:	dc24      	bgt.n	80083b2 <_strtod_l+0x352>
 8008368:	2a49      	cmp	r2, #73	; 0x49
 800836a:	d024      	beq.n	80083b6 <_strtod_l+0x356>
 800836c:	2a4e      	cmp	r2, #78	; 0x4e
 800836e:	f47f aed9 	bne.w	8008124 <_strtod_l+0xc4>
 8008372:	499f      	ldr	r1, [pc, #636]	; (80085f0 <_strtod_l+0x590>)
 8008374:	a817      	add	r0, sp, #92	; 0x5c
 8008376:	f002 f8bb 	bl	800a4f0 <__match>
 800837a:	2800      	cmp	r0, #0
 800837c:	f43f aed2 	beq.w	8008124 <_strtod_l+0xc4>
 8008380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b28      	cmp	r3, #40	; 0x28
 8008386:	d12d      	bne.n	80083e4 <_strtod_l+0x384>
 8008388:	499a      	ldr	r1, [pc, #616]	; (80085f4 <_strtod_l+0x594>)
 800838a:	aa1a      	add	r2, sp, #104	; 0x68
 800838c:	a817      	add	r0, sp, #92	; 0x5c
 800838e:	f002 f8c3 	bl	800a518 <__hexnan>
 8008392:	2805      	cmp	r0, #5
 8008394:	d126      	bne.n	80083e4 <_strtod_l+0x384>
 8008396:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008398:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800839c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80083a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80083a4:	e6a0      	b.n	80080e8 <_strtod_l+0x88>
 80083a6:	210a      	movs	r1, #10
 80083a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80083ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80083b0:	e7b9      	b.n	8008326 <_strtod_l+0x2c6>
 80083b2:	2a6e      	cmp	r2, #110	; 0x6e
 80083b4:	e7db      	b.n	800836e <_strtod_l+0x30e>
 80083b6:	4990      	ldr	r1, [pc, #576]	; (80085f8 <_strtod_l+0x598>)
 80083b8:	a817      	add	r0, sp, #92	; 0x5c
 80083ba:	f002 f899 	bl	800a4f0 <__match>
 80083be:	2800      	cmp	r0, #0
 80083c0:	f43f aeb0 	beq.w	8008124 <_strtod_l+0xc4>
 80083c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083c6:	498d      	ldr	r1, [pc, #564]	; (80085fc <_strtod_l+0x59c>)
 80083c8:	3b01      	subs	r3, #1
 80083ca:	a817      	add	r0, sp, #92	; 0x5c
 80083cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80083ce:	f002 f88f 	bl	800a4f0 <__match>
 80083d2:	b910      	cbnz	r0, 80083da <_strtod_l+0x37a>
 80083d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083d6:	3301      	adds	r3, #1
 80083d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80083da:	f8df b230 	ldr.w	fp, [pc, #560]	; 800860c <_strtod_l+0x5ac>
 80083de:	f04f 0a00 	mov.w	sl, #0
 80083e2:	e681      	b.n	80080e8 <_strtod_l+0x88>
 80083e4:	4886      	ldr	r0, [pc, #536]	; (8008600 <_strtod_l+0x5a0>)
 80083e6:	f003 f923 	bl	800b630 <nan>
 80083ea:	ec5b ab10 	vmov	sl, fp, d0
 80083ee:	e67b      	b.n	80080e8 <_strtod_l+0x88>
 80083f0:	9b05      	ldr	r3, [sp, #20]
 80083f2:	9807      	ldr	r0, [sp, #28]
 80083f4:	1af3      	subs	r3, r6, r3
 80083f6:	2f00      	cmp	r7, #0
 80083f8:	bf08      	it	eq
 80083fa:	462f      	moveq	r7, r5
 80083fc:	2d10      	cmp	r5, #16
 80083fe:	9306      	str	r3, [sp, #24]
 8008400:	46a8      	mov	r8, r5
 8008402:	bfa8      	it	ge
 8008404:	f04f 0810 	movge.w	r8, #16
 8008408:	f7f8 f884 	bl	8000514 <__aeabi_ui2d>
 800840c:	2d09      	cmp	r5, #9
 800840e:	4682      	mov	sl, r0
 8008410:	468b      	mov	fp, r1
 8008412:	dd13      	ble.n	800843c <_strtod_l+0x3dc>
 8008414:	4b7b      	ldr	r3, [pc, #492]	; (8008604 <_strtod_l+0x5a4>)
 8008416:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800841a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800841e:	f7f8 f8f3 	bl	8000608 <__aeabi_dmul>
 8008422:	4682      	mov	sl, r0
 8008424:	4648      	mov	r0, r9
 8008426:	468b      	mov	fp, r1
 8008428:	f7f8 f874 	bl	8000514 <__aeabi_ui2d>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4650      	mov	r0, sl
 8008432:	4659      	mov	r1, fp
 8008434:	f7f7 ff32 	bl	800029c <__adddf3>
 8008438:	4682      	mov	sl, r0
 800843a:	468b      	mov	fp, r1
 800843c:	2d0f      	cmp	r5, #15
 800843e:	dc38      	bgt.n	80084b2 <_strtod_l+0x452>
 8008440:	9b06      	ldr	r3, [sp, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	f43f ae50 	beq.w	80080e8 <_strtod_l+0x88>
 8008448:	dd24      	ble.n	8008494 <_strtod_l+0x434>
 800844a:	2b16      	cmp	r3, #22
 800844c:	dc0b      	bgt.n	8008466 <_strtod_l+0x406>
 800844e:	496d      	ldr	r1, [pc, #436]	; (8008604 <_strtod_l+0x5a4>)
 8008450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008458:	4652      	mov	r2, sl
 800845a:	465b      	mov	r3, fp
 800845c:	f7f8 f8d4 	bl	8000608 <__aeabi_dmul>
 8008460:	4682      	mov	sl, r0
 8008462:	468b      	mov	fp, r1
 8008464:	e640      	b.n	80080e8 <_strtod_l+0x88>
 8008466:	9a06      	ldr	r2, [sp, #24]
 8008468:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800846c:	4293      	cmp	r3, r2
 800846e:	db20      	blt.n	80084b2 <_strtod_l+0x452>
 8008470:	4c64      	ldr	r4, [pc, #400]	; (8008604 <_strtod_l+0x5a4>)
 8008472:	f1c5 050f 	rsb	r5, r5, #15
 8008476:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800847a:	4652      	mov	r2, sl
 800847c:	465b      	mov	r3, fp
 800847e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008482:	f7f8 f8c1 	bl	8000608 <__aeabi_dmul>
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	1b5d      	subs	r5, r3, r5
 800848a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800848e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008492:	e7e3      	b.n	800845c <_strtod_l+0x3fc>
 8008494:	9b06      	ldr	r3, [sp, #24]
 8008496:	3316      	adds	r3, #22
 8008498:	db0b      	blt.n	80084b2 <_strtod_l+0x452>
 800849a:	9b05      	ldr	r3, [sp, #20]
 800849c:	1b9e      	subs	r6, r3, r6
 800849e:	4b59      	ldr	r3, [pc, #356]	; (8008604 <_strtod_l+0x5a4>)
 80084a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80084a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084a8:	4650      	mov	r0, sl
 80084aa:	4659      	mov	r1, fp
 80084ac:	f7f8 f9d6 	bl	800085c <__aeabi_ddiv>
 80084b0:	e7d6      	b.n	8008460 <_strtod_l+0x400>
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	eba5 0808 	sub.w	r8, r5, r8
 80084b8:	4498      	add	r8, r3
 80084ba:	f1b8 0f00 	cmp.w	r8, #0
 80084be:	dd74      	ble.n	80085aa <_strtod_l+0x54a>
 80084c0:	f018 030f 	ands.w	r3, r8, #15
 80084c4:	d00a      	beq.n	80084dc <_strtod_l+0x47c>
 80084c6:	494f      	ldr	r1, [pc, #316]	; (8008604 <_strtod_l+0x5a4>)
 80084c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084cc:	4652      	mov	r2, sl
 80084ce:	465b      	mov	r3, fp
 80084d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d4:	f7f8 f898 	bl	8000608 <__aeabi_dmul>
 80084d8:	4682      	mov	sl, r0
 80084da:	468b      	mov	fp, r1
 80084dc:	f038 080f 	bics.w	r8, r8, #15
 80084e0:	d04f      	beq.n	8008582 <_strtod_l+0x522>
 80084e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80084e6:	dd22      	ble.n	800852e <_strtod_l+0x4ce>
 80084e8:	2500      	movs	r5, #0
 80084ea:	462e      	mov	r6, r5
 80084ec:	9507      	str	r5, [sp, #28]
 80084ee:	9505      	str	r5, [sp, #20]
 80084f0:	2322      	movs	r3, #34	; 0x22
 80084f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800860c <_strtod_l+0x5ac>
 80084f6:	6023      	str	r3, [r4, #0]
 80084f8:	f04f 0a00 	mov.w	sl, #0
 80084fc:	9b07      	ldr	r3, [sp, #28]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f43f adf2 	beq.w	80080e8 <_strtod_l+0x88>
 8008504:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008506:	4620      	mov	r0, r4
 8008508:	f002 f990 	bl	800a82c <_Bfree>
 800850c:	9905      	ldr	r1, [sp, #20]
 800850e:	4620      	mov	r0, r4
 8008510:	f002 f98c 	bl	800a82c <_Bfree>
 8008514:	4631      	mov	r1, r6
 8008516:	4620      	mov	r0, r4
 8008518:	f002 f988 	bl	800a82c <_Bfree>
 800851c:	9907      	ldr	r1, [sp, #28]
 800851e:	4620      	mov	r0, r4
 8008520:	f002 f984 	bl	800a82c <_Bfree>
 8008524:	4629      	mov	r1, r5
 8008526:	4620      	mov	r0, r4
 8008528:	f002 f980 	bl	800a82c <_Bfree>
 800852c:	e5dc      	b.n	80080e8 <_strtod_l+0x88>
 800852e:	4b36      	ldr	r3, [pc, #216]	; (8008608 <_strtod_l+0x5a8>)
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	2300      	movs	r3, #0
 8008534:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008538:	4650      	mov	r0, sl
 800853a:	4659      	mov	r1, fp
 800853c:	4699      	mov	r9, r3
 800853e:	f1b8 0f01 	cmp.w	r8, #1
 8008542:	dc21      	bgt.n	8008588 <_strtod_l+0x528>
 8008544:	b10b      	cbz	r3, 800854a <_strtod_l+0x4ea>
 8008546:	4682      	mov	sl, r0
 8008548:	468b      	mov	fp, r1
 800854a:	4b2f      	ldr	r3, [pc, #188]	; (8008608 <_strtod_l+0x5a8>)
 800854c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008550:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008554:	4652      	mov	r2, sl
 8008556:	465b      	mov	r3, fp
 8008558:	e9d9 0100 	ldrd	r0, r1, [r9]
 800855c:	f7f8 f854 	bl	8000608 <__aeabi_dmul>
 8008560:	4b2a      	ldr	r3, [pc, #168]	; (800860c <_strtod_l+0x5ac>)
 8008562:	460a      	mov	r2, r1
 8008564:	400b      	ands	r3, r1
 8008566:	492a      	ldr	r1, [pc, #168]	; (8008610 <_strtod_l+0x5b0>)
 8008568:	428b      	cmp	r3, r1
 800856a:	4682      	mov	sl, r0
 800856c:	d8bc      	bhi.n	80084e8 <_strtod_l+0x488>
 800856e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008572:	428b      	cmp	r3, r1
 8008574:	bf86      	itte	hi
 8008576:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008614 <_strtod_l+0x5b4>
 800857a:	f04f 3aff 	movhi.w	sl, #4294967295
 800857e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008582:	2300      	movs	r3, #0
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	e084      	b.n	8008692 <_strtod_l+0x632>
 8008588:	f018 0f01 	tst.w	r8, #1
 800858c:	d005      	beq.n	800859a <_strtod_l+0x53a>
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f7f8 f838 	bl	8000608 <__aeabi_dmul>
 8008598:	2301      	movs	r3, #1
 800859a:	9a04      	ldr	r2, [sp, #16]
 800859c:	3208      	adds	r2, #8
 800859e:	f109 0901 	add.w	r9, r9, #1
 80085a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80085a6:	9204      	str	r2, [sp, #16]
 80085a8:	e7c9      	b.n	800853e <_strtod_l+0x4de>
 80085aa:	d0ea      	beq.n	8008582 <_strtod_l+0x522>
 80085ac:	f1c8 0800 	rsb	r8, r8, #0
 80085b0:	f018 020f 	ands.w	r2, r8, #15
 80085b4:	d00a      	beq.n	80085cc <_strtod_l+0x56c>
 80085b6:	4b13      	ldr	r3, [pc, #76]	; (8008604 <_strtod_l+0x5a4>)
 80085b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085bc:	4650      	mov	r0, sl
 80085be:	4659      	mov	r1, fp
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	f7f8 f94a 	bl	800085c <__aeabi_ddiv>
 80085c8:	4682      	mov	sl, r0
 80085ca:	468b      	mov	fp, r1
 80085cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80085d0:	d0d7      	beq.n	8008582 <_strtod_l+0x522>
 80085d2:	f1b8 0f1f 	cmp.w	r8, #31
 80085d6:	dd1f      	ble.n	8008618 <_strtod_l+0x5b8>
 80085d8:	2500      	movs	r5, #0
 80085da:	462e      	mov	r6, r5
 80085dc:	9507      	str	r5, [sp, #28]
 80085de:	9505      	str	r5, [sp, #20]
 80085e0:	2322      	movs	r3, #34	; 0x22
 80085e2:	f04f 0a00 	mov.w	sl, #0
 80085e6:	f04f 0b00 	mov.w	fp, #0
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	e786      	b.n	80084fc <_strtod_l+0x49c>
 80085ee:	bf00      	nop
 80085f0:	0800cde2 	.word	0x0800cde2
 80085f4:	0800ce24 	.word	0x0800ce24
 80085f8:	0800cdda 	.word	0x0800cdda
 80085fc:	0800cf64 	.word	0x0800cf64
 8008600:	0800cdbf 	.word	0x0800cdbf
 8008604:	0800d158 	.word	0x0800d158
 8008608:	0800d130 	.word	0x0800d130
 800860c:	7ff00000 	.word	0x7ff00000
 8008610:	7ca00000 	.word	0x7ca00000
 8008614:	7fefffff 	.word	0x7fefffff
 8008618:	f018 0310 	ands.w	r3, r8, #16
 800861c:	bf18      	it	ne
 800861e:	236a      	movne	r3, #106	; 0x6a
 8008620:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80089d0 <_strtod_l+0x970>
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	4650      	mov	r0, sl
 8008628:	4659      	mov	r1, fp
 800862a:	2300      	movs	r3, #0
 800862c:	f018 0f01 	tst.w	r8, #1
 8008630:	d004      	beq.n	800863c <_strtod_l+0x5dc>
 8008632:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008636:	f7f7 ffe7 	bl	8000608 <__aeabi_dmul>
 800863a:	2301      	movs	r3, #1
 800863c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008640:	f109 0908 	add.w	r9, r9, #8
 8008644:	d1f2      	bne.n	800862c <_strtod_l+0x5cc>
 8008646:	b10b      	cbz	r3, 800864c <_strtod_l+0x5ec>
 8008648:	4682      	mov	sl, r0
 800864a:	468b      	mov	fp, r1
 800864c:	9b04      	ldr	r3, [sp, #16]
 800864e:	b1c3      	cbz	r3, 8008682 <_strtod_l+0x622>
 8008650:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008654:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008658:	2b00      	cmp	r3, #0
 800865a:	4659      	mov	r1, fp
 800865c:	dd11      	ble.n	8008682 <_strtod_l+0x622>
 800865e:	2b1f      	cmp	r3, #31
 8008660:	f340 8124 	ble.w	80088ac <_strtod_l+0x84c>
 8008664:	2b34      	cmp	r3, #52	; 0x34
 8008666:	bfde      	ittt	le
 8008668:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800866c:	f04f 33ff 	movle.w	r3, #4294967295
 8008670:	fa03 f202 	lslle.w	r2, r3, r2
 8008674:	f04f 0a00 	mov.w	sl, #0
 8008678:	bfcc      	ite	gt
 800867a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800867e:	ea02 0b01 	andle.w	fp, r2, r1
 8008682:	2200      	movs	r2, #0
 8008684:	2300      	movs	r3, #0
 8008686:	4650      	mov	r0, sl
 8008688:	4659      	mov	r1, fp
 800868a:	f7f8 fa25 	bl	8000ad8 <__aeabi_dcmpeq>
 800868e:	2800      	cmp	r0, #0
 8008690:	d1a2      	bne.n	80085d8 <_strtod_l+0x578>
 8008692:	9b07      	ldr	r3, [sp, #28]
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	9908      	ldr	r1, [sp, #32]
 8008698:	462b      	mov	r3, r5
 800869a:	463a      	mov	r2, r7
 800869c:	4620      	mov	r0, r4
 800869e:	f002 f92d 	bl	800a8fc <__s2b>
 80086a2:	9007      	str	r0, [sp, #28]
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f43f af1f 	beq.w	80084e8 <_strtod_l+0x488>
 80086aa:	9b05      	ldr	r3, [sp, #20]
 80086ac:	1b9e      	subs	r6, r3, r6
 80086ae:	9b06      	ldr	r3, [sp, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	bfb4      	ite	lt
 80086b4:	4633      	movlt	r3, r6
 80086b6:	2300      	movge	r3, #0
 80086b8:	930c      	str	r3, [sp, #48]	; 0x30
 80086ba:	9b06      	ldr	r3, [sp, #24]
 80086bc:	2500      	movs	r5, #0
 80086be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80086c2:	9312      	str	r3, [sp, #72]	; 0x48
 80086c4:	462e      	mov	r6, r5
 80086c6:	9b07      	ldr	r3, [sp, #28]
 80086c8:	4620      	mov	r0, r4
 80086ca:	6859      	ldr	r1, [r3, #4]
 80086cc:	f002 f86e 	bl	800a7ac <_Balloc>
 80086d0:	9005      	str	r0, [sp, #20]
 80086d2:	2800      	cmp	r0, #0
 80086d4:	f43f af0c 	beq.w	80084f0 <_strtod_l+0x490>
 80086d8:	9b07      	ldr	r3, [sp, #28]
 80086da:	691a      	ldr	r2, [r3, #16]
 80086dc:	3202      	adds	r2, #2
 80086de:	f103 010c 	add.w	r1, r3, #12
 80086e2:	0092      	lsls	r2, r2, #2
 80086e4:	300c      	adds	r0, #12
 80086e6:	f002 f839 	bl	800a75c <memcpy>
 80086ea:	ec4b ab10 	vmov	d0, sl, fp
 80086ee:	aa1a      	add	r2, sp, #104	; 0x68
 80086f0:	a919      	add	r1, sp, #100	; 0x64
 80086f2:	4620      	mov	r0, r4
 80086f4:	f002 fc48 	bl	800af88 <__d2b>
 80086f8:	ec4b ab18 	vmov	d8, sl, fp
 80086fc:	9018      	str	r0, [sp, #96]	; 0x60
 80086fe:	2800      	cmp	r0, #0
 8008700:	f43f aef6 	beq.w	80084f0 <_strtod_l+0x490>
 8008704:	2101      	movs	r1, #1
 8008706:	4620      	mov	r0, r4
 8008708:	f002 f992 	bl	800aa30 <__i2b>
 800870c:	4606      	mov	r6, r0
 800870e:	2800      	cmp	r0, #0
 8008710:	f43f aeee 	beq.w	80084f0 <_strtod_l+0x490>
 8008714:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008716:	9904      	ldr	r1, [sp, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	bfab      	itete	ge
 800871c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800871e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008720:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008722:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008726:	bfac      	ite	ge
 8008728:	eb03 0902 	addge.w	r9, r3, r2
 800872c:	1ad7      	sublt	r7, r2, r3
 800872e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008730:	eba3 0801 	sub.w	r8, r3, r1
 8008734:	4490      	add	r8, r2
 8008736:	4ba1      	ldr	r3, [pc, #644]	; (80089bc <_strtod_l+0x95c>)
 8008738:	f108 38ff 	add.w	r8, r8, #4294967295
 800873c:	4598      	cmp	r8, r3
 800873e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008742:	f280 80c7 	bge.w	80088d4 <_strtod_l+0x874>
 8008746:	eba3 0308 	sub.w	r3, r3, r8
 800874a:	2b1f      	cmp	r3, #31
 800874c:	eba2 0203 	sub.w	r2, r2, r3
 8008750:	f04f 0101 	mov.w	r1, #1
 8008754:	f300 80b1 	bgt.w	80088ba <_strtod_l+0x85a>
 8008758:	fa01 f303 	lsl.w	r3, r1, r3
 800875c:	930d      	str	r3, [sp, #52]	; 0x34
 800875e:	2300      	movs	r3, #0
 8008760:	9308      	str	r3, [sp, #32]
 8008762:	eb09 0802 	add.w	r8, r9, r2
 8008766:	9b04      	ldr	r3, [sp, #16]
 8008768:	45c1      	cmp	r9, r8
 800876a:	4417      	add	r7, r2
 800876c:	441f      	add	r7, r3
 800876e:	464b      	mov	r3, r9
 8008770:	bfa8      	it	ge
 8008772:	4643      	movge	r3, r8
 8008774:	42bb      	cmp	r3, r7
 8008776:	bfa8      	it	ge
 8008778:	463b      	movge	r3, r7
 800877a:	2b00      	cmp	r3, #0
 800877c:	bfc2      	ittt	gt
 800877e:	eba8 0803 	subgt.w	r8, r8, r3
 8008782:	1aff      	subgt	r7, r7, r3
 8008784:	eba9 0903 	subgt.w	r9, r9, r3
 8008788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800878a:	2b00      	cmp	r3, #0
 800878c:	dd17      	ble.n	80087be <_strtod_l+0x75e>
 800878e:	4631      	mov	r1, r6
 8008790:	461a      	mov	r2, r3
 8008792:	4620      	mov	r0, r4
 8008794:	f002 fa0c 	bl	800abb0 <__pow5mult>
 8008798:	4606      	mov	r6, r0
 800879a:	2800      	cmp	r0, #0
 800879c:	f43f aea8 	beq.w	80084f0 <_strtod_l+0x490>
 80087a0:	4601      	mov	r1, r0
 80087a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80087a4:	4620      	mov	r0, r4
 80087a6:	f002 f959 	bl	800aa5c <__multiply>
 80087aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80087ac:	2800      	cmp	r0, #0
 80087ae:	f43f ae9f 	beq.w	80084f0 <_strtod_l+0x490>
 80087b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80087b4:	4620      	mov	r0, r4
 80087b6:	f002 f839 	bl	800a82c <_Bfree>
 80087ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087bc:	9318      	str	r3, [sp, #96]	; 0x60
 80087be:	f1b8 0f00 	cmp.w	r8, #0
 80087c2:	f300 808c 	bgt.w	80088de <_strtod_l+0x87e>
 80087c6:	9b06      	ldr	r3, [sp, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dd08      	ble.n	80087de <_strtod_l+0x77e>
 80087cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087ce:	9905      	ldr	r1, [sp, #20]
 80087d0:	4620      	mov	r0, r4
 80087d2:	f002 f9ed 	bl	800abb0 <__pow5mult>
 80087d6:	9005      	str	r0, [sp, #20]
 80087d8:	2800      	cmp	r0, #0
 80087da:	f43f ae89 	beq.w	80084f0 <_strtod_l+0x490>
 80087de:	2f00      	cmp	r7, #0
 80087e0:	dd08      	ble.n	80087f4 <_strtod_l+0x794>
 80087e2:	9905      	ldr	r1, [sp, #20]
 80087e4:	463a      	mov	r2, r7
 80087e6:	4620      	mov	r0, r4
 80087e8:	f002 fa3c 	bl	800ac64 <__lshift>
 80087ec:	9005      	str	r0, [sp, #20]
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f43f ae7e 	beq.w	80084f0 <_strtod_l+0x490>
 80087f4:	f1b9 0f00 	cmp.w	r9, #0
 80087f8:	dd08      	ble.n	800880c <_strtod_l+0x7ac>
 80087fa:	4631      	mov	r1, r6
 80087fc:	464a      	mov	r2, r9
 80087fe:	4620      	mov	r0, r4
 8008800:	f002 fa30 	bl	800ac64 <__lshift>
 8008804:	4606      	mov	r6, r0
 8008806:	2800      	cmp	r0, #0
 8008808:	f43f ae72 	beq.w	80084f0 <_strtod_l+0x490>
 800880c:	9a05      	ldr	r2, [sp, #20]
 800880e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008810:	4620      	mov	r0, r4
 8008812:	f002 fab3 	bl	800ad7c <__mdiff>
 8008816:	4605      	mov	r5, r0
 8008818:	2800      	cmp	r0, #0
 800881a:	f43f ae69 	beq.w	80084f0 <_strtod_l+0x490>
 800881e:	68c3      	ldr	r3, [r0, #12]
 8008820:	930b      	str	r3, [sp, #44]	; 0x2c
 8008822:	2300      	movs	r3, #0
 8008824:	60c3      	str	r3, [r0, #12]
 8008826:	4631      	mov	r1, r6
 8008828:	f002 fa8c 	bl	800ad44 <__mcmp>
 800882c:	2800      	cmp	r0, #0
 800882e:	da60      	bge.n	80088f2 <_strtod_l+0x892>
 8008830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008832:	ea53 030a 	orrs.w	r3, r3, sl
 8008836:	f040 8082 	bne.w	800893e <_strtod_l+0x8de>
 800883a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800883e:	2b00      	cmp	r3, #0
 8008840:	d17d      	bne.n	800893e <_strtod_l+0x8de>
 8008842:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008846:	0d1b      	lsrs	r3, r3, #20
 8008848:	051b      	lsls	r3, r3, #20
 800884a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800884e:	d976      	bls.n	800893e <_strtod_l+0x8de>
 8008850:	696b      	ldr	r3, [r5, #20]
 8008852:	b913      	cbnz	r3, 800885a <_strtod_l+0x7fa>
 8008854:	692b      	ldr	r3, [r5, #16]
 8008856:	2b01      	cmp	r3, #1
 8008858:	dd71      	ble.n	800893e <_strtod_l+0x8de>
 800885a:	4629      	mov	r1, r5
 800885c:	2201      	movs	r2, #1
 800885e:	4620      	mov	r0, r4
 8008860:	f002 fa00 	bl	800ac64 <__lshift>
 8008864:	4631      	mov	r1, r6
 8008866:	4605      	mov	r5, r0
 8008868:	f002 fa6c 	bl	800ad44 <__mcmp>
 800886c:	2800      	cmp	r0, #0
 800886e:	dd66      	ble.n	800893e <_strtod_l+0x8de>
 8008870:	9904      	ldr	r1, [sp, #16]
 8008872:	4a53      	ldr	r2, [pc, #332]	; (80089c0 <_strtod_l+0x960>)
 8008874:	465b      	mov	r3, fp
 8008876:	2900      	cmp	r1, #0
 8008878:	f000 8081 	beq.w	800897e <_strtod_l+0x91e>
 800887c:	ea02 010b 	and.w	r1, r2, fp
 8008880:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008884:	dc7b      	bgt.n	800897e <_strtod_l+0x91e>
 8008886:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800888a:	f77f aea9 	ble.w	80085e0 <_strtod_l+0x580>
 800888e:	4b4d      	ldr	r3, [pc, #308]	; (80089c4 <_strtod_l+0x964>)
 8008890:	4650      	mov	r0, sl
 8008892:	4659      	mov	r1, fp
 8008894:	2200      	movs	r2, #0
 8008896:	f7f7 feb7 	bl	8000608 <__aeabi_dmul>
 800889a:	460b      	mov	r3, r1
 800889c:	4303      	orrs	r3, r0
 800889e:	bf08      	it	eq
 80088a0:	2322      	moveq	r3, #34	; 0x22
 80088a2:	4682      	mov	sl, r0
 80088a4:	468b      	mov	fp, r1
 80088a6:	bf08      	it	eq
 80088a8:	6023      	streq	r3, [r4, #0]
 80088aa:	e62b      	b.n	8008504 <_strtod_l+0x4a4>
 80088ac:	f04f 32ff 	mov.w	r2, #4294967295
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	ea03 0a0a 	and.w	sl, r3, sl
 80088b8:	e6e3      	b.n	8008682 <_strtod_l+0x622>
 80088ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80088be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80088c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80088c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80088ca:	fa01 f308 	lsl.w	r3, r1, r8
 80088ce:	9308      	str	r3, [sp, #32]
 80088d0:	910d      	str	r1, [sp, #52]	; 0x34
 80088d2:	e746      	b.n	8008762 <_strtod_l+0x702>
 80088d4:	2300      	movs	r3, #0
 80088d6:	9308      	str	r3, [sp, #32]
 80088d8:	2301      	movs	r3, #1
 80088da:	930d      	str	r3, [sp, #52]	; 0x34
 80088dc:	e741      	b.n	8008762 <_strtod_l+0x702>
 80088de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80088e0:	4642      	mov	r2, r8
 80088e2:	4620      	mov	r0, r4
 80088e4:	f002 f9be 	bl	800ac64 <__lshift>
 80088e8:	9018      	str	r0, [sp, #96]	; 0x60
 80088ea:	2800      	cmp	r0, #0
 80088ec:	f47f af6b 	bne.w	80087c6 <_strtod_l+0x766>
 80088f0:	e5fe      	b.n	80084f0 <_strtod_l+0x490>
 80088f2:	465f      	mov	r7, fp
 80088f4:	d16e      	bne.n	80089d4 <_strtod_l+0x974>
 80088f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088fc:	b342      	cbz	r2, 8008950 <_strtod_l+0x8f0>
 80088fe:	4a32      	ldr	r2, [pc, #200]	; (80089c8 <_strtod_l+0x968>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d128      	bne.n	8008956 <_strtod_l+0x8f6>
 8008904:	9b04      	ldr	r3, [sp, #16]
 8008906:	4651      	mov	r1, sl
 8008908:	b1eb      	cbz	r3, 8008946 <_strtod_l+0x8e6>
 800890a:	4b2d      	ldr	r3, [pc, #180]	; (80089c0 <_strtod_l+0x960>)
 800890c:	403b      	ands	r3, r7
 800890e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008912:	f04f 32ff 	mov.w	r2, #4294967295
 8008916:	d819      	bhi.n	800894c <_strtod_l+0x8ec>
 8008918:	0d1b      	lsrs	r3, r3, #20
 800891a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	4299      	cmp	r1, r3
 8008924:	d117      	bne.n	8008956 <_strtod_l+0x8f6>
 8008926:	4b29      	ldr	r3, [pc, #164]	; (80089cc <_strtod_l+0x96c>)
 8008928:	429f      	cmp	r7, r3
 800892a:	d102      	bne.n	8008932 <_strtod_l+0x8d2>
 800892c:	3101      	adds	r1, #1
 800892e:	f43f addf 	beq.w	80084f0 <_strtod_l+0x490>
 8008932:	4b23      	ldr	r3, [pc, #140]	; (80089c0 <_strtod_l+0x960>)
 8008934:	403b      	ands	r3, r7
 8008936:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800893a:	f04f 0a00 	mov.w	sl, #0
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1a4      	bne.n	800888e <_strtod_l+0x82e>
 8008944:	e5de      	b.n	8008504 <_strtod_l+0x4a4>
 8008946:	f04f 33ff 	mov.w	r3, #4294967295
 800894a:	e7ea      	b.n	8008922 <_strtod_l+0x8c2>
 800894c:	4613      	mov	r3, r2
 800894e:	e7e8      	b.n	8008922 <_strtod_l+0x8c2>
 8008950:	ea53 030a 	orrs.w	r3, r3, sl
 8008954:	d08c      	beq.n	8008870 <_strtod_l+0x810>
 8008956:	9b08      	ldr	r3, [sp, #32]
 8008958:	b1db      	cbz	r3, 8008992 <_strtod_l+0x932>
 800895a:	423b      	tst	r3, r7
 800895c:	d0ef      	beq.n	800893e <_strtod_l+0x8de>
 800895e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008960:	9a04      	ldr	r2, [sp, #16]
 8008962:	4650      	mov	r0, sl
 8008964:	4659      	mov	r1, fp
 8008966:	b1c3      	cbz	r3, 800899a <_strtod_l+0x93a>
 8008968:	f7ff fb5e 	bl	8008028 <sulp>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	ec51 0b18 	vmov	r0, r1, d8
 8008974:	f7f7 fc92 	bl	800029c <__adddf3>
 8008978:	4682      	mov	sl, r0
 800897a:	468b      	mov	fp, r1
 800897c:	e7df      	b.n	800893e <_strtod_l+0x8de>
 800897e:	4013      	ands	r3, r2
 8008980:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008984:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008988:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800898c:	f04f 3aff 	mov.w	sl, #4294967295
 8008990:	e7d5      	b.n	800893e <_strtod_l+0x8de>
 8008992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008994:	ea13 0f0a 	tst.w	r3, sl
 8008998:	e7e0      	b.n	800895c <_strtod_l+0x8fc>
 800899a:	f7ff fb45 	bl	8008028 <sulp>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	ec51 0b18 	vmov	r0, r1, d8
 80089a6:	f7f7 fc77 	bl	8000298 <__aeabi_dsub>
 80089aa:	2200      	movs	r2, #0
 80089ac:	2300      	movs	r3, #0
 80089ae:	4682      	mov	sl, r0
 80089b0:	468b      	mov	fp, r1
 80089b2:	f7f8 f891 	bl	8000ad8 <__aeabi_dcmpeq>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d0c1      	beq.n	800893e <_strtod_l+0x8de>
 80089ba:	e611      	b.n	80085e0 <_strtod_l+0x580>
 80089bc:	fffffc02 	.word	0xfffffc02
 80089c0:	7ff00000 	.word	0x7ff00000
 80089c4:	39500000 	.word	0x39500000
 80089c8:	000fffff 	.word	0x000fffff
 80089cc:	7fefffff 	.word	0x7fefffff
 80089d0:	0800ce38 	.word	0x0800ce38
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	f002 fb32 	bl	800b040 <__ratio>
 80089dc:	ec59 8b10 	vmov	r8, r9, d0
 80089e0:	ee10 0a10 	vmov	r0, s0
 80089e4:	2200      	movs	r2, #0
 80089e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089ea:	4649      	mov	r1, r9
 80089ec:	f7f8 f888 	bl	8000b00 <__aeabi_dcmple>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d07a      	beq.n	8008aea <_strtod_l+0xa8a>
 80089f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d04a      	beq.n	8008a90 <_strtod_l+0xa30>
 80089fa:	4b95      	ldr	r3, [pc, #596]	; (8008c50 <_strtod_l+0xbf0>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008c50 <_strtod_l+0xbf0>
 8008a06:	f04f 0800 	mov.w	r8, #0
 8008a0a:	4b92      	ldr	r3, [pc, #584]	; (8008c54 <_strtod_l+0xbf4>)
 8008a0c:	403b      	ands	r3, r7
 8008a0e:	930d      	str	r3, [sp, #52]	; 0x34
 8008a10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a12:	4b91      	ldr	r3, [pc, #580]	; (8008c58 <_strtod_l+0xbf8>)
 8008a14:	429a      	cmp	r2, r3
 8008a16:	f040 80b0 	bne.w	8008b7a <_strtod_l+0xb1a>
 8008a1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a1e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008a22:	ec4b ab10 	vmov	d0, sl, fp
 8008a26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a2a:	f002 fa31 	bl	800ae90 <__ulp>
 8008a2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a32:	ec53 2b10 	vmov	r2, r3, d0
 8008a36:	f7f7 fde7 	bl	8000608 <__aeabi_dmul>
 8008a3a:	4652      	mov	r2, sl
 8008a3c:	465b      	mov	r3, fp
 8008a3e:	f7f7 fc2d 	bl	800029c <__adddf3>
 8008a42:	460b      	mov	r3, r1
 8008a44:	4983      	ldr	r1, [pc, #524]	; (8008c54 <_strtod_l+0xbf4>)
 8008a46:	4a85      	ldr	r2, [pc, #532]	; (8008c5c <_strtod_l+0xbfc>)
 8008a48:	4019      	ands	r1, r3
 8008a4a:	4291      	cmp	r1, r2
 8008a4c:	4682      	mov	sl, r0
 8008a4e:	d960      	bls.n	8008b12 <_strtod_l+0xab2>
 8008a50:	ee18 3a90 	vmov	r3, s17
 8008a54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d104      	bne.n	8008a66 <_strtod_l+0xa06>
 8008a5c:	ee18 3a10 	vmov	r3, s16
 8008a60:	3301      	adds	r3, #1
 8008a62:	f43f ad45 	beq.w	80084f0 <_strtod_l+0x490>
 8008a66:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008c68 <_strtod_l+0xc08>
 8008a6a:	f04f 3aff 	mov.w	sl, #4294967295
 8008a6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a70:	4620      	mov	r0, r4
 8008a72:	f001 fedb 	bl	800a82c <_Bfree>
 8008a76:	9905      	ldr	r1, [sp, #20]
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f001 fed7 	bl	800a82c <_Bfree>
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4620      	mov	r0, r4
 8008a82:	f001 fed3 	bl	800a82c <_Bfree>
 8008a86:	4629      	mov	r1, r5
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f001 fecf 	bl	800a82c <_Bfree>
 8008a8e:	e61a      	b.n	80086c6 <_strtod_l+0x666>
 8008a90:	f1ba 0f00 	cmp.w	sl, #0
 8008a94:	d11b      	bne.n	8008ace <_strtod_l+0xa6e>
 8008a96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a9a:	b9f3      	cbnz	r3, 8008ada <_strtod_l+0xa7a>
 8008a9c:	4b6c      	ldr	r3, [pc, #432]	; (8008c50 <_strtod_l+0xbf0>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	f7f8 f822 	bl	8000aec <__aeabi_dcmplt>
 8008aa8:	b9d0      	cbnz	r0, 8008ae0 <_strtod_l+0xa80>
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	4b6c      	ldr	r3, [pc, #432]	; (8008c60 <_strtod_l+0xc00>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f7f7 fda9 	bl	8000608 <__aeabi_dmul>
 8008ab6:	4680      	mov	r8, r0
 8008ab8:	4689      	mov	r9, r1
 8008aba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008abe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008ac2:	9315      	str	r3, [sp, #84]	; 0x54
 8008ac4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008ac8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008acc:	e79d      	b.n	8008a0a <_strtod_l+0x9aa>
 8008ace:	f1ba 0f01 	cmp.w	sl, #1
 8008ad2:	d102      	bne.n	8008ada <_strtod_l+0xa7a>
 8008ad4:	2f00      	cmp	r7, #0
 8008ad6:	f43f ad83 	beq.w	80085e0 <_strtod_l+0x580>
 8008ada:	4b62      	ldr	r3, [pc, #392]	; (8008c64 <_strtod_l+0xc04>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	e78e      	b.n	80089fe <_strtod_l+0x99e>
 8008ae0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008c60 <_strtod_l+0xc00>
 8008ae4:	f04f 0800 	mov.w	r8, #0
 8008ae8:	e7e7      	b.n	8008aba <_strtod_l+0xa5a>
 8008aea:	4b5d      	ldr	r3, [pc, #372]	; (8008c60 <_strtod_l+0xc00>)
 8008aec:	4640      	mov	r0, r8
 8008aee:	4649      	mov	r1, r9
 8008af0:	2200      	movs	r2, #0
 8008af2:	f7f7 fd89 	bl	8000608 <__aeabi_dmul>
 8008af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008af8:	4680      	mov	r8, r0
 8008afa:	4689      	mov	r9, r1
 8008afc:	b933      	cbnz	r3, 8008b0c <_strtod_l+0xaac>
 8008afe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b02:	900e      	str	r0, [sp, #56]	; 0x38
 8008b04:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008b0a:	e7dd      	b.n	8008ac8 <_strtod_l+0xa68>
 8008b0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008b10:	e7f9      	b.n	8008b06 <_strtod_l+0xaa6>
 8008b12:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1a8      	bne.n	8008a6e <_strtod_l+0xa0e>
 8008b1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b22:	0d1b      	lsrs	r3, r3, #20
 8008b24:	051b      	lsls	r3, r3, #20
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d1a1      	bne.n	8008a6e <_strtod_l+0xa0e>
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	f7f8 f8cb 	bl	8000cc8 <__aeabi_d2lz>
 8008b32:	f7f7 fd3b 	bl	80005ac <__aeabi_l2d>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	f7f7 fbab 	bl	8000298 <__aeabi_dsub>
 8008b42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b48:	ea43 030a 	orr.w	r3, r3, sl
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	4680      	mov	r8, r0
 8008b50:	4689      	mov	r9, r1
 8008b52:	d055      	beq.n	8008c00 <_strtod_l+0xba0>
 8008b54:	a336      	add	r3, pc, #216	; (adr r3, 8008c30 <_strtod_l+0xbd0>)
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f7f7 ffc7 	bl	8000aec <__aeabi_dcmplt>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f47f acd0 	bne.w	8008504 <_strtod_l+0x4a4>
 8008b64:	a334      	add	r3, pc, #208	; (adr r3, 8008c38 <_strtod_l+0xbd8>)
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	f7f7 ffdb 	bl	8000b28 <__aeabi_dcmpgt>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	f43f af7b 	beq.w	8008a6e <_strtod_l+0xa0e>
 8008b78:	e4c4      	b.n	8008504 <_strtod_l+0x4a4>
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	b333      	cbz	r3, 8008bcc <_strtod_l+0xb6c>
 8008b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b84:	d822      	bhi.n	8008bcc <_strtod_l+0xb6c>
 8008b86:	a32e      	add	r3, pc, #184	; (adr r3, 8008c40 <_strtod_l+0xbe0>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	4649      	mov	r1, r9
 8008b90:	f7f7 ffb6 	bl	8000b00 <__aeabi_dcmple>
 8008b94:	b1a0      	cbz	r0, 8008bc0 <_strtod_l+0xb60>
 8008b96:	4649      	mov	r1, r9
 8008b98:	4640      	mov	r0, r8
 8008b9a:	f7f8 f80d 	bl	8000bb8 <__aeabi_d2uiz>
 8008b9e:	2801      	cmp	r0, #1
 8008ba0:	bf38      	it	cc
 8008ba2:	2001      	movcc	r0, #1
 8008ba4:	f7f7 fcb6 	bl	8000514 <__aeabi_ui2d>
 8008ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008baa:	4680      	mov	r8, r0
 8008bac:	4689      	mov	r9, r1
 8008bae:	bb23      	cbnz	r3, 8008bfa <_strtod_l+0xb9a>
 8008bb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bb4:	9010      	str	r0, [sp, #64]	; 0x40
 8008bb6:	9311      	str	r3, [sp, #68]	; 0x44
 8008bb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008bbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bc4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008bc8:	1a9b      	subs	r3, r3, r2
 8008bca:	9309      	str	r3, [sp, #36]	; 0x24
 8008bcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bd0:	eeb0 0a48 	vmov.f32	s0, s16
 8008bd4:	eef0 0a68 	vmov.f32	s1, s17
 8008bd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bdc:	f002 f958 	bl	800ae90 <__ulp>
 8008be0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008be4:	ec53 2b10 	vmov	r2, r3, d0
 8008be8:	f7f7 fd0e 	bl	8000608 <__aeabi_dmul>
 8008bec:	ec53 2b18 	vmov	r2, r3, d8
 8008bf0:	f7f7 fb54 	bl	800029c <__adddf3>
 8008bf4:	4682      	mov	sl, r0
 8008bf6:	468b      	mov	fp, r1
 8008bf8:	e78d      	b.n	8008b16 <_strtod_l+0xab6>
 8008bfa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008bfe:	e7db      	b.n	8008bb8 <_strtod_l+0xb58>
 8008c00:	a311      	add	r3, pc, #68	; (adr r3, 8008c48 <_strtod_l+0xbe8>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	f7f7 ff71 	bl	8000aec <__aeabi_dcmplt>
 8008c0a:	e7b2      	b.n	8008b72 <_strtod_l+0xb12>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	f7ff ba6b 	b.w	80080f0 <_strtod_l+0x90>
 8008c1a:	2a65      	cmp	r2, #101	; 0x65
 8008c1c:	f43f ab5f 	beq.w	80082de <_strtod_l+0x27e>
 8008c20:	2a45      	cmp	r2, #69	; 0x45
 8008c22:	f43f ab5c 	beq.w	80082de <_strtod_l+0x27e>
 8008c26:	2301      	movs	r3, #1
 8008c28:	f7ff bb94 	b.w	8008354 <_strtod_l+0x2f4>
 8008c2c:	f3af 8000 	nop.w
 8008c30:	94a03595 	.word	0x94a03595
 8008c34:	3fdfffff 	.word	0x3fdfffff
 8008c38:	35afe535 	.word	0x35afe535
 8008c3c:	3fe00000 	.word	0x3fe00000
 8008c40:	ffc00000 	.word	0xffc00000
 8008c44:	41dfffff 	.word	0x41dfffff
 8008c48:	94a03595 	.word	0x94a03595
 8008c4c:	3fcfffff 	.word	0x3fcfffff
 8008c50:	3ff00000 	.word	0x3ff00000
 8008c54:	7ff00000 	.word	0x7ff00000
 8008c58:	7fe00000 	.word	0x7fe00000
 8008c5c:	7c9fffff 	.word	0x7c9fffff
 8008c60:	3fe00000 	.word	0x3fe00000
 8008c64:	bff00000 	.word	0xbff00000
 8008c68:	7fefffff 	.word	0x7fefffff

08008c6c <_strtod_r>:
 8008c6c:	4b01      	ldr	r3, [pc, #4]	; (8008c74 <_strtod_r+0x8>)
 8008c6e:	f7ff b9f7 	b.w	8008060 <_strtod_l>
 8008c72:	bf00      	nop
 8008c74:	2000007c 	.word	0x2000007c

08008c78 <_strtol_l.constprop.0>:
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7e:	d001      	beq.n	8008c84 <_strtol_l.constprop.0+0xc>
 8008c80:	2b24      	cmp	r3, #36	; 0x24
 8008c82:	d906      	bls.n	8008c92 <_strtol_l.constprop.0+0x1a>
 8008c84:	f7fe f992 	bl	8006fac <__errno>
 8008c88:	2316      	movs	r3, #22
 8008c8a:	6003      	str	r3, [r0, #0]
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008d78 <_strtol_l.constprop.0+0x100>
 8008c96:	460d      	mov	r5, r1
 8008c98:	462e      	mov	r6, r5
 8008c9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008ca2:	f017 0708 	ands.w	r7, r7, #8
 8008ca6:	d1f7      	bne.n	8008c98 <_strtol_l.constprop.0+0x20>
 8008ca8:	2c2d      	cmp	r4, #45	; 0x2d
 8008caa:	d132      	bne.n	8008d12 <_strtol_l.constprop.0+0x9a>
 8008cac:	782c      	ldrb	r4, [r5, #0]
 8008cae:	2701      	movs	r7, #1
 8008cb0:	1cb5      	adds	r5, r6, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d05b      	beq.n	8008d6e <_strtol_l.constprop.0+0xf6>
 8008cb6:	2b10      	cmp	r3, #16
 8008cb8:	d109      	bne.n	8008cce <_strtol_l.constprop.0+0x56>
 8008cba:	2c30      	cmp	r4, #48	; 0x30
 8008cbc:	d107      	bne.n	8008cce <_strtol_l.constprop.0+0x56>
 8008cbe:	782c      	ldrb	r4, [r5, #0]
 8008cc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008cc4:	2c58      	cmp	r4, #88	; 0x58
 8008cc6:	d14d      	bne.n	8008d64 <_strtol_l.constprop.0+0xec>
 8008cc8:	786c      	ldrb	r4, [r5, #1]
 8008cca:	2310      	movs	r3, #16
 8008ccc:	3502      	adds	r5, #2
 8008cce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008cd2:	f108 38ff 	add.w	r8, r8, #4294967295
 8008cd6:	f04f 0c00 	mov.w	ip, #0
 8008cda:	fbb8 f9f3 	udiv	r9, r8, r3
 8008cde:	4666      	mov	r6, ip
 8008ce0:	fb03 8a19 	mls	sl, r3, r9, r8
 8008ce4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008ce8:	f1be 0f09 	cmp.w	lr, #9
 8008cec:	d816      	bhi.n	8008d1c <_strtol_l.constprop.0+0xa4>
 8008cee:	4674      	mov	r4, lr
 8008cf0:	42a3      	cmp	r3, r4
 8008cf2:	dd24      	ble.n	8008d3e <_strtol_l.constprop.0+0xc6>
 8008cf4:	f1bc 0f00 	cmp.w	ip, #0
 8008cf8:	db1e      	blt.n	8008d38 <_strtol_l.constprop.0+0xc0>
 8008cfa:	45b1      	cmp	r9, r6
 8008cfc:	d31c      	bcc.n	8008d38 <_strtol_l.constprop.0+0xc0>
 8008cfe:	d101      	bne.n	8008d04 <_strtol_l.constprop.0+0x8c>
 8008d00:	45a2      	cmp	sl, r4
 8008d02:	db19      	blt.n	8008d38 <_strtol_l.constprop.0+0xc0>
 8008d04:	fb06 4603 	mla	r6, r6, r3, r4
 8008d08:	f04f 0c01 	mov.w	ip, #1
 8008d0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d10:	e7e8      	b.n	8008ce4 <_strtol_l.constprop.0+0x6c>
 8008d12:	2c2b      	cmp	r4, #43	; 0x2b
 8008d14:	bf04      	itt	eq
 8008d16:	782c      	ldrbeq	r4, [r5, #0]
 8008d18:	1cb5      	addeq	r5, r6, #2
 8008d1a:	e7ca      	b.n	8008cb2 <_strtol_l.constprop.0+0x3a>
 8008d1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008d20:	f1be 0f19 	cmp.w	lr, #25
 8008d24:	d801      	bhi.n	8008d2a <_strtol_l.constprop.0+0xb2>
 8008d26:	3c37      	subs	r4, #55	; 0x37
 8008d28:	e7e2      	b.n	8008cf0 <_strtol_l.constprop.0+0x78>
 8008d2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008d2e:	f1be 0f19 	cmp.w	lr, #25
 8008d32:	d804      	bhi.n	8008d3e <_strtol_l.constprop.0+0xc6>
 8008d34:	3c57      	subs	r4, #87	; 0x57
 8008d36:	e7db      	b.n	8008cf0 <_strtol_l.constprop.0+0x78>
 8008d38:	f04f 3cff 	mov.w	ip, #4294967295
 8008d3c:	e7e6      	b.n	8008d0c <_strtol_l.constprop.0+0x94>
 8008d3e:	f1bc 0f00 	cmp.w	ip, #0
 8008d42:	da05      	bge.n	8008d50 <_strtol_l.constprop.0+0xd8>
 8008d44:	2322      	movs	r3, #34	; 0x22
 8008d46:	6003      	str	r3, [r0, #0]
 8008d48:	4646      	mov	r6, r8
 8008d4a:	b942      	cbnz	r2, 8008d5e <_strtol_l.constprop.0+0xe6>
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	e79e      	b.n	8008c8e <_strtol_l.constprop.0+0x16>
 8008d50:	b107      	cbz	r7, 8008d54 <_strtol_l.constprop.0+0xdc>
 8008d52:	4276      	negs	r6, r6
 8008d54:	2a00      	cmp	r2, #0
 8008d56:	d0f9      	beq.n	8008d4c <_strtol_l.constprop.0+0xd4>
 8008d58:	f1bc 0f00 	cmp.w	ip, #0
 8008d5c:	d000      	beq.n	8008d60 <_strtol_l.constprop.0+0xe8>
 8008d5e:	1e69      	subs	r1, r5, #1
 8008d60:	6011      	str	r1, [r2, #0]
 8008d62:	e7f3      	b.n	8008d4c <_strtol_l.constprop.0+0xd4>
 8008d64:	2430      	movs	r4, #48	; 0x30
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1b1      	bne.n	8008cce <_strtol_l.constprop.0+0x56>
 8008d6a:	2308      	movs	r3, #8
 8008d6c:	e7af      	b.n	8008cce <_strtol_l.constprop.0+0x56>
 8008d6e:	2c30      	cmp	r4, #48	; 0x30
 8008d70:	d0a5      	beq.n	8008cbe <_strtol_l.constprop.0+0x46>
 8008d72:	230a      	movs	r3, #10
 8008d74:	e7ab      	b.n	8008cce <_strtol_l.constprop.0+0x56>
 8008d76:	bf00      	nop
 8008d78:	0800ce61 	.word	0x0800ce61

08008d7c <_strtol_r>:
 8008d7c:	f7ff bf7c 	b.w	8008c78 <_strtol_l.constprop.0>

08008d80 <__swbuf_r>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	460e      	mov	r6, r1
 8008d84:	4614      	mov	r4, r2
 8008d86:	4605      	mov	r5, r0
 8008d88:	b118      	cbz	r0, 8008d92 <__swbuf_r+0x12>
 8008d8a:	6983      	ldr	r3, [r0, #24]
 8008d8c:	b90b      	cbnz	r3, 8008d92 <__swbuf_r+0x12>
 8008d8e:	f001 f853 	bl	8009e38 <__sinit>
 8008d92:	4b21      	ldr	r3, [pc, #132]	; (8008e18 <__swbuf_r+0x98>)
 8008d94:	429c      	cmp	r4, r3
 8008d96:	d12b      	bne.n	8008df0 <__swbuf_r+0x70>
 8008d98:	686c      	ldr	r4, [r5, #4]
 8008d9a:	69a3      	ldr	r3, [r4, #24]
 8008d9c:	60a3      	str	r3, [r4, #8]
 8008d9e:	89a3      	ldrh	r3, [r4, #12]
 8008da0:	071a      	lsls	r2, r3, #28
 8008da2:	d52f      	bpl.n	8008e04 <__swbuf_r+0x84>
 8008da4:	6923      	ldr	r3, [r4, #16]
 8008da6:	b36b      	cbz	r3, 8008e04 <__swbuf_r+0x84>
 8008da8:	6923      	ldr	r3, [r4, #16]
 8008daa:	6820      	ldr	r0, [r4, #0]
 8008dac:	1ac0      	subs	r0, r0, r3
 8008dae:	6963      	ldr	r3, [r4, #20]
 8008db0:	b2f6      	uxtb	r6, r6
 8008db2:	4283      	cmp	r3, r0
 8008db4:	4637      	mov	r7, r6
 8008db6:	dc04      	bgt.n	8008dc2 <__swbuf_r+0x42>
 8008db8:	4621      	mov	r1, r4
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f000 ffa8 	bl	8009d10 <_fflush_r>
 8008dc0:	bb30      	cbnz	r0, 8008e10 <__swbuf_r+0x90>
 8008dc2:	68a3      	ldr	r3, [r4, #8]
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	60a3      	str	r3, [r4, #8]
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	6022      	str	r2, [r4, #0]
 8008dce:	701e      	strb	r6, [r3, #0]
 8008dd0:	6963      	ldr	r3, [r4, #20]
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	4283      	cmp	r3, r0
 8008dd6:	d004      	beq.n	8008de2 <__swbuf_r+0x62>
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	07db      	lsls	r3, r3, #31
 8008ddc:	d506      	bpl.n	8008dec <__swbuf_r+0x6c>
 8008dde:	2e0a      	cmp	r6, #10
 8008de0:	d104      	bne.n	8008dec <__swbuf_r+0x6c>
 8008de2:	4621      	mov	r1, r4
 8008de4:	4628      	mov	r0, r5
 8008de6:	f000 ff93 	bl	8009d10 <_fflush_r>
 8008dea:	b988      	cbnz	r0, 8008e10 <__swbuf_r+0x90>
 8008dec:	4638      	mov	r0, r7
 8008dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df0:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <__swbuf_r+0x9c>)
 8008df2:	429c      	cmp	r4, r3
 8008df4:	d101      	bne.n	8008dfa <__swbuf_r+0x7a>
 8008df6:	68ac      	ldr	r4, [r5, #8]
 8008df8:	e7cf      	b.n	8008d9a <__swbuf_r+0x1a>
 8008dfa:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <__swbuf_r+0xa0>)
 8008dfc:	429c      	cmp	r4, r3
 8008dfe:	bf08      	it	eq
 8008e00:	68ec      	ldreq	r4, [r5, #12]
 8008e02:	e7ca      	b.n	8008d9a <__swbuf_r+0x1a>
 8008e04:	4621      	mov	r1, r4
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 f80c 	bl	8008e24 <__swsetup_r>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d0cb      	beq.n	8008da8 <__swbuf_r+0x28>
 8008e10:	f04f 37ff 	mov.w	r7, #4294967295
 8008e14:	e7ea      	b.n	8008dec <__swbuf_r+0x6c>
 8008e16:	bf00      	nop
 8008e18:	0800d014 	.word	0x0800d014
 8008e1c:	0800d034 	.word	0x0800d034
 8008e20:	0800cff4 	.word	0x0800cff4

08008e24 <__swsetup_r>:
 8008e24:	4b32      	ldr	r3, [pc, #200]	; (8008ef0 <__swsetup_r+0xcc>)
 8008e26:	b570      	push	{r4, r5, r6, lr}
 8008e28:	681d      	ldr	r5, [r3, #0]
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	b125      	cbz	r5, 8008e3a <__swsetup_r+0x16>
 8008e30:	69ab      	ldr	r3, [r5, #24]
 8008e32:	b913      	cbnz	r3, 8008e3a <__swsetup_r+0x16>
 8008e34:	4628      	mov	r0, r5
 8008e36:	f000 ffff 	bl	8009e38 <__sinit>
 8008e3a:	4b2e      	ldr	r3, [pc, #184]	; (8008ef4 <__swsetup_r+0xd0>)
 8008e3c:	429c      	cmp	r4, r3
 8008e3e:	d10f      	bne.n	8008e60 <__swsetup_r+0x3c>
 8008e40:	686c      	ldr	r4, [r5, #4]
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e48:	0719      	lsls	r1, r3, #28
 8008e4a:	d42c      	bmi.n	8008ea6 <__swsetup_r+0x82>
 8008e4c:	06dd      	lsls	r5, r3, #27
 8008e4e:	d411      	bmi.n	8008e74 <__swsetup_r+0x50>
 8008e50:	2309      	movs	r3, #9
 8008e52:	6033      	str	r3, [r6, #0]
 8008e54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5e:	e03e      	b.n	8008ede <__swsetup_r+0xba>
 8008e60:	4b25      	ldr	r3, [pc, #148]	; (8008ef8 <__swsetup_r+0xd4>)
 8008e62:	429c      	cmp	r4, r3
 8008e64:	d101      	bne.n	8008e6a <__swsetup_r+0x46>
 8008e66:	68ac      	ldr	r4, [r5, #8]
 8008e68:	e7eb      	b.n	8008e42 <__swsetup_r+0x1e>
 8008e6a:	4b24      	ldr	r3, [pc, #144]	; (8008efc <__swsetup_r+0xd8>)
 8008e6c:	429c      	cmp	r4, r3
 8008e6e:	bf08      	it	eq
 8008e70:	68ec      	ldreq	r4, [r5, #12]
 8008e72:	e7e6      	b.n	8008e42 <__swsetup_r+0x1e>
 8008e74:	0758      	lsls	r0, r3, #29
 8008e76:	d512      	bpl.n	8008e9e <__swsetup_r+0x7a>
 8008e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e7a:	b141      	cbz	r1, 8008e8e <__swsetup_r+0x6a>
 8008e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e80:	4299      	cmp	r1, r3
 8008e82:	d002      	beq.n	8008e8a <__swsetup_r+0x66>
 8008e84:	4630      	mov	r0, r6
 8008e86:	f002 f969 	bl	800b15c <_free_r>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e8e:	89a3      	ldrh	r3, [r4, #12]
 8008e90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e94:	81a3      	strh	r3, [r4, #12]
 8008e96:	2300      	movs	r3, #0
 8008e98:	6063      	str	r3, [r4, #4]
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f043 0308 	orr.w	r3, r3, #8
 8008ea4:	81a3      	strh	r3, [r4, #12]
 8008ea6:	6923      	ldr	r3, [r4, #16]
 8008ea8:	b94b      	cbnz	r3, 8008ebe <__swsetup_r+0x9a>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb4:	d003      	beq.n	8008ebe <__swsetup_r+0x9a>
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f001 fbf5 	bl	800a6a8 <__smakebuf_r>
 8008ebe:	89a0      	ldrh	r0, [r4, #12]
 8008ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec4:	f010 0301 	ands.w	r3, r0, #1
 8008ec8:	d00a      	beq.n	8008ee0 <__swsetup_r+0xbc>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60a3      	str	r3, [r4, #8]
 8008ece:	6963      	ldr	r3, [r4, #20]
 8008ed0:	425b      	negs	r3, r3
 8008ed2:	61a3      	str	r3, [r4, #24]
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	b943      	cbnz	r3, 8008eea <__swsetup_r+0xc6>
 8008ed8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008edc:	d1ba      	bne.n	8008e54 <__swsetup_r+0x30>
 8008ede:	bd70      	pop	{r4, r5, r6, pc}
 8008ee0:	0781      	lsls	r1, r0, #30
 8008ee2:	bf58      	it	pl
 8008ee4:	6963      	ldrpl	r3, [r4, #20]
 8008ee6:	60a3      	str	r3, [r4, #8]
 8008ee8:	e7f4      	b.n	8008ed4 <__swsetup_r+0xb0>
 8008eea:	2000      	movs	r0, #0
 8008eec:	e7f7      	b.n	8008ede <__swsetup_r+0xba>
 8008eee:	bf00      	nop
 8008ef0:	20000014 	.word	0x20000014
 8008ef4:	0800d014 	.word	0x0800d014
 8008ef8:	0800d034 	.word	0x0800d034
 8008efc:	0800cff4 	.word	0x0800cff4

08008f00 <abort>:
 8008f00:	b508      	push	{r3, lr}
 8008f02:	2006      	movs	r0, #6
 8008f04:	f002 fbd4 	bl	800b6b0 <raise>
 8008f08:	2001      	movs	r0, #1
 8008f0a:	f7f9 ffb3 	bl	8002e74 <_exit>

08008f0e <quorem>:
 8008f0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f12:	6903      	ldr	r3, [r0, #16]
 8008f14:	690c      	ldr	r4, [r1, #16]
 8008f16:	42a3      	cmp	r3, r4
 8008f18:	4607      	mov	r7, r0
 8008f1a:	f2c0 8081 	blt.w	8009020 <quorem+0x112>
 8008f1e:	3c01      	subs	r4, #1
 8008f20:	f101 0814 	add.w	r8, r1, #20
 8008f24:	f100 0514 	add.w	r5, r0, #20
 8008f28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f36:	3301      	adds	r3, #1
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f42:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f46:	d331      	bcc.n	8008fac <quorem+0x9e>
 8008f48:	f04f 0e00 	mov.w	lr, #0
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	46ac      	mov	ip, r5
 8008f50:	46f2      	mov	sl, lr
 8008f52:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f56:	b293      	uxth	r3, r2
 8008f58:	fb06 e303 	mla	r3, r6, r3, lr
 8008f5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	ebaa 0303 	sub.w	r3, sl, r3
 8008f66:	f8dc a000 	ldr.w	sl, [ip]
 8008f6a:	0c12      	lsrs	r2, r2, #16
 8008f6c:	fa13 f38a 	uxtah	r3, r3, sl
 8008f70:	fb06 e202 	mla	r2, r6, r2, lr
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f7c:	b292      	uxth	r2, r2
 8008f7e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f86:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f8a:	4581      	cmp	r9, r0
 8008f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f90:	f84c 3b04 	str.w	r3, [ip], #4
 8008f94:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f98:	d2db      	bcs.n	8008f52 <quorem+0x44>
 8008f9a:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f9e:	b92b      	cbnz	r3, 8008fac <quorem+0x9e>
 8008fa0:	9b01      	ldr	r3, [sp, #4]
 8008fa2:	3b04      	subs	r3, #4
 8008fa4:	429d      	cmp	r5, r3
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	d32e      	bcc.n	8009008 <quorem+0xfa>
 8008faa:	613c      	str	r4, [r7, #16]
 8008fac:	4638      	mov	r0, r7
 8008fae:	f001 fec9 	bl	800ad44 <__mcmp>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	db24      	blt.n	8009000 <quorem+0xf2>
 8008fb6:	3601      	adds	r6, #1
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f04f 0c00 	mov.w	ip, #0
 8008fbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fc2:	f8d0 e000 	ldr.w	lr, [r0]
 8008fc6:	b293      	uxth	r3, r2
 8008fc8:	ebac 0303 	sub.w	r3, ip, r3
 8008fcc:	0c12      	lsrs	r2, r2, #16
 8008fce:	fa13 f38e 	uxtah	r3, r3, lr
 8008fd2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008fd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fe0:	45c1      	cmp	r9, r8
 8008fe2:	f840 3b04 	str.w	r3, [r0], #4
 8008fe6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008fea:	d2e8      	bcs.n	8008fbe <quorem+0xb0>
 8008fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ff0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ff4:	b922      	cbnz	r2, 8009000 <quorem+0xf2>
 8008ff6:	3b04      	subs	r3, #4
 8008ff8:	429d      	cmp	r5, r3
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	d30a      	bcc.n	8009014 <quorem+0x106>
 8008ffe:	613c      	str	r4, [r7, #16]
 8009000:	4630      	mov	r0, r6
 8009002:	b003      	add	sp, #12
 8009004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009008:	6812      	ldr	r2, [r2, #0]
 800900a:	3b04      	subs	r3, #4
 800900c:	2a00      	cmp	r2, #0
 800900e:	d1cc      	bne.n	8008faa <quorem+0x9c>
 8009010:	3c01      	subs	r4, #1
 8009012:	e7c7      	b.n	8008fa4 <quorem+0x96>
 8009014:	6812      	ldr	r2, [r2, #0]
 8009016:	3b04      	subs	r3, #4
 8009018:	2a00      	cmp	r2, #0
 800901a:	d1f0      	bne.n	8008ffe <quorem+0xf0>
 800901c:	3c01      	subs	r4, #1
 800901e:	e7eb      	b.n	8008ff8 <quorem+0xea>
 8009020:	2000      	movs	r0, #0
 8009022:	e7ee      	b.n	8009002 <quorem+0xf4>
 8009024:	0000      	movs	r0, r0
	...

08009028 <_dtoa_r>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	ed2d 8b04 	vpush	{d8-d9}
 8009030:	ec57 6b10 	vmov	r6, r7, d0
 8009034:	b093      	sub	sp, #76	; 0x4c
 8009036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800903c:	9106      	str	r1, [sp, #24]
 800903e:	ee10 aa10 	vmov	sl, s0
 8009042:	4604      	mov	r4, r0
 8009044:	9209      	str	r2, [sp, #36]	; 0x24
 8009046:	930c      	str	r3, [sp, #48]	; 0x30
 8009048:	46bb      	mov	fp, r7
 800904a:	b975      	cbnz	r5, 800906a <_dtoa_r+0x42>
 800904c:	2010      	movs	r0, #16
 800904e:	f001 fb6b 	bl	800a728 <malloc>
 8009052:	4602      	mov	r2, r0
 8009054:	6260      	str	r0, [r4, #36]	; 0x24
 8009056:	b920      	cbnz	r0, 8009062 <_dtoa_r+0x3a>
 8009058:	4ba7      	ldr	r3, [pc, #668]	; (80092f8 <_dtoa_r+0x2d0>)
 800905a:	21ea      	movs	r1, #234	; 0xea
 800905c:	48a7      	ldr	r0, [pc, #668]	; (80092fc <_dtoa_r+0x2d4>)
 800905e:	f7fd ff87 	bl	8006f70 <__assert_func>
 8009062:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009066:	6005      	str	r5, [r0, #0]
 8009068:	60c5      	str	r5, [r0, #12]
 800906a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800906c:	6819      	ldr	r1, [r3, #0]
 800906e:	b151      	cbz	r1, 8009086 <_dtoa_r+0x5e>
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	604a      	str	r2, [r1, #4]
 8009074:	2301      	movs	r3, #1
 8009076:	4093      	lsls	r3, r2
 8009078:	608b      	str	r3, [r1, #8]
 800907a:	4620      	mov	r0, r4
 800907c:	f001 fbd6 	bl	800a82c <_Bfree>
 8009080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	1e3b      	subs	r3, r7, #0
 8009088:	bfaa      	itet	ge
 800908a:	2300      	movge	r3, #0
 800908c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009090:	f8c8 3000 	strge.w	r3, [r8]
 8009094:	4b9a      	ldr	r3, [pc, #616]	; (8009300 <_dtoa_r+0x2d8>)
 8009096:	bfbc      	itt	lt
 8009098:	2201      	movlt	r2, #1
 800909a:	f8c8 2000 	strlt.w	r2, [r8]
 800909e:	ea33 030b 	bics.w	r3, r3, fp
 80090a2:	d11b      	bne.n	80090dc <_dtoa_r+0xb4>
 80090a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090b0:	4333      	orrs	r3, r6
 80090b2:	f000 8592 	beq.w	8009bda <_dtoa_r+0xbb2>
 80090b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b8:	b963      	cbnz	r3, 80090d4 <_dtoa_r+0xac>
 80090ba:	4b92      	ldr	r3, [pc, #584]	; (8009304 <_dtoa_r+0x2dc>)
 80090bc:	e022      	b.n	8009104 <_dtoa_r+0xdc>
 80090be:	4b92      	ldr	r3, [pc, #584]	; (8009308 <_dtoa_r+0x2e0>)
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	3308      	adds	r3, #8
 80090c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	9801      	ldr	r0, [sp, #4]
 80090ca:	b013      	add	sp, #76	; 0x4c
 80090cc:	ecbd 8b04 	vpop	{d8-d9}
 80090d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d4:	4b8b      	ldr	r3, [pc, #556]	; (8009304 <_dtoa_r+0x2dc>)
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	3303      	adds	r3, #3
 80090da:	e7f3      	b.n	80090c4 <_dtoa_r+0x9c>
 80090dc:	2200      	movs	r2, #0
 80090de:	2300      	movs	r3, #0
 80090e0:	4650      	mov	r0, sl
 80090e2:	4659      	mov	r1, fp
 80090e4:	f7f7 fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80090e8:	ec4b ab19 	vmov	d9, sl, fp
 80090ec:	4680      	mov	r8, r0
 80090ee:	b158      	cbz	r0, 8009108 <_dtoa_r+0xe0>
 80090f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090f2:	2301      	movs	r3, #1
 80090f4:	6013      	str	r3, [r2, #0]
 80090f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 856b 	beq.w	8009bd4 <_dtoa_r+0xbac>
 80090fe:	4883      	ldr	r0, [pc, #524]	; (800930c <_dtoa_r+0x2e4>)
 8009100:	6018      	str	r0, [r3, #0]
 8009102:	1e43      	subs	r3, r0, #1
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	e7df      	b.n	80090c8 <_dtoa_r+0xa0>
 8009108:	ec4b ab10 	vmov	d0, sl, fp
 800910c:	aa10      	add	r2, sp, #64	; 0x40
 800910e:	a911      	add	r1, sp, #68	; 0x44
 8009110:	4620      	mov	r0, r4
 8009112:	f001 ff39 	bl	800af88 <__d2b>
 8009116:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800911a:	ee08 0a10 	vmov	s16, r0
 800911e:	2d00      	cmp	r5, #0
 8009120:	f000 8084 	beq.w	800922c <_dtoa_r+0x204>
 8009124:	ee19 3a90 	vmov	r3, s19
 8009128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800912c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009130:	4656      	mov	r6, sl
 8009132:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800913a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800913e:	4b74      	ldr	r3, [pc, #464]	; (8009310 <_dtoa_r+0x2e8>)
 8009140:	2200      	movs	r2, #0
 8009142:	4630      	mov	r0, r6
 8009144:	4639      	mov	r1, r7
 8009146:	f7f7 f8a7 	bl	8000298 <__aeabi_dsub>
 800914a:	a365      	add	r3, pc, #404	; (adr r3, 80092e0 <_dtoa_r+0x2b8>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 fa5a 	bl	8000608 <__aeabi_dmul>
 8009154:	a364      	add	r3, pc, #400	; (adr r3, 80092e8 <_dtoa_r+0x2c0>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 f89f 	bl	800029c <__adddf3>
 800915e:	4606      	mov	r6, r0
 8009160:	4628      	mov	r0, r5
 8009162:	460f      	mov	r7, r1
 8009164:	f7f7 f9e6 	bl	8000534 <__aeabi_i2d>
 8009168:	a361      	add	r3, pc, #388	; (adr r3, 80092f0 <_dtoa_r+0x2c8>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f7f7 fa4b 	bl	8000608 <__aeabi_dmul>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 f88f 	bl	800029c <__adddf3>
 800917e:	4606      	mov	r6, r0
 8009180:	460f      	mov	r7, r1
 8009182:	f7f7 fcf1 	bl	8000b68 <__aeabi_d2iz>
 8009186:	2200      	movs	r2, #0
 8009188:	9000      	str	r0, [sp, #0]
 800918a:	2300      	movs	r3, #0
 800918c:	4630      	mov	r0, r6
 800918e:	4639      	mov	r1, r7
 8009190:	f7f7 fcac 	bl	8000aec <__aeabi_dcmplt>
 8009194:	b150      	cbz	r0, 80091ac <_dtoa_r+0x184>
 8009196:	9800      	ldr	r0, [sp, #0]
 8009198:	f7f7 f9cc 	bl	8000534 <__aeabi_i2d>
 800919c:	4632      	mov	r2, r6
 800919e:	463b      	mov	r3, r7
 80091a0:	f7f7 fc9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80091a4:	b910      	cbnz	r0, 80091ac <_dtoa_r+0x184>
 80091a6:	9b00      	ldr	r3, [sp, #0]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	9b00      	ldr	r3, [sp, #0]
 80091ae:	2b16      	cmp	r3, #22
 80091b0:	d85a      	bhi.n	8009268 <_dtoa_r+0x240>
 80091b2:	9a00      	ldr	r2, [sp, #0]
 80091b4:	4b57      	ldr	r3, [pc, #348]	; (8009314 <_dtoa_r+0x2ec>)
 80091b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	ec51 0b19 	vmov	r0, r1, d9
 80091c2:	f7f7 fc93 	bl	8000aec <__aeabi_dcmplt>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d050      	beq.n	800926c <_dtoa_r+0x244>
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	2300      	movs	r3, #0
 80091d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80091d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091d6:	1b5d      	subs	r5, r3, r5
 80091d8:	1e6b      	subs	r3, r5, #1
 80091da:	9305      	str	r3, [sp, #20]
 80091dc:	bf45      	ittet	mi
 80091de:	f1c5 0301 	rsbmi	r3, r5, #1
 80091e2:	9304      	strmi	r3, [sp, #16]
 80091e4:	2300      	movpl	r3, #0
 80091e6:	2300      	movmi	r3, #0
 80091e8:	bf4c      	ite	mi
 80091ea:	9305      	strmi	r3, [sp, #20]
 80091ec:	9304      	strpl	r3, [sp, #16]
 80091ee:	9b00      	ldr	r3, [sp, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	db3d      	blt.n	8009270 <_dtoa_r+0x248>
 80091f4:	9b05      	ldr	r3, [sp, #20]
 80091f6:	9a00      	ldr	r2, [sp, #0]
 80091f8:	920a      	str	r2, [sp, #40]	; 0x28
 80091fa:	4413      	add	r3, r2
 80091fc:	9305      	str	r3, [sp, #20]
 80091fe:	2300      	movs	r3, #0
 8009200:	9307      	str	r3, [sp, #28]
 8009202:	9b06      	ldr	r3, [sp, #24]
 8009204:	2b09      	cmp	r3, #9
 8009206:	f200 8089 	bhi.w	800931c <_dtoa_r+0x2f4>
 800920a:	2b05      	cmp	r3, #5
 800920c:	bfc4      	itt	gt
 800920e:	3b04      	subgt	r3, #4
 8009210:	9306      	strgt	r3, [sp, #24]
 8009212:	9b06      	ldr	r3, [sp, #24]
 8009214:	f1a3 0302 	sub.w	r3, r3, #2
 8009218:	bfcc      	ite	gt
 800921a:	2500      	movgt	r5, #0
 800921c:	2501      	movle	r5, #1
 800921e:	2b03      	cmp	r3, #3
 8009220:	f200 8087 	bhi.w	8009332 <_dtoa_r+0x30a>
 8009224:	e8df f003 	tbb	[pc, r3]
 8009228:	59383a2d 	.word	0x59383a2d
 800922c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009230:	441d      	add	r5, r3
 8009232:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009236:	2b20      	cmp	r3, #32
 8009238:	bfc1      	itttt	gt
 800923a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800923e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009242:	fa0b f303 	lslgt.w	r3, fp, r3
 8009246:	fa26 f000 	lsrgt.w	r0, r6, r0
 800924a:	bfda      	itte	le
 800924c:	f1c3 0320 	rsble	r3, r3, #32
 8009250:	fa06 f003 	lslle.w	r0, r6, r3
 8009254:	4318      	orrgt	r0, r3
 8009256:	f7f7 f95d 	bl	8000514 <__aeabi_ui2d>
 800925a:	2301      	movs	r3, #1
 800925c:	4606      	mov	r6, r0
 800925e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009262:	3d01      	subs	r5, #1
 8009264:	930e      	str	r3, [sp, #56]	; 0x38
 8009266:	e76a      	b.n	800913e <_dtoa_r+0x116>
 8009268:	2301      	movs	r3, #1
 800926a:	e7b2      	b.n	80091d2 <_dtoa_r+0x1aa>
 800926c:	900b      	str	r0, [sp, #44]	; 0x2c
 800926e:	e7b1      	b.n	80091d4 <_dtoa_r+0x1ac>
 8009270:	9b04      	ldr	r3, [sp, #16]
 8009272:	9a00      	ldr	r2, [sp, #0]
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	4253      	negs	r3, r2
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	2300      	movs	r3, #0
 800927e:	930a      	str	r3, [sp, #40]	; 0x28
 8009280:	e7bf      	b.n	8009202 <_dtoa_r+0x1da>
 8009282:	2300      	movs	r3, #0
 8009284:	9308      	str	r3, [sp, #32]
 8009286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009288:	2b00      	cmp	r3, #0
 800928a:	dc55      	bgt.n	8009338 <_dtoa_r+0x310>
 800928c:	2301      	movs	r3, #1
 800928e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009292:	461a      	mov	r2, r3
 8009294:	9209      	str	r2, [sp, #36]	; 0x24
 8009296:	e00c      	b.n	80092b2 <_dtoa_r+0x28a>
 8009298:	2301      	movs	r3, #1
 800929a:	e7f3      	b.n	8009284 <_dtoa_r+0x25c>
 800929c:	2300      	movs	r3, #0
 800929e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a0:	9308      	str	r3, [sp, #32]
 80092a2:	9b00      	ldr	r3, [sp, #0]
 80092a4:	4413      	add	r3, r2
 80092a6:	9302      	str	r3, [sp, #8]
 80092a8:	3301      	adds	r3, #1
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	9303      	str	r3, [sp, #12]
 80092ae:	bfb8      	it	lt
 80092b0:	2301      	movlt	r3, #1
 80092b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092b4:	2200      	movs	r2, #0
 80092b6:	6042      	str	r2, [r0, #4]
 80092b8:	2204      	movs	r2, #4
 80092ba:	f102 0614 	add.w	r6, r2, #20
 80092be:	429e      	cmp	r6, r3
 80092c0:	6841      	ldr	r1, [r0, #4]
 80092c2:	d93d      	bls.n	8009340 <_dtoa_r+0x318>
 80092c4:	4620      	mov	r0, r4
 80092c6:	f001 fa71 	bl	800a7ac <_Balloc>
 80092ca:	9001      	str	r0, [sp, #4]
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d13b      	bne.n	8009348 <_dtoa_r+0x320>
 80092d0:	4b11      	ldr	r3, [pc, #68]	; (8009318 <_dtoa_r+0x2f0>)
 80092d2:	4602      	mov	r2, r0
 80092d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092d8:	e6c0      	b.n	800905c <_dtoa_r+0x34>
 80092da:	2301      	movs	r3, #1
 80092dc:	e7df      	b.n	800929e <_dtoa_r+0x276>
 80092de:	bf00      	nop
 80092e0:	636f4361 	.word	0x636f4361
 80092e4:	3fd287a7 	.word	0x3fd287a7
 80092e8:	8b60c8b3 	.word	0x8b60c8b3
 80092ec:	3fc68a28 	.word	0x3fc68a28
 80092f0:	509f79fb 	.word	0x509f79fb
 80092f4:	3fd34413 	.word	0x3fd34413
 80092f8:	0800cf6e 	.word	0x0800cf6e
 80092fc:	0800cf85 	.word	0x0800cf85
 8009300:	7ff00000 	.word	0x7ff00000
 8009304:	0800cf6a 	.word	0x0800cf6a
 8009308:	0800cf61 	.word	0x0800cf61
 800930c:	0800cde6 	.word	0x0800cde6
 8009310:	3ff80000 	.word	0x3ff80000
 8009314:	0800d158 	.word	0x0800d158
 8009318:	0800cfe0 	.word	0x0800cfe0
 800931c:	2501      	movs	r5, #1
 800931e:	2300      	movs	r3, #0
 8009320:	9306      	str	r3, [sp, #24]
 8009322:	9508      	str	r5, [sp, #32]
 8009324:	f04f 33ff 	mov.w	r3, #4294967295
 8009328:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	2312      	movs	r3, #18
 8009330:	e7b0      	b.n	8009294 <_dtoa_r+0x26c>
 8009332:	2301      	movs	r3, #1
 8009334:	9308      	str	r3, [sp, #32]
 8009336:	e7f5      	b.n	8009324 <_dtoa_r+0x2fc>
 8009338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800933e:	e7b8      	b.n	80092b2 <_dtoa_r+0x28a>
 8009340:	3101      	adds	r1, #1
 8009342:	6041      	str	r1, [r0, #4]
 8009344:	0052      	lsls	r2, r2, #1
 8009346:	e7b8      	b.n	80092ba <_dtoa_r+0x292>
 8009348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800934a:	9a01      	ldr	r2, [sp, #4]
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	9b03      	ldr	r3, [sp, #12]
 8009350:	2b0e      	cmp	r3, #14
 8009352:	f200 809d 	bhi.w	8009490 <_dtoa_r+0x468>
 8009356:	2d00      	cmp	r5, #0
 8009358:	f000 809a 	beq.w	8009490 <_dtoa_r+0x468>
 800935c:	9b00      	ldr	r3, [sp, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	dd32      	ble.n	80093c8 <_dtoa_r+0x3a0>
 8009362:	4ab7      	ldr	r2, [pc, #732]	; (8009640 <_dtoa_r+0x618>)
 8009364:	f003 030f 	and.w	r3, r3, #15
 8009368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800936c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009370:	9b00      	ldr	r3, [sp, #0]
 8009372:	05d8      	lsls	r0, r3, #23
 8009374:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009378:	d516      	bpl.n	80093a8 <_dtoa_r+0x380>
 800937a:	4bb2      	ldr	r3, [pc, #712]	; (8009644 <_dtoa_r+0x61c>)
 800937c:	ec51 0b19 	vmov	r0, r1, d9
 8009380:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009384:	f7f7 fa6a 	bl	800085c <__aeabi_ddiv>
 8009388:	f007 070f 	and.w	r7, r7, #15
 800938c:	4682      	mov	sl, r0
 800938e:	468b      	mov	fp, r1
 8009390:	2503      	movs	r5, #3
 8009392:	4eac      	ldr	r6, [pc, #688]	; (8009644 <_dtoa_r+0x61c>)
 8009394:	b957      	cbnz	r7, 80093ac <_dtoa_r+0x384>
 8009396:	4642      	mov	r2, r8
 8009398:	464b      	mov	r3, r9
 800939a:	4650      	mov	r0, sl
 800939c:	4659      	mov	r1, fp
 800939e:	f7f7 fa5d 	bl	800085c <__aeabi_ddiv>
 80093a2:	4682      	mov	sl, r0
 80093a4:	468b      	mov	fp, r1
 80093a6:	e028      	b.n	80093fa <_dtoa_r+0x3d2>
 80093a8:	2502      	movs	r5, #2
 80093aa:	e7f2      	b.n	8009392 <_dtoa_r+0x36a>
 80093ac:	07f9      	lsls	r1, r7, #31
 80093ae:	d508      	bpl.n	80093c2 <_dtoa_r+0x39a>
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093b8:	f7f7 f926 	bl	8000608 <__aeabi_dmul>
 80093bc:	3501      	adds	r5, #1
 80093be:	4680      	mov	r8, r0
 80093c0:	4689      	mov	r9, r1
 80093c2:	107f      	asrs	r7, r7, #1
 80093c4:	3608      	adds	r6, #8
 80093c6:	e7e5      	b.n	8009394 <_dtoa_r+0x36c>
 80093c8:	f000 809b 	beq.w	8009502 <_dtoa_r+0x4da>
 80093cc:	9b00      	ldr	r3, [sp, #0]
 80093ce:	4f9d      	ldr	r7, [pc, #628]	; (8009644 <_dtoa_r+0x61c>)
 80093d0:	425e      	negs	r6, r3
 80093d2:	4b9b      	ldr	r3, [pc, #620]	; (8009640 <_dtoa_r+0x618>)
 80093d4:	f006 020f 	and.w	r2, r6, #15
 80093d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	ec51 0b19 	vmov	r0, r1, d9
 80093e4:	f7f7 f910 	bl	8000608 <__aeabi_dmul>
 80093e8:	1136      	asrs	r6, r6, #4
 80093ea:	4682      	mov	sl, r0
 80093ec:	468b      	mov	fp, r1
 80093ee:	2300      	movs	r3, #0
 80093f0:	2502      	movs	r5, #2
 80093f2:	2e00      	cmp	r6, #0
 80093f4:	d17a      	bne.n	80094ec <_dtoa_r+0x4c4>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1d3      	bne.n	80093a2 <_dtoa_r+0x37a>
 80093fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 8082 	beq.w	8009506 <_dtoa_r+0x4de>
 8009402:	4b91      	ldr	r3, [pc, #580]	; (8009648 <_dtoa_r+0x620>)
 8009404:	2200      	movs	r2, #0
 8009406:	4650      	mov	r0, sl
 8009408:	4659      	mov	r1, fp
 800940a:	f7f7 fb6f 	bl	8000aec <__aeabi_dcmplt>
 800940e:	2800      	cmp	r0, #0
 8009410:	d079      	beq.n	8009506 <_dtoa_r+0x4de>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d076      	beq.n	8009506 <_dtoa_r+0x4de>
 8009418:	9b02      	ldr	r3, [sp, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	dd36      	ble.n	800948c <_dtoa_r+0x464>
 800941e:	9b00      	ldr	r3, [sp, #0]
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	1e5f      	subs	r7, r3, #1
 8009426:	2200      	movs	r2, #0
 8009428:	4b88      	ldr	r3, [pc, #544]	; (800964c <_dtoa_r+0x624>)
 800942a:	f7f7 f8ed 	bl	8000608 <__aeabi_dmul>
 800942e:	9e02      	ldr	r6, [sp, #8]
 8009430:	4682      	mov	sl, r0
 8009432:	468b      	mov	fp, r1
 8009434:	3501      	adds	r5, #1
 8009436:	4628      	mov	r0, r5
 8009438:	f7f7 f87c 	bl	8000534 <__aeabi_i2d>
 800943c:	4652      	mov	r2, sl
 800943e:	465b      	mov	r3, fp
 8009440:	f7f7 f8e2 	bl	8000608 <__aeabi_dmul>
 8009444:	4b82      	ldr	r3, [pc, #520]	; (8009650 <_dtoa_r+0x628>)
 8009446:	2200      	movs	r2, #0
 8009448:	f7f6 ff28 	bl	800029c <__adddf3>
 800944c:	46d0      	mov	r8, sl
 800944e:	46d9      	mov	r9, fp
 8009450:	4682      	mov	sl, r0
 8009452:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009456:	2e00      	cmp	r6, #0
 8009458:	d158      	bne.n	800950c <_dtoa_r+0x4e4>
 800945a:	4b7e      	ldr	r3, [pc, #504]	; (8009654 <_dtoa_r+0x62c>)
 800945c:	2200      	movs	r2, #0
 800945e:	4640      	mov	r0, r8
 8009460:	4649      	mov	r1, r9
 8009462:	f7f6 ff19 	bl	8000298 <__aeabi_dsub>
 8009466:	4652      	mov	r2, sl
 8009468:	465b      	mov	r3, fp
 800946a:	4680      	mov	r8, r0
 800946c:	4689      	mov	r9, r1
 800946e:	f7f7 fb5b 	bl	8000b28 <__aeabi_dcmpgt>
 8009472:	2800      	cmp	r0, #0
 8009474:	f040 8295 	bne.w	80099a2 <_dtoa_r+0x97a>
 8009478:	4652      	mov	r2, sl
 800947a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800947e:	4640      	mov	r0, r8
 8009480:	4649      	mov	r1, r9
 8009482:	f7f7 fb33 	bl	8000aec <__aeabi_dcmplt>
 8009486:	2800      	cmp	r0, #0
 8009488:	f040 8289 	bne.w	800999e <_dtoa_r+0x976>
 800948c:	ec5b ab19 	vmov	sl, fp, d9
 8009490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009492:	2b00      	cmp	r3, #0
 8009494:	f2c0 8148 	blt.w	8009728 <_dtoa_r+0x700>
 8009498:	9a00      	ldr	r2, [sp, #0]
 800949a:	2a0e      	cmp	r2, #14
 800949c:	f300 8144 	bgt.w	8009728 <_dtoa_r+0x700>
 80094a0:	4b67      	ldr	r3, [pc, #412]	; (8009640 <_dtoa_r+0x618>)
 80094a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f280 80d5 	bge.w	800965c <_dtoa_r+0x634>
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f300 80d1 	bgt.w	800965c <_dtoa_r+0x634>
 80094ba:	f040 826f 	bne.w	800999c <_dtoa_r+0x974>
 80094be:	4b65      	ldr	r3, [pc, #404]	; (8009654 <_dtoa_r+0x62c>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	f7f7 f89f 	bl	8000608 <__aeabi_dmul>
 80094ca:	4652      	mov	r2, sl
 80094cc:	465b      	mov	r3, fp
 80094ce:	f7f7 fb21 	bl	8000b14 <__aeabi_dcmpge>
 80094d2:	9e03      	ldr	r6, [sp, #12]
 80094d4:	4637      	mov	r7, r6
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f040 8245 	bne.w	8009966 <_dtoa_r+0x93e>
 80094dc:	9d01      	ldr	r5, [sp, #4]
 80094de:	2331      	movs	r3, #49	; 0x31
 80094e0:	f805 3b01 	strb.w	r3, [r5], #1
 80094e4:	9b00      	ldr	r3, [sp, #0]
 80094e6:	3301      	adds	r3, #1
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	e240      	b.n	800996e <_dtoa_r+0x946>
 80094ec:	07f2      	lsls	r2, r6, #31
 80094ee:	d505      	bpl.n	80094fc <_dtoa_r+0x4d4>
 80094f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094f4:	f7f7 f888 	bl	8000608 <__aeabi_dmul>
 80094f8:	3501      	adds	r5, #1
 80094fa:	2301      	movs	r3, #1
 80094fc:	1076      	asrs	r6, r6, #1
 80094fe:	3708      	adds	r7, #8
 8009500:	e777      	b.n	80093f2 <_dtoa_r+0x3ca>
 8009502:	2502      	movs	r5, #2
 8009504:	e779      	b.n	80093fa <_dtoa_r+0x3d2>
 8009506:	9f00      	ldr	r7, [sp, #0]
 8009508:	9e03      	ldr	r6, [sp, #12]
 800950a:	e794      	b.n	8009436 <_dtoa_r+0x40e>
 800950c:	9901      	ldr	r1, [sp, #4]
 800950e:	4b4c      	ldr	r3, [pc, #304]	; (8009640 <_dtoa_r+0x618>)
 8009510:	4431      	add	r1, r6
 8009512:	910d      	str	r1, [sp, #52]	; 0x34
 8009514:	9908      	ldr	r1, [sp, #32]
 8009516:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800951a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800951e:	2900      	cmp	r1, #0
 8009520:	d043      	beq.n	80095aa <_dtoa_r+0x582>
 8009522:	494d      	ldr	r1, [pc, #308]	; (8009658 <_dtoa_r+0x630>)
 8009524:	2000      	movs	r0, #0
 8009526:	f7f7 f999 	bl	800085c <__aeabi_ddiv>
 800952a:	4652      	mov	r2, sl
 800952c:	465b      	mov	r3, fp
 800952e:	f7f6 feb3 	bl	8000298 <__aeabi_dsub>
 8009532:	9d01      	ldr	r5, [sp, #4]
 8009534:	4682      	mov	sl, r0
 8009536:	468b      	mov	fp, r1
 8009538:	4649      	mov	r1, r9
 800953a:	4640      	mov	r0, r8
 800953c:	f7f7 fb14 	bl	8000b68 <__aeabi_d2iz>
 8009540:	4606      	mov	r6, r0
 8009542:	f7f6 fff7 	bl	8000534 <__aeabi_i2d>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4640      	mov	r0, r8
 800954c:	4649      	mov	r1, r9
 800954e:	f7f6 fea3 	bl	8000298 <__aeabi_dsub>
 8009552:	3630      	adds	r6, #48	; 0x30
 8009554:	f805 6b01 	strb.w	r6, [r5], #1
 8009558:	4652      	mov	r2, sl
 800955a:	465b      	mov	r3, fp
 800955c:	4680      	mov	r8, r0
 800955e:	4689      	mov	r9, r1
 8009560:	f7f7 fac4 	bl	8000aec <__aeabi_dcmplt>
 8009564:	2800      	cmp	r0, #0
 8009566:	d163      	bne.n	8009630 <_dtoa_r+0x608>
 8009568:	4642      	mov	r2, r8
 800956a:	464b      	mov	r3, r9
 800956c:	4936      	ldr	r1, [pc, #216]	; (8009648 <_dtoa_r+0x620>)
 800956e:	2000      	movs	r0, #0
 8009570:	f7f6 fe92 	bl	8000298 <__aeabi_dsub>
 8009574:	4652      	mov	r2, sl
 8009576:	465b      	mov	r3, fp
 8009578:	f7f7 fab8 	bl	8000aec <__aeabi_dcmplt>
 800957c:	2800      	cmp	r0, #0
 800957e:	f040 80b5 	bne.w	80096ec <_dtoa_r+0x6c4>
 8009582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009584:	429d      	cmp	r5, r3
 8009586:	d081      	beq.n	800948c <_dtoa_r+0x464>
 8009588:	4b30      	ldr	r3, [pc, #192]	; (800964c <_dtoa_r+0x624>)
 800958a:	2200      	movs	r2, #0
 800958c:	4650      	mov	r0, sl
 800958e:	4659      	mov	r1, fp
 8009590:	f7f7 f83a 	bl	8000608 <__aeabi_dmul>
 8009594:	4b2d      	ldr	r3, [pc, #180]	; (800964c <_dtoa_r+0x624>)
 8009596:	4682      	mov	sl, r0
 8009598:	468b      	mov	fp, r1
 800959a:	4640      	mov	r0, r8
 800959c:	4649      	mov	r1, r9
 800959e:	2200      	movs	r2, #0
 80095a0:	f7f7 f832 	bl	8000608 <__aeabi_dmul>
 80095a4:	4680      	mov	r8, r0
 80095a6:	4689      	mov	r9, r1
 80095a8:	e7c6      	b.n	8009538 <_dtoa_r+0x510>
 80095aa:	4650      	mov	r0, sl
 80095ac:	4659      	mov	r1, fp
 80095ae:	f7f7 f82b 	bl	8000608 <__aeabi_dmul>
 80095b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095b4:	9d01      	ldr	r5, [sp, #4]
 80095b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80095b8:	4682      	mov	sl, r0
 80095ba:	468b      	mov	fp, r1
 80095bc:	4649      	mov	r1, r9
 80095be:	4640      	mov	r0, r8
 80095c0:	f7f7 fad2 	bl	8000b68 <__aeabi_d2iz>
 80095c4:	4606      	mov	r6, r0
 80095c6:	f7f6 ffb5 	bl	8000534 <__aeabi_i2d>
 80095ca:	3630      	adds	r6, #48	; 0x30
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	4640      	mov	r0, r8
 80095d2:	4649      	mov	r1, r9
 80095d4:	f7f6 fe60 	bl	8000298 <__aeabi_dsub>
 80095d8:	f805 6b01 	strb.w	r6, [r5], #1
 80095dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095de:	429d      	cmp	r5, r3
 80095e0:	4680      	mov	r8, r0
 80095e2:	4689      	mov	r9, r1
 80095e4:	f04f 0200 	mov.w	r2, #0
 80095e8:	d124      	bne.n	8009634 <_dtoa_r+0x60c>
 80095ea:	4b1b      	ldr	r3, [pc, #108]	; (8009658 <_dtoa_r+0x630>)
 80095ec:	4650      	mov	r0, sl
 80095ee:	4659      	mov	r1, fp
 80095f0:	f7f6 fe54 	bl	800029c <__adddf3>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4640      	mov	r0, r8
 80095fa:	4649      	mov	r1, r9
 80095fc:	f7f7 fa94 	bl	8000b28 <__aeabi_dcmpgt>
 8009600:	2800      	cmp	r0, #0
 8009602:	d173      	bne.n	80096ec <_dtoa_r+0x6c4>
 8009604:	4652      	mov	r2, sl
 8009606:	465b      	mov	r3, fp
 8009608:	4913      	ldr	r1, [pc, #76]	; (8009658 <_dtoa_r+0x630>)
 800960a:	2000      	movs	r0, #0
 800960c:	f7f6 fe44 	bl	8000298 <__aeabi_dsub>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	4640      	mov	r0, r8
 8009616:	4649      	mov	r1, r9
 8009618:	f7f7 fa68 	bl	8000aec <__aeabi_dcmplt>
 800961c:	2800      	cmp	r0, #0
 800961e:	f43f af35 	beq.w	800948c <_dtoa_r+0x464>
 8009622:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009624:	1e6b      	subs	r3, r5, #1
 8009626:	930f      	str	r3, [sp, #60]	; 0x3c
 8009628:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800962c:	2b30      	cmp	r3, #48	; 0x30
 800962e:	d0f8      	beq.n	8009622 <_dtoa_r+0x5fa>
 8009630:	9700      	str	r7, [sp, #0]
 8009632:	e049      	b.n	80096c8 <_dtoa_r+0x6a0>
 8009634:	4b05      	ldr	r3, [pc, #20]	; (800964c <_dtoa_r+0x624>)
 8009636:	f7f6 ffe7 	bl	8000608 <__aeabi_dmul>
 800963a:	4680      	mov	r8, r0
 800963c:	4689      	mov	r9, r1
 800963e:	e7bd      	b.n	80095bc <_dtoa_r+0x594>
 8009640:	0800d158 	.word	0x0800d158
 8009644:	0800d130 	.word	0x0800d130
 8009648:	3ff00000 	.word	0x3ff00000
 800964c:	40240000 	.word	0x40240000
 8009650:	401c0000 	.word	0x401c0000
 8009654:	40140000 	.word	0x40140000
 8009658:	3fe00000 	.word	0x3fe00000
 800965c:	9d01      	ldr	r5, [sp, #4]
 800965e:	4656      	mov	r6, sl
 8009660:	465f      	mov	r7, fp
 8009662:	4642      	mov	r2, r8
 8009664:	464b      	mov	r3, r9
 8009666:	4630      	mov	r0, r6
 8009668:	4639      	mov	r1, r7
 800966a:	f7f7 f8f7 	bl	800085c <__aeabi_ddiv>
 800966e:	f7f7 fa7b 	bl	8000b68 <__aeabi_d2iz>
 8009672:	4682      	mov	sl, r0
 8009674:	f7f6 ff5e 	bl	8000534 <__aeabi_i2d>
 8009678:	4642      	mov	r2, r8
 800967a:	464b      	mov	r3, r9
 800967c:	f7f6 ffc4 	bl	8000608 <__aeabi_dmul>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	4630      	mov	r0, r6
 8009686:	4639      	mov	r1, r7
 8009688:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800968c:	f7f6 fe04 	bl	8000298 <__aeabi_dsub>
 8009690:	f805 6b01 	strb.w	r6, [r5], #1
 8009694:	9e01      	ldr	r6, [sp, #4]
 8009696:	9f03      	ldr	r7, [sp, #12]
 8009698:	1bae      	subs	r6, r5, r6
 800969a:	42b7      	cmp	r7, r6
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	d135      	bne.n	800970e <_dtoa_r+0x6e6>
 80096a2:	f7f6 fdfb 	bl	800029c <__adddf3>
 80096a6:	4642      	mov	r2, r8
 80096a8:	464b      	mov	r3, r9
 80096aa:	4606      	mov	r6, r0
 80096ac:	460f      	mov	r7, r1
 80096ae:	f7f7 fa3b 	bl	8000b28 <__aeabi_dcmpgt>
 80096b2:	b9d0      	cbnz	r0, 80096ea <_dtoa_r+0x6c2>
 80096b4:	4642      	mov	r2, r8
 80096b6:	464b      	mov	r3, r9
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	f7f7 fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80096c0:	b110      	cbz	r0, 80096c8 <_dtoa_r+0x6a0>
 80096c2:	f01a 0f01 	tst.w	sl, #1
 80096c6:	d110      	bne.n	80096ea <_dtoa_r+0x6c2>
 80096c8:	4620      	mov	r0, r4
 80096ca:	ee18 1a10 	vmov	r1, s16
 80096ce:	f001 f8ad 	bl	800a82c <_Bfree>
 80096d2:	2300      	movs	r3, #0
 80096d4:	9800      	ldr	r0, [sp, #0]
 80096d6:	702b      	strb	r3, [r5, #0]
 80096d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096da:	3001      	adds	r0, #1
 80096dc:	6018      	str	r0, [r3, #0]
 80096de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f43f acf1 	beq.w	80090c8 <_dtoa_r+0xa0>
 80096e6:	601d      	str	r5, [r3, #0]
 80096e8:	e4ee      	b.n	80090c8 <_dtoa_r+0xa0>
 80096ea:	9f00      	ldr	r7, [sp, #0]
 80096ec:	462b      	mov	r3, r5
 80096ee:	461d      	mov	r5, r3
 80096f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096f4:	2a39      	cmp	r2, #57	; 0x39
 80096f6:	d106      	bne.n	8009706 <_dtoa_r+0x6de>
 80096f8:	9a01      	ldr	r2, [sp, #4]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d1f7      	bne.n	80096ee <_dtoa_r+0x6c6>
 80096fe:	9901      	ldr	r1, [sp, #4]
 8009700:	2230      	movs	r2, #48	; 0x30
 8009702:	3701      	adds	r7, #1
 8009704:	700a      	strb	r2, [r1, #0]
 8009706:	781a      	ldrb	r2, [r3, #0]
 8009708:	3201      	adds	r2, #1
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	e790      	b.n	8009630 <_dtoa_r+0x608>
 800970e:	4ba6      	ldr	r3, [pc, #664]	; (80099a8 <_dtoa_r+0x980>)
 8009710:	2200      	movs	r2, #0
 8009712:	f7f6 ff79 	bl	8000608 <__aeabi_dmul>
 8009716:	2200      	movs	r2, #0
 8009718:	2300      	movs	r3, #0
 800971a:	4606      	mov	r6, r0
 800971c:	460f      	mov	r7, r1
 800971e:	f7f7 f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 8009722:	2800      	cmp	r0, #0
 8009724:	d09d      	beq.n	8009662 <_dtoa_r+0x63a>
 8009726:	e7cf      	b.n	80096c8 <_dtoa_r+0x6a0>
 8009728:	9a08      	ldr	r2, [sp, #32]
 800972a:	2a00      	cmp	r2, #0
 800972c:	f000 80d7 	beq.w	80098de <_dtoa_r+0x8b6>
 8009730:	9a06      	ldr	r2, [sp, #24]
 8009732:	2a01      	cmp	r2, #1
 8009734:	f300 80ba 	bgt.w	80098ac <_dtoa_r+0x884>
 8009738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800973a:	2a00      	cmp	r2, #0
 800973c:	f000 80b2 	beq.w	80098a4 <_dtoa_r+0x87c>
 8009740:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009744:	9e07      	ldr	r6, [sp, #28]
 8009746:	9d04      	ldr	r5, [sp, #16]
 8009748:	9a04      	ldr	r2, [sp, #16]
 800974a:	441a      	add	r2, r3
 800974c:	9204      	str	r2, [sp, #16]
 800974e:	9a05      	ldr	r2, [sp, #20]
 8009750:	2101      	movs	r1, #1
 8009752:	441a      	add	r2, r3
 8009754:	4620      	mov	r0, r4
 8009756:	9205      	str	r2, [sp, #20]
 8009758:	f001 f96a 	bl	800aa30 <__i2b>
 800975c:	4607      	mov	r7, r0
 800975e:	2d00      	cmp	r5, #0
 8009760:	dd0c      	ble.n	800977c <_dtoa_r+0x754>
 8009762:	9b05      	ldr	r3, [sp, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	dd09      	ble.n	800977c <_dtoa_r+0x754>
 8009768:	42ab      	cmp	r3, r5
 800976a:	9a04      	ldr	r2, [sp, #16]
 800976c:	bfa8      	it	ge
 800976e:	462b      	movge	r3, r5
 8009770:	1ad2      	subs	r2, r2, r3
 8009772:	9204      	str	r2, [sp, #16]
 8009774:	9a05      	ldr	r2, [sp, #20]
 8009776:	1aed      	subs	r5, r5, r3
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	9305      	str	r3, [sp, #20]
 800977c:	9b07      	ldr	r3, [sp, #28]
 800977e:	b31b      	cbz	r3, 80097c8 <_dtoa_r+0x7a0>
 8009780:	9b08      	ldr	r3, [sp, #32]
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 80af 	beq.w	80098e6 <_dtoa_r+0x8be>
 8009788:	2e00      	cmp	r6, #0
 800978a:	dd13      	ble.n	80097b4 <_dtoa_r+0x78c>
 800978c:	4639      	mov	r1, r7
 800978e:	4632      	mov	r2, r6
 8009790:	4620      	mov	r0, r4
 8009792:	f001 fa0d 	bl	800abb0 <__pow5mult>
 8009796:	ee18 2a10 	vmov	r2, s16
 800979a:	4601      	mov	r1, r0
 800979c:	4607      	mov	r7, r0
 800979e:	4620      	mov	r0, r4
 80097a0:	f001 f95c 	bl	800aa5c <__multiply>
 80097a4:	ee18 1a10 	vmov	r1, s16
 80097a8:	4680      	mov	r8, r0
 80097aa:	4620      	mov	r0, r4
 80097ac:	f001 f83e 	bl	800a82c <_Bfree>
 80097b0:	ee08 8a10 	vmov	s16, r8
 80097b4:	9b07      	ldr	r3, [sp, #28]
 80097b6:	1b9a      	subs	r2, r3, r6
 80097b8:	d006      	beq.n	80097c8 <_dtoa_r+0x7a0>
 80097ba:	ee18 1a10 	vmov	r1, s16
 80097be:	4620      	mov	r0, r4
 80097c0:	f001 f9f6 	bl	800abb0 <__pow5mult>
 80097c4:	ee08 0a10 	vmov	s16, r0
 80097c8:	2101      	movs	r1, #1
 80097ca:	4620      	mov	r0, r4
 80097cc:	f001 f930 	bl	800aa30 <__i2b>
 80097d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	4606      	mov	r6, r0
 80097d6:	f340 8088 	ble.w	80098ea <_dtoa_r+0x8c2>
 80097da:	461a      	mov	r2, r3
 80097dc:	4601      	mov	r1, r0
 80097de:	4620      	mov	r0, r4
 80097e0:	f001 f9e6 	bl	800abb0 <__pow5mult>
 80097e4:	9b06      	ldr	r3, [sp, #24]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	4606      	mov	r6, r0
 80097ea:	f340 8081 	ble.w	80098f0 <_dtoa_r+0x8c8>
 80097ee:	f04f 0800 	mov.w	r8, #0
 80097f2:	6933      	ldr	r3, [r6, #16]
 80097f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097f8:	6918      	ldr	r0, [r3, #16]
 80097fa:	f001 f8c9 	bl	800a990 <__hi0bits>
 80097fe:	f1c0 0020 	rsb	r0, r0, #32
 8009802:	9b05      	ldr	r3, [sp, #20]
 8009804:	4418      	add	r0, r3
 8009806:	f010 001f 	ands.w	r0, r0, #31
 800980a:	f000 8092 	beq.w	8009932 <_dtoa_r+0x90a>
 800980e:	f1c0 0320 	rsb	r3, r0, #32
 8009812:	2b04      	cmp	r3, #4
 8009814:	f340 808a 	ble.w	800992c <_dtoa_r+0x904>
 8009818:	f1c0 001c 	rsb	r0, r0, #28
 800981c:	9b04      	ldr	r3, [sp, #16]
 800981e:	4403      	add	r3, r0
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	9b05      	ldr	r3, [sp, #20]
 8009824:	4403      	add	r3, r0
 8009826:	4405      	add	r5, r0
 8009828:	9305      	str	r3, [sp, #20]
 800982a:	9b04      	ldr	r3, [sp, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	dd07      	ble.n	8009840 <_dtoa_r+0x818>
 8009830:	ee18 1a10 	vmov	r1, s16
 8009834:	461a      	mov	r2, r3
 8009836:	4620      	mov	r0, r4
 8009838:	f001 fa14 	bl	800ac64 <__lshift>
 800983c:	ee08 0a10 	vmov	s16, r0
 8009840:	9b05      	ldr	r3, [sp, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	dd05      	ble.n	8009852 <_dtoa_r+0x82a>
 8009846:	4631      	mov	r1, r6
 8009848:	461a      	mov	r2, r3
 800984a:	4620      	mov	r0, r4
 800984c:	f001 fa0a 	bl	800ac64 <__lshift>
 8009850:	4606      	mov	r6, r0
 8009852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d06e      	beq.n	8009936 <_dtoa_r+0x90e>
 8009858:	ee18 0a10 	vmov	r0, s16
 800985c:	4631      	mov	r1, r6
 800985e:	f001 fa71 	bl	800ad44 <__mcmp>
 8009862:	2800      	cmp	r0, #0
 8009864:	da67      	bge.n	8009936 <_dtoa_r+0x90e>
 8009866:	9b00      	ldr	r3, [sp, #0]
 8009868:	3b01      	subs	r3, #1
 800986a:	ee18 1a10 	vmov	r1, s16
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	220a      	movs	r2, #10
 8009872:	2300      	movs	r3, #0
 8009874:	4620      	mov	r0, r4
 8009876:	f000 fffb 	bl	800a870 <__multadd>
 800987a:	9b08      	ldr	r3, [sp, #32]
 800987c:	ee08 0a10 	vmov	s16, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 81b1 	beq.w	8009be8 <_dtoa_r+0xbc0>
 8009886:	2300      	movs	r3, #0
 8009888:	4639      	mov	r1, r7
 800988a:	220a      	movs	r2, #10
 800988c:	4620      	mov	r0, r4
 800988e:	f000 ffef 	bl	800a870 <__multadd>
 8009892:	9b02      	ldr	r3, [sp, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	4607      	mov	r7, r0
 8009898:	f300 808e 	bgt.w	80099b8 <_dtoa_r+0x990>
 800989c:	9b06      	ldr	r3, [sp, #24]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	dc51      	bgt.n	8009946 <_dtoa_r+0x91e>
 80098a2:	e089      	b.n	80099b8 <_dtoa_r+0x990>
 80098a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098aa:	e74b      	b.n	8009744 <_dtoa_r+0x71c>
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	1e5e      	subs	r6, r3, #1
 80098b0:	9b07      	ldr	r3, [sp, #28]
 80098b2:	42b3      	cmp	r3, r6
 80098b4:	bfbf      	itttt	lt
 80098b6:	9b07      	ldrlt	r3, [sp, #28]
 80098b8:	9607      	strlt	r6, [sp, #28]
 80098ba:	1af2      	sublt	r2, r6, r3
 80098bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80098be:	bfb6      	itet	lt
 80098c0:	189b      	addlt	r3, r3, r2
 80098c2:	1b9e      	subge	r6, r3, r6
 80098c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	bfb8      	it	lt
 80098ca:	2600      	movlt	r6, #0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	bfb7      	itett	lt
 80098d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80098d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80098d8:	1a9d      	sublt	r5, r3, r2
 80098da:	2300      	movlt	r3, #0
 80098dc:	e734      	b.n	8009748 <_dtoa_r+0x720>
 80098de:	9e07      	ldr	r6, [sp, #28]
 80098e0:	9d04      	ldr	r5, [sp, #16]
 80098e2:	9f08      	ldr	r7, [sp, #32]
 80098e4:	e73b      	b.n	800975e <_dtoa_r+0x736>
 80098e6:	9a07      	ldr	r2, [sp, #28]
 80098e8:	e767      	b.n	80097ba <_dtoa_r+0x792>
 80098ea:	9b06      	ldr	r3, [sp, #24]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	dc18      	bgt.n	8009922 <_dtoa_r+0x8fa>
 80098f0:	f1ba 0f00 	cmp.w	sl, #0
 80098f4:	d115      	bne.n	8009922 <_dtoa_r+0x8fa>
 80098f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098fa:	b993      	cbnz	r3, 8009922 <_dtoa_r+0x8fa>
 80098fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009900:	0d1b      	lsrs	r3, r3, #20
 8009902:	051b      	lsls	r3, r3, #20
 8009904:	b183      	cbz	r3, 8009928 <_dtoa_r+0x900>
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	3301      	adds	r3, #1
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	9b05      	ldr	r3, [sp, #20]
 800990e:	3301      	adds	r3, #1
 8009910:	9305      	str	r3, [sp, #20]
 8009912:	f04f 0801 	mov.w	r8, #1
 8009916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009918:	2b00      	cmp	r3, #0
 800991a:	f47f af6a 	bne.w	80097f2 <_dtoa_r+0x7ca>
 800991e:	2001      	movs	r0, #1
 8009920:	e76f      	b.n	8009802 <_dtoa_r+0x7da>
 8009922:	f04f 0800 	mov.w	r8, #0
 8009926:	e7f6      	b.n	8009916 <_dtoa_r+0x8ee>
 8009928:	4698      	mov	r8, r3
 800992a:	e7f4      	b.n	8009916 <_dtoa_r+0x8ee>
 800992c:	f43f af7d 	beq.w	800982a <_dtoa_r+0x802>
 8009930:	4618      	mov	r0, r3
 8009932:	301c      	adds	r0, #28
 8009934:	e772      	b.n	800981c <_dtoa_r+0x7f4>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	dc37      	bgt.n	80099ac <_dtoa_r+0x984>
 800993c:	9b06      	ldr	r3, [sp, #24]
 800993e:	2b02      	cmp	r3, #2
 8009940:	dd34      	ble.n	80099ac <_dtoa_r+0x984>
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	9302      	str	r3, [sp, #8]
 8009946:	9b02      	ldr	r3, [sp, #8]
 8009948:	b96b      	cbnz	r3, 8009966 <_dtoa_r+0x93e>
 800994a:	4631      	mov	r1, r6
 800994c:	2205      	movs	r2, #5
 800994e:	4620      	mov	r0, r4
 8009950:	f000 ff8e 	bl	800a870 <__multadd>
 8009954:	4601      	mov	r1, r0
 8009956:	4606      	mov	r6, r0
 8009958:	ee18 0a10 	vmov	r0, s16
 800995c:	f001 f9f2 	bl	800ad44 <__mcmp>
 8009960:	2800      	cmp	r0, #0
 8009962:	f73f adbb 	bgt.w	80094dc <_dtoa_r+0x4b4>
 8009966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009968:	9d01      	ldr	r5, [sp, #4]
 800996a:	43db      	mvns	r3, r3
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	f04f 0800 	mov.w	r8, #0
 8009972:	4631      	mov	r1, r6
 8009974:	4620      	mov	r0, r4
 8009976:	f000 ff59 	bl	800a82c <_Bfree>
 800997a:	2f00      	cmp	r7, #0
 800997c:	f43f aea4 	beq.w	80096c8 <_dtoa_r+0x6a0>
 8009980:	f1b8 0f00 	cmp.w	r8, #0
 8009984:	d005      	beq.n	8009992 <_dtoa_r+0x96a>
 8009986:	45b8      	cmp	r8, r7
 8009988:	d003      	beq.n	8009992 <_dtoa_r+0x96a>
 800998a:	4641      	mov	r1, r8
 800998c:	4620      	mov	r0, r4
 800998e:	f000 ff4d 	bl	800a82c <_Bfree>
 8009992:	4639      	mov	r1, r7
 8009994:	4620      	mov	r0, r4
 8009996:	f000 ff49 	bl	800a82c <_Bfree>
 800999a:	e695      	b.n	80096c8 <_dtoa_r+0x6a0>
 800999c:	2600      	movs	r6, #0
 800999e:	4637      	mov	r7, r6
 80099a0:	e7e1      	b.n	8009966 <_dtoa_r+0x93e>
 80099a2:	9700      	str	r7, [sp, #0]
 80099a4:	4637      	mov	r7, r6
 80099a6:	e599      	b.n	80094dc <_dtoa_r+0x4b4>
 80099a8:	40240000 	.word	0x40240000
 80099ac:	9b08      	ldr	r3, [sp, #32]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 80ca 	beq.w	8009b48 <_dtoa_r+0xb20>
 80099b4:	9b03      	ldr	r3, [sp, #12]
 80099b6:	9302      	str	r3, [sp, #8]
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	dd05      	ble.n	80099c8 <_dtoa_r+0x9a0>
 80099bc:	4639      	mov	r1, r7
 80099be:	462a      	mov	r2, r5
 80099c0:	4620      	mov	r0, r4
 80099c2:	f001 f94f 	bl	800ac64 <__lshift>
 80099c6:	4607      	mov	r7, r0
 80099c8:	f1b8 0f00 	cmp.w	r8, #0
 80099cc:	d05b      	beq.n	8009a86 <_dtoa_r+0xa5e>
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 feeb 	bl	800a7ac <_Balloc>
 80099d6:	4605      	mov	r5, r0
 80099d8:	b928      	cbnz	r0, 80099e6 <_dtoa_r+0x9be>
 80099da:	4b87      	ldr	r3, [pc, #540]	; (8009bf8 <_dtoa_r+0xbd0>)
 80099dc:	4602      	mov	r2, r0
 80099de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099e2:	f7ff bb3b 	b.w	800905c <_dtoa_r+0x34>
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	3202      	adds	r2, #2
 80099ea:	0092      	lsls	r2, r2, #2
 80099ec:	f107 010c 	add.w	r1, r7, #12
 80099f0:	300c      	adds	r0, #12
 80099f2:	f000 feb3 	bl	800a75c <memcpy>
 80099f6:	2201      	movs	r2, #1
 80099f8:	4629      	mov	r1, r5
 80099fa:	4620      	mov	r0, r4
 80099fc:	f001 f932 	bl	800ac64 <__lshift>
 8009a00:	9b01      	ldr	r3, [sp, #4]
 8009a02:	f103 0901 	add.w	r9, r3, #1
 8009a06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	9305      	str	r3, [sp, #20]
 8009a0e:	f00a 0301 	and.w	r3, sl, #1
 8009a12:	46b8      	mov	r8, r7
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	4607      	mov	r7, r0
 8009a18:	4631      	mov	r1, r6
 8009a1a:	ee18 0a10 	vmov	r0, s16
 8009a1e:	f7ff fa76 	bl	8008f0e <quorem>
 8009a22:	4641      	mov	r1, r8
 8009a24:	9002      	str	r0, [sp, #8]
 8009a26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a2a:	ee18 0a10 	vmov	r0, s16
 8009a2e:	f001 f989 	bl	800ad44 <__mcmp>
 8009a32:	463a      	mov	r2, r7
 8009a34:	9003      	str	r0, [sp, #12]
 8009a36:	4631      	mov	r1, r6
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f001 f99f 	bl	800ad7c <__mdiff>
 8009a3e:	68c2      	ldr	r2, [r0, #12]
 8009a40:	f109 3bff 	add.w	fp, r9, #4294967295
 8009a44:	4605      	mov	r5, r0
 8009a46:	bb02      	cbnz	r2, 8009a8a <_dtoa_r+0xa62>
 8009a48:	4601      	mov	r1, r0
 8009a4a:	ee18 0a10 	vmov	r0, s16
 8009a4e:	f001 f979 	bl	800ad44 <__mcmp>
 8009a52:	4602      	mov	r2, r0
 8009a54:	4629      	mov	r1, r5
 8009a56:	4620      	mov	r0, r4
 8009a58:	9207      	str	r2, [sp, #28]
 8009a5a:	f000 fee7 	bl	800a82c <_Bfree>
 8009a5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009a62:	ea43 0102 	orr.w	r1, r3, r2
 8009a66:	9b04      	ldr	r3, [sp, #16]
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	464d      	mov	r5, r9
 8009a6c:	d10f      	bne.n	8009a8e <_dtoa_r+0xa66>
 8009a6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a72:	d02a      	beq.n	8009aca <_dtoa_r+0xaa2>
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	dd02      	ble.n	8009a80 <_dtoa_r+0xa58>
 8009a7a:	9b02      	ldr	r3, [sp, #8]
 8009a7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009a80:	f88b a000 	strb.w	sl, [fp]
 8009a84:	e775      	b.n	8009972 <_dtoa_r+0x94a>
 8009a86:	4638      	mov	r0, r7
 8009a88:	e7ba      	b.n	8009a00 <_dtoa_r+0x9d8>
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	e7e2      	b.n	8009a54 <_dtoa_r+0xa2c>
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	db04      	blt.n	8009a9e <_dtoa_r+0xa76>
 8009a94:	9906      	ldr	r1, [sp, #24]
 8009a96:	430b      	orrs	r3, r1
 8009a98:	9904      	ldr	r1, [sp, #16]
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	d122      	bne.n	8009ae4 <_dtoa_r+0xabc>
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	ddee      	ble.n	8009a80 <_dtoa_r+0xa58>
 8009aa2:	ee18 1a10 	vmov	r1, s16
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f001 f8db 	bl	800ac64 <__lshift>
 8009aae:	4631      	mov	r1, r6
 8009ab0:	ee08 0a10 	vmov	s16, r0
 8009ab4:	f001 f946 	bl	800ad44 <__mcmp>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	dc03      	bgt.n	8009ac4 <_dtoa_r+0xa9c>
 8009abc:	d1e0      	bne.n	8009a80 <_dtoa_r+0xa58>
 8009abe:	f01a 0f01 	tst.w	sl, #1
 8009ac2:	d0dd      	beq.n	8009a80 <_dtoa_r+0xa58>
 8009ac4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ac8:	d1d7      	bne.n	8009a7a <_dtoa_r+0xa52>
 8009aca:	2339      	movs	r3, #57	; 0x39
 8009acc:	f88b 3000 	strb.w	r3, [fp]
 8009ad0:	462b      	mov	r3, r5
 8009ad2:	461d      	mov	r5, r3
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ada:	2a39      	cmp	r2, #57	; 0x39
 8009adc:	d071      	beq.n	8009bc2 <_dtoa_r+0xb9a>
 8009ade:	3201      	adds	r2, #1
 8009ae0:	701a      	strb	r2, [r3, #0]
 8009ae2:	e746      	b.n	8009972 <_dtoa_r+0x94a>
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	dd07      	ble.n	8009af8 <_dtoa_r+0xad0>
 8009ae8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009aec:	d0ed      	beq.n	8009aca <_dtoa_r+0xaa2>
 8009aee:	f10a 0301 	add.w	r3, sl, #1
 8009af2:	f88b 3000 	strb.w	r3, [fp]
 8009af6:	e73c      	b.n	8009972 <_dtoa_r+0x94a>
 8009af8:	9b05      	ldr	r3, [sp, #20]
 8009afa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009afe:	4599      	cmp	r9, r3
 8009b00:	d047      	beq.n	8009b92 <_dtoa_r+0xb6a>
 8009b02:	ee18 1a10 	vmov	r1, s16
 8009b06:	2300      	movs	r3, #0
 8009b08:	220a      	movs	r2, #10
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f000 feb0 	bl	800a870 <__multadd>
 8009b10:	45b8      	cmp	r8, r7
 8009b12:	ee08 0a10 	vmov	s16, r0
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	f04f 020a 	mov.w	r2, #10
 8009b1e:	4641      	mov	r1, r8
 8009b20:	4620      	mov	r0, r4
 8009b22:	d106      	bne.n	8009b32 <_dtoa_r+0xb0a>
 8009b24:	f000 fea4 	bl	800a870 <__multadd>
 8009b28:	4680      	mov	r8, r0
 8009b2a:	4607      	mov	r7, r0
 8009b2c:	f109 0901 	add.w	r9, r9, #1
 8009b30:	e772      	b.n	8009a18 <_dtoa_r+0x9f0>
 8009b32:	f000 fe9d 	bl	800a870 <__multadd>
 8009b36:	4639      	mov	r1, r7
 8009b38:	4680      	mov	r8, r0
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	220a      	movs	r2, #10
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f000 fe96 	bl	800a870 <__multadd>
 8009b44:	4607      	mov	r7, r0
 8009b46:	e7f1      	b.n	8009b2c <_dtoa_r+0xb04>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	9302      	str	r3, [sp, #8]
 8009b4c:	9d01      	ldr	r5, [sp, #4]
 8009b4e:	ee18 0a10 	vmov	r0, s16
 8009b52:	4631      	mov	r1, r6
 8009b54:	f7ff f9db 	bl	8008f0e <quorem>
 8009b58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b5c:	9b01      	ldr	r3, [sp, #4]
 8009b5e:	f805 ab01 	strb.w	sl, [r5], #1
 8009b62:	1aea      	subs	r2, r5, r3
 8009b64:	9b02      	ldr	r3, [sp, #8]
 8009b66:	4293      	cmp	r3, r2
 8009b68:	dd09      	ble.n	8009b7e <_dtoa_r+0xb56>
 8009b6a:	ee18 1a10 	vmov	r1, s16
 8009b6e:	2300      	movs	r3, #0
 8009b70:	220a      	movs	r2, #10
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fe7c 	bl	800a870 <__multadd>
 8009b78:	ee08 0a10 	vmov	s16, r0
 8009b7c:	e7e7      	b.n	8009b4e <_dtoa_r+0xb26>
 8009b7e:	9b02      	ldr	r3, [sp, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bfc8      	it	gt
 8009b84:	461d      	movgt	r5, r3
 8009b86:	9b01      	ldr	r3, [sp, #4]
 8009b88:	bfd8      	it	le
 8009b8a:	2501      	movle	r5, #1
 8009b8c:	441d      	add	r5, r3
 8009b8e:	f04f 0800 	mov.w	r8, #0
 8009b92:	ee18 1a10 	vmov	r1, s16
 8009b96:	2201      	movs	r2, #1
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f001 f863 	bl	800ac64 <__lshift>
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	ee08 0a10 	vmov	s16, r0
 8009ba4:	f001 f8ce 	bl	800ad44 <__mcmp>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	dc91      	bgt.n	8009ad0 <_dtoa_r+0xaa8>
 8009bac:	d102      	bne.n	8009bb4 <_dtoa_r+0xb8c>
 8009bae:	f01a 0f01 	tst.w	sl, #1
 8009bb2:	d18d      	bne.n	8009ad0 <_dtoa_r+0xaa8>
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	461d      	mov	r5, r3
 8009bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bbc:	2a30      	cmp	r2, #48	; 0x30
 8009bbe:	d0fa      	beq.n	8009bb6 <_dtoa_r+0xb8e>
 8009bc0:	e6d7      	b.n	8009972 <_dtoa_r+0x94a>
 8009bc2:	9a01      	ldr	r2, [sp, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d184      	bne.n	8009ad2 <_dtoa_r+0xaaa>
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	2331      	movs	r3, #49	; 0x31
 8009bd0:	7013      	strb	r3, [r2, #0]
 8009bd2:	e6ce      	b.n	8009972 <_dtoa_r+0x94a>
 8009bd4:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <_dtoa_r+0xbd4>)
 8009bd6:	f7ff ba95 	b.w	8009104 <_dtoa_r+0xdc>
 8009bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f47f aa6e 	bne.w	80090be <_dtoa_r+0x96>
 8009be2:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <_dtoa_r+0xbd8>)
 8009be4:	f7ff ba8e 	b.w	8009104 <_dtoa_r+0xdc>
 8009be8:	9b02      	ldr	r3, [sp, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	dcae      	bgt.n	8009b4c <_dtoa_r+0xb24>
 8009bee:	9b06      	ldr	r3, [sp, #24]
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	f73f aea8 	bgt.w	8009946 <_dtoa_r+0x91e>
 8009bf6:	e7a9      	b.n	8009b4c <_dtoa_r+0xb24>
 8009bf8:	0800cfe0 	.word	0x0800cfe0
 8009bfc:	0800cde5 	.word	0x0800cde5
 8009c00:	0800cf61 	.word	0x0800cf61

08009c04 <__sflush_r>:
 8009c04:	898a      	ldrh	r2, [r1, #12]
 8009c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	0710      	lsls	r0, r2, #28
 8009c0e:	460c      	mov	r4, r1
 8009c10:	d458      	bmi.n	8009cc4 <__sflush_r+0xc0>
 8009c12:	684b      	ldr	r3, [r1, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	dc05      	bgt.n	8009c24 <__sflush_r+0x20>
 8009c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	dc02      	bgt.n	8009c24 <__sflush_r+0x20>
 8009c1e:	2000      	movs	r0, #0
 8009c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c26:	2e00      	cmp	r6, #0
 8009c28:	d0f9      	beq.n	8009c1e <__sflush_r+0x1a>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c30:	682f      	ldr	r7, [r5, #0]
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	d032      	beq.n	8009c9c <__sflush_r+0x98>
 8009c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	075a      	lsls	r2, r3, #29
 8009c3c:	d505      	bpl.n	8009c4a <__sflush_r+0x46>
 8009c3e:	6863      	ldr	r3, [r4, #4]
 8009c40:	1ac0      	subs	r0, r0, r3
 8009c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c44:	b10b      	cbz	r3, 8009c4a <__sflush_r+0x46>
 8009c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c48:	1ac0      	subs	r0, r0, r3
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c50:	6a21      	ldr	r1, [r4, #32]
 8009c52:	4628      	mov	r0, r5
 8009c54:	47b0      	blx	r6
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	d106      	bne.n	8009c6a <__sflush_r+0x66>
 8009c5c:	6829      	ldr	r1, [r5, #0]
 8009c5e:	291d      	cmp	r1, #29
 8009c60:	d82c      	bhi.n	8009cbc <__sflush_r+0xb8>
 8009c62:	4a2a      	ldr	r2, [pc, #168]	; (8009d0c <__sflush_r+0x108>)
 8009c64:	40ca      	lsrs	r2, r1
 8009c66:	07d6      	lsls	r6, r2, #31
 8009c68:	d528      	bpl.n	8009cbc <__sflush_r+0xb8>
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	6062      	str	r2, [r4, #4]
 8009c6e:	04d9      	lsls	r1, r3, #19
 8009c70:	6922      	ldr	r2, [r4, #16]
 8009c72:	6022      	str	r2, [r4, #0]
 8009c74:	d504      	bpl.n	8009c80 <__sflush_r+0x7c>
 8009c76:	1c42      	adds	r2, r0, #1
 8009c78:	d101      	bne.n	8009c7e <__sflush_r+0x7a>
 8009c7a:	682b      	ldr	r3, [r5, #0]
 8009c7c:	b903      	cbnz	r3, 8009c80 <__sflush_r+0x7c>
 8009c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c82:	602f      	str	r7, [r5, #0]
 8009c84:	2900      	cmp	r1, #0
 8009c86:	d0ca      	beq.n	8009c1e <__sflush_r+0x1a>
 8009c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	d002      	beq.n	8009c96 <__sflush_r+0x92>
 8009c90:	4628      	mov	r0, r5
 8009c92:	f001 fa63 	bl	800b15c <_free_r>
 8009c96:	2000      	movs	r0, #0
 8009c98:	6360      	str	r0, [r4, #52]	; 0x34
 8009c9a:	e7c1      	b.n	8009c20 <__sflush_r+0x1c>
 8009c9c:	6a21      	ldr	r1, [r4, #32]
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b0      	blx	r6
 8009ca4:	1c41      	adds	r1, r0, #1
 8009ca6:	d1c7      	bne.n	8009c38 <__sflush_r+0x34>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0c4      	beq.n	8009c38 <__sflush_r+0x34>
 8009cae:	2b1d      	cmp	r3, #29
 8009cb0:	d001      	beq.n	8009cb6 <__sflush_r+0xb2>
 8009cb2:	2b16      	cmp	r3, #22
 8009cb4:	d101      	bne.n	8009cba <__sflush_r+0xb6>
 8009cb6:	602f      	str	r7, [r5, #0]
 8009cb8:	e7b1      	b.n	8009c1e <__sflush_r+0x1a>
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	e7ad      	b.n	8009c20 <__sflush_r+0x1c>
 8009cc4:	690f      	ldr	r7, [r1, #16]
 8009cc6:	2f00      	cmp	r7, #0
 8009cc8:	d0a9      	beq.n	8009c1e <__sflush_r+0x1a>
 8009cca:	0793      	lsls	r3, r2, #30
 8009ccc:	680e      	ldr	r6, [r1, #0]
 8009cce:	bf08      	it	eq
 8009cd0:	694b      	ldreq	r3, [r1, #20]
 8009cd2:	600f      	str	r7, [r1, #0]
 8009cd4:	bf18      	it	ne
 8009cd6:	2300      	movne	r3, #0
 8009cd8:	eba6 0807 	sub.w	r8, r6, r7
 8009cdc:	608b      	str	r3, [r1, #8]
 8009cde:	f1b8 0f00 	cmp.w	r8, #0
 8009ce2:	dd9c      	ble.n	8009c1e <__sflush_r+0x1a>
 8009ce4:	6a21      	ldr	r1, [r4, #32]
 8009ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ce8:	4643      	mov	r3, r8
 8009cea:	463a      	mov	r2, r7
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b0      	blx	r6
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	dc06      	bgt.n	8009d02 <__sflush_r+0xfe>
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	e78e      	b.n	8009c20 <__sflush_r+0x1c>
 8009d02:	4407      	add	r7, r0
 8009d04:	eba8 0800 	sub.w	r8, r8, r0
 8009d08:	e7e9      	b.n	8009cde <__sflush_r+0xda>
 8009d0a:	bf00      	nop
 8009d0c:	20400001 	.word	0x20400001

08009d10 <_fflush_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	690b      	ldr	r3, [r1, #16]
 8009d14:	4605      	mov	r5, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	b913      	cbnz	r3, 8009d20 <_fflush_r+0x10>
 8009d1a:	2500      	movs	r5, #0
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	bd38      	pop	{r3, r4, r5, pc}
 8009d20:	b118      	cbz	r0, 8009d2a <_fflush_r+0x1a>
 8009d22:	6983      	ldr	r3, [r0, #24]
 8009d24:	b90b      	cbnz	r3, 8009d2a <_fflush_r+0x1a>
 8009d26:	f000 f887 	bl	8009e38 <__sinit>
 8009d2a:	4b14      	ldr	r3, [pc, #80]	; (8009d7c <_fflush_r+0x6c>)
 8009d2c:	429c      	cmp	r4, r3
 8009d2e:	d11b      	bne.n	8009d68 <_fflush_r+0x58>
 8009d30:	686c      	ldr	r4, [r5, #4]
 8009d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0ef      	beq.n	8009d1a <_fflush_r+0xa>
 8009d3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d3c:	07d0      	lsls	r0, r2, #31
 8009d3e:	d404      	bmi.n	8009d4a <_fflush_r+0x3a>
 8009d40:	0599      	lsls	r1, r3, #22
 8009d42:	d402      	bmi.n	8009d4a <_fflush_r+0x3a>
 8009d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d46:	f000 fc88 	bl	800a65a <__retarget_lock_acquire_recursive>
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	f7ff ff59 	bl	8009c04 <__sflush_r>
 8009d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d54:	07da      	lsls	r2, r3, #31
 8009d56:	4605      	mov	r5, r0
 8009d58:	d4e0      	bmi.n	8009d1c <_fflush_r+0xc>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	059b      	lsls	r3, r3, #22
 8009d5e:	d4dd      	bmi.n	8009d1c <_fflush_r+0xc>
 8009d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d62:	f000 fc7b 	bl	800a65c <__retarget_lock_release_recursive>
 8009d66:	e7d9      	b.n	8009d1c <_fflush_r+0xc>
 8009d68:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <_fflush_r+0x70>)
 8009d6a:	429c      	cmp	r4, r3
 8009d6c:	d101      	bne.n	8009d72 <_fflush_r+0x62>
 8009d6e:	68ac      	ldr	r4, [r5, #8]
 8009d70:	e7df      	b.n	8009d32 <_fflush_r+0x22>
 8009d72:	4b04      	ldr	r3, [pc, #16]	; (8009d84 <_fflush_r+0x74>)
 8009d74:	429c      	cmp	r4, r3
 8009d76:	bf08      	it	eq
 8009d78:	68ec      	ldreq	r4, [r5, #12]
 8009d7a:	e7da      	b.n	8009d32 <_fflush_r+0x22>
 8009d7c:	0800d014 	.word	0x0800d014
 8009d80:	0800d034 	.word	0x0800d034
 8009d84:	0800cff4 	.word	0x0800cff4

08009d88 <std>:
 8009d88:	2300      	movs	r3, #0
 8009d8a:	b510      	push	{r4, lr}
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d96:	6083      	str	r3, [r0, #8]
 8009d98:	8181      	strh	r1, [r0, #12]
 8009d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d9c:	81c2      	strh	r2, [r0, #14]
 8009d9e:	6183      	str	r3, [r0, #24]
 8009da0:	4619      	mov	r1, r3
 8009da2:	2208      	movs	r2, #8
 8009da4:	305c      	adds	r0, #92	; 0x5c
 8009da6:	f7fd f93d 	bl	8007024 <memset>
 8009daa:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <std+0x38>)
 8009dac:	6263      	str	r3, [r4, #36]	; 0x24
 8009dae:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <std+0x3c>)
 8009db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <std+0x40>)
 8009db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009db6:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <std+0x44>)
 8009db8:	6224      	str	r4, [r4, #32]
 8009dba:	6323      	str	r3, [r4, #48]	; 0x30
 8009dbc:	bd10      	pop	{r4, pc}
 8009dbe:	bf00      	nop
 8009dc0:	0800b6e9 	.word	0x0800b6e9
 8009dc4:	0800b70b 	.word	0x0800b70b
 8009dc8:	0800b743 	.word	0x0800b743
 8009dcc:	0800b767 	.word	0x0800b767

08009dd0 <_cleanup_r>:
 8009dd0:	4901      	ldr	r1, [pc, #4]	; (8009dd8 <_cleanup_r+0x8>)
 8009dd2:	f000 b8af 	b.w	8009f34 <_fwalk_reent>
 8009dd6:	bf00      	nop
 8009dd8:	08009d11 	.word	0x08009d11

08009ddc <__sfmoreglue>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	2268      	movs	r2, #104	; 0x68
 8009de0:	1e4d      	subs	r5, r1, #1
 8009de2:	4355      	muls	r5, r2
 8009de4:	460e      	mov	r6, r1
 8009de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dea:	f001 fa23 	bl	800b234 <_malloc_r>
 8009dee:	4604      	mov	r4, r0
 8009df0:	b140      	cbz	r0, 8009e04 <__sfmoreglue+0x28>
 8009df2:	2100      	movs	r1, #0
 8009df4:	e9c0 1600 	strd	r1, r6, [r0]
 8009df8:	300c      	adds	r0, #12
 8009dfa:	60a0      	str	r0, [r4, #8]
 8009dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e00:	f7fd f910 	bl	8007024 <memset>
 8009e04:	4620      	mov	r0, r4
 8009e06:	bd70      	pop	{r4, r5, r6, pc}

08009e08 <__sfp_lock_acquire>:
 8009e08:	4801      	ldr	r0, [pc, #4]	; (8009e10 <__sfp_lock_acquire+0x8>)
 8009e0a:	f000 bc26 	b.w	800a65a <__retarget_lock_acquire_recursive>
 8009e0e:	bf00      	nop
 8009e10:	200003f1 	.word	0x200003f1

08009e14 <__sfp_lock_release>:
 8009e14:	4801      	ldr	r0, [pc, #4]	; (8009e1c <__sfp_lock_release+0x8>)
 8009e16:	f000 bc21 	b.w	800a65c <__retarget_lock_release_recursive>
 8009e1a:	bf00      	nop
 8009e1c:	200003f1 	.word	0x200003f1

08009e20 <__sinit_lock_acquire>:
 8009e20:	4801      	ldr	r0, [pc, #4]	; (8009e28 <__sinit_lock_acquire+0x8>)
 8009e22:	f000 bc1a 	b.w	800a65a <__retarget_lock_acquire_recursive>
 8009e26:	bf00      	nop
 8009e28:	200003f2 	.word	0x200003f2

08009e2c <__sinit_lock_release>:
 8009e2c:	4801      	ldr	r0, [pc, #4]	; (8009e34 <__sinit_lock_release+0x8>)
 8009e2e:	f000 bc15 	b.w	800a65c <__retarget_lock_release_recursive>
 8009e32:	bf00      	nop
 8009e34:	200003f2 	.word	0x200003f2

08009e38 <__sinit>:
 8009e38:	b510      	push	{r4, lr}
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	f7ff fff0 	bl	8009e20 <__sinit_lock_acquire>
 8009e40:	69a3      	ldr	r3, [r4, #24]
 8009e42:	b11b      	cbz	r3, 8009e4c <__sinit+0x14>
 8009e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e48:	f7ff bff0 	b.w	8009e2c <__sinit_lock_release>
 8009e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e50:	6523      	str	r3, [r4, #80]	; 0x50
 8009e52:	4b13      	ldr	r3, [pc, #76]	; (8009ea0 <__sinit+0x68>)
 8009e54:	4a13      	ldr	r2, [pc, #76]	; (8009ea4 <__sinit+0x6c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e5a:	42a3      	cmp	r3, r4
 8009e5c:	bf04      	itt	eq
 8009e5e:	2301      	moveq	r3, #1
 8009e60:	61a3      	streq	r3, [r4, #24]
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 f820 	bl	8009ea8 <__sfp>
 8009e68:	6060      	str	r0, [r4, #4]
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 f81c 	bl	8009ea8 <__sfp>
 8009e70:	60a0      	str	r0, [r4, #8]
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 f818 	bl	8009ea8 <__sfp>
 8009e78:	2200      	movs	r2, #0
 8009e7a:	60e0      	str	r0, [r4, #12]
 8009e7c:	2104      	movs	r1, #4
 8009e7e:	6860      	ldr	r0, [r4, #4]
 8009e80:	f7ff ff82 	bl	8009d88 <std>
 8009e84:	68a0      	ldr	r0, [r4, #8]
 8009e86:	2201      	movs	r2, #1
 8009e88:	2109      	movs	r1, #9
 8009e8a:	f7ff ff7d 	bl	8009d88 <std>
 8009e8e:	68e0      	ldr	r0, [r4, #12]
 8009e90:	2202      	movs	r2, #2
 8009e92:	2112      	movs	r1, #18
 8009e94:	f7ff ff78 	bl	8009d88 <std>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	61a3      	str	r3, [r4, #24]
 8009e9c:	e7d2      	b.n	8009e44 <__sinit+0xc>
 8009e9e:	bf00      	nop
 8009ea0:	0800cdc0 	.word	0x0800cdc0
 8009ea4:	08009dd1 	.word	0x08009dd1

08009ea8 <__sfp>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	4607      	mov	r7, r0
 8009eac:	f7ff ffac 	bl	8009e08 <__sfp_lock_acquire>
 8009eb0:	4b1e      	ldr	r3, [pc, #120]	; (8009f2c <__sfp+0x84>)
 8009eb2:	681e      	ldr	r6, [r3, #0]
 8009eb4:	69b3      	ldr	r3, [r6, #24]
 8009eb6:	b913      	cbnz	r3, 8009ebe <__sfp+0x16>
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f7ff ffbd 	bl	8009e38 <__sinit>
 8009ebe:	3648      	adds	r6, #72	; 0x48
 8009ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	d503      	bpl.n	8009ed0 <__sfp+0x28>
 8009ec8:	6833      	ldr	r3, [r6, #0]
 8009eca:	b30b      	cbz	r3, 8009f10 <__sfp+0x68>
 8009ecc:	6836      	ldr	r6, [r6, #0]
 8009ece:	e7f7      	b.n	8009ec0 <__sfp+0x18>
 8009ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ed4:	b9d5      	cbnz	r5, 8009f0c <__sfp+0x64>
 8009ed6:	4b16      	ldr	r3, [pc, #88]	; (8009f30 <__sfp+0x88>)
 8009ed8:	60e3      	str	r3, [r4, #12]
 8009eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ede:	6665      	str	r5, [r4, #100]	; 0x64
 8009ee0:	f000 fbba 	bl	800a658 <__retarget_lock_init_recursive>
 8009ee4:	f7ff ff96 	bl	8009e14 <__sfp_lock_release>
 8009ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ef0:	6025      	str	r5, [r4, #0]
 8009ef2:	61a5      	str	r5, [r4, #24]
 8009ef4:	2208      	movs	r2, #8
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009efc:	f7fd f892 	bl	8007024 <memset>
 8009f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f08:	4620      	mov	r0, r4
 8009f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f0c:	3468      	adds	r4, #104	; 0x68
 8009f0e:	e7d9      	b.n	8009ec4 <__sfp+0x1c>
 8009f10:	2104      	movs	r1, #4
 8009f12:	4638      	mov	r0, r7
 8009f14:	f7ff ff62 	bl	8009ddc <__sfmoreglue>
 8009f18:	4604      	mov	r4, r0
 8009f1a:	6030      	str	r0, [r6, #0]
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d1d5      	bne.n	8009ecc <__sfp+0x24>
 8009f20:	f7ff ff78 	bl	8009e14 <__sfp_lock_release>
 8009f24:	230c      	movs	r3, #12
 8009f26:	603b      	str	r3, [r7, #0]
 8009f28:	e7ee      	b.n	8009f08 <__sfp+0x60>
 8009f2a:	bf00      	nop
 8009f2c:	0800cdc0 	.word	0x0800cdc0
 8009f30:	ffff0001 	.word	0xffff0001

08009f34 <_fwalk_reent>:
 8009f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f38:	4606      	mov	r6, r0
 8009f3a:	4688      	mov	r8, r1
 8009f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f40:	2700      	movs	r7, #0
 8009f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f46:	f1b9 0901 	subs.w	r9, r9, #1
 8009f4a:	d505      	bpl.n	8009f58 <_fwalk_reent+0x24>
 8009f4c:	6824      	ldr	r4, [r4, #0]
 8009f4e:	2c00      	cmp	r4, #0
 8009f50:	d1f7      	bne.n	8009f42 <_fwalk_reent+0xe>
 8009f52:	4638      	mov	r0, r7
 8009f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f58:	89ab      	ldrh	r3, [r5, #12]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d907      	bls.n	8009f6e <_fwalk_reent+0x3a>
 8009f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f62:	3301      	adds	r3, #1
 8009f64:	d003      	beq.n	8009f6e <_fwalk_reent+0x3a>
 8009f66:	4629      	mov	r1, r5
 8009f68:	4630      	mov	r0, r6
 8009f6a:	47c0      	blx	r8
 8009f6c:	4307      	orrs	r7, r0
 8009f6e:	3568      	adds	r5, #104	; 0x68
 8009f70:	e7e9      	b.n	8009f46 <_fwalk_reent+0x12>

08009f72 <rshift>:
 8009f72:	6903      	ldr	r3, [r0, #16]
 8009f74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f80:	f100 0414 	add.w	r4, r0, #20
 8009f84:	dd45      	ble.n	800a012 <rshift+0xa0>
 8009f86:	f011 011f 	ands.w	r1, r1, #31
 8009f8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f92:	d10c      	bne.n	8009fae <rshift+0x3c>
 8009f94:	f100 0710 	add.w	r7, r0, #16
 8009f98:	4629      	mov	r1, r5
 8009f9a:	42b1      	cmp	r1, r6
 8009f9c:	d334      	bcc.n	800a008 <rshift+0x96>
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	1eea      	subs	r2, r5, #3
 8009fa4:	4296      	cmp	r6, r2
 8009fa6:	bf38      	it	cc
 8009fa8:	2300      	movcc	r3, #0
 8009faa:	4423      	add	r3, r4
 8009fac:	e015      	b.n	8009fda <rshift+0x68>
 8009fae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009fb2:	f1c1 0820 	rsb	r8, r1, #32
 8009fb6:	40cf      	lsrs	r7, r1
 8009fb8:	f105 0e04 	add.w	lr, r5, #4
 8009fbc:	46a1      	mov	r9, r4
 8009fbe:	4576      	cmp	r6, lr
 8009fc0:	46f4      	mov	ip, lr
 8009fc2:	d815      	bhi.n	8009ff0 <rshift+0x7e>
 8009fc4:	1a9a      	subs	r2, r3, r2
 8009fc6:	0092      	lsls	r2, r2, #2
 8009fc8:	3a04      	subs	r2, #4
 8009fca:	3501      	adds	r5, #1
 8009fcc:	42ae      	cmp	r6, r5
 8009fce:	bf38      	it	cc
 8009fd0:	2200      	movcc	r2, #0
 8009fd2:	18a3      	adds	r3, r4, r2
 8009fd4:	50a7      	str	r7, [r4, r2]
 8009fd6:	b107      	cbz	r7, 8009fda <rshift+0x68>
 8009fd8:	3304      	adds	r3, #4
 8009fda:	1b1a      	subs	r2, r3, r4
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009fe2:	bf08      	it	eq
 8009fe4:	2300      	moveq	r3, #0
 8009fe6:	6102      	str	r2, [r0, #16]
 8009fe8:	bf08      	it	eq
 8009fea:	6143      	streq	r3, [r0, #20]
 8009fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ff0:	f8dc c000 	ldr.w	ip, [ip]
 8009ff4:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ff8:	ea4c 0707 	orr.w	r7, ip, r7
 8009ffc:	f849 7b04 	str.w	r7, [r9], #4
 800a000:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a004:	40cf      	lsrs	r7, r1
 800a006:	e7da      	b.n	8009fbe <rshift+0x4c>
 800a008:	f851 cb04 	ldr.w	ip, [r1], #4
 800a00c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a010:	e7c3      	b.n	8009f9a <rshift+0x28>
 800a012:	4623      	mov	r3, r4
 800a014:	e7e1      	b.n	8009fda <rshift+0x68>

0800a016 <__hexdig_fun>:
 800a016:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a01a:	2b09      	cmp	r3, #9
 800a01c:	d802      	bhi.n	800a024 <__hexdig_fun+0xe>
 800a01e:	3820      	subs	r0, #32
 800a020:	b2c0      	uxtb	r0, r0
 800a022:	4770      	bx	lr
 800a024:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a028:	2b05      	cmp	r3, #5
 800a02a:	d801      	bhi.n	800a030 <__hexdig_fun+0x1a>
 800a02c:	3847      	subs	r0, #71	; 0x47
 800a02e:	e7f7      	b.n	800a020 <__hexdig_fun+0xa>
 800a030:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a034:	2b05      	cmp	r3, #5
 800a036:	d801      	bhi.n	800a03c <__hexdig_fun+0x26>
 800a038:	3827      	subs	r0, #39	; 0x27
 800a03a:	e7f1      	b.n	800a020 <__hexdig_fun+0xa>
 800a03c:	2000      	movs	r0, #0
 800a03e:	4770      	bx	lr

0800a040 <__gethex>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	ed2d 8b02 	vpush	{d8}
 800a048:	b089      	sub	sp, #36	; 0x24
 800a04a:	ee08 0a10 	vmov	s16, r0
 800a04e:	9304      	str	r3, [sp, #16]
 800a050:	4bb4      	ldr	r3, [pc, #720]	; (800a324 <__gethex+0x2e4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	4618      	mov	r0, r3
 800a058:	468b      	mov	fp, r1
 800a05a:	4690      	mov	r8, r2
 800a05c:	f7f6 f8c0 	bl	80001e0 <strlen>
 800a060:	9b01      	ldr	r3, [sp, #4]
 800a062:	f8db 2000 	ldr.w	r2, [fp]
 800a066:	4403      	add	r3, r0
 800a068:	4682      	mov	sl, r0
 800a06a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a06e:	9305      	str	r3, [sp, #20]
 800a070:	1c93      	adds	r3, r2, #2
 800a072:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a076:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a07a:	32fe      	adds	r2, #254	; 0xfe
 800a07c:	18d1      	adds	r1, r2, r3
 800a07e:	461f      	mov	r7, r3
 800a080:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a084:	9100      	str	r1, [sp, #0]
 800a086:	2830      	cmp	r0, #48	; 0x30
 800a088:	d0f8      	beq.n	800a07c <__gethex+0x3c>
 800a08a:	f7ff ffc4 	bl	800a016 <__hexdig_fun>
 800a08e:	4604      	mov	r4, r0
 800a090:	2800      	cmp	r0, #0
 800a092:	d13a      	bne.n	800a10a <__gethex+0xca>
 800a094:	9901      	ldr	r1, [sp, #4]
 800a096:	4652      	mov	r2, sl
 800a098:	4638      	mov	r0, r7
 800a09a:	f001 fb68 	bl	800b76e <strncmp>
 800a09e:	4605      	mov	r5, r0
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d168      	bne.n	800a176 <__gethex+0x136>
 800a0a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a0a8:	eb07 060a 	add.w	r6, r7, sl
 800a0ac:	f7ff ffb3 	bl	800a016 <__hexdig_fun>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d062      	beq.n	800a17a <__gethex+0x13a>
 800a0b4:	4633      	mov	r3, r6
 800a0b6:	7818      	ldrb	r0, [r3, #0]
 800a0b8:	2830      	cmp	r0, #48	; 0x30
 800a0ba:	461f      	mov	r7, r3
 800a0bc:	f103 0301 	add.w	r3, r3, #1
 800a0c0:	d0f9      	beq.n	800a0b6 <__gethex+0x76>
 800a0c2:	f7ff ffa8 	bl	800a016 <__hexdig_fun>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	fab0 f480 	clz	r4, r0
 800a0cc:	0964      	lsrs	r4, r4, #5
 800a0ce:	4635      	mov	r5, r6
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	463a      	mov	r2, r7
 800a0d4:	4616      	mov	r6, r2
 800a0d6:	3201      	adds	r2, #1
 800a0d8:	7830      	ldrb	r0, [r6, #0]
 800a0da:	f7ff ff9c 	bl	800a016 <__hexdig_fun>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d1f8      	bne.n	800a0d4 <__gethex+0x94>
 800a0e2:	9901      	ldr	r1, [sp, #4]
 800a0e4:	4652      	mov	r2, sl
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f001 fb41 	bl	800b76e <strncmp>
 800a0ec:	b980      	cbnz	r0, 800a110 <__gethex+0xd0>
 800a0ee:	b94d      	cbnz	r5, 800a104 <__gethex+0xc4>
 800a0f0:	eb06 050a 	add.w	r5, r6, sl
 800a0f4:	462a      	mov	r2, r5
 800a0f6:	4616      	mov	r6, r2
 800a0f8:	3201      	adds	r2, #1
 800a0fa:	7830      	ldrb	r0, [r6, #0]
 800a0fc:	f7ff ff8b 	bl	800a016 <__hexdig_fun>
 800a100:	2800      	cmp	r0, #0
 800a102:	d1f8      	bne.n	800a0f6 <__gethex+0xb6>
 800a104:	1bad      	subs	r5, r5, r6
 800a106:	00ad      	lsls	r5, r5, #2
 800a108:	e004      	b.n	800a114 <__gethex+0xd4>
 800a10a:	2400      	movs	r4, #0
 800a10c:	4625      	mov	r5, r4
 800a10e:	e7e0      	b.n	800a0d2 <__gethex+0x92>
 800a110:	2d00      	cmp	r5, #0
 800a112:	d1f7      	bne.n	800a104 <__gethex+0xc4>
 800a114:	7833      	ldrb	r3, [r6, #0]
 800a116:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a11a:	2b50      	cmp	r3, #80	; 0x50
 800a11c:	d13b      	bne.n	800a196 <__gethex+0x156>
 800a11e:	7873      	ldrb	r3, [r6, #1]
 800a120:	2b2b      	cmp	r3, #43	; 0x2b
 800a122:	d02c      	beq.n	800a17e <__gethex+0x13e>
 800a124:	2b2d      	cmp	r3, #45	; 0x2d
 800a126:	d02e      	beq.n	800a186 <__gethex+0x146>
 800a128:	1c71      	adds	r1, r6, #1
 800a12a:	f04f 0900 	mov.w	r9, #0
 800a12e:	7808      	ldrb	r0, [r1, #0]
 800a130:	f7ff ff71 	bl	800a016 <__hexdig_fun>
 800a134:	1e43      	subs	r3, r0, #1
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b18      	cmp	r3, #24
 800a13a:	d82c      	bhi.n	800a196 <__gethex+0x156>
 800a13c:	f1a0 0210 	sub.w	r2, r0, #16
 800a140:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a144:	f7ff ff67 	bl	800a016 <__hexdig_fun>
 800a148:	1e43      	subs	r3, r0, #1
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b18      	cmp	r3, #24
 800a14e:	d91d      	bls.n	800a18c <__gethex+0x14c>
 800a150:	f1b9 0f00 	cmp.w	r9, #0
 800a154:	d000      	beq.n	800a158 <__gethex+0x118>
 800a156:	4252      	negs	r2, r2
 800a158:	4415      	add	r5, r2
 800a15a:	f8cb 1000 	str.w	r1, [fp]
 800a15e:	b1e4      	cbz	r4, 800a19a <__gethex+0x15a>
 800a160:	9b00      	ldr	r3, [sp, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	bf14      	ite	ne
 800a166:	2700      	movne	r7, #0
 800a168:	2706      	moveq	r7, #6
 800a16a:	4638      	mov	r0, r7
 800a16c:	b009      	add	sp, #36	; 0x24
 800a16e:	ecbd 8b02 	vpop	{d8}
 800a172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a176:	463e      	mov	r6, r7
 800a178:	4625      	mov	r5, r4
 800a17a:	2401      	movs	r4, #1
 800a17c:	e7ca      	b.n	800a114 <__gethex+0xd4>
 800a17e:	f04f 0900 	mov.w	r9, #0
 800a182:	1cb1      	adds	r1, r6, #2
 800a184:	e7d3      	b.n	800a12e <__gethex+0xee>
 800a186:	f04f 0901 	mov.w	r9, #1
 800a18a:	e7fa      	b.n	800a182 <__gethex+0x142>
 800a18c:	230a      	movs	r3, #10
 800a18e:	fb03 0202 	mla	r2, r3, r2, r0
 800a192:	3a10      	subs	r2, #16
 800a194:	e7d4      	b.n	800a140 <__gethex+0x100>
 800a196:	4631      	mov	r1, r6
 800a198:	e7df      	b.n	800a15a <__gethex+0x11a>
 800a19a:	1bf3      	subs	r3, r6, r7
 800a19c:	3b01      	subs	r3, #1
 800a19e:	4621      	mov	r1, r4
 800a1a0:	2b07      	cmp	r3, #7
 800a1a2:	dc0b      	bgt.n	800a1bc <__gethex+0x17c>
 800a1a4:	ee18 0a10 	vmov	r0, s16
 800a1a8:	f000 fb00 	bl	800a7ac <_Balloc>
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	b940      	cbnz	r0, 800a1c2 <__gethex+0x182>
 800a1b0:	4b5d      	ldr	r3, [pc, #372]	; (800a328 <__gethex+0x2e8>)
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	21de      	movs	r1, #222	; 0xde
 800a1b6:	485d      	ldr	r0, [pc, #372]	; (800a32c <__gethex+0x2ec>)
 800a1b8:	f7fc feda 	bl	8006f70 <__assert_func>
 800a1bc:	3101      	adds	r1, #1
 800a1be:	105b      	asrs	r3, r3, #1
 800a1c0:	e7ee      	b.n	800a1a0 <__gethex+0x160>
 800a1c2:	f100 0914 	add.w	r9, r0, #20
 800a1c6:	f04f 0b00 	mov.w	fp, #0
 800a1ca:	f1ca 0301 	rsb	r3, sl, #1
 800a1ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800a1d2:	f8cd b000 	str.w	fp, [sp]
 800a1d6:	9306      	str	r3, [sp, #24]
 800a1d8:	42b7      	cmp	r7, r6
 800a1da:	d340      	bcc.n	800a25e <__gethex+0x21e>
 800a1dc:	9802      	ldr	r0, [sp, #8]
 800a1de:	9b00      	ldr	r3, [sp, #0]
 800a1e0:	f840 3b04 	str.w	r3, [r0], #4
 800a1e4:	eba0 0009 	sub.w	r0, r0, r9
 800a1e8:	1080      	asrs	r0, r0, #2
 800a1ea:	0146      	lsls	r6, r0, #5
 800a1ec:	6120      	str	r0, [r4, #16]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 fbce 	bl	800a990 <__hi0bits>
 800a1f4:	1a30      	subs	r0, r6, r0
 800a1f6:	f8d8 6000 	ldr.w	r6, [r8]
 800a1fa:	42b0      	cmp	r0, r6
 800a1fc:	dd63      	ble.n	800a2c6 <__gethex+0x286>
 800a1fe:	1b87      	subs	r7, r0, r6
 800a200:	4639      	mov	r1, r7
 800a202:	4620      	mov	r0, r4
 800a204:	f000 ff72 	bl	800b0ec <__any_on>
 800a208:	4682      	mov	sl, r0
 800a20a:	b1a8      	cbz	r0, 800a238 <__gethex+0x1f8>
 800a20c:	1e7b      	subs	r3, r7, #1
 800a20e:	1159      	asrs	r1, r3, #5
 800a210:	f003 021f 	and.w	r2, r3, #31
 800a214:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a218:	f04f 0a01 	mov.w	sl, #1
 800a21c:	fa0a f202 	lsl.w	r2, sl, r2
 800a220:	420a      	tst	r2, r1
 800a222:	d009      	beq.n	800a238 <__gethex+0x1f8>
 800a224:	4553      	cmp	r3, sl
 800a226:	dd05      	ble.n	800a234 <__gethex+0x1f4>
 800a228:	1eb9      	subs	r1, r7, #2
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 ff5e 	bl	800b0ec <__any_on>
 800a230:	2800      	cmp	r0, #0
 800a232:	d145      	bne.n	800a2c0 <__gethex+0x280>
 800a234:	f04f 0a02 	mov.w	sl, #2
 800a238:	4639      	mov	r1, r7
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7ff fe99 	bl	8009f72 <rshift>
 800a240:	443d      	add	r5, r7
 800a242:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a246:	42ab      	cmp	r3, r5
 800a248:	da4c      	bge.n	800a2e4 <__gethex+0x2a4>
 800a24a:	ee18 0a10 	vmov	r0, s16
 800a24e:	4621      	mov	r1, r4
 800a250:	f000 faec 	bl	800a82c <_Bfree>
 800a254:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a256:	2300      	movs	r3, #0
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	27a3      	movs	r7, #163	; 0xa3
 800a25c:	e785      	b.n	800a16a <__gethex+0x12a>
 800a25e:	1e73      	subs	r3, r6, #1
 800a260:	9a05      	ldr	r2, [sp, #20]
 800a262:	9303      	str	r3, [sp, #12]
 800a264:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a268:	4293      	cmp	r3, r2
 800a26a:	d019      	beq.n	800a2a0 <__gethex+0x260>
 800a26c:	f1bb 0f20 	cmp.w	fp, #32
 800a270:	d107      	bne.n	800a282 <__gethex+0x242>
 800a272:	9b02      	ldr	r3, [sp, #8]
 800a274:	9a00      	ldr	r2, [sp, #0]
 800a276:	f843 2b04 	str.w	r2, [r3], #4
 800a27a:	9302      	str	r3, [sp, #8]
 800a27c:	2300      	movs	r3, #0
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	469b      	mov	fp, r3
 800a282:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a286:	f7ff fec6 	bl	800a016 <__hexdig_fun>
 800a28a:	9b00      	ldr	r3, [sp, #0]
 800a28c:	f000 000f 	and.w	r0, r0, #15
 800a290:	fa00 f00b 	lsl.w	r0, r0, fp
 800a294:	4303      	orrs	r3, r0
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	f10b 0b04 	add.w	fp, fp, #4
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	e00d      	b.n	800a2bc <__gethex+0x27c>
 800a2a0:	9b03      	ldr	r3, [sp, #12]
 800a2a2:	9a06      	ldr	r2, [sp, #24]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	42bb      	cmp	r3, r7
 800a2a8:	d3e0      	bcc.n	800a26c <__gethex+0x22c>
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	9901      	ldr	r1, [sp, #4]
 800a2ae:	9307      	str	r3, [sp, #28]
 800a2b0:	4652      	mov	r2, sl
 800a2b2:	f001 fa5c 	bl	800b76e <strncmp>
 800a2b6:	9b07      	ldr	r3, [sp, #28]
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d1d7      	bne.n	800a26c <__gethex+0x22c>
 800a2bc:	461e      	mov	r6, r3
 800a2be:	e78b      	b.n	800a1d8 <__gethex+0x198>
 800a2c0:	f04f 0a03 	mov.w	sl, #3
 800a2c4:	e7b8      	b.n	800a238 <__gethex+0x1f8>
 800a2c6:	da0a      	bge.n	800a2de <__gethex+0x29e>
 800a2c8:	1a37      	subs	r7, r6, r0
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	ee18 0a10 	vmov	r0, s16
 800a2d0:	463a      	mov	r2, r7
 800a2d2:	f000 fcc7 	bl	800ac64 <__lshift>
 800a2d6:	1bed      	subs	r5, r5, r7
 800a2d8:	4604      	mov	r4, r0
 800a2da:	f100 0914 	add.w	r9, r0, #20
 800a2de:	f04f 0a00 	mov.w	sl, #0
 800a2e2:	e7ae      	b.n	800a242 <__gethex+0x202>
 800a2e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a2e8:	42a8      	cmp	r0, r5
 800a2ea:	dd72      	ble.n	800a3d2 <__gethex+0x392>
 800a2ec:	1b45      	subs	r5, r0, r5
 800a2ee:	42ae      	cmp	r6, r5
 800a2f0:	dc36      	bgt.n	800a360 <__gethex+0x320>
 800a2f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d02a      	beq.n	800a350 <__gethex+0x310>
 800a2fa:	2b03      	cmp	r3, #3
 800a2fc:	d02c      	beq.n	800a358 <__gethex+0x318>
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d11c      	bne.n	800a33c <__gethex+0x2fc>
 800a302:	42ae      	cmp	r6, r5
 800a304:	d11a      	bne.n	800a33c <__gethex+0x2fc>
 800a306:	2e01      	cmp	r6, #1
 800a308:	d112      	bne.n	800a330 <__gethex+0x2f0>
 800a30a:	9a04      	ldr	r2, [sp, #16]
 800a30c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a310:	6013      	str	r3, [r2, #0]
 800a312:	2301      	movs	r3, #1
 800a314:	6123      	str	r3, [r4, #16]
 800a316:	f8c9 3000 	str.w	r3, [r9]
 800a31a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a31c:	2762      	movs	r7, #98	; 0x62
 800a31e:	601c      	str	r4, [r3, #0]
 800a320:	e723      	b.n	800a16a <__gethex+0x12a>
 800a322:	bf00      	nop
 800a324:	0800d0bc 	.word	0x0800d0bc
 800a328:	0800cfe0 	.word	0x0800cfe0
 800a32c:	0800d054 	.word	0x0800d054
 800a330:	1e71      	subs	r1, r6, #1
 800a332:	4620      	mov	r0, r4
 800a334:	f000 feda 	bl	800b0ec <__any_on>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d1e6      	bne.n	800a30a <__gethex+0x2ca>
 800a33c:	ee18 0a10 	vmov	r0, s16
 800a340:	4621      	mov	r1, r4
 800a342:	f000 fa73 	bl	800a82c <_Bfree>
 800a346:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a348:	2300      	movs	r3, #0
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	2750      	movs	r7, #80	; 0x50
 800a34e:	e70c      	b.n	800a16a <__gethex+0x12a>
 800a350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1f2      	bne.n	800a33c <__gethex+0x2fc>
 800a356:	e7d8      	b.n	800a30a <__gethex+0x2ca>
 800a358:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1d5      	bne.n	800a30a <__gethex+0x2ca>
 800a35e:	e7ed      	b.n	800a33c <__gethex+0x2fc>
 800a360:	1e6f      	subs	r7, r5, #1
 800a362:	f1ba 0f00 	cmp.w	sl, #0
 800a366:	d131      	bne.n	800a3cc <__gethex+0x38c>
 800a368:	b127      	cbz	r7, 800a374 <__gethex+0x334>
 800a36a:	4639      	mov	r1, r7
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 febd 	bl	800b0ec <__any_on>
 800a372:	4682      	mov	sl, r0
 800a374:	117b      	asrs	r3, r7, #5
 800a376:	2101      	movs	r1, #1
 800a378:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a37c:	f007 071f 	and.w	r7, r7, #31
 800a380:	fa01 f707 	lsl.w	r7, r1, r7
 800a384:	421f      	tst	r7, r3
 800a386:	4629      	mov	r1, r5
 800a388:	4620      	mov	r0, r4
 800a38a:	bf18      	it	ne
 800a38c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a390:	1b76      	subs	r6, r6, r5
 800a392:	f7ff fdee 	bl	8009f72 <rshift>
 800a396:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a39a:	2702      	movs	r7, #2
 800a39c:	f1ba 0f00 	cmp.w	sl, #0
 800a3a0:	d048      	beq.n	800a434 <__gethex+0x3f4>
 800a3a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d015      	beq.n	800a3d6 <__gethex+0x396>
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d017      	beq.n	800a3de <__gethex+0x39e>
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d109      	bne.n	800a3c6 <__gethex+0x386>
 800a3b2:	f01a 0f02 	tst.w	sl, #2
 800a3b6:	d006      	beq.n	800a3c6 <__gethex+0x386>
 800a3b8:	f8d9 0000 	ldr.w	r0, [r9]
 800a3bc:	ea4a 0a00 	orr.w	sl, sl, r0
 800a3c0:	f01a 0f01 	tst.w	sl, #1
 800a3c4:	d10e      	bne.n	800a3e4 <__gethex+0x3a4>
 800a3c6:	f047 0710 	orr.w	r7, r7, #16
 800a3ca:	e033      	b.n	800a434 <__gethex+0x3f4>
 800a3cc:	f04f 0a01 	mov.w	sl, #1
 800a3d0:	e7d0      	b.n	800a374 <__gethex+0x334>
 800a3d2:	2701      	movs	r7, #1
 800a3d4:	e7e2      	b.n	800a39c <__gethex+0x35c>
 800a3d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3d8:	f1c3 0301 	rsb	r3, r3, #1
 800a3dc:	9315      	str	r3, [sp, #84]	; 0x54
 800a3de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0f0      	beq.n	800a3c6 <__gethex+0x386>
 800a3e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3e8:	f104 0314 	add.w	r3, r4, #20
 800a3ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a3f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a3f4:	f04f 0c00 	mov.w	ip, #0
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a402:	d01c      	beq.n	800a43e <__gethex+0x3fe>
 800a404:	3201      	adds	r2, #1
 800a406:	6002      	str	r2, [r0, #0]
 800a408:	2f02      	cmp	r7, #2
 800a40a:	f104 0314 	add.w	r3, r4, #20
 800a40e:	d13f      	bne.n	800a490 <__gethex+0x450>
 800a410:	f8d8 2000 	ldr.w	r2, [r8]
 800a414:	3a01      	subs	r2, #1
 800a416:	42b2      	cmp	r2, r6
 800a418:	d10a      	bne.n	800a430 <__gethex+0x3f0>
 800a41a:	1171      	asrs	r1, r6, #5
 800a41c:	2201      	movs	r2, #1
 800a41e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a422:	f006 061f 	and.w	r6, r6, #31
 800a426:	fa02 f606 	lsl.w	r6, r2, r6
 800a42a:	421e      	tst	r6, r3
 800a42c:	bf18      	it	ne
 800a42e:	4617      	movne	r7, r2
 800a430:	f047 0720 	orr.w	r7, r7, #32
 800a434:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a436:	601c      	str	r4, [r3, #0]
 800a438:	9b04      	ldr	r3, [sp, #16]
 800a43a:	601d      	str	r5, [r3, #0]
 800a43c:	e695      	b.n	800a16a <__gethex+0x12a>
 800a43e:	4299      	cmp	r1, r3
 800a440:	f843 cc04 	str.w	ip, [r3, #-4]
 800a444:	d8d8      	bhi.n	800a3f8 <__gethex+0x3b8>
 800a446:	68a3      	ldr	r3, [r4, #8]
 800a448:	459b      	cmp	fp, r3
 800a44a:	db19      	blt.n	800a480 <__gethex+0x440>
 800a44c:	6861      	ldr	r1, [r4, #4]
 800a44e:	ee18 0a10 	vmov	r0, s16
 800a452:	3101      	adds	r1, #1
 800a454:	f000 f9aa 	bl	800a7ac <_Balloc>
 800a458:	4681      	mov	r9, r0
 800a45a:	b918      	cbnz	r0, 800a464 <__gethex+0x424>
 800a45c:	4b1a      	ldr	r3, [pc, #104]	; (800a4c8 <__gethex+0x488>)
 800a45e:	4602      	mov	r2, r0
 800a460:	2184      	movs	r1, #132	; 0x84
 800a462:	e6a8      	b.n	800a1b6 <__gethex+0x176>
 800a464:	6922      	ldr	r2, [r4, #16]
 800a466:	3202      	adds	r2, #2
 800a468:	f104 010c 	add.w	r1, r4, #12
 800a46c:	0092      	lsls	r2, r2, #2
 800a46e:	300c      	adds	r0, #12
 800a470:	f000 f974 	bl	800a75c <memcpy>
 800a474:	4621      	mov	r1, r4
 800a476:	ee18 0a10 	vmov	r0, s16
 800a47a:	f000 f9d7 	bl	800a82c <_Bfree>
 800a47e:	464c      	mov	r4, r9
 800a480:	6923      	ldr	r3, [r4, #16]
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a488:	6122      	str	r2, [r4, #16]
 800a48a:	2201      	movs	r2, #1
 800a48c:	615a      	str	r2, [r3, #20]
 800a48e:	e7bb      	b.n	800a408 <__gethex+0x3c8>
 800a490:	6922      	ldr	r2, [r4, #16]
 800a492:	455a      	cmp	r2, fp
 800a494:	dd0b      	ble.n	800a4ae <__gethex+0x46e>
 800a496:	2101      	movs	r1, #1
 800a498:	4620      	mov	r0, r4
 800a49a:	f7ff fd6a 	bl	8009f72 <rshift>
 800a49e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4a2:	3501      	adds	r5, #1
 800a4a4:	42ab      	cmp	r3, r5
 800a4a6:	f6ff aed0 	blt.w	800a24a <__gethex+0x20a>
 800a4aa:	2701      	movs	r7, #1
 800a4ac:	e7c0      	b.n	800a430 <__gethex+0x3f0>
 800a4ae:	f016 061f 	ands.w	r6, r6, #31
 800a4b2:	d0fa      	beq.n	800a4aa <__gethex+0x46a>
 800a4b4:	4453      	add	r3, sl
 800a4b6:	f1c6 0620 	rsb	r6, r6, #32
 800a4ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a4be:	f000 fa67 	bl	800a990 <__hi0bits>
 800a4c2:	42b0      	cmp	r0, r6
 800a4c4:	dbe7      	blt.n	800a496 <__gethex+0x456>
 800a4c6:	e7f0      	b.n	800a4aa <__gethex+0x46a>
 800a4c8:	0800cfe0 	.word	0x0800cfe0

0800a4cc <L_shift>:
 800a4cc:	f1c2 0208 	rsb	r2, r2, #8
 800a4d0:	0092      	lsls	r2, r2, #2
 800a4d2:	b570      	push	{r4, r5, r6, lr}
 800a4d4:	f1c2 0620 	rsb	r6, r2, #32
 800a4d8:	6843      	ldr	r3, [r0, #4]
 800a4da:	6804      	ldr	r4, [r0, #0]
 800a4dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a4e0:	432c      	orrs	r4, r5
 800a4e2:	40d3      	lsrs	r3, r2
 800a4e4:	6004      	str	r4, [r0, #0]
 800a4e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4ea:	4288      	cmp	r0, r1
 800a4ec:	d3f4      	bcc.n	800a4d8 <L_shift+0xc>
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}

0800a4f0 <__match>:
 800a4f0:	b530      	push	{r4, r5, lr}
 800a4f2:	6803      	ldr	r3, [r0, #0]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4fa:	b914      	cbnz	r4, 800a502 <__match+0x12>
 800a4fc:	6003      	str	r3, [r0, #0]
 800a4fe:	2001      	movs	r0, #1
 800a500:	bd30      	pop	{r4, r5, pc}
 800a502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a506:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a50a:	2d19      	cmp	r5, #25
 800a50c:	bf98      	it	ls
 800a50e:	3220      	addls	r2, #32
 800a510:	42a2      	cmp	r2, r4
 800a512:	d0f0      	beq.n	800a4f6 <__match+0x6>
 800a514:	2000      	movs	r0, #0
 800a516:	e7f3      	b.n	800a500 <__match+0x10>

0800a518 <__hexnan>:
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	680b      	ldr	r3, [r1, #0]
 800a51e:	115e      	asrs	r6, r3, #5
 800a520:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a524:	f013 031f 	ands.w	r3, r3, #31
 800a528:	b087      	sub	sp, #28
 800a52a:	bf18      	it	ne
 800a52c:	3604      	addne	r6, #4
 800a52e:	2500      	movs	r5, #0
 800a530:	1f37      	subs	r7, r6, #4
 800a532:	4690      	mov	r8, r2
 800a534:	6802      	ldr	r2, [r0, #0]
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	4682      	mov	sl, r0
 800a53a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a53e:	46b9      	mov	r9, r7
 800a540:	463c      	mov	r4, r7
 800a542:	9502      	str	r5, [sp, #8]
 800a544:	46ab      	mov	fp, r5
 800a546:	7851      	ldrb	r1, [r2, #1]
 800a548:	1c53      	adds	r3, r2, #1
 800a54a:	9303      	str	r3, [sp, #12]
 800a54c:	b341      	cbz	r1, 800a5a0 <__hexnan+0x88>
 800a54e:	4608      	mov	r0, r1
 800a550:	9205      	str	r2, [sp, #20]
 800a552:	9104      	str	r1, [sp, #16]
 800a554:	f7ff fd5f 	bl	800a016 <__hexdig_fun>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d14f      	bne.n	800a5fc <__hexnan+0xe4>
 800a55c:	9904      	ldr	r1, [sp, #16]
 800a55e:	9a05      	ldr	r2, [sp, #20]
 800a560:	2920      	cmp	r1, #32
 800a562:	d818      	bhi.n	800a596 <__hexnan+0x7e>
 800a564:	9b02      	ldr	r3, [sp, #8]
 800a566:	459b      	cmp	fp, r3
 800a568:	dd13      	ble.n	800a592 <__hexnan+0x7a>
 800a56a:	454c      	cmp	r4, r9
 800a56c:	d206      	bcs.n	800a57c <__hexnan+0x64>
 800a56e:	2d07      	cmp	r5, #7
 800a570:	dc04      	bgt.n	800a57c <__hexnan+0x64>
 800a572:	462a      	mov	r2, r5
 800a574:	4649      	mov	r1, r9
 800a576:	4620      	mov	r0, r4
 800a578:	f7ff ffa8 	bl	800a4cc <L_shift>
 800a57c:	4544      	cmp	r4, r8
 800a57e:	d950      	bls.n	800a622 <__hexnan+0x10a>
 800a580:	2300      	movs	r3, #0
 800a582:	f1a4 0904 	sub.w	r9, r4, #4
 800a586:	f844 3c04 	str.w	r3, [r4, #-4]
 800a58a:	f8cd b008 	str.w	fp, [sp, #8]
 800a58e:	464c      	mov	r4, r9
 800a590:	461d      	mov	r5, r3
 800a592:	9a03      	ldr	r2, [sp, #12]
 800a594:	e7d7      	b.n	800a546 <__hexnan+0x2e>
 800a596:	2929      	cmp	r1, #41	; 0x29
 800a598:	d156      	bne.n	800a648 <__hexnan+0x130>
 800a59a:	3202      	adds	r2, #2
 800a59c:	f8ca 2000 	str.w	r2, [sl]
 800a5a0:	f1bb 0f00 	cmp.w	fp, #0
 800a5a4:	d050      	beq.n	800a648 <__hexnan+0x130>
 800a5a6:	454c      	cmp	r4, r9
 800a5a8:	d206      	bcs.n	800a5b8 <__hexnan+0xa0>
 800a5aa:	2d07      	cmp	r5, #7
 800a5ac:	dc04      	bgt.n	800a5b8 <__hexnan+0xa0>
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f7ff ff8a 	bl	800a4cc <L_shift>
 800a5b8:	4544      	cmp	r4, r8
 800a5ba:	d934      	bls.n	800a626 <__hexnan+0x10e>
 800a5bc:	f1a8 0204 	sub.w	r2, r8, #4
 800a5c0:	4623      	mov	r3, r4
 800a5c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a5ca:	429f      	cmp	r7, r3
 800a5cc:	d2f9      	bcs.n	800a5c2 <__hexnan+0xaa>
 800a5ce:	1b3b      	subs	r3, r7, r4
 800a5d0:	f023 0303 	bic.w	r3, r3, #3
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	3401      	adds	r4, #1
 800a5d8:	3e03      	subs	r6, #3
 800a5da:	42b4      	cmp	r4, r6
 800a5dc:	bf88      	it	hi
 800a5de:	2304      	movhi	r3, #4
 800a5e0:	4443      	add	r3, r8
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f843 2b04 	str.w	r2, [r3], #4
 800a5e8:	429f      	cmp	r7, r3
 800a5ea:	d2fb      	bcs.n	800a5e4 <__hexnan+0xcc>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	b91b      	cbnz	r3, 800a5f8 <__hexnan+0xe0>
 800a5f0:	4547      	cmp	r7, r8
 800a5f2:	d127      	bne.n	800a644 <__hexnan+0x12c>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	2005      	movs	r0, #5
 800a5fa:	e026      	b.n	800a64a <__hexnan+0x132>
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	2d08      	cmp	r5, #8
 800a600:	f10b 0b01 	add.w	fp, fp, #1
 800a604:	dd06      	ble.n	800a614 <__hexnan+0xfc>
 800a606:	4544      	cmp	r4, r8
 800a608:	d9c3      	bls.n	800a592 <__hexnan+0x7a>
 800a60a:	2300      	movs	r3, #0
 800a60c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a610:	2501      	movs	r5, #1
 800a612:	3c04      	subs	r4, #4
 800a614:	6822      	ldr	r2, [r4, #0]
 800a616:	f000 000f 	and.w	r0, r0, #15
 800a61a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a61e:	6022      	str	r2, [r4, #0]
 800a620:	e7b7      	b.n	800a592 <__hexnan+0x7a>
 800a622:	2508      	movs	r5, #8
 800a624:	e7b5      	b.n	800a592 <__hexnan+0x7a>
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d0df      	beq.n	800a5ec <__hexnan+0xd4>
 800a62c:	f04f 32ff 	mov.w	r2, #4294967295
 800a630:	f1c3 0320 	rsb	r3, r3, #32
 800a634:	fa22 f303 	lsr.w	r3, r2, r3
 800a638:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a63c:	401a      	ands	r2, r3
 800a63e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a642:	e7d3      	b.n	800a5ec <__hexnan+0xd4>
 800a644:	3f04      	subs	r7, #4
 800a646:	e7d1      	b.n	800a5ec <__hexnan+0xd4>
 800a648:	2004      	movs	r0, #4
 800a64a:	b007      	add	sp, #28
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a650 <_localeconv_r>:
 800a650:	4800      	ldr	r0, [pc, #0]	; (800a654 <_localeconv_r+0x4>)
 800a652:	4770      	bx	lr
 800a654:	2000016c 	.word	0x2000016c

0800a658 <__retarget_lock_init_recursive>:
 800a658:	4770      	bx	lr

0800a65a <__retarget_lock_acquire_recursive>:
 800a65a:	4770      	bx	lr

0800a65c <__retarget_lock_release_recursive>:
 800a65c:	4770      	bx	lr

0800a65e <__swhatbuf_r>:
 800a65e:	b570      	push	{r4, r5, r6, lr}
 800a660:	460e      	mov	r6, r1
 800a662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a666:	2900      	cmp	r1, #0
 800a668:	b096      	sub	sp, #88	; 0x58
 800a66a:	4614      	mov	r4, r2
 800a66c:	461d      	mov	r5, r3
 800a66e:	da08      	bge.n	800a682 <__swhatbuf_r+0x24>
 800a670:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	602a      	str	r2, [r5, #0]
 800a678:	061a      	lsls	r2, r3, #24
 800a67a:	d410      	bmi.n	800a69e <__swhatbuf_r+0x40>
 800a67c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a680:	e00e      	b.n	800a6a0 <__swhatbuf_r+0x42>
 800a682:	466a      	mov	r2, sp
 800a684:	f001 f8b6 	bl	800b7f4 <_fstat_r>
 800a688:	2800      	cmp	r0, #0
 800a68a:	dbf1      	blt.n	800a670 <__swhatbuf_r+0x12>
 800a68c:	9a01      	ldr	r2, [sp, #4]
 800a68e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a692:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a696:	425a      	negs	r2, r3
 800a698:	415a      	adcs	r2, r3
 800a69a:	602a      	str	r2, [r5, #0]
 800a69c:	e7ee      	b.n	800a67c <__swhatbuf_r+0x1e>
 800a69e:	2340      	movs	r3, #64	; 0x40
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	6023      	str	r3, [r4, #0]
 800a6a4:	b016      	add	sp, #88	; 0x58
 800a6a6:	bd70      	pop	{r4, r5, r6, pc}

0800a6a8 <__smakebuf_r>:
 800a6a8:	898b      	ldrh	r3, [r1, #12]
 800a6aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6ac:	079d      	lsls	r5, r3, #30
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	d507      	bpl.n	800a6c4 <__smakebuf_r+0x1c>
 800a6b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	6123      	str	r3, [r4, #16]
 800a6bc:	2301      	movs	r3, #1
 800a6be:	6163      	str	r3, [r4, #20]
 800a6c0:	b002      	add	sp, #8
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}
 800a6c4:	ab01      	add	r3, sp, #4
 800a6c6:	466a      	mov	r2, sp
 800a6c8:	f7ff ffc9 	bl	800a65e <__swhatbuf_r>
 800a6cc:	9900      	ldr	r1, [sp, #0]
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f000 fdaf 	bl	800b234 <_malloc_r>
 800a6d6:	b948      	cbnz	r0, 800a6ec <__smakebuf_r+0x44>
 800a6d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6dc:	059a      	lsls	r2, r3, #22
 800a6de:	d4ef      	bmi.n	800a6c0 <__smakebuf_r+0x18>
 800a6e0:	f023 0303 	bic.w	r3, r3, #3
 800a6e4:	f043 0302 	orr.w	r3, r3, #2
 800a6e8:	81a3      	strh	r3, [r4, #12]
 800a6ea:	e7e3      	b.n	800a6b4 <__smakebuf_r+0xc>
 800a6ec:	4b0d      	ldr	r3, [pc, #52]	; (800a724 <__smakebuf_r+0x7c>)
 800a6ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	6020      	str	r0, [r4, #0]
 800a6f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	9b00      	ldr	r3, [sp, #0]
 800a6fc:	6163      	str	r3, [r4, #20]
 800a6fe:	9b01      	ldr	r3, [sp, #4]
 800a700:	6120      	str	r0, [r4, #16]
 800a702:	b15b      	cbz	r3, 800a71c <__smakebuf_r+0x74>
 800a704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a708:	4630      	mov	r0, r6
 800a70a:	f001 f885 	bl	800b818 <_isatty_r>
 800a70e:	b128      	cbz	r0, 800a71c <__smakebuf_r+0x74>
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	f023 0303 	bic.w	r3, r3, #3
 800a716:	f043 0301 	orr.w	r3, r3, #1
 800a71a:	81a3      	strh	r3, [r4, #12]
 800a71c:	89a0      	ldrh	r0, [r4, #12]
 800a71e:	4305      	orrs	r5, r0
 800a720:	81a5      	strh	r5, [r4, #12]
 800a722:	e7cd      	b.n	800a6c0 <__smakebuf_r+0x18>
 800a724:	08009dd1 	.word	0x08009dd1

0800a728 <malloc>:
 800a728:	4b02      	ldr	r3, [pc, #8]	; (800a734 <malloc+0xc>)
 800a72a:	4601      	mov	r1, r0
 800a72c:	6818      	ldr	r0, [r3, #0]
 800a72e:	f000 bd81 	b.w	800b234 <_malloc_r>
 800a732:	bf00      	nop
 800a734:	20000014 	.word	0x20000014

0800a738 <__ascii_mbtowc>:
 800a738:	b082      	sub	sp, #8
 800a73a:	b901      	cbnz	r1, 800a73e <__ascii_mbtowc+0x6>
 800a73c:	a901      	add	r1, sp, #4
 800a73e:	b142      	cbz	r2, 800a752 <__ascii_mbtowc+0x1a>
 800a740:	b14b      	cbz	r3, 800a756 <__ascii_mbtowc+0x1e>
 800a742:	7813      	ldrb	r3, [r2, #0]
 800a744:	600b      	str	r3, [r1, #0]
 800a746:	7812      	ldrb	r2, [r2, #0]
 800a748:	1e10      	subs	r0, r2, #0
 800a74a:	bf18      	it	ne
 800a74c:	2001      	movne	r0, #1
 800a74e:	b002      	add	sp, #8
 800a750:	4770      	bx	lr
 800a752:	4610      	mov	r0, r2
 800a754:	e7fb      	b.n	800a74e <__ascii_mbtowc+0x16>
 800a756:	f06f 0001 	mvn.w	r0, #1
 800a75a:	e7f8      	b.n	800a74e <__ascii_mbtowc+0x16>

0800a75c <memcpy>:
 800a75c:	440a      	add	r2, r1
 800a75e:	4291      	cmp	r1, r2
 800a760:	f100 33ff 	add.w	r3, r0, #4294967295
 800a764:	d100      	bne.n	800a768 <memcpy+0xc>
 800a766:	4770      	bx	lr
 800a768:	b510      	push	{r4, lr}
 800a76a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a76e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a772:	4291      	cmp	r1, r2
 800a774:	d1f9      	bne.n	800a76a <memcpy+0xe>
 800a776:	bd10      	pop	{r4, pc}

0800a778 <memmove>:
 800a778:	4288      	cmp	r0, r1
 800a77a:	b510      	push	{r4, lr}
 800a77c:	eb01 0402 	add.w	r4, r1, r2
 800a780:	d902      	bls.n	800a788 <memmove+0x10>
 800a782:	4284      	cmp	r4, r0
 800a784:	4623      	mov	r3, r4
 800a786:	d807      	bhi.n	800a798 <memmove+0x20>
 800a788:	1e43      	subs	r3, r0, #1
 800a78a:	42a1      	cmp	r1, r4
 800a78c:	d008      	beq.n	800a7a0 <memmove+0x28>
 800a78e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a792:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a796:	e7f8      	b.n	800a78a <memmove+0x12>
 800a798:	4402      	add	r2, r0
 800a79a:	4601      	mov	r1, r0
 800a79c:	428a      	cmp	r2, r1
 800a79e:	d100      	bne.n	800a7a2 <memmove+0x2a>
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7aa:	e7f7      	b.n	800a79c <memmove+0x24>

0800a7ac <_Balloc>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	460d      	mov	r5, r1
 800a7b4:	b976      	cbnz	r6, 800a7d4 <_Balloc+0x28>
 800a7b6:	2010      	movs	r0, #16
 800a7b8:	f7ff ffb6 	bl	800a728 <malloc>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	6260      	str	r0, [r4, #36]	; 0x24
 800a7c0:	b920      	cbnz	r0, 800a7cc <_Balloc+0x20>
 800a7c2:	4b18      	ldr	r3, [pc, #96]	; (800a824 <_Balloc+0x78>)
 800a7c4:	4818      	ldr	r0, [pc, #96]	; (800a828 <_Balloc+0x7c>)
 800a7c6:	2166      	movs	r1, #102	; 0x66
 800a7c8:	f7fc fbd2 	bl	8006f70 <__assert_func>
 800a7cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7d0:	6006      	str	r6, [r0, #0]
 800a7d2:	60c6      	str	r6, [r0, #12]
 800a7d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7d6:	68f3      	ldr	r3, [r6, #12]
 800a7d8:	b183      	cbz	r3, 800a7fc <_Balloc+0x50>
 800a7da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7e2:	b9b8      	cbnz	r0, 800a814 <_Balloc+0x68>
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	fa01 f605 	lsl.w	r6, r1, r5
 800a7ea:	1d72      	adds	r2, r6, #5
 800a7ec:	0092      	lsls	r2, r2, #2
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 fc9d 	bl	800b12e <_calloc_r>
 800a7f4:	b160      	cbz	r0, 800a810 <_Balloc+0x64>
 800a7f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7fa:	e00e      	b.n	800a81a <_Balloc+0x6e>
 800a7fc:	2221      	movs	r2, #33	; 0x21
 800a7fe:	2104      	movs	r1, #4
 800a800:	4620      	mov	r0, r4
 800a802:	f000 fc94 	bl	800b12e <_calloc_r>
 800a806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a808:	60f0      	str	r0, [r6, #12]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1e4      	bne.n	800a7da <_Balloc+0x2e>
 800a810:	2000      	movs	r0, #0
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	6802      	ldr	r2, [r0, #0]
 800a816:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a81a:	2300      	movs	r3, #0
 800a81c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a820:	e7f7      	b.n	800a812 <_Balloc+0x66>
 800a822:	bf00      	nop
 800a824:	0800cf6e 	.word	0x0800cf6e
 800a828:	0800d0d0 	.word	0x0800d0d0

0800a82c <_Bfree>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a830:	4605      	mov	r5, r0
 800a832:	460c      	mov	r4, r1
 800a834:	b976      	cbnz	r6, 800a854 <_Bfree+0x28>
 800a836:	2010      	movs	r0, #16
 800a838:	f7ff ff76 	bl	800a728 <malloc>
 800a83c:	4602      	mov	r2, r0
 800a83e:	6268      	str	r0, [r5, #36]	; 0x24
 800a840:	b920      	cbnz	r0, 800a84c <_Bfree+0x20>
 800a842:	4b09      	ldr	r3, [pc, #36]	; (800a868 <_Bfree+0x3c>)
 800a844:	4809      	ldr	r0, [pc, #36]	; (800a86c <_Bfree+0x40>)
 800a846:	218a      	movs	r1, #138	; 0x8a
 800a848:	f7fc fb92 	bl	8006f70 <__assert_func>
 800a84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a850:	6006      	str	r6, [r0, #0]
 800a852:	60c6      	str	r6, [r0, #12]
 800a854:	b13c      	cbz	r4, 800a866 <_Bfree+0x3a>
 800a856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a858:	6862      	ldr	r2, [r4, #4]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a860:	6021      	str	r1, [r4, #0]
 800a862:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a866:	bd70      	pop	{r4, r5, r6, pc}
 800a868:	0800cf6e 	.word	0x0800cf6e
 800a86c:	0800d0d0 	.word	0x0800d0d0

0800a870 <__multadd>:
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	690d      	ldr	r5, [r1, #16]
 800a876:	4607      	mov	r7, r0
 800a878:	460c      	mov	r4, r1
 800a87a:	461e      	mov	r6, r3
 800a87c:	f101 0c14 	add.w	ip, r1, #20
 800a880:	2000      	movs	r0, #0
 800a882:	f8dc 3000 	ldr.w	r3, [ip]
 800a886:	b299      	uxth	r1, r3
 800a888:	fb02 6101 	mla	r1, r2, r1, r6
 800a88c:	0c1e      	lsrs	r6, r3, #16
 800a88e:	0c0b      	lsrs	r3, r1, #16
 800a890:	fb02 3306 	mla	r3, r2, r6, r3
 800a894:	b289      	uxth	r1, r1
 800a896:	3001      	adds	r0, #1
 800a898:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a89c:	4285      	cmp	r5, r0
 800a89e:	f84c 1b04 	str.w	r1, [ip], #4
 800a8a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8a6:	dcec      	bgt.n	800a882 <__multadd+0x12>
 800a8a8:	b30e      	cbz	r6, 800a8ee <__multadd+0x7e>
 800a8aa:	68a3      	ldr	r3, [r4, #8]
 800a8ac:	42ab      	cmp	r3, r5
 800a8ae:	dc19      	bgt.n	800a8e4 <__multadd+0x74>
 800a8b0:	6861      	ldr	r1, [r4, #4]
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	3101      	adds	r1, #1
 800a8b6:	f7ff ff79 	bl	800a7ac <_Balloc>
 800a8ba:	4680      	mov	r8, r0
 800a8bc:	b928      	cbnz	r0, 800a8ca <__multadd+0x5a>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	4b0c      	ldr	r3, [pc, #48]	; (800a8f4 <__multadd+0x84>)
 800a8c2:	480d      	ldr	r0, [pc, #52]	; (800a8f8 <__multadd+0x88>)
 800a8c4:	21b5      	movs	r1, #181	; 0xb5
 800a8c6:	f7fc fb53 	bl	8006f70 <__assert_func>
 800a8ca:	6922      	ldr	r2, [r4, #16]
 800a8cc:	3202      	adds	r2, #2
 800a8ce:	f104 010c 	add.w	r1, r4, #12
 800a8d2:	0092      	lsls	r2, r2, #2
 800a8d4:	300c      	adds	r0, #12
 800a8d6:	f7ff ff41 	bl	800a75c <memcpy>
 800a8da:	4621      	mov	r1, r4
 800a8dc:	4638      	mov	r0, r7
 800a8de:	f7ff ffa5 	bl	800a82c <_Bfree>
 800a8e2:	4644      	mov	r4, r8
 800a8e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8e8:	3501      	adds	r5, #1
 800a8ea:	615e      	str	r6, [r3, #20]
 800a8ec:	6125      	str	r5, [r4, #16]
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f4:	0800cfe0 	.word	0x0800cfe0
 800a8f8:	0800d0d0 	.word	0x0800d0d0

0800a8fc <__s2b>:
 800a8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a900:	460c      	mov	r4, r1
 800a902:	4615      	mov	r5, r2
 800a904:	461f      	mov	r7, r3
 800a906:	2209      	movs	r2, #9
 800a908:	3308      	adds	r3, #8
 800a90a:	4606      	mov	r6, r0
 800a90c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a910:	2100      	movs	r1, #0
 800a912:	2201      	movs	r2, #1
 800a914:	429a      	cmp	r2, r3
 800a916:	db09      	blt.n	800a92c <__s2b+0x30>
 800a918:	4630      	mov	r0, r6
 800a91a:	f7ff ff47 	bl	800a7ac <_Balloc>
 800a91e:	b940      	cbnz	r0, 800a932 <__s2b+0x36>
 800a920:	4602      	mov	r2, r0
 800a922:	4b19      	ldr	r3, [pc, #100]	; (800a988 <__s2b+0x8c>)
 800a924:	4819      	ldr	r0, [pc, #100]	; (800a98c <__s2b+0x90>)
 800a926:	21ce      	movs	r1, #206	; 0xce
 800a928:	f7fc fb22 	bl	8006f70 <__assert_func>
 800a92c:	0052      	lsls	r2, r2, #1
 800a92e:	3101      	adds	r1, #1
 800a930:	e7f0      	b.n	800a914 <__s2b+0x18>
 800a932:	9b08      	ldr	r3, [sp, #32]
 800a934:	6143      	str	r3, [r0, #20]
 800a936:	2d09      	cmp	r5, #9
 800a938:	f04f 0301 	mov.w	r3, #1
 800a93c:	6103      	str	r3, [r0, #16]
 800a93e:	dd16      	ble.n	800a96e <__s2b+0x72>
 800a940:	f104 0909 	add.w	r9, r4, #9
 800a944:	46c8      	mov	r8, r9
 800a946:	442c      	add	r4, r5
 800a948:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a94c:	4601      	mov	r1, r0
 800a94e:	3b30      	subs	r3, #48	; 0x30
 800a950:	220a      	movs	r2, #10
 800a952:	4630      	mov	r0, r6
 800a954:	f7ff ff8c 	bl	800a870 <__multadd>
 800a958:	45a0      	cmp	r8, r4
 800a95a:	d1f5      	bne.n	800a948 <__s2b+0x4c>
 800a95c:	f1a5 0408 	sub.w	r4, r5, #8
 800a960:	444c      	add	r4, r9
 800a962:	1b2d      	subs	r5, r5, r4
 800a964:	1963      	adds	r3, r4, r5
 800a966:	42bb      	cmp	r3, r7
 800a968:	db04      	blt.n	800a974 <__s2b+0x78>
 800a96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a96e:	340a      	adds	r4, #10
 800a970:	2509      	movs	r5, #9
 800a972:	e7f6      	b.n	800a962 <__s2b+0x66>
 800a974:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a978:	4601      	mov	r1, r0
 800a97a:	3b30      	subs	r3, #48	; 0x30
 800a97c:	220a      	movs	r2, #10
 800a97e:	4630      	mov	r0, r6
 800a980:	f7ff ff76 	bl	800a870 <__multadd>
 800a984:	e7ee      	b.n	800a964 <__s2b+0x68>
 800a986:	bf00      	nop
 800a988:	0800cfe0 	.word	0x0800cfe0
 800a98c:	0800d0d0 	.word	0x0800d0d0

0800a990 <__hi0bits>:
 800a990:	0c03      	lsrs	r3, r0, #16
 800a992:	041b      	lsls	r3, r3, #16
 800a994:	b9d3      	cbnz	r3, 800a9cc <__hi0bits+0x3c>
 800a996:	0400      	lsls	r0, r0, #16
 800a998:	2310      	movs	r3, #16
 800a99a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a99e:	bf04      	itt	eq
 800a9a0:	0200      	lsleq	r0, r0, #8
 800a9a2:	3308      	addeq	r3, #8
 800a9a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9a8:	bf04      	itt	eq
 800a9aa:	0100      	lsleq	r0, r0, #4
 800a9ac:	3304      	addeq	r3, #4
 800a9ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9b2:	bf04      	itt	eq
 800a9b4:	0080      	lsleq	r0, r0, #2
 800a9b6:	3302      	addeq	r3, #2
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	db05      	blt.n	800a9c8 <__hi0bits+0x38>
 800a9bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9c0:	f103 0301 	add.w	r3, r3, #1
 800a9c4:	bf08      	it	eq
 800a9c6:	2320      	moveq	r3, #32
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	4770      	bx	lr
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e7e4      	b.n	800a99a <__hi0bits+0xa>

0800a9d0 <__lo0bits>:
 800a9d0:	6803      	ldr	r3, [r0, #0]
 800a9d2:	f013 0207 	ands.w	r2, r3, #7
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	d00b      	beq.n	800a9f2 <__lo0bits+0x22>
 800a9da:	07da      	lsls	r2, r3, #31
 800a9dc:	d423      	bmi.n	800aa26 <__lo0bits+0x56>
 800a9de:	0798      	lsls	r0, r3, #30
 800a9e0:	bf49      	itett	mi
 800a9e2:	085b      	lsrmi	r3, r3, #1
 800a9e4:	089b      	lsrpl	r3, r3, #2
 800a9e6:	2001      	movmi	r0, #1
 800a9e8:	600b      	strmi	r3, [r1, #0]
 800a9ea:	bf5c      	itt	pl
 800a9ec:	600b      	strpl	r3, [r1, #0]
 800a9ee:	2002      	movpl	r0, #2
 800a9f0:	4770      	bx	lr
 800a9f2:	b298      	uxth	r0, r3
 800a9f4:	b9a8      	cbnz	r0, 800aa22 <__lo0bits+0x52>
 800a9f6:	0c1b      	lsrs	r3, r3, #16
 800a9f8:	2010      	movs	r0, #16
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	b90a      	cbnz	r2, 800aa02 <__lo0bits+0x32>
 800a9fe:	3008      	adds	r0, #8
 800aa00:	0a1b      	lsrs	r3, r3, #8
 800aa02:	071a      	lsls	r2, r3, #28
 800aa04:	bf04      	itt	eq
 800aa06:	091b      	lsreq	r3, r3, #4
 800aa08:	3004      	addeq	r0, #4
 800aa0a:	079a      	lsls	r2, r3, #30
 800aa0c:	bf04      	itt	eq
 800aa0e:	089b      	lsreq	r3, r3, #2
 800aa10:	3002      	addeq	r0, #2
 800aa12:	07da      	lsls	r2, r3, #31
 800aa14:	d403      	bmi.n	800aa1e <__lo0bits+0x4e>
 800aa16:	085b      	lsrs	r3, r3, #1
 800aa18:	f100 0001 	add.w	r0, r0, #1
 800aa1c:	d005      	beq.n	800aa2a <__lo0bits+0x5a>
 800aa1e:	600b      	str	r3, [r1, #0]
 800aa20:	4770      	bx	lr
 800aa22:	4610      	mov	r0, r2
 800aa24:	e7e9      	b.n	800a9fa <__lo0bits+0x2a>
 800aa26:	2000      	movs	r0, #0
 800aa28:	4770      	bx	lr
 800aa2a:	2020      	movs	r0, #32
 800aa2c:	4770      	bx	lr
	...

0800aa30 <__i2b>:
 800aa30:	b510      	push	{r4, lr}
 800aa32:	460c      	mov	r4, r1
 800aa34:	2101      	movs	r1, #1
 800aa36:	f7ff feb9 	bl	800a7ac <_Balloc>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	b928      	cbnz	r0, 800aa4a <__i2b+0x1a>
 800aa3e:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <__i2b+0x24>)
 800aa40:	4805      	ldr	r0, [pc, #20]	; (800aa58 <__i2b+0x28>)
 800aa42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa46:	f7fc fa93 	bl	8006f70 <__assert_func>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	6144      	str	r4, [r0, #20]
 800aa4e:	6103      	str	r3, [r0, #16]
 800aa50:	bd10      	pop	{r4, pc}
 800aa52:	bf00      	nop
 800aa54:	0800cfe0 	.word	0x0800cfe0
 800aa58:	0800d0d0 	.word	0x0800d0d0

0800aa5c <__multiply>:
 800aa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	4691      	mov	r9, r2
 800aa62:	690a      	ldr	r2, [r1, #16]
 800aa64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	bfb8      	it	lt
 800aa6c:	460b      	movlt	r3, r1
 800aa6e:	460c      	mov	r4, r1
 800aa70:	bfbc      	itt	lt
 800aa72:	464c      	movlt	r4, r9
 800aa74:	4699      	movlt	r9, r3
 800aa76:	6927      	ldr	r7, [r4, #16]
 800aa78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa7c:	68a3      	ldr	r3, [r4, #8]
 800aa7e:	6861      	ldr	r1, [r4, #4]
 800aa80:	eb07 060a 	add.w	r6, r7, sl
 800aa84:	42b3      	cmp	r3, r6
 800aa86:	b085      	sub	sp, #20
 800aa88:	bfb8      	it	lt
 800aa8a:	3101      	addlt	r1, #1
 800aa8c:	f7ff fe8e 	bl	800a7ac <_Balloc>
 800aa90:	b930      	cbnz	r0, 800aaa0 <__multiply+0x44>
 800aa92:	4602      	mov	r2, r0
 800aa94:	4b44      	ldr	r3, [pc, #272]	; (800aba8 <__multiply+0x14c>)
 800aa96:	4845      	ldr	r0, [pc, #276]	; (800abac <__multiply+0x150>)
 800aa98:	f240 115d 	movw	r1, #349	; 0x15d
 800aa9c:	f7fc fa68 	bl	8006f70 <__assert_func>
 800aaa0:	f100 0514 	add.w	r5, r0, #20
 800aaa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aaa8:	462b      	mov	r3, r5
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4543      	cmp	r3, r8
 800aaae:	d321      	bcc.n	800aaf4 <__multiply+0x98>
 800aab0:	f104 0314 	add.w	r3, r4, #20
 800aab4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aab8:	f109 0314 	add.w	r3, r9, #20
 800aabc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aac0:	9202      	str	r2, [sp, #8]
 800aac2:	1b3a      	subs	r2, r7, r4
 800aac4:	3a15      	subs	r2, #21
 800aac6:	f022 0203 	bic.w	r2, r2, #3
 800aaca:	3204      	adds	r2, #4
 800aacc:	f104 0115 	add.w	r1, r4, #21
 800aad0:	428f      	cmp	r7, r1
 800aad2:	bf38      	it	cc
 800aad4:	2204      	movcc	r2, #4
 800aad6:	9201      	str	r2, [sp, #4]
 800aad8:	9a02      	ldr	r2, [sp, #8]
 800aada:	9303      	str	r3, [sp, #12]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d80c      	bhi.n	800aafa <__multiply+0x9e>
 800aae0:	2e00      	cmp	r6, #0
 800aae2:	dd03      	ble.n	800aaec <__multiply+0x90>
 800aae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d05a      	beq.n	800aba2 <__multiply+0x146>
 800aaec:	6106      	str	r6, [r0, #16]
 800aaee:	b005      	add	sp, #20
 800aaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf4:	f843 2b04 	str.w	r2, [r3], #4
 800aaf8:	e7d8      	b.n	800aaac <__multiply+0x50>
 800aafa:	f8b3 a000 	ldrh.w	sl, [r3]
 800aafe:	f1ba 0f00 	cmp.w	sl, #0
 800ab02:	d024      	beq.n	800ab4e <__multiply+0xf2>
 800ab04:	f104 0e14 	add.w	lr, r4, #20
 800ab08:	46a9      	mov	r9, r5
 800ab0a:	f04f 0c00 	mov.w	ip, #0
 800ab0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab12:	f8d9 1000 	ldr.w	r1, [r9]
 800ab16:	fa1f fb82 	uxth.w	fp, r2
 800ab1a:	b289      	uxth	r1, r1
 800ab1c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab24:	f8d9 2000 	ldr.w	r2, [r9]
 800ab28:	4461      	add	r1, ip
 800ab2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab2e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab36:	b289      	uxth	r1, r1
 800ab38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab3c:	4577      	cmp	r7, lr
 800ab3e:	f849 1b04 	str.w	r1, [r9], #4
 800ab42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab46:	d8e2      	bhi.n	800ab0e <__multiply+0xb2>
 800ab48:	9a01      	ldr	r2, [sp, #4]
 800ab4a:	f845 c002 	str.w	ip, [r5, r2]
 800ab4e:	9a03      	ldr	r2, [sp, #12]
 800ab50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab54:	3304      	adds	r3, #4
 800ab56:	f1b9 0f00 	cmp.w	r9, #0
 800ab5a:	d020      	beq.n	800ab9e <__multiply+0x142>
 800ab5c:	6829      	ldr	r1, [r5, #0]
 800ab5e:	f104 0c14 	add.w	ip, r4, #20
 800ab62:	46ae      	mov	lr, r5
 800ab64:	f04f 0a00 	mov.w	sl, #0
 800ab68:	f8bc b000 	ldrh.w	fp, [ip]
 800ab6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab70:	fb09 220b 	mla	r2, r9, fp, r2
 800ab74:	4492      	add	sl, r2
 800ab76:	b289      	uxth	r1, r1
 800ab78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab7c:	f84e 1b04 	str.w	r1, [lr], #4
 800ab80:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab84:	f8be 1000 	ldrh.w	r1, [lr]
 800ab88:	0c12      	lsrs	r2, r2, #16
 800ab8a:	fb09 1102 	mla	r1, r9, r2, r1
 800ab8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab92:	4567      	cmp	r7, ip
 800ab94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab98:	d8e6      	bhi.n	800ab68 <__multiply+0x10c>
 800ab9a:	9a01      	ldr	r2, [sp, #4]
 800ab9c:	50a9      	str	r1, [r5, r2]
 800ab9e:	3504      	adds	r5, #4
 800aba0:	e79a      	b.n	800aad8 <__multiply+0x7c>
 800aba2:	3e01      	subs	r6, #1
 800aba4:	e79c      	b.n	800aae0 <__multiply+0x84>
 800aba6:	bf00      	nop
 800aba8:	0800cfe0 	.word	0x0800cfe0
 800abac:	0800d0d0 	.word	0x0800d0d0

0800abb0 <__pow5mult>:
 800abb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb4:	4615      	mov	r5, r2
 800abb6:	f012 0203 	ands.w	r2, r2, #3
 800abba:	4606      	mov	r6, r0
 800abbc:	460f      	mov	r7, r1
 800abbe:	d007      	beq.n	800abd0 <__pow5mult+0x20>
 800abc0:	4c25      	ldr	r4, [pc, #148]	; (800ac58 <__pow5mult+0xa8>)
 800abc2:	3a01      	subs	r2, #1
 800abc4:	2300      	movs	r3, #0
 800abc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abca:	f7ff fe51 	bl	800a870 <__multadd>
 800abce:	4607      	mov	r7, r0
 800abd0:	10ad      	asrs	r5, r5, #2
 800abd2:	d03d      	beq.n	800ac50 <__pow5mult+0xa0>
 800abd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800abd6:	b97c      	cbnz	r4, 800abf8 <__pow5mult+0x48>
 800abd8:	2010      	movs	r0, #16
 800abda:	f7ff fda5 	bl	800a728 <malloc>
 800abde:	4602      	mov	r2, r0
 800abe0:	6270      	str	r0, [r6, #36]	; 0x24
 800abe2:	b928      	cbnz	r0, 800abf0 <__pow5mult+0x40>
 800abe4:	4b1d      	ldr	r3, [pc, #116]	; (800ac5c <__pow5mult+0xac>)
 800abe6:	481e      	ldr	r0, [pc, #120]	; (800ac60 <__pow5mult+0xb0>)
 800abe8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800abec:	f7fc f9c0 	bl	8006f70 <__assert_func>
 800abf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abf4:	6004      	str	r4, [r0, #0]
 800abf6:	60c4      	str	r4, [r0, #12]
 800abf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800abfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac00:	b94c      	cbnz	r4, 800ac16 <__pow5mult+0x66>
 800ac02:	f240 2171 	movw	r1, #625	; 0x271
 800ac06:	4630      	mov	r0, r6
 800ac08:	f7ff ff12 	bl	800aa30 <__i2b>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac12:	4604      	mov	r4, r0
 800ac14:	6003      	str	r3, [r0, #0]
 800ac16:	f04f 0900 	mov.w	r9, #0
 800ac1a:	07eb      	lsls	r3, r5, #31
 800ac1c:	d50a      	bpl.n	800ac34 <__pow5mult+0x84>
 800ac1e:	4639      	mov	r1, r7
 800ac20:	4622      	mov	r2, r4
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7ff ff1a 	bl	800aa5c <__multiply>
 800ac28:	4639      	mov	r1, r7
 800ac2a:	4680      	mov	r8, r0
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f7ff fdfd 	bl	800a82c <_Bfree>
 800ac32:	4647      	mov	r7, r8
 800ac34:	106d      	asrs	r5, r5, #1
 800ac36:	d00b      	beq.n	800ac50 <__pow5mult+0xa0>
 800ac38:	6820      	ldr	r0, [r4, #0]
 800ac3a:	b938      	cbnz	r0, 800ac4c <__pow5mult+0x9c>
 800ac3c:	4622      	mov	r2, r4
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4630      	mov	r0, r6
 800ac42:	f7ff ff0b 	bl	800aa5c <__multiply>
 800ac46:	6020      	str	r0, [r4, #0]
 800ac48:	f8c0 9000 	str.w	r9, [r0]
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	e7e4      	b.n	800ac1a <__pow5mult+0x6a>
 800ac50:	4638      	mov	r0, r7
 800ac52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac56:	bf00      	nop
 800ac58:	0800d220 	.word	0x0800d220
 800ac5c:	0800cf6e 	.word	0x0800cf6e
 800ac60:	0800d0d0 	.word	0x0800d0d0

0800ac64 <__lshift>:
 800ac64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac68:	460c      	mov	r4, r1
 800ac6a:	6849      	ldr	r1, [r1, #4]
 800ac6c:	6923      	ldr	r3, [r4, #16]
 800ac6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac72:	68a3      	ldr	r3, [r4, #8]
 800ac74:	4607      	mov	r7, r0
 800ac76:	4691      	mov	r9, r2
 800ac78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac7c:	f108 0601 	add.w	r6, r8, #1
 800ac80:	42b3      	cmp	r3, r6
 800ac82:	db0b      	blt.n	800ac9c <__lshift+0x38>
 800ac84:	4638      	mov	r0, r7
 800ac86:	f7ff fd91 	bl	800a7ac <_Balloc>
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	b948      	cbnz	r0, 800aca2 <__lshift+0x3e>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	4b2a      	ldr	r3, [pc, #168]	; (800ad3c <__lshift+0xd8>)
 800ac92:	482b      	ldr	r0, [pc, #172]	; (800ad40 <__lshift+0xdc>)
 800ac94:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac98:	f7fc f96a 	bl	8006f70 <__assert_func>
 800ac9c:	3101      	adds	r1, #1
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	e7ee      	b.n	800ac80 <__lshift+0x1c>
 800aca2:	2300      	movs	r3, #0
 800aca4:	f100 0114 	add.w	r1, r0, #20
 800aca8:	f100 0210 	add.w	r2, r0, #16
 800acac:	4618      	mov	r0, r3
 800acae:	4553      	cmp	r3, sl
 800acb0:	db37      	blt.n	800ad22 <__lshift+0xbe>
 800acb2:	6920      	ldr	r0, [r4, #16]
 800acb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acb8:	f104 0314 	add.w	r3, r4, #20
 800acbc:	f019 091f 	ands.w	r9, r9, #31
 800acc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800acc8:	d02f      	beq.n	800ad2a <__lshift+0xc6>
 800acca:	f1c9 0e20 	rsb	lr, r9, #32
 800acce:	468a      	mov	sl, r1
 800acd0:	f04f 0c00 	mov.w	ip, #0
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	fa02 f209 	lsl.w	r2, r2, r9
 800acda:	ea42 020c 	orr.w	r2, r2, ip
 800acde:	f84a 2b04 	str.w	r2, [sl], #4
 800ace2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace6:	4298      	cmp	r0, r3
 800ace8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800acec:	d8f2      	bhi.n	800acd4 <__lshift+0x70>
 800acee:	1b03      	subs	r3, r0, r4
 800acf0:	3b15      	subs	r3, #21
 800acf2:	f023 0303 	bic.w	r3, r3, #3
 800acf6:	3304      	adds	r3, #4
 800acf8:	f104 0215 	add.w	r2, r4, #21
 800acfc:	4290      	cmp	r0, r2
 800acfe:	bf38      	it	cc
 800ad00:	2304      	movcc	r3, #4
 800ad02:	f841 c003 	str.w	ip, [r1, r3]
 800ad06:	f1bc 0f00 	cmp.w	ip, #0
 800ad0a:	d001      	beq.n	800ad10 <__lshift+0xac>
 800ad0c:	f108 0602 	add.w	r6, r8, #2
 800ad10:	3e01      	subs	r6, #1
 800ad12:	4638      	mov	r0, r7
 800ad14:	612e      	str	r6, [r5, #16]
 800ad16:	4621      	mov	r1, r4
 800ad18:	f7ff fd88 	bl	800a82c <_Bfree>
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad22:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad26:	3301      	adds	r3, #1
 800ad28:	e7c1      	b.n	800acae <__lshift+0x4a>
 800ad2a:	3904      	subs	r1, #4
 800ad2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad30:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad34:	4298      	cmp	r0, r3
 800ad36:	d8f9      	bhi.n	800ad2c <__lshift+0xc8>
 800ad38:	e7ea      	b.n	800ad10 <__lshift+0xac>
 800ad3a:	bf00      	nop
 800ad3c:	0800cfe0 	.word	0x0800cfe0
 800ad40:	0800d0d0 	.word	0x0800d0d0

0800ad44 <__mcmp>:
 800ad44:	b530      	push	{r4, r5, lr}
 800ad46:	6902      	ldr	r2, [r0, #16]
 800ad48:	690c      	ldr	r4, [r1, #16]
 800ad4a:	1b12      	subs	r2, r2, r4
 800ad4c:	d10e      	bne.n	800ad6c <__mcmp+0x28>
 800ad4e:	f100 0314 	add.w	r3, r0, #20
 800ad52:	3114      	adds	r1, #20
 800ad54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad64:	42a5      	cmp	r5, r4
 800ad66:	d003      	beq.n	800ad70 <__mcmp+0x2c>
 800ad68:	d305      	bcc.n	800ad76 <__mcmp+0x32>
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	bd30      	pop	{r4, r5, pc}
 800ad70:	4283      	cmp	r3, r0
 800ad72:	d3f3      	bcc.n	800ad5c <__mcmp+0x18>
 800ad74:	e7fa      	b.n	800ad6c <__mcmp+0x28>
 800ad76:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7a:	e7f7      	b.n	800ad6c <__mcmp+0x28>

0800ad7c <__mdiff>:
 800ad7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad80:	460c      	mov	r4, r1
 800ad82:	4606      	mov	r6, r0
 800ad84:	4611      	mov	r1, r2
 800ad86:	4620      	mov	r0, r4
 800ad88:	4690      	mov	r8, r2
 800ad8a:	f7ff ffdb 	bl	800ad44 <__mcmp>
 800ad8e:	1e05      	subs	r5, r0, #0
 800ad90:	d110      	bne.n	800adb4 <__mdiff+0x38>
 800ad92:	4629      	mov	r1, r5
 800ad94:	4630      	mov	r0, r6
 800ad96:	f7ff fd09 	bl	800a7ac <_Balloc>
 800ad9a:	b930      	cbnz	r0, 800adaa <__mdiff+0x2e>
 800ad9c:	4b3a      	ldr	r3, [pc, #232]	; (800ae88 <__mdiff+0x10c>)
 800ad9e:	4602      	mov	r2, r0
 800ada0:	f240 2132 	movw	r1, #562	; 0x232
 800ada4:	4839      	ldr	r0, [pc, #228]	; (800ae8c <__mdiff+0x110>)
 800ada6:	f7fc f8e3 	bl	8006f70 <__assert_func>
 800adaa:	2301      	movs	r3, #1
 800adac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb4:	bfa4      	itt	ge
 800adb6:	4643      	movge	r3, r8
 800adb8:	46a0      	movge	r8, r4
 800adba:	4630      	mov	r0, r6
 800adbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800adc0:	bfa6      	itte	ge
 800adc2:	461c      	movge	r4, r3
 800adc4:	2500      	movge	r5, #0
 800adc6:	2501      	movlt	r5, #1
 800adc8:	f7ff fcf0 	bl	800a7ac <_Balloc>
 800adcc:	b920      	cbnz	r0, 800add8 <__mdiff+0x5c>
 800adce:	4b2e      	ldr	r3, [pc, #184]	; (800ae88 <__mdiff+0x10c>)
 800add0:	4602      	mov	r2, r0
 800add2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800add6:	e7e5      	b.n	800ada4 <__mdiff+0x28>
 800add8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800addc:	6926      	ldr	r6, [r4, #16]
 800adde:	60c5      	str	r5, [r0, #12]
 800ade0:	f104 0914 	add.w	r9, r4, #20
 800ade4:	f108 0514 	add.w	r5, r8, #20
 800ade8:	f100 0e14 	add.w	lr, r0, #20
 800adec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800adf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800adf4:	f108 0210 	add.w	r2, r8, #16
 800adf8:	46f2      	mov	sl, lr
 800adfa:	2100      	movs	r1, #0
 800adfc:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae04:	fa1f f883 	uxth.w	r8, r3
 800ae08:	fa11 f18b 	uxtah	r1, r1, fp
 800ae0c:	0c1b      	lsrs	r3, r3, #16
 800ae0e:	eba1 0808 	sub.w	r8, r1, r8
 800ae12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae1a:	fa1f f888 	uxth.w	r8, r8
 800ae1e:	1419      	asrs	r1, r3, #16
 800ae20:	454e      	cmp	r6, r9
 800ae22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae26:	f84a 3b04 	str.w	r3, [sl], #4
 800ae2a:	d8e7      	bhi.n	800adfc <__mdiff+0x80>
 800ae2c:	1b33      	subs	r3, r6, r4
 800ae2e:	3b15      	subs	r3, #21
 800ae30:	f023 0303 	bic.w	r3, r3, #3
 800ae34:	3304      	adds	r3, #4
 800ae36:	3415      	adds	r4, #21
 800ae38:	42a6      	cmp	r6, r4
 800ae3a:	bf38      	it	cc
 800ae3c:	2304      	movcc	r3, #4
 800ae3e:	441d      	add	r5, r3
 800ae40:	4473      	add	r3, lr
 800ae42:	469e      	mov	lr, r3
 800ae44:	462e      	mov	r6, r5
 800ae46:	4566      	cmp	r6, ip
 800ae48:	d30e      	bcc.n	800ae68 <__mdiff+0xec>
 800ae4a:	f10c 0203 	add.w	r2, ip, #3
 800ae4e:	1b52      	subs	r2, r2, r5
 800ae50:	f022 0203 	bic.w	r2, r2, #3
 800ae54:	3d03      	subs	r5, #3
 800ae56:	45ac      	cmp	ip, r5
 800ae58:	bf38      	it	cc
 800ae5a:	2200      	movcc	r2, #0
 800ae5c:	441a      	add	r2, r3
 800ae5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae62:	b17b      	cbz	r3, 800ae84 <__mdiff+0x108>
 800ae64:	6107      	str	r7, [r0, #16]
 800ae66:	e7a3      	b.n	800adb0 <__mdiff+0x34>
 800ae68:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae6c:	fa11 f288 	uxtah	r2, r1, r8
 800ae70:	1414      	asrs	r4, r2, #16
 800ae72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae76:	b292      	uxth	r2, r2
 800ae78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae7c:	f84e 2b04 	str.w	r2, [lr], #4
 800ae80:	1421      	asrs	r1, r4, #16
 800ae82:	e7e0      	b.n	800ae46 <__mdiff+0xca>
 800ae84:	3f01      	subs	r7, #1
 800ae86:	e7ea      	b.n	800ae5e <__mdiff+0xe2>
 800ae88:	0800cfe0 	.word	0x0800cfe0
 800ae8c:	0800d0d0 	.word	0x0800d0d0

0800ae90 <__ulp>:
 800ae90:	b082      	sub	sp, #8
 800ae92:	ed8d 0b00 	vstr	d0, [sp]
 800ae96:	9b01      	ldr	r3, [sp, #4]
 800ae98:	4912      	ldr	r1, [pc, #72]	; (800aee4 <__ulp+0x54>)
 800ae9a:	4019      	ands	r1, r3
 800ae9c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aea0:	2900      	cmp	r1, #0
 800aea2:	dd05      	ble.n	800aeb0 <__ulp+0x20>
 800aea4:	2200      	movs	r2, #0
 800aea6:	460b      	mov	r3, r1
 800aea8:	ec43 2b10 	vmov	d0, r2, r3
 800aeac:	b002      	add	sp, #8
 800aeae:	4770      	bx	lr
 800aeb0:	4249      	negs	r1, r1
 800aeb2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aeb6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aeba:	f04f 0200 	mov.w	r2, #0
 800aebe:	f04f 0300 	mov.w	r3, #0
 800aec2:	da04      	bge.n	800aece <__ulp+0x3e>
 800aec4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aec8:	fa41 f300 	asr.w	r3, r1, r0
 800aecc:	e7ec      	b.n	800aea8 <__ulp+0x18>
 800aece:	f1a0 0114 	sub.w	r1, r0, #20
 800aed2:	291e      	cmp	r1, #30
 800aed4:	bfda      	itte	le
 800aed6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aeda:	fa20 f101 	lsrle.w	r1, r0, r1
 800aede:	2101      	movgt	r1, #1
 800aee0:	460a      	mov	r2, r1
 800aee2:	e7e1      	b.n	800aea8 <__ulp+0x18>
 800aee4:	7ff00000 	.word	0x7ff00000

0800aee8 <__b2d>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	6905      	ldr	r5, [r0, #16]
 800aeec:	f100 0714 	add.w	r7, r0, #20
 800aef0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aef4:	1f2e      	subs	r6, r5, #4
 800aef6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aefa:	4620      	mov	r0, r4
 800aefc:	f7ff fd48 	bl	800a990 <__hi0bits>
 800af00:	f1c0 0320 	rsb	r3, r0, #32
 800af04:	280a      	cmp	r0, #10
 800af06:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800af84 <__b2d+0x9c>
 800af0a:	600b      	str	r3, [r1, #0]
 800af0c:	dc14      	bgt.n	800af38 <__b2d+0x50>
 800af0e:	f1c0 0e0b 	rsb	lr, r0, #11
 800af12:	fa24 f10e 	lsr.w	r1, r4, lr
 800af16:	42b7      	cmp	r7, r6
 800af18:	ea41 030c 	orr.w	r3, r1, ip
 800af1c:	bf34      	ite	cc
 800af1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af22:	2100      	movcs	r1, #0
 800af24:	3015      	adds	r0, #21
 800af26:	fa04 f000 	lsl.w	r0, r4, r0
 800af2a:	fa21 f10e 	lsr.w	r1, r1, lr
 800af2e:	ea40 0201 	orr.w	r2, r0, r1
 800af32:	ec43 2b10 	vmov	d0, r2, r3
 800af36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af38:	42b7      	cmp	r7, r6
 800af3a:	bf3a      	itte	cc
 800af3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af40:	f1a5 0608 	subcc.w	r6, r5, #8
 800af44:	2100      	movcs	r1, #0
 800af46:	380b      	subs	r0, #11
 800af48:	d017      	beq.n	800af7a <__b2d+0x92>
 800af4a:	f1c0 0c20 	rsb	ip, r0, #32
 800af4e:	fa04 f500 	lsl.w	r5, r4, r0
 800af52:	42be      	cmp	r6, r7
 800af54:	fa21 f40c 	lsr.w	r4, r1, ip
 800af58:	ea45 0504 	orr.w	r5, r5, r4
 800af5c:	bf8c      	ite	hi
 800af5e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800af62:	2400      	movls	r4, #0
 800af64:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800af68:	fa01 f000 	lsl.w	r0, r1, r0
 800af6c:	fa24 f40c 	lsr.w	r4, r4, ip
 800af70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800af74:	ea40 0204 	orr.w	r2, r0, r4
 800af78:	e7db      	b.n	800af32 <__b2d+0x4a>
 800af7a:	ea44 030c 	orr.w	r3, r4, ip
 800af7e:	460a      	mov	r2, r1
 800af80:	e7d7      	b.n	800af32 <__b2d+0x4a>
 800af82:	bf00      	nop
 800af84:	3ff00000 	.word	0x3ff00000

0800af88 <__d2b>:
 800af88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af8c:	4689      	mov	r9, r1
 800af8e:	2101      	movs	r1, #1
 800af90:	ec57 6b10 	vmov	r6, r7, d0
 800af94:	4690      	mov	r8, r2
 800af96:	f7ff fc09 	bl	800a7ac <_Balloc>
 800af9a:	4604      	mov	r4, r0
 800af9c:	b930      	cbnz	r0, 800afac <__d2b+0x24>
 800af9e:	4602      	mov	r2, r0
 800afa0:	4b25      	ldr	r3, [pc, #148]	; (800b038 <__d2b+0xb0>)
 800afa2:	4826      	ldr	r0, [pc, #152]	; (800b03c <__d2b+0xb4>)
 800afa4:	f240 310a 	movw	r1, #778	; 0x30a
 800afa8:	f7fb ffe2 	bl	8006f70 <__assert_func>
 800afac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800afb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afb4:	bb35      	cbnz	r5, 800b004 <__d2b+0x7c>
 800afb6:	2e00      	cmp	r6, #0
 800afb8:	9301      	str	r3, [sp, #4]
 800afba:	d028      	beq.n	800b00e <__d2b+0x86>
 800afbc:	4668      	mov	r0, sp
 800afbe:	9600      	str	r6, [sp, #0]
 800afc0:	f7ff fd06 	bl	800a9d0 <__lo0bits>
 800afc4:	9900      	ldr	r1, [sp, #0]
 800afc6:	b300      	cbz	r0, 800b00a <__d2b+0x82>
 800afc8:	9a01      	ldr	r2, [sp, #4]
 800afca:	f1c0 0320 	rsb	r3, r0, #32
 800afce:	fa02 f303 	lsl.w	r3, r2, r3
 800afd2:	430b      	orrs	r3, r1
 800afd4:	40c2      	lsrs	r2, r0
 800afd6:	6163      	str	r3, [r4, #20]
 800afd8:	9201      	str	r2, [sp, #4]
 800afda:	9b01      	ldr	r3, [sp, #4]
 800afdc:	61a3      	str	r3, [r4, #24]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	bf14      	ite	ne
 800afe2:	2202      	movne	r2, #2
 800afe4:	2201      	moveq	r2, #1
 800afe6:	6122      	str	r2, [r4, #16]
 800afe8:	b1d5      	cbz	r5, 800b020 <__d2b+0x98>
 800afea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800afee:	4405      	add	r5, r0
 800aff0:	f8c9 5000 	str.w	r5, [r9]
 800aff4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aff8:	f8c8 0000 	str.w	r0, [r8]
 800affc:	4620      	mov	r0, r4
 800affe:	b003      	add	sp, #12
 800b000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b008:	e7d5      	b.n	800afb6 <__d2b+0x2e>
 800b00a:	6161      	str	r1, [r4, #20]
 800b00c:	e7e5      	b.n	800afda <__d2b+0x52>
 800b00e:	a801      	add	r0, sp, #4
 800b010:	f7ff fcde 	bl	800a9d0 <__lo0bits>
 800b014:	9b01      	ldr	r3, [sp, #4]
 800b016:	6163      	str	r3, [r4, #20]
 800b018:	2201      	movs	r2, #1
 800b01a:	6122      	str	r2, [r4, #16]
 800b01c:	3020      	adds	r0, #32
 800b01e:	e7e3      	b.n	800afe8 <__d2b+0x60>
 800b020:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b024:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b028:	f8c9 0000 	str.w	r0, [r9]
 800b02c:	6918      	ldr	r0, [r3, #16]
 800b02e:	f7ff fcaf 	bl	800a990 <__hi0bits>
 800b032:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b036:	e7df      	b.n	800aff8 <__d2b+0x70>
 800b038:	0800cfe0 	.word	0x0800cfe0
 800b03c:	0800d0d0 	.word	0x0800d0d0

0800b040 <__ratio>:
 800b040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	4688      	mov	r8, r1
 800b046:	4669      	mov	r1, sp
 800b048:	4681      	mov	r9, r0
 800b04a:	f7ff ff4d 	bl	800aee8 <__b2d>
 800b04e:	a901      	add	r1, sp, #4
 800b050:	4640      	mov	r0, r8
 800b052:	ec55 4b10 	vmov	r4, r5, d0
 800b056:	f7ff ff47 	bl	800aee8 <__b2d>
 800b05a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b05e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b062:	eba3 0c02 	sub.w	ip, r3, r2
 800b066:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b06a:	1a9b      	subs	r3, r3, r2
 800b06c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b070:	ec51 0b10 	vmov	r0, r1, d0
 800b074:	2b00      	cmp	r3, #0
 800b076:	bfd6      	itet	le
 800b078:	460a      	movle	r2, r1
 800b07a:	462a      	movgt	r2, r5
 800b07c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b080:	468b      	mov	fp, r1
 800b082:	462f      	mov	r7, r5
 800b084:	bfd4      	ite	le
 800b086:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b08a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b08e:	4620      	mov	r0, r4
 800b090:	ee10 2a10 	vmov	r2, s0
 800b094:	465b      	mov	r3, fp
 800b096:	4639      	mov	r1, r7
 800b098:	f7f5 fbe0 	bl	800085c <__aeabi_ddiv>
 800b09c:	ec41 0b10 	vmov	d0, r0, r1
 800b0a0:	b003      	add	sp, #12
 800b0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0a6 <__copybits>:
 800b0a6:	3901      	subs	r1, #1
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	1149      	asrs	r1, r1, #5
 800b0ac:	6914      	ldr	r4, [r2, #16]
 800b0ae:	3101      	adds	r1, #1
 800b0b0:	f102 0314 	add.w	r3, r2, #20
 800b0b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0bc:	1f05      	subs	r5, r0, #4
 800b0be:	42a3      	cmp	r3, r4
 800b0c0:	d30c      	bcc.n	800b0dc <__copybits+0x36>
 800b0c2:	1aa3      	subs	r3, r4, r2
 800b0c4:	3b11      	subs	r3, #17
 800b0c6:	f023 0303 	bic.w	r3, r3, #3
 800b0ca:	3211      	adds	r2, #17
 800b0cc:	42a2      	cmp	r2, r4
 800b0ce:	bf88      	it	hi
 800b0d0:	2300      	movhi	r3, #0
 800b0d2:	4418      	add	r0, r3
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4288      	cmp	r0, r1
 800b0d8:	d305      	bcc.n	800b0e6 <__copybits+0x40>
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b0e0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b0e4:	e7eb      	b.n	800b0be <__copybits+0x18>
 800b0e6:	f840 3b04 	str.w	r3, [r0], #4
 800b0ea:	e7f4      	b.n	800b0d6 <__copybits+0x30>

0800b0ec <__any_on>:
 800b0ec:	f100 0214 	add.w	r2, r0, #20
 800b0f0:	6900      	ldr	r0, [r0, #16]
 800b0f2:	114b      	asrs	r3, r1, #5
 800b0f4:	4298      	cmp	r0, r3
 800b0f6:	b510      	push	{r4, lr}
 800b0f8:	db11      	blt.n	800b11e <__any_on+0x32>
 800b0fa:	dd0a      	ble.n	800b112 <__any_on+0x26>
 800b0fc:	f011 011f 	ands.w	r1, r1, #31
 800b100:	d007      	beq.n	800b112 <__any_on+0x26>
 800b102:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b106:	fa24 f001 	lsr.w	r0, r4, r1
 800b10a:	fa00 f101 	lsl.w	r1, r0, r1
 800b10e:	428c      	cmp	r4, r1
 800b110:	d10b      	bne.n	800b12a <__any_on+0x3e>
 800b112:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b116:	4293      	cmp	r3, r2
 800b118:	d803      	bhi.n	800b122 <__any_on+0x36>
 800b11a:	2000      	movs	r0, #0
 800b11c:	bd10      	pop	{r4, pc}
 800b11e:	4603      	mov	r3, r0
 800b120:	e7f7      	b.n	800b112 <__any_on+0x26>
 800b122:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b126:	2900      	cmp	r1, #0
 800b128:	d0f5      	beq.n	800b116 <__any_on+0x2a>
 800b12a:	2001      	movs	r0, #1
 800b12c:	e7f6      	b.n	800b11c <__any_on+0x30>

0800b12e <_calloc_r>:
 800b12e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b130:	fba1 2402 	umull	r2, r4, r1, r2
 800b134:	b94c      	cbnz	r4, 800b14a <_calloc_r+0x1c>
 800b136:	4611      	mov	r1, r2
 800b138:	9201      	str	r2, [sp, #4]
 800b13a:	f000 f87b 	bl	800b234 <_malloc_r>
 800b13e:	9a01      	ldr	r2, [sp, #4]
 800b140:	4605      	mov	r5, r0
 800b142:	b930      	cbnz	r0, 800b152 <_calloc_r+0x24>
 800b144:	4628      	mov	r0, r5
 800b146:	b003      	add	sp, #12
 800b148:	bd30      	pop	{r4, r5, pc}
 800b14a:	220c      	movs	r2, #12
 800b14c:	6002      	str	r2, [r0, #0]
 800b14e:	2500      	movs	r5, #0
 800b150:	e7f8      	b.n	800b144 <_calloc_r+0x16>
 800b152:	4621      	mov	r1, r4
 800b154:	f7fb ff66 	bl	8007024 <memset>
 800b158:	e7f4      	b.n	800b144 <_calloc_r+0x16>
	...

0800b15c <_free_r>:
 800b15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b15e:	2900      	cmp	r1, #0
 800b160:	d044      	beq.n	800b1ec <_free_r+0x90>
 800b162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b166:	9001      	str	r0, [sp, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f1a1 0404 	sub.w	r4, r1, #4
 800b16e:	bfb8      	it	lt
 800b170:	18e4      	addlt	r4, r4, r3
 800b172:	f000 fb73 	bl	800b85c <__malloc_lock>
 800b176:	4a1e      	ldr	r2, [pc, #120]	; (800b1f0 <_free_r+0x94>)
 800b178:	9801      	ldr	r0, [sp, #4]
 800b17a:	6813      	ldr	r3, [r2, #0]
 800b17c:	b933      	cbnz	r3, 800b18c <_free_r+0x30>
 800b17e:	6063      	str	r3, [r4, #4]
 800b180:	6014      	str	r4, [r2, #0]
 800b182:	b003      	add	sp, #12
 800b184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b188:	f000 bb6e 	b.w	800b868 <__malloc_unlock>
 800b18c:	42a3      	cmp	r3, r4
 800b18e:	d908      	bls.n	800b1a2 <_free_r+0x46>
 800b190:	6825      	ldr	r5, [r4, #0]
 800b192:	1961      	adds	r1, r4, r5
 800b194:	428b      	cmp	r3, r1
 800b196:	bf01      	itttt	eq
 800b198:	6819      	ldreq	r1, [r3, #0]
 800b19a:	685b      	ldreq	r3, [r3, #4]
 800b19c:	1949      	addeq	r1, r1, r5
 800b19e:	6021      	streq	r1, [r4, #0]
 800b1a0:	e7ed      	b.n	800b17e <_free_r+0x22>
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	b10b      	cbz	r3, 800b1ac <_free_r+0x50>
 800b1a8:	42a3      	cmp	r3, r4
 800b1aa:	d9fa      	bls.n	800b1a2 <_free_r+0x46>
 800b1ac:	6811      	ldr	r1, [r2, #0]
 800b1ae:	1855      	adds	r5, r2, r1
 800b1b0:	42a5      	cmp	r5, r4
 800b1b2:	d10b      	bne.n	800b1cc <_free_r+0x70>
 800b1b4:	6824      	ldr	r4, [r4, #0]
 800b1b6:	4421      	add	r1, r4
 800b1b8:	1854      	adds	r4, r2, r1
 800b1ba:	42a3      	cmp	r3, r4
 800b1bc:	6011      	str	r1, [r2, #0]
 800b1be:	d1e0      	bne.n	800b182 <_free_r+0x26>
 800b1c0:	681c      	ldr	r4, [r3, #0]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	6053      	str	r3, [r2, #4]
 800b1c6:	4421      	add	r1, r4
 800b1c8:	6011      	str	r1, [r2, #0]
 800b1ca:	e7da      	b.n	800b182 <_free_r+0x26>
 800b1cc:	d902      	bls.n	800b1d4 <_free_r+0x78>
 800b1ce:	230c      	movs	r3, #12
 800b1d0:	6003      	str	r3, [r0, #0]
 800b1d2:	e7d6      	b.n	800b182 <_free_r+0x26>
 800b1d4:	6825      	ldr	r5, [r4, #0]
 800b1d6:	1961      	adds	r1, r4, r5
 800b1d8:	428b      	cmp	r3, r1
 800b1da:	bf04      	itt	eq
 800b1dc:	6819      	ldreq	r1, [r3, #0]
 800b1de:	685b      	ldreq	r3, [r3, #4]
 800b1e0:	6063      	str	r3, [r4, #4]
 800b1e2:	bf04      	itt	eq
 800b1e4:	1949      	addeq	r1, r1, r5
 800b1e6:	6021      	streq	r1, [r4, #0]
 800b1e8:	6054      	str	r4, [r2, #4]
 800b1ea:	e7ca      	b.n	800b182 <_free_r+0x26>
 800b1ec:	b003      	add	sp, #12
 800b1ee:	bd30      	pop	{r4, r5, pc}
 800b1f0:	200003f4 	.word	0x200003f4

0800b1f4 <sbrk_aligned>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	4e0e      	ldr	r6, [pc, #56]	; (800b230 <sbrk_aligned+0x3c>)
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	6831      	ldr	r1, [r6, #0]
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	b911      	cbnz	r1, 800b206 <sbrk_aligned+0x12>
 800b200:	f000 fa1e 	bl	800b640 <_sbrk_r>
 800b204:	6030      	str	r0, [r6, #0]
 800b206:	4621      	mov	r1, r4
 800b208:	4628      	mov	r0, r5
 800b20a:	f000 fa19 	bl	800b640 <_sbrk_r>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	d00a      	beq.n	800b228 <sbrk_aligned+0x34>
 800b212:	1cc4      	adds	r4, r0, #3
 800b214:	f024 0403 	bic.w	r4, r4, #3
 800b218:	42a0      	cmp	r0, r4
 800b21a:	d007      	beq.n	800b22c <sbrk_aligned+0x38>
 800b21c:	1a21      	subs	r1, r4, r0
 800b21e:	4628      	mov	r0, r5
 800b220:	f000 fa0e 	bl	800b640 <_sbrk_r>
 800b224:	3001      	adds	r0, #1
 800b226:	d101      	bne.n	800b22c <sbrk_aligned+0x38>
 800b228:	f04f 34ff 	mov.w	r4, #4294967295
 800b22c:	4620      	mov	r0, r4
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	200003f8 	.word	0x200003f8

0800b234 <_malloc_r>:
 800b234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b238:	1ccd      	adds	r5, r1, #3
 800b23a:	f025 0503 	bic.w	r5, r5, #3
 800b23e:	3508      	adds	r5, #8
 800b240:	2d0c      	cmp	r5, #12
 800b242:	bf38      	it	cc
 800b244:	250c      	movcc	r5, #12
 800b246:	2d00      	cmp	r5, #0
 800b248:	4607      	mov	r7, r0
 800b24a:	db01      	blt.n	800b250 <_malloc_r+0x1c>
 800b24c:	42a9      	cmp	r1, r5
 800b24e:	d905      	bls.n	800b25c <_malloc_r+0x28>
 800b250:	230c      	movs	r3, #12
 800b252:	603b      	str	r3, [r7, #0]
 800b254:	2600      	movs	r6, #0
 800b256:	4630      	mov	r0, r6
 800b258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b25c:	4e2e      	ldr	r6, [pc, #184]	; (800b318 <_malloc_r+0xe4>)
 800b25e:	f000 fafd 	bl	800b85c <__malloc_lock>
 800b262:	6833      	ldr	r3, [r6, #0]
 800b264:	461c      	mov	r4, r3
 800b266:	bb34      	cbnz	r4, 800b2b6 <_malloc_r+0x82>
 800b268:	4629      	mov	r1, r5
 800b26a:	4638      	mov	r0, r7
 800b26c:	f7ff ffc2 	bl	800b1f4 <sbrk_aligned>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	4604      	mov	r4, r0
 800b274:	d14d      	bne.n	800b312 <_malloc_r+0xde>
 800b276:	6834      	ldr	r4, [r6, #0]
 800b278:	4626      	mov	r6, r4
 800b27a:	2e00      	cmp	r6, #0
 800b27c:	d140      	bne.n	800b300 <_malloc_r+0xcc>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	4631      	mov	r1, r6
 800b282:	4638      	mov	r0, r7
 800b284:	eb04 0803 	add.w	r8, r4, r3
 800b288:	f000 f9da 	bl	800b640 <_sbrk_r>
 800b28c:	4580      	cmp	r8, r0
 800b28e:	d13a      	bne.n	800b306 <_malloc_r+0xd2>
 800b290:	6821      	ldr	r1, [r4, #0]
 800b292:	3503      	adds	r5, #3
 800b294:	1a6d      	subs	r5, r5, r1
 800b296:	f025 0503 	bic.w	r5, r5, #3
 800b29a:	3508      	adds	r5, #8
 800b29c:	2d0c      	cmp	r5, #12
 800b29e:	bf38      	it	cc
 800b2a0:	250c      	movcc	r5, #12
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f7ff ffa5 	bl	800b1f4 <sbrk_aligned>
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d02b      	beq.n	800b306 <_malloc_r+0xd2>
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	442b      	add	r3, r5
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	e00e      	b.n	800b2d4 <_malloc_r+0xa0>
 800b2b6:	6822      	ldr	r2, [r4, #0]
 800b2b8:	1b52      	subs	r2, r2, r5
 800b2ba:	d41e      	bmi.n	800b2fa <_malloc_r+0xc6>
 800b2bc:	2a0b      	cmp	r2, #11
 800b2be:	d916      	bls.n	800b2ee <_malloc_r+0xba>
 800b2c0:	1961      	adds	r1, r4, r5
 800b2c2:	42a3      	cmp	r3, r4
 800b2c4:	6025      	str	r5, [r4, #0]
 800b2c6:	bf18      	it	ne
 800b2c8:	6059      	strne	r1, [r3, #4]
 800b2ca:	6863      	ldr	r3, [r4, #4]
 800b2cc:	bf08      	it	eq
 800b2ce:	6031      	streq	r1, [r6, #0]
 800b2d0:	5162      	str	r2, [r4, r5]
 800b2d2:	604b      	str	r3, [r1, #4]
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f104 060b 	add.w	r6, r4, #11
 800b2da:	f000 fac5 	bl	800b868 <__malloc_unlock>
 800b2de:	f026 0607 	bic.w	r6, r6, #7
 800b2e2:	1d23      	adds	r3, r4, #4
 800b2e4:	1af2      	subs	r2, r6, r3
 800b2e6:	d0b6      	beq.n	800b256 <_malloc_r+0x22>
 800b2e8:	1b9b      	subs	r3, r3, r6
 800b2ea:	50a3      	str	r3, [r4, r2]
 800b2ec:	e7b3      	b.n	800b256 <_malloc_r+0x22>
 800b2ee:	6862      	ldr	r2, [r4, #4]
 800b2f0:	42a3      	cmp	r3, r4
 800b2f2:	bf0c      	ite	eq
 800b2f4:	6032      	streq	r2, [r6, #0]
 800b2f6:	605a      	strne	r2, [r3, #4]
 800b2f8:	e7ec      	b.n	800b2d4 <_malloc_r+0xa0>
 800b2fa:	4623      	mov	r3, r4
 800b2fc:	6864      	ldr	r4, [r4, #4]
 800b2fe:	e7b2      	b.n	800b266 <_malloc_r+0x32>
 800b300:	4634      	mov	r4, r6
 800b302:	6876      	ldr	r6, [r6, #4]
 800b304:	e7b9      	b.n	800b27a <_malloc_r+0x46>
 800b306:	230c      	movs	r3, #12
 800b308:	603b      	str	r3, [r7, #0]
 800b30a:	4638      	mov	r0, r7
 800b30c:	f000 faac 	bl	800b868 <__malloc_unlock>
 800b310:	e7a1      	b.n	800b256 <_malloc_r+0x22>
 800b312:	6025      	str	r5, [r4, #0]
 800b314:	e7de      	b.n	800b2d4 <_malloc_r+0xa0>
 800b316:	bf00      	nop
 800b318:	200003f4 	.word	0x200003f4

0800b31c <_realloc_r>:
 800b31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b320:	4680      	mov	r8, r0
 800b322:	4614      	mov	r4, r2
 800b324:	460e      	mov	r6, r1
 800b326:	b921      	cbnz	r1, 800b332 <_realloc_r+0x16>
 800b328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b32c:	4611      	mov	r1, r2
 800b32e:	f7ff bf81 	b.w	800b234 <_malloc_r>
 800b332:	b92a      	cbnz	r2, 800b340 <_realloc_r+0x24>
 800b334:	f7ff ff12 	bl	800b15c <_free_r>
 800b338:	4625      	mov	r5, r4
 800b33a:	4628      	mov	r0, r5
 800b33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b340:	f000 fa98 	bl	800b874 <_malloc_usable_size_r>
 800b344:	4284      	cmp	r4, r0
 800b346:	4607      	mov	r7, r0
 800b348:	d802      	bhi.n	800b350 <_realloc_r+0x34>
 800b34a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b34e:	d812      	bhi.n	800b376 <_realloc_r+0x5a>
 800b350:	4621      	mov	r1, r4
 800b352:	4640      	mov	r0, r8
 800b354:	f7ff ff6e 	bl	800b234 <_malloc_r>
 800b358:	4605      	mov	r5, r0
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d0ed      	beq.n	800b33a <_realloc_r+0x1e>
 800b35e:	42bc      	cmp	r4, r7
 800b360:	4622      	mov	r2, r4
 800b362:	4631      	mov	r1, r6
 800b364:	bf28      	it	cs
 800b366:	463a      	movcs	r2, r7
 800b368:	f7ff f9f8 	bl	800a75c <memcpy>
 800b36c:	4631      	mov	r1, r6
 800b36e:	4640      	mov	r0, r8
 800b370:	f7ff fef4 	bl	800b15c <_free_r>
 800b374:	e7e1      	b.n	800b33a <_realloc_r+0x1e>
 800b376:	4635      	mov	r5, r6
 800b378:	e7df      	b.n	800b33a <_realloc_r+0x1e>

0800b37a <__ssputs_r>:
 800b37a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b37e:	688e      	ldr	r6, [r1, #8]
 800b380:	429e      	cmp	r6, r3
 800b382:	4682      	mov	sl, r0
 800b384:	460c      	mov	r4, r1
 800b386:	4690      	mov	r8, r2
 800b388:	461f      	mov	r7, r3
 800b38a:	d838      	bhi.n	800b3fe <__ssputs_r+0x84>
 800b38c:	898a      	ldrh	r2, [r1, #12]
 800b38e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b392:	d032      	beq.n	800b3fa <__ssputs_r+0x80>
 800b394:	6825      	ldr	r5, [r4, #0]
 800b396:	6909      	ldr	r1, [r1, #16]
 800b398:	eba5 0901 	sub.w	r9, r5, r1
 800b39c:	6965      	ldr	r5, [r4, #20]
 800b39e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	444b      	add	r3, r9
 800b3aa:	106d      	asrs	r5, r5, #1
 800b3ac:	429d      	cmp	r5, r3
 800b3ae:	bf38      	it	cc
 800b3b0:	461d      	movcc	r5, r3
 800b3b2:	0553      	lsls	r3, r2, #21
 800b3b4:	d531      	bpl.n	800b41a <__ssputs_r+0xa0>
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	f7ff ff3c 	bl	800b234 <_malloc_r>
 800b3bc:	4606      	mov	r6, r0
 800b3be:	b950      	cbnz	r0, 800b3d6 <__ssputs_r+0x5c>
 800b3c0:	230c      	movs	r3, #12
 800b3c2:	f8ca 3000 	str.w	r3, [sl]
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3cc:	81a3      	strh	r3, [r4, #12]
 800b3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d6:	6921      	ldr	r1, [r4, #16]
 800b3d8:	464a      	mov	r2, r9
 800b3da:	f7ff f9bf 	bl	800a75c <memcpy>
 800b3de:	89a3      	ldrh	r3, [r4, #12]
 800b3e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e8:	81a3      	strh	r3, [r4, #12]
 800b3ea:	6126      	str	r6, [r4, #16]
 800b3ec:	6165      	str	r5, [r4, #20]
 800b3ee:	444e      	add	r6, r9
 800b3f0:	eba5 0509 	sub.w	r5, r5, r9
 800b3f4:	6026      	str	r6, [r4, #0]
 800b3f6:	60a5      	str	r5, [r4, #8]
 800b3f8:	463e      	mov	r6, r7
 800b3fa:	42be      	cmp	r6, r7
 800b3fc:	d900      	bls.n	800b400 <__ssputs_r+0x86>
 800b3fe:	463e      	mov	r6, r7
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	4632      	mov	r2, r6
 800b404:	4641      	mov	r1, r8
 800b406:	f7ff f9b7 	bl	800a778 <memmove>
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	1b9b      	subs	r3, r3, r6
 800b40e:	60a3      	str	r3, [r4, #8]
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	4433      	add	r3, r6
 800b414:	6023      	str	r3, [r4, #0]
 800b416:	2000      	movs	r0, #0
 800b418:	e7db      	b.n	800b3d2 <__ssputs_r+0x58>
 800b41a:	462a      	mov	r2, r5
 800b41c:	f7ff ff7e 	bl	800b31c <_realloc_r>
 800b420:	4606      	mov	r6, r0
 800b422:	2800      	cmp	r0, #0
 800b424:	d1e1      	bne.n	800b3ea <__ssputs_r+0x70>
 800b426:	6921      	ldr	r1, [r4, #16]
 800b428:	4650      	mov	r0, sl
 800b42a:	f7ff fe97 	bl	800b15c <_free_r>
 800b42e:	e7c7      	b.n	800b3c0 <__ssputs_r+0x46>

0800b430 <_svfiprintf_r>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	4698      	mov	r8, r3
 800b436:	898b      	ldrh	r3, [r1, #12]
 800b438:	061b      	lsls	r3, r3, #24
 800b43a:	b09d      	sub	sp, #116	; 0x74
 800b43c:	4607      	mov	r7, r0
 800b43e:	460d      	mov	r5, r1
 800b440:	4614      	mov	r4, r2
 800b442:	d50e      	bpl.n	800b462 <_svfiprintf_r+0x32>
 800b444:	690b      	ldr	r3, [r1, #16]
 800b446:	b963      	cbnz	r3, 800b462 <_svfiprintf_r+0x32>
 800b448:	2140      	movs	r1, #64	; 0x40
 800b44a:	f7ff fef3 	bl	800b234 <_malloc_r>
 800b44e:	6028      	str	r0, [r5, #0]
 800b450:	6128      	str	r0, [r5, #16]
 800b452:	b920      	cbnz	r0, 800b45e <_svfiprintf_r+0x2e>
 800b454:	230c      	movs	r3, #12
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	f04f 30ff 	mov.w	r0, #4294967295
 800b45c:	e0d1      	b.n	800b602 <_svfiprintf_r+0x1d2>
 800b45e:	2340      	movs	r3, #64	; 0x40
 800b460:	616b      	str	r3, [r5, #20]
 800b462:	2300      	movs	r3, #0
 800b464:	9309      	str	r3, [sp, #36]	; 0x24
 800b466:	2320      	movs	r3, #32
 800b468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b46c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b470:	2330      	movs	r3, #48	; 0x30
 800b472:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b61c <_svfiprintf_r+0x1ec>
 800b476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b47a:	f04f 0901 	mov.w	r9, #1
 800b47e:	4623      	mov	r3, r4
 800b480:	469a      	mov	sl, r3
 800b482:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b486:	b10a      	cbz	r2, 800b48c <_svfiprintf_r+0x5c>
 800b488:	2a25      	cmp	r2, #37	; 0x25
 800b48a:	d1f9      	bne.n	800b480 <_svfiprintf_r+0x50>
 800b48c:	ebba 0b04 	subs.w	fp, sl, r4
 800b490:	d00b      	beq.n	800b4aa <_svfiprintf_r+0x7a>
 800b492:	465b      	mov	r3, fp
 800b494:	4622      	mov	r2, r4
 800b496:	4629      	mov	r1, r5
 800b498:	4638      	mov	r0, r7
 800b49a:	f7ff ff6e 	bl	800b37a <__ssputs_r>
 800b49e:	3001      	adds	r0, #1
 800b4a0:	f000 80aa 	beq.w	800b5f8 <_svfiprintf_r+0x1c8>
 800b4a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4a6:	445a      	add	r2, fp
 800b4a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f000 80a2 	beq.w	800b5f8 <_svfiprintf_r+0x1c8>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4be:	f10a 0a01 	add.w	sl, sl, #1
 800b4c2:	9304      	str	r3, [sp, #16]
 800b4c4:	9307      	str	r3, [sp, #28]
 800b4c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b4cc:	4654      	mov	r4, sl
 800b4ce:	2205      	movs	r2, #5
 800b4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d4:	4851      	ldr	r0, [pc, #324]	; (800b61c <_svfiprintf_r+0x1ec>)
 800b4d6:	f7f4 fe8b 	bl	80001f0 <memchr>
 800b4da:	9a04      	ldr	r2, [sp, #16]
 800b4dc:	b9d8      	cbnz	r0, 800b516 <_svfiprintf_r+0xe6>
 800b4de:	06d0      	lsls	r0, r2, #27
 800b4e0:	bf44      	itt	mi
 800b4e2:	2320      	movmi	r3, #32
 800b4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e8:	0711      	lsls	r1, r2, #28
 800b4ea:	bf44      	itt	mi
 800b4ec:	232b      	movmi	r3, #43	; 0x2b
 800b4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f8:	d015      	beq.n	800b526 <_svfiprintf_r+0xf6>
 800b4fa:	9a07      	ldr	r2, [sp, #28]
 800b4fc:	4654      	mov	r4, sl
 800b4fe:	2000      	movs	r0, #0
 800b500:	f04f 0c0a 	mov.w	ip, #10
 800b504:	4621      	mov	r1, r4
 800b506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b50a:	3b30      	subs	r3, #48	; 0x30
 800b50c:	2b09      	cmp	r3, #9
 800b50e:	d94e      	bls.n	800b5ae <_svfiprintf_r+0x17e>
 800b510:	b1b0      	cbz	r0, 800b540 <_svfiprintf_r+0x110>
 800b512:	9207      	str	r2, [sp, #28]
 800b514:	e014      	b.n	800b540 <_svfiprintf_r+0x110>
 800b516:	eba0 0308 	sub.w	r3, r0, r8
 800b51a:	fa09 f303 	lsl.w	r3, r9, r3
 800b51e:	4313      	orrs	r3, r2
 800b520:	9304      	str	r3, [sp, #16]
 800b522:	46a2      	mov	sl, r4
 800b524:	e7d2      	b.n	800b4cc <_svfiprintf_r+0x9c>
 800b526:	9b03      	ldr	r3, [sp, #12]
 800b528:	1d19      	adds	r1, r3, #4
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	9103      	str	r1, [sp, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	bfbb      	ittet	lt
 800b532:	425b      	neglt	r3, r3
 800b534:	f042 0202 	orrlt.w	r2, r2, #2
 800b538:	9307      	strge	r3, [sp, #28]
 800b53a:	9307      	strlt	r3, [sp, #28]
 800b53c:	bfb8      	it	lt
 800b53e:	9204      	strlt	r2, [sp, #16]
 800b540:	7823      	ldrb	r3, [r4, #0]
 800b542:	2b2e      	cmp	r3, #46	; 0x2e
 800b544:	d10c      	bne.n	800b560 <_svfiprintf_r+0x130>
 800b546:	7863      	ldrb	r3, [r4, #1]
 800b548:	2b2a      	cmp	r3, #42	; 0x2a
 800b54a:	d135      	bne.n	800b5b8 <_svfiprintf_r+0x188>
 800b54c:	9b03      	ldr	r3, [sp, #12]
 800b54e:	1d1a      	adds	r2, r3, #4
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	9203      	str	r2, [sp, #12]
 800b554:	2b00      	cmp	r3, #0
 800b556:	bfb8      	it	lt
 800b558:	f04f 33ff 	movlt.w	r3, #4294967295
 800b55c:	3402      	adds	r4, #2
 800b55e:	9305      	str	r3, [sp, #20]
 800b560:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b62c <_svfiprintf_r+0x1fc>
 800b564:	7821      	ldrb	r1, [r4, #0]
 800b566:	2203      	movs	r2, #3
 800b568:	4650      	mov	r0, sl
 800b56a:	f7f4 fe41 	bl	80001f0 <memchr>
 800b56e:	b140      	cbz	r0, 800b582 <_svfiprintf_r+0x152>
 800b570:	2340      	movs	r3, #64	; 0x40
 800b572:	eba0 000a 	sub.w	r0, r0, sl
 800b576:	fa03 f000 	lsl.w	r0, r3, r0
 800b57a:	9b04      	ldr	r3, [sp, #16]
 800b57c:	4303      	orrs	r3, r0
 800b57e:	3401      	adds	r4, #1
 800b580:	9304      	str	r3, [sp, #16]
 800b582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b586:	4826      	ldr	r0, [pc, #152]	; (800b620 <_svfiprintf_r+0x1f0>)
 800b588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b58c:	2206      	movs	r2, #6
 800b58e:	f7f4 fe2f 	bl	80001f0 <memchr>
 800b592:	2800      	cmp	r0, #0
 800b594:	d038      	beq.n	800b608 <_svfiprintf_r+0x1d8>
 800b596:	4b23      	ldr	r3, [pc, #140]	; (800b624 <_svfiprintf_r+0x1f4>)
 800b598:	bb1b      	cbnz	r3, 800b5e2 <_svfiprintf_r+0x1b2>
 800b59a:	9b03      	ldr	r3, [sp, #12]
 800b59c:	3307      	adds	r3, #7
 800b59e:	f023 0307 	bic.w	r3, r3, #7
 800b5a2:	3308      	adds	r3, #8
 800b5a4:	9303      	str	r3, [sp, #12]
 800b5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a8:	4433      	add	r3, r6
 800b5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ac:	e767      	b.n	800b47e <_svfiprintf_r+0x4e>
 800b5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	2001      	movs	r0, #1
 800b5b6:	e7a5      	b.n	800b504 <_svfiprintf_r+0xd4>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	3401      	adds	r4, #1
 800b5bc:	9305      	str	r3, [sp, #20]
 800b5be:	4619      	mov	r1, r3
 800b5c0:	f04f 0c0a 	mov.w	ip, #10
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ca:	3a30      	subs	r2, #48	; 0x30
 800b5cc:	2a09      	cmp	r2, #9
 800b5ce:	d903      	bls.n	800b5d8 <_svfiprintf_r+0x1a8>
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d0c5      	beq.n	800b560 <_svfiprintf_r+0x130>
 800b5d4:	9105      	str	r1, [sp, #20]
 800b5d6:	e7c3      	b.n	800b560 <_svfiprintf_r+0x130>
 800b5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5dc:	4604      	mov	r4, r0
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e7f0      	b.n	800b5c4 <_svfiprintf_r+0x194>
 800b5e2:	ab03      	add	r3, sp, #12
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	462a      	mov	r2, r5
 800b5e8:	4b0f      	ldr	r3, [pc, #60]	; (800b628 <_svfiprintf_r+0x1f8>)
 800b5ea:	a904      	add	r1, sp, #16
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	f7fb ff1b 	bl	8007428 <_printf_float>
 800b5f2:	1c42      	adds	r2, r0, #1
 800b5f4:	4606      	mov	r6, r0
 800b5f6:	d1d6      	bne.n	800b5a6 <_svfiprintf_r+0x176>
 800b5f8:	89ab      	ldrh	r3, [r5, #12]
 800b5fa:	065b      	lsls	r3, r3, #25
 800b5fc:	f53f af2c 	bmi.w	800b458 <_svfiprintf_r+0x28>
 800b600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b602:	b01d      	add	sp, #116	; 0x74
 800b604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b608:	ab03      	add	r3, sp, #12
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	462a      	mov	r2, r5
 800b60e:	4b06      	ldr	r3, [pc, #24]	; (800b628 <_svfiprintf_r+0x1f8>)
 800b610:	a904      	add	r1, sp, #16
 800b612:	4638      	mov	r0, r7
 800b614:	f7fc f9ac 	bl	8007970 <_printf_i>
 800b618:	e7eb      	b.n	800b5f2 <_svfiprintf_r+0x1c2>
 800b61a:	bf00      	nop
 800b61c:	0800cdc4 	.word	0x0800cdc4
 800b620:	0800cdce 	.word	0x0800cdce
 800b624:	08007429 	.word	0x08007429
 800b628:	0800b37b 	.word	0x0800b37b
 800b62c:	0800cdca 	.word	0x0800cdca

0800b630 <nan>:
 800b630:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b638 <nan+0x8>
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	00000000 	.word	0x00000000
 800b63c:	7ff80000 	.word	0x7ff80000

0800b640 <_sbrk_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d06      	ldr	r5, [pc, #24]	; (800b65c <_sbrk_r+0x1c>)
 800b644:	2300      	movs	r3, #0
 800b646:	4604      	mov	r4, r0
 800b648:	4608      	mov	r0, r1
 800b64a:	602b      	str	r3, [r5, #0]
 800b64c:	f7f7 fc8a 	bl	8002f64 <_sbrk>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d102      	bne.n	800b65a <_sbrk_r+0x1a>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	b103      	cbz	r3, 800b65a <_sbrk_r+0x1a>
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	bd38      	pop	{r3, r4, r5, pc}
 800b65c:	200003fc 	.word	0x200003fc

0800b660 <_raise_r>:
 800b660:	291f      	cmp	r1, #31
 800b662:	b538      	push	{r3, r4, r5, lr}
 800b664:	4604      	mov	r4, r0
 800b666:	460d      	mov	r5, r1
 800b668:	d904      	bls.n	800b674 <_raise_r+0x14>
 800b66a:	2316      	movs	r3, #22
 800b66c:	6003      	str	r3, [r0, #0]
 800b66e:	f04f 30ff 	mov.w	r0, #4294967295
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b676:	b112      	cbz	r2, 800b67e <_raise_r+0x1e>
 800b678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b67c:	b94b      	cbnz	r3, 800b692 <_raise_r+0x32>
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 f830 	bl	800b6e4 <_getpid_r>
 800b684:	462a      	mov	r2, r5
 800b686:	4601      	mov	r1, r0
 800b688:	4620      	mov	r0, r4
 800b68a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b68e:	f000 b817 	b.w	800b6c0 <_kill_r>
 800b692:	2b01      	cmp	r3, #1
 800b694:	d00a      	beq.n	800b6ac <_raise_r+0x4c>
 800b696:	1c59      	adds	r1, r3, #1
 800b698:	d103      	bne.n	800b6a2 <_raise_r+0x42>
 800b69a:	2316      	movs	r3, #22
 800b69c:	6003      	str	r3, [r0, #0]
 800b69e:	2001      	movs	r0, #1
 800b6a0:	e7e7      	b.n	800b672 <_raise_r+0x12>
 800b6a2:	2400      	movs	r4, #0
 800b6a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	4798      	blx	r3
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	e7e0      	b.n	800b672 <_raise_r+0x12>

0800b6b0 <raise>:
 800b6b0:	4b02      	ldr	r3, [pc, #8]	; (800b6bc <raise+0xc>)
 800b6b2:	4601      	mov	r1, r0
 800b6b4:	6818      	ldr	r0, [r3, #0]
 800b6b6:	f7ff bfd3 	b.w	800b660 <_raise_r>
 800b6ba:	bf00      	nop
 800b6bc:	20000014 	.word	0x20000014

0800b6c0 <_kill_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4d07      	ldr	r5, [pc, #28]	; (800b6e0 <_kill_r+0x20>)
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	4608      	mov	r0, r1
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	602b      	str	r3, [r5, #0]
 800b6ce:	f7f7 fbc1 	bl	8002e54 <_kill>
 800b6d2:	1c43      	adds	r3, r0, #1
 800b6d4:	d102      	bne.n	800b6dc <_kill_r+0x1c>
 800b6d6:	682b      	ldr	r3, [r5, #0]
 800b6d8:	b103      	cbz	r3, 800b6dc <_kill_r+0x1c>
 800b6da:	6023      	str	r3, [r4, #0]
 800b6dc:	bd38      	pop	{r3, r4, r5, pc}
 800b6de:	bf00      	nop
 800b6e0:	200003fc 	.word	0x200003fc

0800b6e4 <_getpid_r>:
 800b6e4:	f7f7 bbae 	b.w	8002e44 <_getpid>

0800b6e8 <__sread>:
 800b6e8:	b510      	push	{r4, lr}
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f0:	f000 f8c8 	bl	800b884 <_read_r>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	bfab      	itete	ge
 800b6f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b6fc:	181b      	addge	r3, r3, r0
 800b6fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b702:	bfac      	ite	ge
 800b704:	6563      	strge	r3, [r4, #84]	; 0x54
 800b706:	81a3      	strhlt	r3, [r4, #12]
 800b708:	bd10      	pop	{r4, pc}

0800b70a <__swrite>:
 800b70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70e:	461f      	mov	r7, r3
 800b710:	898b      	ldrh	r3, [r1, #12]
 800b712:	05db      	lsls	r3, r3, #23
 800b714:	4605      	mov	r5, r0
 800b716:	460c      	mov	r4, r1
 800b718:	4616      	mov	r6, r2
 800b71a:	d505      	bpl.n	800b728 <__swrite+0x1e>
 800b71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b720:	2302      	movs	r3, #2
 800b722:	2200      	movs	r2, #0
 800b724:	f000 f888 	bl	800b838 <_lseek_r>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b72e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b732:	81a3      	strh	r3, [r4, #12]
 800b734:	4632      	mov	r2, r6
 800b736:	463b      	mov	r3, r7
 800b738:	4628      	mov	r0, r5
 800b73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b73e:	f000 b837 	b.w	800b7b0 <_write_r>

0800b742 <__sseek>:
 800b742:	b510      	push	{r4, lr}
 800b744:	460c      	mov	r4, r1
 800b746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74a:	f000 f875 	bl	800b838 <_lseek_r>
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	bf15      	itete	ne
 800b754:	6560      	strne	r0, [r4, #84]	; 0x54
 800b756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b75a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b75e:	81a3      	strheq	r3, [r4, #12]
 800b760:	bf18      	it	ne
 800b762:	81a3      	strhne	r3, [r4, #12]
 800b764:	bd10      	pop	{r4, pc}

0800b766 <__sclose>:
 800b766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b76a:	f000 b833 	b.w	800b7d4 <_close_r>

0800b76e <strncmp>:
 800b76e:	b510      	push	{r4, lr}
 800b770:	b17a      	cbz	r2, 800b792 <strncmp+0x24>
 800b772:	4603      	mov	r3, r0
 800b774:	3901      	subs	r1, #1
 800b776:	1884      	adds	r4, r0, r2
 800b778:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b77c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b780:	4290      	cmp	r0, r2
 800b782:	d101      	bne.n	800b788 <strncmp+0x1a>
 800b784:	42a3      	cmp	r3, r4
 800b786:	d101      	bne.n	800b78c <strncmp+0x1e>
 800b788:	1a80      	subs	r0, r0, r2
 800b78a:	bd10      	pop	{r4, pc}
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d1f3      	bne.n	800b778 <strncmp+0xa>
 800b790:	e7fa      	b.n	800b788 <strncmp+0x1a>
 800b792:	4610      	mov	r0, r2
 800b794:	e7f9      	b.n	800b78a <strncmp+0x1c>

0800b796 <__ascii_wctomb>:
 800b796:	b149      	cbz	r1, 800b7ac <__ascii_wctomb+0x16>
 800b798:	2aff      	cmp	r2, #255	; 0xff
 800b79a:	bf85      	ittet	hi
 800b79c:	238a      	movhi	r3, #138	; 0x8a
 800b79e:	6003      	strhi	r3, [r0, #0]
 800b7a0:	700a      	strbls	r2, [r1, #0]
 800b7a2:	f04f 30ff 	movhi.w	r0, #4294967295
 800b7a6:	bf98      	it	ls
 800b7a8:	2001      	movls	r0, #1
 800b7aa:	4770      	bx	lr
 800b7ac:	4608      	mov	r0, r1
 800b7ae:	4770      	bx	lr

0800b7b0 <_write_r>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4d07      	ldr	r5, [pc, #28]	; (800b7d0 <_write_r+0x20>)
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	4608      	mov	r0, r1
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	602a      	str	r2, [r5, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f7f7 fb7f 	bl	8002ec2 <_write>
 800b7c4:	1c43      	adds	r3, r0, #1
 800b7c6:	d102      	bne.n	800b7ce <_write_r+0x1e>
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	b103      	cbz	r3, 800b7ce <_write_r+0x1e>
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	bd38      	pop	{r3, r4, r5, pc}
 800b7d0:	200003fc 	.word	0x200003fc

0800b7d4 <_close_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4d06      	ldr	r5, [pc, #24]	; (800b7f0 <_close_r+0x1c>)
 800b7d8:	2300      	movs	r3, #0
 800b7da:	4604      	mov	r4, r0
 800b7dc:	4608      	mov	r0, r1
 800b7de:	602b      	str	r3, [r5, #0]
 800b7e0:	f7f7 fb8b 	bl	8002efa <_close>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d102      	bne.n	800b7ee <_close_r+0x1a>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	b103      	cbz	r3, 800b7ee <_close_r+0x1a>
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	200003fc 	.word	0x200003fc

0800b7f4 <_fstat_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d07      	ldr	r5, [pc, #28]	; (800b814 <_fstat_r+0x20>)
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	4608      	mov	r0, r1
 800b7fe:	4611      	mov	r1, r2
 800b800:	602b      	str	r3, [r5, #0]
 800b802:	f7f7 fb86 	bl	8002f12 <_fstat>
 800b806:	1c43      	adds	r3, r0, #1
 800b808:	d102      	bne.n	800b810 <_fstat_r+0x1c>
 800b80a:	682b      	ldr	r3, [r5, #0]
 800b80c:	b103      	cbz	r3, 800b810 <_fstat_r+0x1c>
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	bd38      	pop	{r3, r4, r5, pc}
 800b812:	bf00      	nop
 800b814:	200003fc 	.word	0x200003fc

0800b818 <_isatty_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4d06      	ldr	r5, [pc, #24]	; (800b834 <_isatty_r+0x1c>)
 800b81c:	2300      	movs	r3, #0
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	602b      	str	r3, [r5, #0]
 800b824:	f7f7 fb85 	bl	8002f32 <_isatty>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_isatty_r+0x1a>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_isatty_r+0x1a>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	200003fc 	.word	0x200003fc

0800b838 <_lseek_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d07      	ldr	r5, [pc, #28]	; (800b858 <_lseek_r+0x20>)
 800b83c:	4604      	mov	r4, r0
 800b83e:	4608      	mov	r0, r1
 800b840:	4611      	mov	r1, r2
 800b842:	2200      	movs	r2, #0
 800b844:	602a      	str	r2, [r5, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	f7f7 fb7e 	bl	8002f48 <_lseek>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d102      	bne.n	800b856 <_lseek_r+0x1e>
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	b103      	cbz	r3, 800b856 <_lseek_r+0x1e>
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	200003fc 	.word	0x200003fc

0800b85c <__malloc_lock>:
 800b85c:	4801      	ldr	r0, [pc, #4]	; (800b864 <__malloc_lock+0x8>)
 800b85e:	f7fe befc 	b.w	800a65a <__retarget_lock_acquire_recursive>
 800b862:	bf00      	nop
 800b864:	200003f0 	.word	0x200003f0

0800b868 <__malloc_unlock>:
 800b868:	4801      	ldr	r0, [pc, #4]	; (800b870 <__malloc_unlock+0x8>)
 800b86a:	f7fe bef7 	b.w	800a65c <__retarget_lock_release_recursive>
 800b86e:	bf00      	nop
 800b870:	200003f0 	.word	0x200003f0

0800b874 <_malloc_usable_size_r>:
 800b874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b878:	1f18      	subs	r0, r3, #4
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bfbc      	itt	lt
 800b87e:	580b      	ldrlt	r3, [r1, r0]
 800b880:	18c0      	addlt	r0, r0, r3
 800b882:	4770      	bx	lr

0800b884 <_read_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d07      	ldr	r5, [pc, #28]	; (800b8a4 <_read_r+0x20>)
 800b888:	4604      	mov	r4, r0
 800b88a:	4608      	mov	r0, r1
 800b88c:	4611      	mov	r1, r2
 800b88e:	2200      	movs	r2, #0
 800b890:	602a      	str	r2, [r5, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	f7f7 faf8 	bl	8002e88 <_read>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d102      	bne.n	800b8a2 <_read_r+0x1e>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b103      	cbz	r3, 800b8a2 <_read_r+0x1e>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	200003fc 	.word	0x200003fc

0800b8a8 <log>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	ed2d 8b02 	vpush	{d8}
 800b8ae:	ec55 4b10 	vmov	r4, r5, d0
 800b8b2:	f000 f8a9 	bl	800ba08 <__ieee754_log>
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	462b      	mov	r3, r5
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	eeb0 8a40 	vmov.f32	s16, s0
 800b8c2:	eef0 8a60 	vmov.f32	s17, s1
 800b8c6:	f7f5 f939 	bl	8000b3c <__aeabi_dcmpun>
 800b8ca:	b998      	cbnz	r0, 800b8f4 <log+0x4c>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	f7f5 f928 	bl	8000b28 <__aeabi_dcmpgt>
 800b8d8:	b960      	cbnz	r0, 800b8f4 <log+0x4c>
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2300      	movs	r3, #0
 800b8de:	4620      	mov	r0, r4
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	f7f5 f8f9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8e6:	b160      	cbz	r0, 800b902 <log+0x5a>
 800b8e8:	f7fb fb60 	bl	8006fac <__errno>
 800b8ec:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b918 <log+0x70>
 800b8f0:	2322      	movs	r3, #34	; 0x22
 800b8f2:	6003      	str	r3, [r0, #0]
 800b8f4:	eeb0 0a48 	vmov.f32	s0, s16
 800b8f8:	eef0 0a68 	vmov.f32	s1, s17
 800b8fc:	ecbd 8b02 	vpop	{d8}
 800b900:	bd38      	pop	{r3, r4, r5, pc}
 800b902:	f7fb fb53 	bl	8006fac <__errno>
 800b906:	ecbd 8b02 	vpop	{d8}
 800b90a:	2321      	movs	r3, #33	; 0x21
 800b90c:	6003      	str	r3, [r0, #0]
 800b90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b912:	4803      	ldr	r0, [pc, #12]	; (800b920 <log+0x78>)
 800b914:	f7ff be8c 	b.w	800b630 <nan>
 800b918:	00000000 	.word	0x00000000
 800b91c:	fff00000 	.word	0xfff00000
 800b920:	0800cdbf 	.word	0x0800cdbf

0800b924 <pow>:
 800b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b926:	ed2d 8b02 	vpush	{d8}
 800b92a:	eeb0 8a40 	vmov.f32	s16, s0
 800b92e:	eef0 8a60 	vmov.f32	s17, s1
 800b932:	ec55 4b11 	vmov	r4, r5, d1
 800b936:	f000 fa23 	bl	800bd80 <__ieee754_pow>
 800b93a:	4622      	mov	r2, r4
 800b93c:	462b      	mov	r3, r5
 800b93e:	4620      	mov	r0, r4
 800b940:	4629      	mov	r1, r5
 800b942:	ec57 6b10 	vmov	r6, r7, d0
 800b946:	f7f5 f8f9 	bl	8000b3c <__aeabi_dcmpun>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d13b      	bne.n	800b9c6 <pow+0xa2>
 800b94e:	ec51 0b18 	vmov	r0, r1, d8
 800b952:	2200      	movs	r2, #0
 800b954:	2300      	movs	r3, #0
 800b956:	f7f5 f8bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800b95a:	b1b8      	cbz	r0, 800b98c <pow+0x68>
 800b95c:	2200      	movs	r2, #0
 800b95e:	2300      	movs	r3, #0
 800b960:	4620      	mov	r0, r4
 800b962:	4629      	mov	r1, r5
 800b964:	f7f5 f8b8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d146      	bne.n	800b9fa <pow+0xd6>
 800b96c:	ec45 4b10 	vmov	d0, r4, r5
 800b970:	f001 f81f 	bl	800c9b2 <finite>
 800b974:	b338      	cbz	r0, 800b9c6 <pow+0xa2>
 800b976:	2200      	movs	r2, #0
 800b978:	2300      	movs	r3, #0
 800b97a:	4620      	mov	r0, r4
 800b97c:	4629      	mov	r1, r5
 800b97e:	f7f5 f8b5 	bl	8000aec <__aeabi_dcmplt>
 800b982:	b300      	cbz	r0, 800b9c6 <pow+0xa2>
 800b984:	f7fb fb12 	bl	8006fac <__errno>
 800b988:	2322      	movs	r3, #34	; 0x22
 800b98a:	e01b      	b.n	800b9c4 <pow+0xa0>
 800b98c:	ec47 6b10 	vmov	d0, r6, r7
 800b990:	f001 f80f 	bl	800c9b2 <finite>
 800b994:	b9e0      	cbnz	r0, 800b9d0 <pow+0xac>
 800b996:	eeb0 0a48 	vmov.f32	s0, s16
 800b99a:	eef0 0a68 	vmov.f32	s1, s17
 800b99e:	f001 f808 	bl	800c9b2 <finite>
 800b9a2:	b1a8      	cbz	r0, 800b9d0 <pow+0xac>
 800b9a4:	ec45 4b10 	vmov	d0, r4, r5
 800b9a8:	f001 f803 	bl	800c9b2 <finite>
 800b9ac:	b180      	cbz	r0, 800b9d0 <pow+0xac>
 800b9ae:	4632      	mov	r2, r6
 800b9b0:	463b      	mov	r3, r7
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	f7f5 f8c1 	bl	8000b3c <__aeabi_dcmpun>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	d0e2      	beq.n	800b984 <pow+0x60>
 800b9be:	f7fb faf5 	bl	8006fac <__errno>
 800b9c2:	2321      	movs	r3, #33	; 0x21
 800b9c4:	6003      	str	r3, [r0, #0]
 800b9c6:	ecbd 8b02 	vpop	{d8}
 800b9ca:	ec47 6b10 	vmov	d0, r6, r7
 800b9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	4639      	mov	r1, r7
 800b9d8:	f7f5 f87e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d0f2      	beq.n	800b9c6 <pow+0xa2>
 800b9e0:	eeb0 0a48 	vmov.f32	s0, s16
 800b9e4:	eef0 0a68 	vmov.f32	s1, s17
 800b9e8:	f000 ffe3 	bl	800c9b2 <finite>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d0ea      	beq.n	800b9c6 <pow+0xa2>
 800b9f0:	ec45 4b10 	vmov	d0, r4, r5
 800b9f4:	f000 ffdd 	bl	800c9b2 <finite>
 800b9f8:	e7c3      	b.n	800b982 <pow+0x5e>
 800b9fa:	4f01      	ldr	r7, [pc, #4]	; (800ba00 <pow+0xdc>)
 800b9fc:	2600      	movs	r6, #0
 800b9fe:	e7e2      	b.n	800b9c6 <pow+0xa2>
 800ba00:	3ff00000 	.word	0x3ff00000
 800ba04:	00000000 	.word	0x00000000

0800ba08 <__ieee754_log>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	ec51 0b10 	vmov	r0, r1, d0
 800ba10:	ed2d 8b04 	vpush	{d8-d9}
 800ba14:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ba18:	b083      	sub	sp, #12
 800ba1a:	460d      	mov	r5, r1
 800ba1c:	da29      	bge.n	800ba72 <__ieee754_log+0x6a>
 800ba1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba22:	4303      	orrs	r3, r0
 800ba24:	ee10 2a10 	vmov	r2, s0
 800ba28:	d10c      	bne.n	800ba44 <__ieee754_log+0x3c>
 800ba2a:	49cf      	ldr	r1, [pc, #828]	; (800bd68 <__ieee754_log+0x360>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2300      	movs	r3, #0
 800ba30:	2000      	movs	r0, #0
 800ba32:	f7f4 ff13 	bl	800085c <__aeabi_ddiv>
 800ba36:	ec41 0b10 	vmov	d0, r0, r1
 800ba3a:	b003      	add	sp, #12
 800ba3c:	ecbd 8b04 	vpop	{d8-d9}
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba44:	2900      	cmp	r1, #0
 800ba46:	da05      	bge.n	800ba54 <__ieee754_log+0x4c>
 800ba48:	460b      	mov	r3, r1
 800ba4a:	f7f4 fc25 	bl	8000298 <__aeabi_dsub>
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2300      	movs	r3, #0
 800ba52:	e7ee      	b.n	800ba32 <__ieee754_log+0x2a>
 800ba54:	4bc5      	ldr	r3, [pc, #788]	; (800bd6c <__ieee754_log+0x364>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	f7f4 fdd6 	bl	8000608 <__aeabi_dmul>
 800ba5c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ba60:	460d      	mov	r5, r1
 800ba62:	4ac3      	ldr	r2, [pc, #780]	; (800bd70 <__ieee754_log+0x368>)
 800ba64:	4295      	cmp	r5, r2
 800ba66:	dd06      	ble.n	800ba76 <__ieee754_log+0x6e>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	f7f4 fc16 	bl	800029c <__adddf3>
 800ba70:	e7e1      	b.n	800ba36 <__ieee754_log+0x2e>
 800ba72:	2300      	movs	r3, #0
 800ba74:	e7f5      	b.n	800ba62 <__ieee754_log+0x5a>
 800ba76:	152c      	asrs	r4, r5, #20
 800ba78:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ba7c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ba80:	441c      	add	r4, r3
 800ba82:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ba86:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ba8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba8e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ba92:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ba96:	ea42 0105 	orr.w	r1, r2, r5
 800ba9a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ba9e:	2200      	movs	r2, #0
 800baa0:	4bb4      	ldr	r3, [pc, #720]	; (800bd74 <__ieee754_log+0x36c>)
 800baa2:	f7f4 fbf9 	bl	8000298 <__aeabi_dsub>
 800baa6:	1cab      	adds	r3, r5, #2
 800baa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800baac:	2b02      	cmp	r3, #2
 800baae:	4682      	mov	sl, r0
 800bab0:	468b      	mov	fp, r1
 800bab2:	f04f 0200 	mov.w	r2, #0
 800bab6:	dc53      	bgt.n	800bb60 <__ieee754_log+0x158>
 800bab8:	2300      	movs	r3, #0
 800baba:	f7f5 f80d 	bl	8000ad8 <__aeabi_dcmpeq>
 800babe:	b1d0      	cbz	r0, 800baf6 <__ieee754_log+0xee>
 800bac0:	2c00      	cmp	r4, #0
 800bac2:	f000 8122 	beq.w	800bd0a <__ieee754_log+0x302>
 800bac6:	4620      	mov	r0, r4
 800bac8:	f7f4 fd34 	bl	8000534 <__aeabi_i2d>
 800bacc:	a390      	add	r3, pc, #576	; (adr r3, 800bd10 <__ieee754_log+0x308>)
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	4606      	mov	r6, r0
 800bad4:	460f      	mov	r7, r1
 800bad6:	f7f4 fd97 	bl	8000608 <__aeabi_dmul>
 800bada:	a38f      	add	r3, pc, #572	; (adr r3, 800bd18 <__ieee754_log+0x310>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	4604      	mov	r4, r0
 800bae2:	460d      	mov	r5, r1
 800bae4:	4630      	mov	r0, r6
 800bae6:	4639      	mov	r1, r7
 800bae8:	f7f4 fd8e 	bl	8000608 <__aeabi_dmul>
 800baec:	4602      	mov	r2, r0
 800baee:	460b      	mov	r3, r1
 800baf0:	4620      	mov	r0, r4
 800baf2:	4629      	mov	r1, r5
 800baf4:	e7ba      	b.n	800ba6c <__ieee754_log+0x64>
 800baf6:	a38a      	add	r3, pc, #552	; (adr r3, 800bd20 <__ieee754_log+0x318>)
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	4650      	mov	r0, sl
 800bafe:	4659      	mov	r1, fp
 800bb00:	f7f4 fd82 	bl	8000608 <__aeabi_dmul>
 800bb04:	4602      	mov	r2, r0
 800bb06:	460b      	mov	r3, r1
 800bb08:	2000      	movs	r0, #0
 800bb0a:	499b      	ldr	r1, [pc, #620]	; (800bd78 <__ieee754_log+0x370>)
 800bb0c:	f7f4 fbc4 	bl	8000298 <__aeabi_dsub>
 800bb10:	4652      	mov	r2, sl
 800bb12:	4606      	mov	r6, r0
 800bb14:	460f      	mov	r7, r1
 800bb16:	465b      	mov	r3, fp
 800bb18:	4650      	mov	r0, sl
 800bb1a:	4659      	mov	r1, fp
 800bb1c:	f7f4 fd74 	bl	8000608 <__aeabi_dmul>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4630      	mov	r0, r6
 800bb26:	4639      	mov	r1, r7
 800bb28:	f7f4 fd6e 	bl	8000608 <__aeabi_dmul>
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	460f      	mov	r7, r1
 800bb30:	b914      	cbnz	r4, 800bb38 <__ieee754_log+0x130>
 800bb32:	4632      	mov	r2, r6
 800bb34:	463b      	mov	r3, r7
 800bb36:	e0a2      	b.n	800bc7e <__ieee754_log+0x276>
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f7f4 fcfb 	bl	8000534 <__aeabi_i2d>
 800bb3e:	a374      	add	r3, pc, #464	; (adr r3, 800bd10 <__ieee754_log+0x308>)
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	4680      	mov	r8, r0
 800bb46:	4689      	mov	r9, r1
 800bb48:	f7f4 fd5e 	bl	8000608 <__aeabi_dmul>
 800bb4c:	a372      	add	r3, pc, #456	; (adr r3, 800bd18 <__ieee754_log+0x310>)
 800bb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb52:	4604      	mov	r4, r0
 800bb54:	460d      	mov	r5, r1
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 fd55 	bl	8000608 <__aeabi_dmul>
 800bb5e:	e0a7      	b.n	800bcb0 <__ieee754_log+0x2a8>
 800bb60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb64:	f7f4 fb9a 	bl	800029c <__adddf3>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	4650      	mov	r0, sl
 800bb6e:	4659      	mov	r1, fp
 800bb70:	f7f4 fe74 	bl	800085c <__aeabi_ddiv>
 800bb74:	ec41 0b18 	vmov	d8, r0, r1
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f7f4 fcdb 	bl	8000534 <__aeabi_i2d>
 800bb7e:	ec53 2b18 	vmov	r2, r3, d8
 800bb82:	ec41 0b19 	vmov	d9, r0, r1
 800bb86:	ec51 0b18 	vmov	r0, r1, d8
 800bb8a:	f7f4 fd3d 	bl	8000608 <__aeabi_dmul>
 800bb8e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800bb92:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800bb96:	9301      	str	r3, [sp, #4]
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	4689      	mov	r9, r1
 800bba0:	f7f4 fd32 	bl	8000608 <__aeabi_dmul>
 800bba4:	a360      	add	r3, pc, #384	; (adr r3, 800bd28 <__ieee754_log+0x320>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	4606      	mov	r6, r0
 800bbac:	460f      	mov	r7, r1
 800bbae:	f7f4 fd2b 	bl	8000608 <__aeabi_dmul>
 800bbb2:	a35f      	add	r3, pc, #380	; (adr r3, 800bd30 <__ieee754_log+0x328>)
 800bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb8:	f7f4 fb70 	bl	800029c <__adddf3>
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	463b      	mov	r3, r7
 800bbc0:	f7f4 fd22 	bl	8000608 <__aeabi_dmul>
 800bbc4:	a35c      	add	r3, pc, #368	; (adr r3, 800bd38 <__ieee754_log+0x330>)
 800bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbca:	f7f4 fb67 	bl	800029c <__adddf3>
 800bbce:	4632      	mov	r2, r6
 800bbd0:	463b      	mov	r3, r7
 800bbd2:	f7f4 fd19 	bl	8000608 <__aeabi_dmul>
 800bbd6:	a35a      	add	r3, pc, #360	; (adr r3, 800bd40 <__ieee754_log+0x338>)
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	f7f4 fb5e 	bl	800029c <__adddf3>
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	464b      	mov	r3, r9
 800bbe4:	f7f4 fd10 	bl	8000608 <__aeabi_dmul>
 800bbe8:	a357      	add	r3, pc, #348	; (adr r3, 800bd48 <__ieee754_log+0x340>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	4680      	mov	r8, r0
 800bbf0:	4689      	mov	r9, r1
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	4639      	mov	r1, r7
 800bbf6:	f7f4 fd07 	bl	8000608 <__aeabi_dmul>
 800bbfa:	a355      	add	r3, pc, #340	; (adr r3, 800bd50 <__ieee754_log+0x348>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f7f4 fb4c 	bl	800029c <__adddf3>
 800bc04:	4632      	mov	r2, r6
 800bc06:	463b      	mov	r3, r7
 800bc08:	f7f4 fcfe 	bl	8000608 <__aeabi_dmul>
 800bc0c:	a352      	add	r3, pc, #328	; (adr r3, 800bd58 <__ieee754_log+0x350>)
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	f7f4 fb43 	bl	800029c <__adddf3>
 800bc16:	4632      	mov	r2, r6
 800bc18:	463b      	mov	r3, r7
 800bc1a:	f7f4 fcf5 	bl	8000608 <__aeabi_dmul>
 800bc1e:	460b      	mov	r3, r1
 800bc20:	4602      	mov	r2, r0
 800bc22:	4649      	mov	r1, r9
 800bc24:	4640      	mov	r0, r8
 800bc26:	f7f4 fb39 	bl	800029c <__adddf3>
 800bc2a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800bc2e:	9b01      	ldr	r3, [sp, #4]
 800bc30:	3551      	adds	r5, #81	; 0x51
 800bc32:	431d      	orrs	r5, r3
 800bc34:	2d00      	cmp	r5, #0
 800bc36:	4680      	mov	r8, r0
 800bc38:	4689      	mov	r9, r1
 800bc3a:	dd48      	ble.n	800bcce <__ieee754_log+0x2c6>
 800bc3c:	4b4e      	ldr	r3, [pc, #312]	; (800bd78 <__ieee754_log+0x370>)
 800bc3e:	2200      	movs	r2, #0
 800bc40:	4650      	mov	r0, sl
 800bc42:	4659      	mov	r1, fp
 800bc44:	f7f4 fce0 	bl	8000608 <__aeabi_dmul>
 800bc48:	4652      	mov	r2, sl
 800bc4a:	465b      	mov	r3, fp
 800bc4c:	f7f4 fcdc 	bl	8000608 <__aeabi_dmul>
 800bc50:	4602      	mov	r2, r0
 800bc52:	460b      	mov	r3, r1
 800bc54:	4606      	mov	r6, r0
 800bc56:	460f      	mov	r7, r1
 800bc58:	4640      	mov	r0, r8
 800bc5a:	4649      	mov	r1, r9
 800bc5c:	f7f4 fb1e 	bl	800029c <__adddf3>
 800bc60:	ec53 2b18 	vmov	r2, r3, d8
 800bc64:	f7f4 fcd0 	bl	8000608 <__aeabi_dmul>
 800bc68:	4680      	mov	r8, r0
 800bc6a:	4689      	mov	r9, r1
 800bc6c:	b964      	cbnz	r4, 800bc88 <__ieee754_log+0x280>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4630      	mov	r0, r6
 800bc74:	4639      	mov	r1, r7
 800bc76:	f7f4 fb0f 	bl	8000298 <__aeabi_dsub>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4650      	mov	r0, sl
 800bc80:	4659      	mov	r1, fp
 800bc82:	f7f4 fb09 	bl	8000298 <__aeabi_dsub>
 800bc86:	e6d6      	b.n	800ba36 <__ieee754_log+0x2e>
 800bc88:	a321      	add	r3, pc, #132	; (adr r3, 800bd10 <__ieee754_log+0x308>)
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	ec51 0b19 	vmov	r0, r1, d9
 800bc92:	f7f4 fcb9 	bl	8000608 <__aeabi_dmul>
 800bc96:	a320      	add	r3, pc, #128	; (adr r3, 800bd18 <__ieee754_log+0x310>)
 800bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	460d      	mov	r5, r1
 800bca0:	ec51 0b19 	vmov	r0, r1, d9
 800bca4:	f7f4 fcb0 	bl	8000608 <__aeabi_dmul>
 800bca8:	4642      	mov	r2, r8
 800bcaa:	464b      	mov	r3, r9
 800bcac:	f7f4 faf6 	bl	800029c <__adddf3>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	f7f4 faee 	bl	8000298 <__aeabi_dsub>
 800bcbc:	4652      	mov	r2, sl
 800bcbe:	465b      	mov	r3, fp
 800bcc0:	f7f4 faea 	bl	8000298 <__aeabi_dsub>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4620      	mov	r0, r4
 800bcca:	4629      	mov	r1, r5
 800bccc:	e7d9      	b.n	800bc82 <__ieee754_log+0x27a>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4650      	mov	r0, sl
 800bcd4:	4659      	mov	r1, fp
 800bcd6:	f7f4 fadf 	bl	8000298 <__aeabi_dsub>
 800bcda:	ec53 2b18 	vmov	r2, r3, d8
 800bcde:	f7f4 fc93 	bl	8000608 <__aeabi_dmul>
 800bce2:	4606      	mov	r6, r0
 800bce4:	460f      	mov	r7, r1
 800bce6:	2c00      	cmp	r4, #0
 800bce8:	f43f af23 	beq.w	800bb32 <__ieee754_log+0x12a>
 800bcec:	a308      	add	r3, pc, #32	; (adr r3, 800bd10 <__ieee754_log+0x308>)
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	ec51 0b19 	vmov	r0, r1, d9
 800bcf6:	f7f4 fc87 	bl	8000608 <__aeabi_dmul>
 800bcfa:	a307      	add	r3, pc, #28	; (adr r3, 800bd18 <__ieee754_log+0x310>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	4604      	mov	r4, r0
 800bd02:	460d      	mov	r5, r1
 800bd04:	ec51 0b19 	vmov	r0, r1, d9
 800bd08:	e727      	b.n	800bb5a <__ieee754_log+0x152>
 800bd0a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800bd60 <__ieee754_log+0x358>
 800bd0e:	e694      	b.n	800ba3a <__ieee754_log+0x32>
 800bd10:	fee00000 	.word	0xfee00000
 800bd14:	3fe62e42 	.word	0x3fe62e42
 800bd18:	35793c76 	.word	0x35793c76
 800bd1c:	3dea39ef 	.word	0x3dea39ef
 800bd20:	55555555 	.word	0x55555555
 800bd24:	3fd55555 	.word	0x3fd55555
 800bd28:	df3e5244 	.word	0xdf3e5244
 800bd2c:	3fc2f112 	.word	0x3fc2f112
 800bd30:	96cb03de 	.word	0x96cb03de
 800bd34:	3fc74664 	.word	0x3fc74664
 800bd38:	94229359 	.word	0x94229359
 800bd3c:	3fd24924 	.word	0x3fd24924
 800bd40:	55555593 	.word	0x55555593
 800bd44:	3fe55555 	.word	0x3fe55555
 800bd48:	d078c69f 	.word	0xd078c69f
 800bd4c:	3fc39a09 	.word	0x3fc39a09
 800bd50:	1d8e78af 	.word	0x1d8e78af
 800bd54:	3fcc71c5 	.word	0x3fcc71c5
 800bd58:	9997fa04 	.word	0x9997fa04
 800bd5c:	3fd99999 	.word	0x3fd99999
	...
 800bd68:	c3500000 	.word	0xc3500000
 800bd6c:	43500000 	.word	0x43500000
 800bd70:	7fefffff 	.word	0x7fefffff
 800bd74:	3ff00000 	.word	0x3ff00000
 800bd78:	3fe00000 	.word	0x3fe00000
 800bd7c:	00000000 	.word	0x00000000

0800bd80 <__ieee754_pow>:
 800bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd84:	ed2d 8b06 	vpush	{d8-d10}
 800bd88:	b089      	sub	sp, #36	; 0x24
 800bd8a:	ed8d 1b00 	vstr	d1, [sp]
 800bd8e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bd92:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bd96:	ea58 0102 	orrs.w	r1, r8, r2
 800bd9a:	ec57 6b10 	vmov	r6, r7, d0
 800bd9e:	d115      	bne.n	800bdcc <__ieee754_pow+0x4c>
 800bda0:	19b3      	adds	r3, r6, r6
 800bda2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bda6:	4152      	adcs	r2, r2
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	4b89      	ldr	r3, [pc, #548]	; (800bfd0 <__ieee754_pow+0x250>)
 800bdac:	4193      	sbcs	r3, r2
 800bdae:	f080 84d2 	bcs.w	800c756 <__ieee754_pow+0x9d6>
 800bdb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	4639      	mov	r1, r7
 800bdba:	f7f4 fa6f 	bl	800029c <__adddf3>
 800bdbe:	ec41 0b10 	vmov	d0, r0, r1
 800bdc2:	b009      	add	sp, #36	; 0x24
 800bdc4:	ecbd 8b06 	vpop	{d8-d10}
 800bdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdcc:	4b81      	ldr	r3, [pc, #516]	; (800bfd4 <__ieee754_pow+0x254>)
 800bdce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bdd2:	429c      	cmp	r4, r3
 800bdd4:	ee10 aa10 	vmov	sl, s0
 800bdd8:	463d      	mov	r5, r7
 800bdda:	dc06      	bgt.n	800bdea <__ieee754_pow+0x6a>
 800bddc:	d101      	bne.n	800bde2 <__ieee754_pow+0x62>
 800bdde:	2e00      	cmp	r6, #0
 800bde0:	d1e7      	bne.n	800bdb2 <__ieee754_pow+0x32>
 800bde2:	4598      	cmp	r8, r3
 800bde4:	dc01      	bgt.n	800bdea <__ieee754_pow+0x6a>
 800bde6:	d10f      	bne.n	800be08 <__ieee754_pow+0x88>
 800bde8:	b172      	cbz	r2, 800be08 <__ieee754_pow+0x88>
 800bdea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bdee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bdf2:	ea55 050a 	orrs.w	r5, r5, sl
 800bdf6:	d1dc      	bne.n	800bdb2 <__ieee754_pow+0x32>
 800bdf8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bdfc:	18db      	adds	r3, r3, r3
 800bdfe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800be02:	4152      	adcs	r2, r2
 800be04:	429d      	cmp	r5, r3
 800be06:	e7d0      	b.n	800bdaa <__ieee754_pow+0x2a>
 800be08:	2d00      	cmp	r5, #0
 800be0a:	da3b      	bge.n	800be84 <__ieee754_pow+0x104>
 800be0c:	4b72      	ldr	r3, [pc, #456]	; (800bfd8 <__ieee754_pow+0x258>)
 800be0e:	4598      	cmp	r8, r3
 800be10:	dc51      	bgt.n	800beb6 <__ieee754_pow+0x136>
 800be12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800be16:	4598      	cmp	r8, r3
 800be18:	f340 84ac 	ble.w	800c774 <__ieee754_pow+0x9f4>
 800be1c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800be20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800be24:	2b14      	cmp	r3, #20
 800be26:	dd0f      	ble.n	800be48 <__ieee754_pow+0xc8>
 800be28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800be2c:	fa22 f103 	lsr.w	r1, r2, r3
 800be30:	fa01 f303 	lsl.w	r3, r1, r3
 800be34:	4293      	cmp	r3, r2
 800be36:	f040 849d 	bne.w	800c774 <__ieee754_pow+0x9f4>
 800be3a:	f001 0101 	and.w	r1, r1, #1
 800be3e:	f1c1 0302 	rsb	r3, r1, #2
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	b182      	cbz	r2, 800be68 <__ieee754_pow+0xe8>
 800be46:	e05f      	b.n	800bf08 <__ieee754_pow+0x188>
 800be48:	2a00      	cmp	r2, #0
 800be4a:	d15b      	bne.n	800bf04 <__ieee754_pow+0x184>
 800be4c:	f1c3 0314 	rsb	r3, r3, #20
 800be50:	fa48 f103 	asr.w	r1, r8, r3
 800be54:	fa01 f303 	lsl.w	r3, r1, r3
 800be58:	4543      	cmp	r3, r8
 800be5a:	f040 8488 	bne.w	800c76e <__ieee754_pow+0x9ee>
 800be5e:	f001 0101 	and.w	r1, r1, #1
 800be62:	f1c1 0302 	rsb	r3, r1, #2
 800be66:	9304      	str	r3, [sp, #16]
 800be68:	4b5c      	ldr	r3, [pc, #368]	; (800bfdc <__ieee754_pow+0x25c>)
 800be6a:	4598      	cmp	r8, r3
 800be6c:	d132      	bne.n	800bed4 <__ieee754_pow+0x154>
 800be6e:	f1b9 0f00 	cmp.w	r9, #0
 800be72:	f280 8478 	bge.w	800c766 <__ieee754_pow+0x9e6>
 800be76:	4959      	ldr	r1, [pc, #356]	; (800bfdc <__ieee754_pow+0x25c>)
 800be78:	4632      	mov	r2, r6
 800be7a:	463b      	mov	r3, r7
 800be7c:	2000      	movs	r0, #0
 800be7e:	f7f4 fced 	bl	800085c <__aeabi_ddiv>
 800be82:	e79c      	b.n	800bdbe <__ieee754_pow+0x3e>
 800be84:	2300      	movs	r3, #0
 800be86:	9304      	str	r3, [sp, #16]
 800be88:	2a00      	cmp	r2, #0
 800be8a:	d13d      	bne.n	800bf08 <__ieee754_pow+0x188>
 800be8c:	4b51      	ldr	r3, [pc, #324]	; (800bfd4 <__ieee754_pow+0x254>)
 800be8e:	4598      	cmp	r8, r3
 800be90:	d1ea      	bne.n	800be68 <__ieee754_pow+0xe8>
 800be92:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800be96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800be9a:	ea53 030a 	orrs.w	r3, r3, sl
 800be9e:	f000 845a 	beq.w	800c756 <__ieee754_pow+0x9d6>
 800bea2:	4b4f      	ldr	r3, [pc, #316]	; (800bfe0 <__ieee754_pow+0x260>)
 800bea4:	429c      	cmp	r4, r3
 800bea6:	dd08      	ble.n	800beba <__ieee754_pow+0x13a>
 800bea8:	f1b9 0f00 	cmp.w	r9, #0
 800beac:	f2c0 8457 	blt.w	800c75e <__ieee754_pow+0x9de>
 800beb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800beb4:	e783      	b.n	800bdbe <__ieee754_pow+0x3e>
 800beb6:	2302      	movs	r3, #2
 800beb8:	e7e5      	b.n	800be86 <__ieee754_pow+0x106>
 800beba:	f1b9 0f00 	cmp.w	r9, #0
 800bebe:	f04f 0000 	mov.w	r0, #0
 800bec2:	f04f 0100 	mov.w	r1, #0
 800bec6:	f6bf af7a 	bge.w	800bdbe <__ieee754_pow+0x3e>
 800beca:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bece:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bed2:	e774      	b.n	800bdbe <__ieee754_pow+0x3e>
 800bed4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bed8:	d106      	bne.n	800bee8 <__ieee754_pow+0x168>
 800beda:	4632      	mov	r2, r6
 800bedc:	463b      	mov	r3, r7
 800bede:	4630      	mov	r0, r6
 800bee0:	4639      	mov	r1, r7
 800bee2:	f7f4 fb91 	bl	8000608 <__aeabi_dmul>
 800bee6:	e76a      	b.n	800bdbe <__ieee754_pow+0x3e>
 800bee8:	4b3e      	ldr	r3, [pc, #248]	; (800bfe4 <__ieee754_pow+0x264>)
 800beea:	4599      	cmp	r9, r3
 800beec:	d10c      	bne.n	800bf08 <__ieee754_pow+0x188>
 800beee:	2d00      	cmp	r5, #0
 800bef0:	db0a      	blt.n	800bf08 <__ieee754_pow+0x188>
 800bef2:	ec47 6b10 	vmov	d0, r6, r7
 800bef6:	b009      	add	sp, #36	; 0x24
 800bef8:	ecbd 8b06 	vpop	{d8-d10}
 800befc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf00:	f000 bc6c 	b.w	800c7dc <__ieee754_sqrt>
 800bf04:	2300      	movs	r3, #0
 800bf06:	9304      	str	r3, [sp, #16]
 800bf08:	ec47 6b10 	vmov	d0, r6, r7
 800bf0c:	f000 fd48 	bl	800c9a0 <fabs>
 800bf10:	ec51 0b10 	vmov	r0, r1, d0
 800bf14:	f1ba 0f00 	cmp.w	sl, #0
 800bf18:	d129      	bne.n	800bf6e <__ieee754_pow+0x1ee>
 800bf1a:	b124      	cbz	r4, 800bf26 <__ieee754_pow+0x1a6>
 800bf1c:	4b2f      	ldr	r3, [pc, #188]	; (800bfdc <__ieee754_pow+0x25c>)
 800bf1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d123      	bne.n	800bf6e <__ieee754_pow+0x1ee>
 800bf26:	f1b9 0f00 	cmp.w	r9, #0
 800bf2a:	da05      	bge.n	800bf38 <__ieee754_pow+0x1b8>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	2000      	movs	r0, #0
 800bf32:	492a      	ldr	r1, [pc, #168]	; (800bfdc <__ieee754_pow+0x25c>)
 800bf34:	f7f4 fc92 	bl	800085c <__aeabi_ddiv>
 800bf38:	2d00      	cmp	r5, #0
 800bf3a:	f6bf af40 	bge.w	800bdbe <__ieee754_pow+0x3e>
 800bf3e:	9b04      	ldr	r3, [sp, #16]
 800bf40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bf44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bf48:	4323      	orrs	r3, r4
 800bf4a:	d108      	bne.n	800bf5e <__ieee754_pow+0x1de>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	460b      	mov	r3, r1
 800bf50:	4610      	mov	r0, r2
 800bf52:	4619      	mov	r1, r3
 800bf54:	f7f4 f9a0 	bl	8000298 <__aeabi_dsub>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	e78f      	b.n	800be7e <__ieee754_pow+0xfe>
 800bf5e:	9b04      	ldr	r3, [sp, #16]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	f47f af2c 	bne.w	800bdbe <__ieee754_pow+0x3e>
 800bf66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	e727      	b.n	800bdbe <__ieee754_pow+0x3e>
 800bf6e:	0feb      	lsrs	r3, r5, #31
 800bf70:	3b01      	subs	r3, #1
 800bf72:	9306      	str	r3, [sp, #24]
 800bf74:	9a06      	ldr	r2, [sp, #24]
 800bf76:	9b04      	ldr	r3, [sp, #16]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	d102      	bne.n	800bf82 <__ieee754_pow+0x202>
 800bf7c:	4632      	mov	r2, r6
 800bf7e:	463b      	mov	r3, r7
 800bf80:	e7e6      	b.n	800bf50 <__ieee754_pow+0x1d0>
 800bf82:	4b19      	ldr	r3, [pc, #100]	; (800bfe8 <__ieee754_pow+0x268>)
 800bf84:	4598      	cmp	r8, r3
 800bf86:	f340 80fb 	ble.w	800c180 <__ieee754_pow+0x400>
 800bf8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bf8e:	4598      	cmp	r8, r3
 800bf90:	4b13      	ldr	r3, [pc, #76]	; (800bfe0 <__ieee754_pow+0x260>)
 800bf92:	dd0c      	ble.n	800bfae <__ieee754_pow+0x22e>
 800bf94:	429c      	cmp	r4, r3
 800bf96:	dc0f      	bgt.n	800bfb8 <__ieee754_pow+0x238>
 800bf98:	f1b9 0f00 	cmp.w	r9, #0
 800bf9c:	da0f      	bge.n	800bfbe <__ieee754_pow+0x23e>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	b009      	add	sp, #36	; 0x24
 800bfa2:	ecbd 8b06 	vpop	{d8-d10}
 800bfa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfaa:	f000 bcf0 	b.w	800c98e <__math_oflow>
 800bfae:	429c      	cmp	r4, r3
 800bfb0:	dbf2      	blt.n	800bf98 <__ieee754_pow+0x218>
 800bfb2:	4b0a      	ldr	r3, [pc, #40]	; (800bfdc <__ieee754_pow+0x25c>)
 800bfb4:	429c      	cmp	r4, r3
 800bfb6:	dd19      	ble.n	800bfec <__ieee754_pow+0x26c>
 800bfb8:	f1b9 0f00 	cmp.w	r9, #0
 800bfbc:	dcef      	bgt.n	800bf9e <__ieee754_pow+0x21e>
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	b009      	add	sp, #36	; 0x24
 800bfc2:	ecbd 8b06 	vpop	{d8-d10}
 800bfc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfca:	f000 bcd7 	b.w	800c97c <__math_uflow>
 800bfce:	bf00      	nop
 800bfd0:	fff00000 	.word	0xfff00000
 800bfd4:	7ff00000 	.word	0x7ff00000
 800bfd8:	433fffff 	.word	0x433fffff
 800bfdc:	3ff00000 	.word	0x3ff00000
 800bfe0:	3fefffff 	.word	0x3fefffff
 800bfe4:	3fe00000 	.word	0x3fe00000
 800bfe8:	41e00000 	.word	0x41e00000
 800bfec:	4b60      	ldr	r3, [pc, #384]	; (800c170 <__ieee754_pow+0x3f0>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	f7f4 f952 	bl	8000298 <__aeabi_dsub>
 800bff4:	a354      	add	r3, pc, #336	; (adr r3, 800c148 <__ieee754_pow+0x3c8>)
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	4604      	mov	r4, r0
 800bffc:	460d      	mov	r5, r1
 800bffe:	f7f4 fb03 	bl	8000608 <__aeabi_dmul>
 800c002:	a353      	add	r3, pc, #332	; (adr r3, 800c150 <__ieee754_pow+0x3d0>)
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	4606      	mov	r6, r0
 800c00a:	460f      	mov	r7, r1
 800c00c:	4620      	mov	r0, r4
 800c00e:	4629      	mov	r1, r5
 800c010:	f7f4 fafa 	bl	8000608 <__aeabi_dmul>
 800c014:	4b57      	ldr	r3, [pc, #348]	; (800c174 <__ieee754_pow+0x3f4>)
 800c016:	4682      	mov	sl, r0
 800c018:	468b      	mov	fp, r1
 800c01a:	2200      	movs	r2, #0
 800c01c:	4620      	mov	r0, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	f7f4 faf2 	bl	8000608 <__aeabi_dmul>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	a14b      	add	r1, pc, #300	; (adr r1, 800c158 <__ieee754_pow+0x3d8>)
 800c02a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c02e:	f7f4 f933 	bl	8000298 <__aeabi_dsub>
 800c032:	4622      	mov	r2, r4
 800c034:	462b      	mov	r3, r5
 800c036:	f7f4 fae7 	bl	8000608 <__aeabi_dmul>
 800c03a:	4602      	mov	r2, r0
 800c03c:	460b      	mov	r3, r1
 800c03e:	2000      	movs	r0, #0
 800c040:	494d      	ldr	r1, [pc, #308]	; (800c178 <__ieee754_pow+0x3f8>)
 800c042:	f7f4 f929 	bl	8000298 <__aeabi_dsub>
 800c046:	4622      	mov	r2, r4
 800c048:	4680      	mov	r8, r0
 800c04a:	4689      	mov	r9, r1
 800c04c:	462b      	mov	r3, r5
 800c04e:	4620      	mov	r0, r4
 800c050:	4629      	mov	r1, r5
 800c052:	f7f4 fad9 	bl	8000608 <__aeabi_dmul>
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	4640      	mov	r0, r8
 800c05c:	4649      	mov	r1, r9
 800c05e:	f7f4 fad3 	bl	8000608 <__aeabi_dmul>
 800c062:	a33f      	add	r3, pc, #252	; (adr r3, 800c160 <__ieee754_pow+0x3e0>)
 800c064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c068:	f7f4 face 	bl	8000608 <__aeabi_dmul>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	4650      	mov	r0, sl
 800c072:	4659      	mov	r1, fp
 800c074:	f7f4 f910 	bl	8000298 <__aeabi_dsub>
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4680      	mov	r8, r0
 800c07e:	4689      	mov	r9, r1
 800c080:	4630      	mov	r0, r6
 800c082:	4639      	mov	r1, r7
 800c084:	f7f4 f90a 	bl	800029c <__adddf3>
 800c088:	2000      	movs	r0, #0
 800c08a:	4632      	mov	r2, r6
 800c08c:	463b      	mov	r3, r7
 800c08e:	4604      	mov	r4, r0
 800c090:	460d      	mov	r5, r1
 800c092:	f7f4 f901 	bl	8000298 <__aeabi_dsub>
 800c096:	4602      	mov	r2, r0
 800c098:	460b      	mov	r3, r1
 800c09a:	4640      	mov	r0, r8
 800c09c:	4649      	mov	r1, r9
 800c09e:	f7f4 f8fb 	bl	8000298 <__aeabi_dsub>
 800c0a2:	9b04      	ldr	r3, [sp, #16]
 800c0a4:	9a06      	ldr	r2, [sp, #24]
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	4682      	mov	sl, r0
 800c0ac:	468b      	mov	fp, r1
 800c0ae:	f040 81e7 	bne.w	800c480 <__ieee754_pow+0x700>
 800c0b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c168 <__ieee754_pow+0x3e8>
 800c0b6:	eeb0 8a47 	vmov.f32	s16, s14
 800c0ba:	eef0 8a67 	vmov.f32	s17, s15
 800c0be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c0c2:	2600      	movs	r6, #0
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	463b      	mov	r3, r7
 800c0c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0cc:	f7f4 f8e4 	bl	8000298 <__aeabi_dsub>
 800c0d0:	4622      	mov	r2, r4
 800c0d2:	462b      	mov	r3, r5
 800c0d4:	f7f4 fa98 	bl	8000608 <__aeabi_dmul>
 800c0d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0dc:	4680      	mov	r8, r0
 800c0de:	4689      	mov	r9, r1
 800c0e0:	4650      	mov	r0, sl
 800c0e2:	4659      	mov	r1, fp
 800c0e4:	f7f4 fa90 	bl	8000608 <__aeabi_dmul>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	f7f4 f8d4 	bl	800029c <__adddf3>
 800c0f4:	4632      	mov	r2, r6
 800c0f6:	463b      	mov	r3, r7
 800c0f8:	4680      	mov	r8, r0
 800c0fa:	4689      	mov	r9, r1
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 fa82 	bl	8000608 <__aeabi_dmul>
 800c104:	460b      	mov	r3, r1
 800c106:	4604      	mov	r4, r0
 800c108:	460d      	mov	r5, r1
 800c10a:	4602      	mov	r2, r0
 800c10c:	4649      	mov	r1, r9
 800c10e:	4640      	mov	r0, r8
 800c110:	f7f4 f8c4 	bl	800029c <__adddf3>
 800c114:	4b19      	ldr	r3, [pc, #100]	; (800c17c <__ieee754_pow+0x3fc>)
 800c116:	4299      	cmp	r1, r3
 800c118:	ec45 4b19 	vmov	d9, r4, r5
 800c11c:	4606      	mov	r6, r0
 800c11e:	460f      	mov	r7, r1
 800c120:	468b      	mov	fp, r1
 800c122:	f340 82f1 	ble.w	800c708 <__ieee754_pow+0x988>
 800c126:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c12a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c12e:	4303      	orrs	r3, r0
 800c130:	f000 81e4 	beq.w	800c4fc <__ieee754_pow+0x77c>
 800c134:	ec51 0b18 	vmov	r0, r1, d8
 800c138:	2200      	movs	r2, #0
 800c13a:	2300      	movs	r3, #0
 800c13c:	f7f4 fcd6 	bl	8000aec <__aeabi_dcmplt>
 800c140:	3800      	subs	r0, #0
 800c142:	bf18      	it	ne
 800c144:	2001      	movne	r0, #1
 800c146:	e72b      	b.n	800bfa0 <__ieee754_pow+0x220>
 800c148:	60000000 	.word	0x60000000
 800c14c:	3ff71547 	.word	0x3ff71547
 800c150:	f85ddf44 	.word	0xf85ddf44
 800c154:	3e54ae0b 	.word	0x3e54ae0b
 800c158:	55555555 	.word	0x55555555
 800c15c:	3fd55555 	.word	0x3fd55555
 800c160:	652b82fe 	.word	0x652b82fe
 800c164:	3ff71547 	.word	0x3ff71547
 800c168:	00000000 	.word	0x00000000
 800c16c:	bff00000 	.word	0xbff00000
 800c170:	3ff00000 	.word	0x3ff00000
 800c174:	3fd00000 	.word	0x3fd00000
 800c178:	3fe00000 	.word	0x3fe00000
 800c17c:	408fffff 	.word	0x408fffff
 800c180:	4bd5      	ldr	r3, [pc, #852]	; (800c4d8 <__ieee754_pow+0x758>)
 800c182:	402b      	ands	r3, r5
 800c184:	2200      	movs	r2, #0
 800c186:	b92b      	cbnz	r3, 800c194 <__ieee754_pow+0x414>
 800c188:	4bd4      	ldr	r3, [pc, #848]	; (800c4dc <__ieee754_pow+0x75c>)
 800c18a:	f7f4 fa3d 	bl	8000608 <__aeabi_dmul>
 800c18e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c192:	460c      	mov	r4, r1
 800c194:	1523      	asrs	r3, r4, #20
 800c196:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c19a:	4413      	add	r3, r2
 800c19c:	9305      	str	r3, [sp, #20]
 800c19e:	4bd0      	ldr	r3, [pc, #832]	; (800c4e0 <__ieee754_pow+0x760>)
 800c1a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c1a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c1a8:	429c      	cmp	r4, r3
 800c1aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c1ae:	dd08      	ble.n	800c1c2 <__ieee754_pow+0x442>
 800c1b0:	4bcc      	ldr	r3, [pc, #816]	; (800c4e4 <__ieee754_pow+0x764>)
 800c1b2:	429c      	cmp	r4, r3
 800c1b4:	f340 8162 	ble.w	800c47c <__ieee754_pow+0x6fc>
 800c1b8:	9b05      	ldr	r3, [sp, #20]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	9305      	str	r3, [sp, #20]
 800c1be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c1c2:	2400      	movs	r4, #0
 800c1c4:	00e3      	lsls	r3, r4, #3
 800c1c6:	9307      	str	r3, [sp, #28]
 800c1c8:	4bc7      	ldr	r3, [pc, #796]	; (800c4e8 <__ieee754_pow+0x768>)
 800c1ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1ce:	ed93 7b00 	vldr	d7, [r3]
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	ec53 2b17 	vmov	r2, r3, d7
 800c1d8:	eeb0 9a47 	vmov.f32	s18, s14
 800c1dc:	eef0 9a67 	vmov.f32	s19, s15
 800c1e0:	4682      	mov	sl, r0
 800c1e2:	f7f4 f859 	bl	8000298 <__aeabi_dsub>
 800c1e6:	4652      	mov	r2, sl
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	460f      	mov	r7, r1
 800c1ec:	462b      	mov	r3, r5
 800c1ee:	ec51 0b19 	vmov	r0, r1, d9
 800c1f2:	f7f4 f853 	bl	800029c <__adddf3>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	49bb      	ldr	r1, [pc, #748]	; (800c4ec <__ieee754_pow+0x76c>)
 800c1fe:	f7f4 fb2d 	bl	800085c <__aeabi_ddiv>
 800c202:	ec41 0b1a 	vmov	d10, r0, r1
 800c206:	4602      	mov	r2, r0
 800c208:	460b      	mov	r3, r1
 800c20a:	4630      	mov	r0, r6
 800c20c:	4639      	mov	r1, r7
 800c20e:	f7f4 f9fb 	bl	8000608 <__aeabi_dmul>
 800c212:	2300      	movs	r3, #0
 800c214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c218:	9302      	str	r3, [sp, #8]
 800c21a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c21e:	46ab      	mov	fp, r5
 800c220:	106d      	asrs	r5, r5, #1
 800c222:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c226:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c22a:	ec41 0b18 	vmov	d8, r0, r1
 800c22e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c232:	2200      	movs	r2, #0
 800c234:	4640      	mov	r0, r8
 800c236:	4649      	mov	r1, r9
 800c238:	4614      	mov	r4, r2
 800c23a:	461d      	mov	r5, r3
 800c23c:	f7f4 f9e4 	bl	8000608 <__aeabi_dmul>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4630      	mov	r0, r6
 800c246:	4639      	mov	r1, r7
 800c248:	f7f4 f826 	bl	8000298 <__aeabi_dsub>
 800c24c:	ec53 2b19 	vmov	r2, r3, d9
 800c250:	4606      	mov	r6, r0
 800c252:	460f      	mov	r7, r1
 800c254:	4620      	mov	r0, r4
 800c256:	4629      	mov	r1, r5
 800c258:	f7f4 f81e 	bl	8000298 <__aeabi_dsub>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	4650      	mov	r0, sl
 800c262:	4659      	mov	r1, fp
 800c264:	f7f4 f818 	bl	8000298 <__aeabi_dsub>
 800c268:	4642      	mov	r2, r8
 800c26a:	464b      	mov	r3, r9
 800c26c:	f7f4 f9cc 	bl	8000608 <__aeabi_dmul>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4630      	mov	r0, r6
 800c276:	4639      	mov	r1, r7
 800c278:	f7f4 f80e 	bl	8000298 <__aeabi_dsub>
 800c27c:	ec53 2b1a 	vmov	r2, r3, d10
 800c280:	f7f4 f9c2 	bl	8000608 <__aeabi_dmul>
 800c284:	ec53 2b18 	vmov	r2, r3, d8
 800c288:	ec41 0b19 	vmov	d9, r0, r1
 800c28c:	ec51 0b18 	vmov	r0, r1, d8
 800c290:	f7f4 f9ba 	bl	8000608 <__aeabi_dmul>
 800c294:	a37c      	add	r3, pc, #496	; (adr r3, 800c488 <__ieee754_pow+0x708>)
 800c296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29a:	4604      	mov	r4, r0
 800c29c:	460d      	mov	r5, r1
 800c29e:	f7f4 f9b3 	bl	8000608 <__aeabi_dmul>
 800c2a2:	a37b      	add	r3, pc, #492	; (adr r3, 800c490 <__ieee754_pow+0x710>)
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	f7f3 fff8 	bl	800029c <__adddf3>
 800c2ac:	4622      	mov	r2, r4
 800c2ae:	462b      	mov	r3, r5
 800c2b0:	f7f4 f9aa 	bl	8000608 <__aeabi_dmul>
 800c2b4:	a378      	add	r3, pc, #480	; (adr r3, 800c498 <__ieee754_pow+0x718>)
 800c2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ba:	f7f3 ffef 	bl	800029c <__adddf3>
 800c2be:	4622      	mov	r2, r4
 800c2c0:	462b      	mov	r3, r5
 800c2c2:	f7f4 f9a1 	bl	8000608 <__aeabi_dmul>
 800c2c6:	a376      	add	r3, pc, #472	; (adr r3, 800c4a0 <__ieee754_pow+0x720>)
 800c2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2cc:	f7f3 ffe6 	bl	800029c <__adddf3>
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	462b      	mov	r3, r5
 800c2d4:	f7f4 f998 	bl	8000608 <__aeabi_dmul>
 800c2d8:	a373      	add	r3, pc, #460	; (adr r3, 800c4a8 <__ieee754_pow+0x728>)
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	f7f3 ffdd 	bl	800029c <__adddf3>
 800c2e2:	4622      	mov	r2, r4
 800c2e4:	462b      	mov	r3, r5
 800c2e6:	f7f4 f98f 	bl	8000608 <__aeabi_dmul>
 800c2ea:	a371      	add	r3, pc, #452	; (adr r3, 800c4b0 <__ieee754_pow+0x730>)
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	f7f3 ffd4 	bl	800029c <__adddf3>
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	460f      	mov	r7, r1
 800c2fa:	462b      	mov	r3, r5
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	4629      	mov	r1, r5
 800c300:	f7f4 f982 	bl	8000608 <__aeabi_dmul>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4630      	mov	r0, r6
 800c30a:	4639      	mov	r1, r7
 800c30c:	f7f4 f97c 	bl	8000608 <__aeabi_dmul>
 800c310:	4642      	mov	r2, r8
 800c312:	4604      	mov	r4, r0
 800c314:	460d      	mov	r5, r1
 800c316:	464b      	mov	r3, r9
 800c318:	ec51 0b18 	vmov	r0, r1, d8
 800c31c:	f7f3 ffbe 	bl	800029c <__adddf3>
 800c320:	ec53 2b19 	vmov	r2, r3, d9
 800c324:	f7f4 f970 	bl	8000608 <__aeabi_dmul>
 800c328:	4622      	mov	r2, r4
 800c32a:	462b      	mov	r3, r5
 800c32c:	f7f3 ffb6 	bl	800029c <__adddf3>
 800c330:	4642      	mov	r2, r8
 800c332:	4682      	mov	sl, r0
 800c334:	468b      	mov	fp, r1
 800c336:	464b      	mov	r3, r9
 800c338:	4640      	mov	r0, r8
 800c33a:	4649      	mov	r1, r9
 800c33c:	f7f4 f964 	bl	8000608 <__aeabi_dmul>
 800c340:	4b6b      	ldr	r3, [pc, #428]	; (800c4f0 <__ieee754_pow+0x770>)
 800c342:	2200      	movs	r2, #0
 800c344:	4606      	mov	r6, r0
 800c346:	460f      	mov	r7, r1
 800c348:	f7f3 ffa8 	bl	800029c <__adddf3>
 800c34c:	4652      	mov	r2, sl
 800c34e:	465b      	mov	r3, fp
 800c350:	f7f3 ffa4 	bl	800029c <__adddf3>
 800c354:	2000      	movs	r0, #0
 800c356:	4604      	mov	r4, r0
 800c358:	460d      	mov	r5, r1
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	4640      	mov	r0, r8
 800c360:	4649      	mov	r1, r9
 800c362:	f7f4 f951 	bl	8000608 <__aeabi_dmul>
 800c366:	4b62      	ldr	r3, [pc, #392]	; (800c4f0 <__ieee754_pow+0x770>)
 800c368:	4680      	mov	r8, r0
 800c36a:	4689      	mov	r9, r1
 800c36c:	2200      	movs	r2, #0
 800c36e:	4620      	mov	r0, r4
 800c370:	4629      	mov	r1, r5
 800c372:	f7f3 ff91 	bl	8000298 <__aeabi_dsub>
 800c376:	4632      	mov	r2, r6
 800c378:	463b      	mov	r3, r7
 800c37a:	f7f3 ff8d 	bl	8000298 <__aeabi_dsub>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4650      	mov	r0, sl
 800c384:	4659      	mov	r1, fp
 800c386:	f7f3 ff87 	bl	8000298 <__aeabi_dsub>
 800c38a:	ec53 2b18 	vmov	r2, r3, d8
 800c38e:	f7f4 f93b 	bl	8000608 <__aeabi_dmul>
 800c392:	4622      	mov	r2, r4
 800c394:	4606      	mov	r6, r0
 800c396:	460f      	mov	r7, r1
 800c398:	462b      	mov	r3, r5
 800c39a:	ec51 0b19 	vmov	r0, r1, d9
 800c39e:	f7f4 f933 	bl	8000608 <__aeabi_dmul>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	4639      	mov	r1, r7
 800c3aa:	f7f3 ff77 	bl	800029c <__adddf3>
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	460f      	mov	r7, r1
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4640      	mov	r0, r8
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	f7f3 ff6f 	bl	800029c <__adddf3>
 800c3be:	a33e      	add	r3, pc, #248	; (adr r3, 800c4b8 <__ieee754_pow+0x738>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	460d      	mov	r5, r1
 800c3ca:	f7f4 f91d 	bl	8000608 <__aeabi_dmul>
 800c3ce:	4642      	mov	r2, r8
 800c3d0:	ec41 0b18 	vmov	d8, r0, r1
 800c3d4:	464b      	mov	r3, r9
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	4629      	mov	r1, r5
 800c3da:	f7f3 ff5d 	bl	8000298 <__aeabi_dsub>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	4639      	mov	r1, r7
 800c3e6:	f7f3 ff57 	bl	8000298 <__aeabi_dsub>
 800c3ea:	a335      	add	r3, pc, #212	; (adr r3, 800c4c0 <__ieee754_pow+0x740>)
 800c3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f0:	f7f4 f90a 	bl	8000608 <__aeabi_dmul>
 800c3f4:	a334      	add	r3, pc, #208	; (adr r3, 800c4c8 <__ieee754_pow+0x748>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	460f      	mov	r7, r1
 800c3fe:	4620      	mov	r0, r4
 800c400:	4629      	mov	r1, r5
 800c402:	f7f4 f901 	bl	8000608 <__aeabi_dmul>
 800c406:	4602      	mov	r2, r0
 800c408:	460b      	mov	r3, r1
 800c40a:	4630      	mov	r0, r6
 800c40c:	4639      	mov	r1, r7
 800c40e:	f7f3 ff45 	bl	800029c <__adddf3>
 800c412:	9a07      	ldr	r2, [sp, #28]
 800c414:	4b37      	ldr	r3, [pc, #220]	; (800c4f4 <__ieee754_pow+0x774>)
 800c416:	4413      	add	r3, r2
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	f7f3 ff3e 	bl	800029c <__adddf3>
 800c420:	4682      	mov	sl, r0
 800c422:	9805      	ldr	r0, [sp, #20]
 800c424:	468b      	mov	fp, r1
 800c426:	f7f4 f885 	bl	8000534 <__aeabi_i2d>
 800c42a:	9a07      	ldr	r2, [sp, #28]
 800c42c:	4b32      	ldr	r3, [pc, #200]	; (800c4f8 <__ieee754_pow+0x778>)
 800c42e:	4413      	add	r3, r2
 800c430:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c434:	4606      	mov	r6, r0
 800c436:	460f      	mov	r7, r1
 800c438:	4652      	mov	r2, sl
 800c43a:	465b      	mov	r3, fp
 800c43c:	ec51 0b18 	vmov	r0, r1, d8
 800c440:	f7f3 ff2c 	bl	800029c <__adddf3>
 800c444:	4642      	mov	r2, r8
 800c446:	464b      	mov	r3, r9
 800c448:	f7f3 ff28 	bl	800029c <__adddf3>
 800c44c:	4632      	mov	r2, r6
 800c44e:	463b      	mov	r3, r7
 800c450:	f7f3 ff24 	bl	800029c <__adddf3>
 800c454:	2000      	movs	r0, #0
 800c456:	4632      	mov	r2, r6
 800c458:	463b      	mov	r3, r7
 800c45a:	4604      	mov	r4, r0
 800c45c:	460d      	mov	r5, r1
 800c45e:	f7f3 ff1b 	bl	8000298 <__aeabi_dsub>
 800c462:	4642      	mov	r2, r8
 800c464:	464b      	mov	r3, r9
 800c466:	f7f3 ff17 	bl	8000298 <__aeabi_dsub>
 800c46a:	ec53 2b18 	vmov	r2, r3, d8
 800c46e:	f7f3 ff13 	bl	8000298 <__aeabi_dsub>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4650      	mov	r0, sl
 800c478:	4659      	mov	r1, fp
 800c47a:	e610      	b.n	800c09e <__ieee754_pow+0x31e>
 800c47c:	2401      	movs	r4, #1
 800c47e:	e6a1      	b.n	800c1c4 <__ieee754_pow+0x444>
 800c480:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c4d0 <__ieee754_pow+0x750>
 800c484:	e617      	b.n	800c0b6 <__ieee754_pow+0x336>
 800c486:	bf00      	nop
 800c488:	4a454eef 	.word	0x4a454eef
 800c48c:	3fca7e28 	.word	0x3fca7e28
 800c490:	93c9db65 	.word	0x93c9db65
 800c494:	3fcd864a 	.word	0x3fcd864a
 800c498:	a91d4101 	.word	0xa91d4101
 800c49c:	3fd17460 	.word	0x3fd17460
 800c4a0:	518f264d 	.word	0x518f264d
 800c4a4:	3fd55555 	.word	0x3fd55555
 800c4a8:	db6fabff 	.word	0xdb6fabff
 800c4ac:	3fdb6db6 	.word	0x3fdb6db6
 800c4b0:	33333303 	.word	0x33333303
 800c4b4:	3fe33333 	.word	0x3fe33333
 800c4b8:	e0000000 	.word	0xe0000000
 800c4bc:	3feec709 	.word	0x3feec709
 800c4c0:	dc3a03fd 	.word	0xdc3a03fd
 800c4c4:	3feec709 	.word	0x3feec709
 800c4c8:	145b01f5 	.word	0x145b01f5
 800c4cc:	be3e2fe0 	.word	0xbe3e2fe0
 800c4d0:	00000000 	.word	0x00000000
 800c4d4:	3ff00000 	.word	0x3ff00000
 800c4d8:	7ff00000 	.word	0x7ff00000
 800c4dc:	43400000 	.word	0x43400000
 800c4e0:	0003988e 	.word	0x0003988e
 800c4e4:	000bb679 	.word	0x000bb679
 800c4e8:	0800d230 	.word	0x0800d230
 800c4ec:	3ff00000 	.word	0x3ff00000
 800c4f0:	40080000 	.word	0x40080000
 800c4f4:	0800d250 	.word	0x0800d250
 800c4f8:	0800d240 	.word	0x0800d240
 800c4fc:	a3b5      	add	r3, pc, #724	; (adr r3, 800c7d4 <__ieee754_pow+0xa54>)
 800c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c502:	4640      	mov	r0, r8
 800c504:	4649      	mov	r1, r9
 800c506:	f7f3 fec9 	bl	800029c <__adddf3>
 800c50a:	4622      	mov	r2, r4
 800c50c:	ec41 0b1a 	vmov	d10, r0, r1
 800c510:	462b      	mov	r3, r5
 800c512:	4630      	mov	r0, r6
 800c514:	4639      	mov	r1, r7
 800c516:	f7f3 febf 	bl	8000298 <__aeabi_dsub>
 800c51a:	4602      	mov	r2, r0
 800c51c:	460b      	mov	r3, r1
 800c51e:	ec51 0b1a 	vmov	r0, r1, d10
 800c522:	f7f4 fb01 	bl	8000b28 <__aeabi_dcmpgt>
 800c526:	2800      	cmp	r0, #0
 800c528:	f47f ae04 	bne.w	800c134 <__ieee754_pow+0x3b4>
 800c52c:	4aa4      	ldr	r2, [pc, #656]	; (800c7c0 <__ieee754_pow+0xa40>)
 800c52e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c532:	4293      	cmp	r3, r2
 800c534:	f340 8108 	ble.w	800c748 <__ieee754_pow+0x9c8>
 800c538:	151b      	asrs	r3, r3, #20
 800c53a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c53e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c542:	fa4a f303 	asr.w	r3, sl, r3
 800c546:	445b      	add	r3, fp
 800c548:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c54c:	4e9d      	ldr	r6, [pc, #628]	; (800c7c4 <__ieee754_pow+0xa44>)
 800c54e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c552:	4116      	asrs	r6, r2
 800c554:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c558:	2000      	movs	r0, #0
 800c55a:	ea23 0106 	bic.w	r1, r3, r6
 800c55e:	f1c2 0214 	rsb	r2, r2, #20
 800c562:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c566:	fa4a fa02 	asr.w	sl, sl, r2
 800c56a:	f1bb 0f00 	cmp.w	fp, #0
 800c56e:	4602      	mov	r2, r0
 800c570:	460b      	mov	r3, r1
 800c572:	4620      	mov	r0, r4
 800c574:	4629      	mov	r1, r5
 800c576:	bfb8      	it	lt
 800c578:	f1ca 0a00 	rsblt	sl, sl, #0
 800c57c:	f7f3 fe8c 	bl	8000298 <__aeabi_dsub>
 800c580:	ec41 0b19 	vmov	d9, r0, r1
 800c584:	4642      	mov	r2, r8
 800c586:	464b      	mov	r3, r9
 800c588:	ec51 0b19 	vmov	r0, r1, d9
 800c58c:	f7f3 fe86 	bl	800029c <__adddf3>
 800c590:	a37b      	add	r3, pc, #492	; (adr r3, 800c780 <__ieee754_pow+0xa00>)
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	2000      	movs	r0, #0
 800c598:	4604      	mov	r4, r0
 800c59a:	460d      	mov	r5, r1
 800c59c:	f7f4 f834 	bl	8000608 <__aeabi_dmul>
 800c5a0:	ec53 2b19 	vmov	r2, r3, d9
 800c5a4:	4606      	mov	r6, r0
 800c5a6:	460f      	mov	r7, r1
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	f7f3 fe74 	bl	8000298 <__aeabi_dsub>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4640      	mov	r0, r8
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	f7f3 fe6e 	bl	8000298 <__aeabi_dsub>
 800c5bc:	a372      	add	r3, pc, #456	; (adr r3, 800c788 <__ieee754_pow+0xa08>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	f7f4 f821 	bl	8000608 <__aeabi_dmul>
 800c5c6:	a372      	add	r3, pc, #456	; (adr r3, 800c790 <__ieee754_pow+0xa10>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	4680      	mov	r8, r0
 800c5ce:	4689      	mov	r9, r1
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	f7f4 f818 	bl	8000608 <__aeabi_dmul>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4649      	mov	r1, r9
 800c5e0:	f7f3 fe5c 	bl	800029c <__adddf3>
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	460d      	mov	r5, r1
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	f7f3 fe54 	bl	800029c <__adddf3>
 800c5f4:	4632      	mov	r2, r6
 800c5f6:	463b      	mov	r3, r7
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	4689      	mov	r9, r1
 800c5fc:	f7f3 fe4c 	bl	8000298 <__aeabi_dsub>
 800c600:	4602      	mov	r2, r0
 800c602:	460b      	mov	r3, r1
 800c604:	4620      	mov	r0, r4
 800c606:	4629      	mov	r1, r5
 800c608:	f7f3 fe46 	bl	8000298 <__aeabi_dsub>
 800c60c:	4642      	mov	r2, r8
 800c60e:	4606      	mov	r6, r0
 800c610:	460f      	mov	r7, r1
 800c612:	464b      	mov	r3, r9
 800c614:	4640      	mov	r0, r8
 800c616:	4649      	mov	r1, r9
 800c618:	f7f3 fff6 	bl	8000608 <__aeabi_dmul>
 800c61c:	a35e      	add	r3, pc, #376	; (adr r3, 800c798 <__ieee754_pow+0xa18>)
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	4604      	mov	r4, r0
 800c624:	460d      	mov	r5, r1
 800c626:	f7f3 ffef 	bl	8000608 <__aeabi_dmul>
 800c62a:	a35d      	add	r3, pc, #372	; (adr r3, 800c7a0 <__ieee754_pow+0xa20>)
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f7f3 fe32 	bl	8000298 <__aeabi_dsub>
 800c634:	4622      	mov	r2, r4
 800c636:	462b      	mov	r3, r5
 800c638:	f7f3 ffe6 	bl	8000608 <__aeabi_dmul>
 800c63c:	a35a      	add	r3, pc, #360	; (adr r3, 800c7a8 <__ieee754_pow+0xa28>)
 800c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c642:	f7f3 fe2b 	bl	800029c <__adddf3>
 800c646:	4622      	mov	r2, r4
 800c648:	462b      	mov	r3, r5
 800c64a:	f7f3 ffdd 	bl	8000608 <__aeabi_dmul>
 800c64e:	a358      	add	r3, pc, #352	; (adr r3, 800c7b0 <__ieee754_pow+0xa30>)
 800c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c654:	f7f3 fe20 	bl	8000298 <__aeabi_dsub>
 800c658:	4622      	mov	r2, r4
 800c65a:	462b      	mov	r3, r5
 800c65c:	f7f3 ffd4 	bl	8000608 <__aeabi_dmul>
 800c660:	a355      	add	r3, pc, #340	; (adr r3, 800c7b8 <__ieee754_pow+0xa38>)
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	f7f3 fe19 	bl	800029c <__adddf3>
 800c66a:	4622      	mov	r2, r4
 800c66c:	462b      	mov	r3, r5
 800c66e:	f7f3 ffcb 	bl	8000608 <__aeabi_dmul>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	4640      	mov	r0, r8
 800c678:	4649      	mov	r1, r9
 800c67a:	f7f3 fe0d 	bl	8000298 <__aeabi_dsub>
 800c67e:	4604      	mov	r4, r0
 800c680:	460d      	mov	r5, r1
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	4640      	mov	r0, r8
 800c688:	4649      	mov	r1, r9
 800c68a:	f7f3 ffbd 	bl	8000608 <__aeabi_dmul>
 800c68e:	2200      	movs	r2, #0
 800c690:	ec41 0b19 	vmov	d9, r0, r1
 800c694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c698:	4620      	mov	r0, r4
 800c69a:	4629      	mov	r1, r5
 800c69c:	f7f3 fdfc 	bl	8000298 <__aeabi_dsub>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	ec51 0b19 	vmov	r0, r1, d9
 800c6a8:	f7f4 f8d8 	bl	800085c <__aeabi_ddiv>
 800c6ac:	4632      	mov	r2, r6
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	463b      	mov	r3, r7
 800c6b4:	4640      	mov	r0, r8
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	f7f3 ffa6 	bl	8000608 <__aeabi_dmul>
 800c6bc:	4632      	mov	r2, r6
 800c6be:	463b      	mov	r3, r7
 800c6c0:	f7f3 fdec 	bl	800029c <__adddf3>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	f7f3 fde4 	bl	8000298 <__aeabi_dsub>
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	464b      	mov	r3, r9
 800c6d4:	f7f3 fde0 	bl	8000298 <__aeabi_dsub>
 800c6d8:	460b      	mov	r3, r1
 800c6da:	4602      	mov	r2, r0
 800c6dc:	493a      	ldr	r1, [pc, #232]	; (800c7c8 <__ieee754_pow+0xa48>)
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f7f3 fdda 	bl	8000298 <__aeabi_dsub>
 800c6e4:	ec41 0b10 	vmov	d0, r0, r1
 800c6e8:	ee10 3a90 	vmov	r3, s1
 800c6ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c6f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6f4:	da2b      	bge.n	800c74e <__ieee754_pow+0x9ce>
 800c6f6:	4650      	mov	r0, sl
 800c6f8:	f000 f966 	bl	800c9c8 <scalbn>
 800c6fc:	ec51 0b10 	vmov	r0, r1, d0
 800c700:	ec53 2b18 	vmov	r2, r3, d8
 800c704:	f7ff bbed 	b.w	800bee2 <__ieee754_pow+0x162>
 800c708:	4b30      	ldr	r3, [pc, #192]	; (800c7cc <__ieee754_pow+0xa4c>)
 800c70a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c70e:	429e      	cmp	r6, r3
 800c710:	f77f af0c 	ble.w	800c52c <__ieee754_pow+0x7ac>
 800c714:	4b2e      	ldr	r3, [pc, #184]	; (800c7d0 <__ieee754_pow+0xa50>)
 800c716:	440b      	add	r3, r1
 800c718:	4303      	orrs	r3, r0
 800c71a:	d009      	beq.n	800c730 <__ieee754_pow+0x9b0>
 800c71c:	ec51 0b18 	vmov	r0, r1, d8
 800c720:	2200      	movs	r2, #0
 800c722:	2300      	movs	r3, #0
 800c724:	f7f4 f9e2 	bl	8000aec <__aeabi_dcmplt>
 800c728:	3800      	subs	r0, #0
 800c72a:	bf18      	it	ne
 800c72c:	2001      	movne	r0, #1
 800c72e:	e447      	b.n	800bfc0 <__ieee754_pow+0x240>
 800c730:	4622      	mov	r2, r4
 800c732:	462b      	mov	r3, r5
 800c734:	f7f3 fdb0 	bl	8000298 <__aeabi_dsub>
 800c738:	4642      	mov	r2, r8
 800c73a:	464b      	mov	r3, r9
 800c73c:	f7f4 f9ea 	bl	8000b14 <__aeabi_dcmpge>
 800c740:	2800      	cmp	r0, #0
 800c742:	f43f aef3 	beq.w	800c52c <__ieee754_pow+0x7ac>
 800c746:	e7e9      	b.n	800c71c <__ieee754_pow+0x99c>
 800c748:	f04f 0a00 	mov.w	sl, #0
 800c74c:	e71a      	b.n	800c584 <__ieee754_pow+0x804>
 800c74e:	ec51 0b10 	vmov	r0, r1, d0
 800c752:	4619      	mov	r1, r3
 800c754:	e7d4      	b.n	800c700 <__ieee754_pow+0x980>
 800c756:	491c      	ldr	r1, [pc, #112]	; (800c7c8 <__ieee754_pow+0xa48>)
 800c758:	2000      	movs	r0, #0
 800c75a:	f7ff bb30 	b.w	800bdbe <__ieee754_pow+0x3e>
 800c75e:	2000      	movs	r0, #0
 800c760:	2100      	movs	r1, #0
 800c762:	f7ff bb2c 	b.w	800bdbe <__ieee754_pow+0x3e>
 800c766:	4630      	mov	r0, r6
 800c768:	4639      	mov	r1, r7
 800c76a:	f7ff bb28 	b.w	800bdbe <__ieee754_pow+0x3e>
 800c76e:	9204      	str	r2, [sp, #16]
 800c770:	f7ff bb7a 	b.w	800be68 <__ieee754_pow+0xe8>
 800c774:	2300      	movs	r3, #0
 800c776:	f7ff bb64 	b.w	800be42 <__ieee754_pow+0xc2>
 800c77a:	bf00      	nop
 800c77c:	f3af 8000 	nop.w
 800c780:	00000000 	.word	0x00000000
 800c784:	3fe62e43 	.word	0x3fe62e43
 800c788:	fefa39ef 	.word	0xfefa39ef
 800c78c:	3fe62e42 	.word	0x3fe62e42
 800c790:	0ca86c39 	.word	0x0ca86c39
 800c794:	be205c61 	.word	0xbe205c61
 800c798:	72bea4d0 	.word	0x72bea4d0
 800c79c:	3e663769 	.word	0x3e663769
 800c7a0:	c5d26bf1 	.word	0xc5d26bf1
 800c7a4:	3ebbbd41 	.word	0x3ebbbd41
 800c7a8:	af25de2c 	.word	0xaf25de2c
 800c7ac:	3f11566a 	.word	0x3f11566a
 800c7b0:	16bebd93 	.word	0x16bebd93
 800c7b4:	3f66c16c 	.word	0x3f66c16c
 800c7b8:	5555553e 	.word	0x5555553e
 800c7bc:	3fc55555 	.word	0x3fc55555
 800c7c0:	3fe00000 	.word	0x3fe00000
 800c7c4:	000fffff 	.word	0x000fffff
 800c7c8:	3ff00000 	.word	0x3ff00000
 800c7cc:	4090cbff 	.word	0x4090cbff
 800c7d0:	3f6f3400 	.word	0x3f6f3400
 800c7d4:	652b82fe 	.word	0x652b82fe
 800c7d8:	3c971547 	.word	0x3c971547

0800c7dc <__ieee754_sqrt>:
 800c7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e0:	ec55 4b10 	vmov	r4, r5, d0
 800c7e4:	4e55      	ldr	r6, [pc, #340]	; (800c93c <__ieee754_sqrt+0x160>)
 800c7e6:	43ae      	bics	r6, r5
 800c7e8:	ee10 0a10 	vmov	r0, s0
 800c7ec:	ee10 3a10 	vmov	r3, s0
 800c7f0:	462a      	mov	r2, r5
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	d110      	bne.n	800c818 <__ieee754_sqrt+0x3c>
 800c7f6:	ee10 2a10 	vmov	r2, s0
 800c7fa:	462b      	mov	r3, r5
 800c7fc:	f7f3 ff04 	bl	8000608 <__aeabi_dmul>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	4620      	mov	r0, r4
 800c806:	4629      	mov	r1, r5
 800c808:	f7f3 fd48 	bl	800029c <__adddf3>
 800c80c:	4604      	mov	r4, r0
 800c80e:	460d      	mov	r5, r1
 800c810:	ec45 4b10 	vmov	d0, r4, r5
 800c814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c818:	2d00      	cmp	r5, #0
 800c81a:	dc10      	bgt.n	800c83e <__ieee754_sqrt+0x62>
 800c81c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c820:	4330      	orrs	r0, r6
 800c822:	d0f5      	beq.n	800c810 <__ieee754_sqrt+0x34>
 800c824:	b15d      	cbz	r5, 800c83e <__ieee754_sqrt+0x62>
 800c826:	ee10 2a10 	vmov	r2, s0
 800c82a:	462b      	mov	r3, r5
 800c82c:	ee10 0a10 	vmov	r0, s0
 800c830:	f7f3 fd32 	bl	8000298 <__aeabi_dsub>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	f7f4 f810 	bl	800085c <__aeabi_ddiv>
 800c83c:	e7e6      	b.n	800c80c <__ieee754_sqrt+0x30>
 800c83e:	1512      	asrs	r2, r2, #20
 800c840:	d074      	beq.n	800c92c <__ieee754_sqrt+0x150>
 800c842:	07d4      	lsls	r4, r2, #31
 800c844:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c848:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c84c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c850:	bf5e      	ittt	pl
 800c852:	0fda      	lsrpl	r2, r3, #31
 800c854:	005b      	lslpl	r3, r3, #1
 800c856:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c85a:	2400      	movs	r4, #0
 800c85c:	0fda      	lsrs	r2, r3, #31
 800c85e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c862:	107f      	asrs	r7, r7, #1
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	2516      	movs	r5, #22
 800c868:	4620      	mov	r0, r4
 800c86a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c86e:	1886      	adds	r6, r0, r2
 800c870:	428e      	cmp	r6, r1
 800c872:	bfde      	ittt	le
 800c874:	1b89      	suble	r1, r1, r6
 800c876:	18b0      	addle	r0, r6, r2
 800c878:	18a4      	addle	r4, r4, r2
 800c87a:	0049      	lsls	r1, r1, #1
 800c87c:	3d01      	subs	r5, #1
 800c87e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c882:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c886:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c88a:	d1f0      	bne.n	800c86e <__ieee754_sqrt+0x92>
 800c88c:	462a      	mov	r2, r5
 800c88e:	f04f 0e20 	mov.w	lr, #32
 800c892:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c896:	4281      	cmp	r1, r0
 800c898:	eb06 0c05 	add.w	ip, r6, r5
 800c89c:	dc02      	bgt.n	800c8a4 <__ieee754_sqrt+0xc8>
 800c89e:	d113      	bne.n	800c8c8 <__ieee754_sqrt+0xec>
 800c8a0:	459c      	cmp	ip, r3
 800c8a2:	d811      	bhi.n	800c8c8 <__ieee754_sqrt+0xec>
 800c8a4:	f1bc 0f00 	cmp.w	ip, #0
 800c8a8:	eb0c 0506 	add.w	r5, ip, r6
 800c8ac:	da43      	bge.n	800c936 <__ieee754_sqrt+0x15a>
 800c8ae:	2d00      	cmp	r5, #0
 800c8b0:	db41      	blt.n	800c936 <__ieee754_sqrt+0x15a>
 800c8b2:	f100 0801 	add.w	r8, r0, #1
 800c8b6:	1a09      	subs	r1, r1, r0
 800c8b8:	459c      	cmp	ip, r3
 800c8ba:	bf88      	it	hi
 800c8bc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c8c0:	eba3 030c 	sub.w	r3, r3, ip
 800c8c4:	4432      	add	r2, r6
 800c8c6:	4640      	mov	r0, r8
 800c8c8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c8cc:	f1be 0e01 	subs.w	lr, lr, #1
 800c8d0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c8d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c8d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c8dc:	d1db      	bne.n	800c896 <__ieee754_sqrt+0xba>
 800c8de:	430b      	orrs	r3, r1
 800c8e0:	d006      	beq.n	800c8f0 <__ieee754_sqrt+0x114>
 800c8e2:	1c50      	adds	r0, r2, #1
 800c8e4:	bf13      	iteet	ne
 800c8e6:	3201      	addne	r2, #1
 800c8e8:	3401      	addeq	r4, #1
 800c8ea:	4672      	moveq	r2, lr
 800c8ec:	f022 0201 	bicne.w	r2, r2, #1
 800c8f0:	1063      	asrs	r3, r4, #1
 800c8f2:	0852      	lsrs	r2, r2, #1
 800c8f4:	07e1      	lsls	r1, r4, #31
 800c8f6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c8fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c8fe:	bf48      	it	mi
 800c900:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c904:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c908:	4614      	mov	r4, r2
 800c90a:	e781      	b.n	800c810 <__ieee754_sqrt+0x34>
 800c90c:	0ad9      	lsrs	r1, r3, #11
 800c90e:	3815      	subs	r0, #21
 800c910:	055b      	lsls	r3, r3, #21
 800c912:	2900      	cmp	r1, #0
 800c914:	d0fa      	beq.n	800c90c <__ieee754_sqrt+0x130>
 800c916:	02cd      	lsls	r5, r1, #11
 800c918:	d50a      	bpl.n	800c930 <__ieee754_sqrt+0x154>
 800c91a:	f1c2 0420 	rsb	r4, r2, #32
 800c91e:	fa23 f404 	lsr.w	r4, r3, r4
 800c922:	1e55      	subs	r5, r2, #1
 800c924:	4093      	lsls	r3, r2
 800c926:	4321      	orrs	r1, r4
 800c928:	1b42      	subs	r2, r0, r5
 800c92a:	e78a      	b.n	800c842 <__ieee754_sqrt+0x66>
 800c92c:	4610      	mov	r0, r2
 800c92e:	e7f0      	b.n	800c912 <__ieee754_sqrt+0x136>
 800c930:	0049      	lsls	r1, r1, #1
 800c932:	3201      	adds	r2, #1
 800c934:	e7ef      	b.n	800c916 <__ieee754_sqrt+0x13a>
 800c936:	4680      	mov	r8, r0
 800c938:	e7bd      	b.n	800c8b6 <__ieee754_sqrt+0xda>
 800c93a:	bf00      	nop
 800c93c:	7ff00000 	.word	0x7ff00000

0800c940 <with_errno>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	4604      	mov	r4, r0
 800c944:	460d      	mov	r5, r1
 800c946:	4616      	mov	r6, r2
 800c948:	f7fa fb30 	bl	8006fac <__errno>
 800c94c:	4629      	mov	r1, r5
 800c94e:	6006      	str	r6, [r0, #0]
 800c950:	4620      	mov	r0, r4
 800c952:	bd70      	pop	{r4, r5, r6, pc}

0800c954 <xflow>:
 800c954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c956:	4614      	mov	r4, r2
 800c958:	461d      	mov	r5, r3
 800c95a:	b108      	cbz	r0, 800c960 <xflow+0xc>
 800c95c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c960:	e9cd 2300 	strd	r2, r3, [sp]
 800c964:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c968:	4620      	mov	r0, r4
 800c96a:	4629      	mov	r1, r5
 800c96c:	f7f3 fe4c 	bl	8000608 <__aeabi_dmul>
 800c970:	2222      	movs	r2, #34	; 0x22
 800c972:	b003      	add	sp, #12
 800c974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c978:	f7ff bfe2 	b.w	800c940 <with_errno>

0800c97c <__math_uflow>:
 800c97c:	b508      	push	{r3, lr}
 800c97e:	2200      	movs	r2, #0
 800c980:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c984:	f7ff ffe6 	bl	800c954 <xflow>
 800c988:	ec41 0b10 	vmov	d0, r0, r1
 800c98c:	bd08      	pop	{r3, pc}

0800c98e <__math_oflow>:
 800c98e:	b508      	push	{r3, lr}
 800c990:	2200      	movs	r2, #0
 800c992:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c996:	f7ff ffdd 	bl	800c954 <xflow>
 800c99a:	ec41 0b10 	vmov	d0, r0, r1
 800c99e:	bd08      	pop	{r3, pc}

0800c9a0 <fabs>:
 800c9a0:	ec51 0b10 	vmov	r0, r1, d0
 800c9a4:	ee10 2a10 	vmov	r2, s0
 800c9a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9ac:	ec43 2b10 	vmov	d0, r2, r3
 800c9b0:	4770      	bx	lr

0800c9b2 <finite>:
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	ed8d 0b00 	vstr	d0, [sp]
 800c9b8:	9801      	ldr	r0, [sp, #4]
 800c9ba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c9be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c9c2:	0fc0      	lsrs	r0, r0, #31
 800c9c4:	b002      	add	sp, #8
 800c9c6:	4770      	bx	lr

0800c9c8 <scalbn>:
 800c9c8:	b570      	push	{r4, r5, r6, lr}
 800c9ca:	ec55 4b10 	vmov	r4, r5, d0
 800c9ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	462b      	mov	r3, r5
 800c9d6:	b99a      	cbnz	r2, 800ca00 <scalbn+0x38>
 800c9d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c9dc:	4323      	orrs	r3, r4
 800c9de:	d036      	beq.n	800ca4e <scalbn+0x86>
 800c9e0:	4b39      	ldr	r3, [pc, #228]	; (800cac8 <scalbn+0x100>)
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	ee10 0a10 	vmov	r0, s0
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f7f3 fe0d 	bl	8000608 <__aeabi_dmul>
 800c9ee:	4b37      	ldr	r3, [pc, #220]	; (800cacc <scalbn+0x104>)
 800c9f0:	429e      	cmp	r6, r3
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	da10      	bge.n	800ca1a <scalbn+0x52>
 800c9f8:	a32b      	add	r3, pc, #172	; (adr r3, 800caa8 <scalbn+0xe0>)
 800c9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fe:	e03a      	b.n	800ca76 <scalbn+0xae>
 800ca00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ca04:	428a      	cmp	r2, r1
 800ca06:	d10c      	bne.n	800ca22 <scalbn+0x5a>
 800ca08:	ee10 2a10 	vmov	r2, s0
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	4629      	mov	r1, r5
 800ca10:	f7f3 fc44 	bl	800029c <__adddf3>
 800ca14:	4604      	mov	r4, r0
 800ca16:	460d      	mov	r5, r1
 800ca18:	e019      	b.n	800ca4e <scalbn+0x86>
 800ca1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ca1e:	460b      	mov	r3, r1
 800ca20:	3a36      	subs	r2, #54	; 0x36
 800ca22:	4432      	add	r2, r6
 800ca24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ca28:	428a      	cmp	r2, r1
 800ca2a:	dd08      	ble.n	800ca3e <scalbn+0x76>
 800ca2c:	2d00      	cmp	r5, #0
 800ca2e:	a120      	add	r1, pc, #128	; (adr r1, 800cab0 <scalbn+0xe8>)
 800ca30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca34:	da1c      	bge.n	800ca70 <scalbn+0xa8>
 800ca36:	a120      	add	r1, pc, #128	; (adr r1, 800cab8 <scalbn+0xf0>)
 800ca38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca3c:	e018      	b.n	800ca70 <scalbn+0xa8>
 800ca3e:	2a00      	cmp	r2, #0
 800ca40:	dd08      	ble.n	800ca54 <scalbn+0x8c>
 800ca42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ca4e:	ec45 4b10 	vmov	d0, r4, r5
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ca58:	da19      	bge.n	800ca8e <scalbn+0xc6>
 800ca5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ca5e:	429e      	cmp	r6, r3
 800ca60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ca64:	dd0a      	ble.n	800ca7c <scalbn+0xb4>
 800ca66:	a112      	add	r1, pc, #72	; (adr r1, 800cab0 <scalbn+0xe8>)
 800ca68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1e2      	bne.n	800ca36 <scalbn+0x6e>
 800ca70:	a30f      	add	r3, pc, #60	; (adr r3, 800cab0 <scalbn+0xe8>)
 800ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca76:	f7f3 fdc7 	bl	8000608 <__aeabi_dmul>
 800ca7a:	e7cb      	b.n	800ca14 <scalbn+0x4c>
 800ca7c:	a10a      	add	r1, pc, #40	; (adr r1, 800caa8 <scalbn+0xe0>)
 800ca7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d0b8      	beq.n	800c9f8 <scalbn+0x30>
 800ca86:	a10e      	add	r1, pc, #56	; (adr r1, 800cac0 <scalbn+0xf8>)
 800ca88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca8c:	e7b4      	b.n	800c9f8 <scalbn+0x30>
 800ca8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca92:	3236      	adds	r2, #54	; 0x36
 800ca94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	4b0c      	ldr	r3, [pc, #48]	; (800cad0 <scalbn+0x108>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	e7e8      	b.n	800ca76 <scalbn+0xae>
 800caa4:	f3af 8000 	nop.w
 800caa8:	c2f8f359 	.word	0xc2f8f359
 800caac:	01a56e1f 	.word	0x01a56e1f
 800cab0:	8800759c 	.word	0x8800759c
 800cab4:	7e37e43c 	.word	0x7e37e43c
 800cab8:	8800759c 	.word	0x8800759c
 800cabc:	fe37e43c 	.word	0xfe37e43c
 800cac0:	c2f8f359 	.word	0xc2f8f359
 800cac4:	81a56e1f 	.word	0x81a56e1f
 800cac8:	43500000 	.word	0x43500000
 800cacc:	ffff3cb0 	.word	0xffff3cb0
 800cad0:	3c900000 	.word	0x3c900000

0800cad4 <_init>:
 800cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad6:	bf00      	nop
 800cad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cada:	bc08      	pop	{r3}
 800cadc:	469e      	mov	lr, r3
 800cade:	4770      	bx	lr

0800cae0 <_fini>:
 800cae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae2:	bf00      	nop
 800cae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cae6:	bc08      	pop	{r3}
 800cae8:	469e      	mov	lr, r3
 800caea:	4770      	bx	lr
