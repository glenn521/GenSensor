
GenSense_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cebc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  0800d060  0800d060  0001d060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8c8  0800d8c8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8c8  0800d8c8  0001d8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8d0  0800d8d0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8d0  0800d8d0  0001d8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8d4  0800d8d4  0001d8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d8d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001e8  0800dac0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800dac0  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152a3  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c41  00000000  00000000  000354bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00038100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  000392f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a04d  00000000  00000000  0003a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016399  00000000  00000000  0005445d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f4f3  00000000  00000000  0006a7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109ce9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064d0  00000000  00000000  00109d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d044 	.word	0x0800d044

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800d044 	.word	0x0800d044

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <AS7343_read>:
#include "main.h"
#include "AS7343.h"

#include <assert.h>

uint8_t AS7343_read(as7343_handle_t *handle, uint8_t regAddress){
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buffer;
	HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address<<1, regAddress, 1, &rx_buffer, 1, 10);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	889b      	ldrh	r3, [r3, #4]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b299      	uxth	r1, r3
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	b29a      	uxth	r2, r3
 8001024:	230a      	movs	r3, #10
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030f 	add.w	r3, r7, #15
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	f003 fdf0 	bl	8004c18 <HAL_I2C_Mem_Read>

	return rx_buffer;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <AS7343_write>:

bool AS7343_write(as7343_handle_t *handle, uint8_t regAddress, uint8_t data){
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af04      	add	r7, sp, #16
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	70fb      	strb	r3, [r7, #3]
 800104e:	4613      	mov	r3, r2
 8001050:	70bb      	strb	r3, [r7, #2]
	if(HAL_I2C_Mem_Write(handle->i2c_handle, handle->device_address<<1, regAddress, 1, &data, 1, 10) == HAL_OK) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	889b      	ldrh	r3, [r3, #4]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b299      	uxth	r1, r3
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	b29a      	uxth	r2, r3
 8001062:	230a      	movs	r3, #10
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1cbb      	adds	r3, r7, #2
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	f003 fcd8 	bl	8004a24 <HAL_I2C_Mem_Write>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <AS7343_write+0x3c>
		return true;
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <AS7343_write+0x3e>
	}
	return false;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <AS7343_power>:

void AS7343_power(as7343_handle_t *handle, bool power){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]

	AS7343_write(handle, AS7343_ENABLE, 0x01);
 8001094:	2201      	movs	r2, #1
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffd2 	bl	8001042 <AS7343_write>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <AS7343_read_spectral_data>:

uint16_t AS7343_read_spectral_data(as7343_handle_t *handle, uint8_t channel) {
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b088      	sub	sp, #32
 80010aa:	af04      	add	r7, sp, #16
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buffer[2];
	HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address<<1, AS7343_DATA_0_L + (2*channel), 1, rx_buffer, 2, 10);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	889b      	ldrh	r3, [r3, #4]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	b299      	uxth	r1, r3
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	3395      	adds	r3, #149	; 0x95
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	230a      	movs	r3, #10
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2302      	movs	r3, #2
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	f003 fd9d 	bl	8004c18 <HAL_I2C_Mem_Read>

	return ((uint16_t)rx_buffer[1]<<8) | (uint16_t)rx_buffer[0];
 80010de:	7b7b      	ldrb	r3, [r7, #13]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	b29b      	uxth	r3, r3
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <AS7343_enable_spectral_measurement>:

void AS7343_enable_spectral_measurement(as7343_handle_t *handle, bool enable) {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	70fb      	strb	r3, [r7, #3]
	AS7343_write(handle, AS7343_ENABLE, 0x01 | ((uint8_t)enable)<<1);
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	b25b      	sxtb	r3, r3
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	b25b      	sxtb	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	2180      	movs	r1, #128	; 0x80
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff94 	bl	8001042 <AS7343_write>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <AS7343_set_cycle>:

void AS7343_set_cycle(as7343_handle_t *handle, uint8_t cycle) {
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	70fb      	strb	r3, [r7, #3]
	AS7343_write(handle, AS7343_CFG20, cycle<<5);
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	015b      	lsls	r3, r3, #5
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	21d6      	movs	r1, #214	; 0xd6
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff82 	bl	8001042 <AS7343_write>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <AS7343_direct_config_3_chain>:
	AS7343_write(handle, 0x08, 0x06);
	AS7343_write(handle, 0x09, 0x00);
	AS7343_write(handle, 0x80, 0x11);
}

void AS7343_direct_config_3_chain(as7343_handle_t *handle) {
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	AS7343_write(handle, AS7343_CFG6, 0x0);
 800114e:	2200      	movs	r2, #0
 8001150:	21f5      	movs	r1, #245	; 0xf5
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff75 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_FD_CFG0, 0xa1);
 8001158:	22a1      	movs	r2, #161	; 0xa1
 800115a:	21df      	movs	r1, #223	; 0xdf
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff70 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_CFG10, 0xf2);
 8001162:	22f2      	movs	r2, #242	; 0xf2
 8001164:	2165      	movs	r1, #101	; 0x65
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff6b 	bl	8001042 <AS7343_write>

	AS7343_write(handle, AS7343_CFG0, 0x10);
 800116c:	2210      	movs	r2, #16
 800116e:	21bf      	movs	r1, #191	; 0xbf
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff66 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_CFG1, 0x0c);
 8001176:	220c      	movs	r2, #12
 8001178:	21c6      	movs	r1, #198	; 0xc6
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff61 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_CFG8, 0xc8);
 8001180:	22c8      	movs	r2, #200	; 0xc8
 8001182:	21c9      	movs	r1, #201	; 0xc9
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff5c 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_CFG20, 0x62);
 800118a:	2262      	movs	r2, #98	; 0x62
 800118c:	21d6      	movs	r1, #214	; 0xd6
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff57 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_AGC_GAIN_MAX, 0x99);
 8001194:	2299      	movs	r2, #153	; 0x99
 8001196:	21d7      	movs	r1, #215	; 0xd7
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff52 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_FD_TIME_1, 0x64);
 800119e:	2264      	movs	r2, #100	; 0x64
 80011a0:	21e0      	movs	r1, #224	; 0xe0
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff4d 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_FD_TIME_2, 0x21);
 80011a8:	2221      	movs	r2, #33	; 0x21
 80011aa:	21e2      	movs	r1, #226	; 0xe2
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff48 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 80011b2:	2200      	movs	r2, #0
 80011b4:	21e7      	movs	r1, #231	; 0xe7
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff43 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 80011bc:	2246      	movs	r2, #70	; 0x46
 80011be:	21e4      	movs	r1, #228	; 0xe4
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff3e 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x04);
 80011c6:	2204      	movs	r2, #4
 80011c8:	21e7      	movs	r1, #231	; 0xe7
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff39 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 80011d0:	2246      	movs	r2, #70	; 0x46
 80011d2:	21e4      	movs	r1, #228	; 0xe4
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff34 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x65);
 80011da:	2265      	movs	r2, #101	; 0x65
 80011dc:	21e7      	movs	r1, #231	; 0xe7
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff2f 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 80011e4:	2246      	movs	r2, #70	; 0x46
 80011e6:	21e4      	movs	r1, #228	; 0xe4
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff2a 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x02);
 80011ee:	2202      	movs	r2, #2
 80011f0:	21e7      	movs	r1, #231	; 0xe7
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff25 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 80011f8:	2246      	movs	r2, #70	; 0x46
 80011fa:	21e4      	movs	r1, #228	; 0xe4
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff20 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 8001202:	2200      	movs	r2, #0
 8001204:	21e7      	movs	r1, #231	; 0xe7
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff1b 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 800120c:	2246      	movs	r2, #70	; 0x46
 800120e:	21e4      	movs	r1, #228	; 0xe4
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff16 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x05);
 8001216:	2205      	movs	r2, #5
 8001218:	21e7      	movs	r1, #231	; 0xe7
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff11 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 8001220:	2246      	movs	r2, #70	; 0x46
 8001222:	21e4      	movs	r1, #228	; 0xe4
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff0c 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 800122a:	2200      	movs	r2, #0
 800122c:	21e7      	movs	r1, #231	; 0xe7
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff07 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 8001234:	2246      	movs	r2, #70	; 0x46
 8001236:	21e4      	movs	r1, #228	; 0xe4
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff02 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x01);
 800123e:	2201      	movs	r2, #1
 8001240:	21e7      	movs	r1, #231	; 0xe7
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fefd 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 8001248:	2246      	movs	r2, #70	; 0x46
 800124a:	21e4      	movs	r1, #228	; 0xe4
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fef8 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 8001252:	2200      	movs	r2, #0
 8001254:	21e7      	movs	r1, #231	; 0xe7
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fef3 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 800125c:	2246      	movs	r2, #70	; 0x46
 800125e:	21e4      	movs	r1, #228	; 0xe4
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff feee 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x30);
 8001266:	2230      	movs	r2, #48	; 0x30
 8001268:	21e7      	movs	r1, #231	; 0xe7
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fee9 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x46);
 8001270:	2246      	movs	r2, #70	; 0x46
 8001272:	21e4      	movs	r1, #228	; 0xe4
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fee4 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 800127a:	2200      	movs	r2, #0
 800127c:	21e7      	movs	r1, #231	; 0xe7
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fedf 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 8001284:	2256      	movs	r2, #86	; 0x56
 8001286:	21e4      	movs	r1, #228	; 0xe4
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff feda 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 800128e:	2200      	movs	r2, #0
 8001290:	21e7      	movs	r1, #231	; 0xe7
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fed5 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 8001298:	2256      	movs	r2, #86	; 0x56
 800129a:	21e4      	movs	r1, #228	; 0xe4
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fed0 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x60);
 80012a2:	2260      	movs	r2, #96	; 0x60
 80012a4:	21e7      	movs	r1, #231	; 0xe7
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fecb 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 80012ac:	2256      	movs	r2, #86	; 0x56
 80012ae:	21e4      	movs	r1, #228	; 0xe4
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fec6 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x20);
 80012b6:	2220      	movs	r2, #32
 80012b8:	21e7      	movs	r1, #231	; 0xe7
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fec1 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 80012c0:	2256      	movs	r2, #86	; 0x56
 80012c2:	21e4      	movs	r1, #228	; 0xe4
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff febc 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x04);
 80012ca:	2204      	movs	r2, #4
 80012cc:	21e7      	movs	r1, #231	; 0xe7
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff feb7 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 80012d4:	2256      	movs	r2, #86	; 0x56
 80012d6:	21e4      	movs	r1, #228	; 0xe4
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff feb2 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x50);
 80012de:	2250      	movs	r2, #80	; 0x50
 80012e0:	21e7      	movs	r1, #231	; 0xe7
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fead 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 80012e8:	2256      	movs	r2, #86	; 0x56
 80012ea:	21e4      	movs	r1, #228	; 0xe4
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fea8 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x03);
 80012f2:	2203      	movs	r2, #3
 80012f4:	21e7      	movs	r1, #231	; 0xe7
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fea3 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 80012fc:	2256      	movs	r2, #86	; 0x56
 80012fe:	21e4      	movs	r1, #228	; 0xe4
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fe9e 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 8001306:	2200      	movs	r2, #0
 8001308:	21e7      	movs	r1, #231	; 0xe7
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fe99 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 8001310:	2256      	movs	r2, #86	; 0x56
 8001312:	21e4      	movs	r1, #228	; 0xe4
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fe94 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x01);
 800131a:	2201      	movs	r2, #1
 800131c:	21e7      	movs	r1, #231	; 0xe7
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fe8f 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 8001324:	2256      	movs	r2, #86	; 0x56
 8001326:	21e4      	movs	r1, #228	; 0xe4
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fe8a 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x05);
 800132e:	2205      	movs	r2, #5
 8001330:	21e7      	movs	r1, #231	; 0xe7
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fe85 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x56);
 8001338:	2256      	movs	r2, #86	; 0x56
 800133a:	21e4      	movs	r1, #228	; 0xe4
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe80 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x05);
 8001342:	2205      	movs	r2, #5
 8001344:	21e7      	movs	r1, #231	; 0xe7
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fe7b 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 800134c:	2266      	movs	r2, #102	; 0x66
 800134e:	21e4      	movs	r1, #228	; 0xe4
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fe76 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 8001356:	2200      	movs	r2, #0
 8001358:	21e7      	movs	r1, #231	; 0xe7
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fe71 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 8001360:	2266      	movs	r2, #102	; 0x66
 8001362:	21e4      	movs	r1, #228	; 0xe4
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fe6c 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x60);
 800136a:	2260      	movs	r2, #96	; 0x60
 800136c:	21e7      	movs	r1, #231	; 0xe7
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fe67 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 8001374:	2266      	movs	r2, #102	; 0x66
 8001376:	21e4      	movs	r1, #228	; 0xe4
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fe62 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 800137e:	2200      	movs	r2, #0
 8001380:	21e7      	movs	r1, #231	; 0xe7
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fe5d 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 8001388:	2266      	movs	r2, #102	; 0x66
 800138a:	21e4      	movs	r1, #228	; 0xe4
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fe58 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x30);
 8001392:	2230      	movs	r2, #48	; 0x30
 8001394:	21e7      	movs	r1, #231	; 0xe7
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fe53 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 800139c:	2266      	movs	r2, #102	; 0x66
 800139e:	21e4      	movs	r1, #228	; 0xe4
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fe4e 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 80013a6:	2200      	movs	r2, #0
 80013a8:	21e7      	movs	r1, #231	; 0xe7
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fe49 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 80013b0:	2266      	movs	r2, #102	; 0x66
 80013b2:	21e4      	movs	r1, #228	; 0xe4
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fe44 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x40);
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	21e7      	movs	r1, #231	; 0xe7
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fe3f 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 80013c4:	2266      	movs	r2, #102	; 0x66
 80013c6:	21e4      	movs	r1, #228	; 0xe4
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fe3a 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x10);
 80013ce:	2210      	movs	r2, #16
 80013d0:	21e7      	movs	r1, #231	; 0xe7
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fe35 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 80013d8:	2266      	movs	r2, #102	; 0x66
 80013da:	21e4      	movs	r1, #228	; 0xe4
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fe30 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x20);
 80013e2:	2220      	movs	r2, #32
 80013e4:	21e7      	movs	r1, #231	; 0xe7
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fe2b 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 80013ec:	2266      	movs	r2, #102	; 0x66
 80013ee:	21e4      	movs	r1, #228	; 0xe4
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fe26 	bl	8001042 <AS7343_write>

	AS7343_write(handle, 0xe7, 0x00);
 80013f6:	2200      	movs	r2, #0
 80013f8:	21e7      	movs	r1, #231	; 0xe7
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe21 	bl	8001042 <AS7343_write>
	AS7343_write(handle, 0xe4, 0x66);
 8001400:	2266      	movs	r2, #102	; 0x66
 8001402:	21e4      	movs	r1, #228	; 0xe4
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fe1c 	bl	8001042 <AS7343_write>

//	AS7343_write(handle, 0x80, 0x11);
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <AS7343_get_AVALID_bit>:

bool AS7343_get_AVALID_bit(as7343_handle_t *handle) {
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	uint8_t status2 = AS7343_read(handle, AS7343_STATUS2);
 800141a:	2190      	movs	r1, #144	; 0x90
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fdf3 	bl	8001008 <AS7343_read>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]

	return (status2 & 0x40) > 0;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142c:	2b00      	cmp	r3, #0
 800142e:	bfcc      	ite	gt
 8001430:	2301      	movgt	r3, #1
 8001432:	2300      	movle	r3, #0
 8001434:	b2db      	uxtb	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <AS7343_delay_for_reading>:
	uint8_t status2 = AS7343_read(handle, AS7343_STATUS2);

	return (status2 & 0x10) > 0;
}

void AS7343_delay_for_reading(as7343_handle_t *handle) {
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	while(!AS7343_get_AVALID_bit(handle)) {
 8001446:	e002      	b.n	800144e <AS7343_delay_for_reading+0x10>
		HAL_Delay(10);
 8001448:	200a      	movs	r0, #10
 800144a:	f002 f923 	bl	8003694 <HAL_Delay>
	while(!AS7343_get_AVALID_bit(handle)) {
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffdf 	bl	8001412 <AS7343_get_AVALID_bit>
 8001454:	4603      	mov	r3, r0
 8001456:	f083 0301 	eor.w	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f3      	bne.n	8001448 <AS7343_delay_for_reading+0xa>
	}
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <AS7343_read_18>:

void AS7343_read_18(as7343_handle_t *handle, uint16_t* data) {
 800146a:	b590      	push	{r4, r7, lr}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
	AS7343_enable_spectral_measurement(handle, true);
 8001474:	2101      	movs	r1, #1
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fe3d 	bl	80010f6 <AS7343_enable_spectral_measurement>
	AS7343_delay_for_reading(handle);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffde 	bl	800143e <AS7343_delay_for_reading>
	AS7343_enable_spectral_measurement(handle, false);
 8001482:	2100      	movs	r1, #0
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fe36 	bl	80010f6 <AS7343_enable_spectral_measurement>

	for(uint8_t i = 0; i<18; i++) {
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e00d      	b.n	80014ac <AS7343_read_18+0x42>
		data[i] = AS7343_read_spectral_data(handle, i);
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	18d4      	adds	r4, r2, r3
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fe02 	bl	80010a6 <AS7343_read_spectral_data>
 80014a2:	4603      	mov	r3, r0
 80014a4:	8023      	strh	r3, [r4, #0]
	for(uint8_t i = 0; i<18; i++) {
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	3301      	adds	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b11      	cmp	r3, #17
 80014b0:	d9ee      	bls.n	8001490 <AS7343_read_18+0x26>
	}

}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <AS7343_set_gain>:

void AS7343_set_gain(as7343_handle_t *handle, uint8_t gain_raw) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
	AS7343_write(handle, AS7343_CFG1, gain_raw);
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	461a      	mov	r2, r3
 80014cc:	21c6      	movs	r1, #198	; 0xc6
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdb7 	bl	8001042 <AS7343_write>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <AS7343_get_gain>:

uint8_t AS7343_get_gain(as7343_handle_t *handle) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	return AS7343_read(handle, AS7343_CFG1);
 80014e4:	21c6      	movs	r1, #198	; 0xc6
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fd8e 	bl	8001008 <AS7343_read>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <AS7343_set_TINT>:

void AS7343_set_TINT(as7343_handle_t *handle, double TINT) {
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	ed87 0b00 	vstr	d0, [r7]
	uint8_t ATIME = 0x00;
 8001504:	2300      	movs	r3, #0
 8001506:	75fb      	strb	r3, [r7, #23]
	uint16_t ASTEP = 0x0000;
 8001508:	2300      	movs	r3, #0
 800150a:	82bb      	strh	r3, [r7, #20]
	while(true) {
		ASTEP = ((TINT/(double)(ATIME+1))*720.0/2.0);
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	3301      	adds	r3, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f80f 	bl	8000534 <__aeabi_i2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800151e:	f7ff f99d 	bl	800085c <__aeabi_ddiv>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <AS7343_set_TINT+0xf8>)
 8001530:	f7ff f86a 	bl	8000608 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001544:	f7ff f98a 	bl	800085c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fb32 	bl	8000bb8 <__aeabi_d2uiz>
 8001554:	4603      	mov	r3, r0
 8001556:	82bb      	strh	r3, [r7, #20]

		if(abs(((ATIME+1)*(ASTEP+1)*2/720) - (uint16_t)TINT) <=1) {
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	3301      	adds	r3, #1
 800155c:	8aba      	ldrh	r2, [r7, #20]
 800155e:	3201      	adds	r2, #1
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <AS7343_set_TINT+0xfc>)
 8001566:	fb82 1203 	smull	r1, r2, r2, r3
 800156a:	441a      	add	r2, r3
 800156c:	1212      	asrs	r2, r2, #8
 800156e:	17db      	asrs	r3, r3, #31
 8001570:	1ad4      	subs	r4, r2, r3
 8001572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001576:	f7ff fb1f 	bl	8000bb8 <__aeabi_d2uiz>
 800157a:	4603      	mov	r3, r0
 800157c:	b29b      	uxth	r3, r3
 800157e:	1ae3      	subs	r3, r4, r3
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	db15      	blt.n	80015b2 <AS7343_set_TINT+0xba>
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	3301      	adds	r3, #1
 800158a:	8aba      	ldrh	r2, [r7, #20]
 800158c:	3201      	adds	r2, #1
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a18      	ldr	r2, [pc, #96]	; (80015f4 <AS7343_set_TINT+0xfc>)
 8001594:	fb82 1203 	smull	r1, r2, r2, r3
 8001598:	441a      	add	r2, r3
 800159a:	1212      	asrs	r2, r2, #8
 800159c:	17db      	asrs	r3, r3, #31
 800159e:	1ad4      	subs	r4, r2, r3
 80015a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015a4:	f7ff fb08 	bl	8000bb8 <__aeabi_d2uiz>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	1ae3      	subs	r3, r4, r3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	dd03      	ble.n	80015ba <AS7343_set_TINT+0xc2>
			break;
		}
		else {
			ATIME += 1;
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	3301      	adds	r3, #1
 80015b6:	75fb      	strb	r3, [r7, #23]
		ASTEP = ((TINT/(double)(ATIME+1))*720.0/2.0);
 80015b8:	e7a8      	b.n	800150c <AS7343_set_TINT+0x14>
		}
	}
	AS7343_write(handle, AS7343_ATIME, ATIME);
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	461a      	mov	r2, r3
 80015be:	2181      	movs	r1, #129	; 0x81
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fd3e 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_ASTEP_LSB, (uint8_t)(ASTEP & 0xFF));
 80015c6:	8abb      	ldrh	r3, [r7, #20]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	21d4      	movs	r1, #212	; 0xd4
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff fd37 	bl	8001042 <AS7343_write>
	AS7343_write(handle, AS7343_ASTEP_MSB, (uint8_t)(ASTEP>>8));
 80015d4:	8abb      	ldrh	r3, [r7, #20]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	21d5      	movs	r1, #213	; 0xd5
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff fd2e 	bl	8001042 <AS7343_write>
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40868000 	.word	0x40868000
 80015f4:	b60b60b7 	.word	0xb60b60b7

080015f8 <AS7343_get_TINT>:

double AS7343_get_TINT(as7343_handle_t *handle) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	uint16_t ASTEP = (AS7343_read(handle, AS7343_ASTEP_MSB) << 8) | (AS7343_read(handle, AS7343_ASTEP_LSB));
 8001600:	21d5      	movs	r1, #213	; 0xd5
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fd00 	bl	8001008 <AS7343_read>
 8001608:	4603      	mov	r3, r0
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21c      	sxth	r4, r3
 800160e:	21d4      	movs	r1, #212	; 0xd4
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fcf9 	bl	8001008 <AS7343_read>
 8001616:	4603      	mov	r3, r0
 8001618:	b21b      	sxth	r3, r3
 800161a:	4323      	orrs	r3, r4
 800161c:	b21b      	sxth	r3, r3
 800161e:	82fb      	strh	r3, [r7, #22]
	uint8_t ATIME = AS7343_read(handle, AS7343_ATIME);
 8001620:	2181      	movs	r1, #129	; 0x81
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fcf0 	bl	8001008 <AS7343_read>
 8001628:	4603      	mov	r3, r0
 800162a:	757b      	strb	r3, [r7, #21]

	double TINT = (ASTEP+1)*(ATIME+1)*(2.0/720.0);
 800162c:	8afb      	ldrh	r3, [r7, #22]
 800162e:	3301      	adds	r3, #1
 8001630:	7d7a      	ldrb	r2, [r7, #21]
 8001632:	3201      	adds	r2, #1
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff7b 	bl	8000534 <__aeabi_i2d>
 800163e:	a30a      	add	r3, pc, #40	; (adr r3, 8001668 <AS7343_get_TINT+0x70>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe ffe0 	bl	8000608 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return TINT;
 8001650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001654:	ec43 2b17 	vmov	d7, r2, r3
}
 8001658:	eeb0 0a47 	vmov.f32	s0, s14
 800165c:	eef0 0a67 	vmov.f32	s1, s15
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd90      	pop	{r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	16c16c17 	.word	0x16c16c17
 800166c:	3f66c16c 	.word	0x3f66c16c

08001670 <AS7343_optimizer>:

void AS7343_optimizer(as7343_handle_t *handle, float max_TINT) {
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b094      	sub	sp, #80	; 0x50
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	ed87 0a00 	vstr	s0, [r7]
	uint8_t currentGain = 12;
 800167c:	230c      	movs	r3, #12
 800167e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	uint16_t FSR = 65535;
 8001682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001686:	873b      	strh	r3, [r7, #56]	; 0x38
	float TINT = 182.0;
 8001688:	4bc9      	ldr	r3, [pc, #804]	; (80019b0 <AS7343_optimizer+0x340>)
 800168a:	64bb      	str	r3, [r7, #72]	; 0x48
	AS7343_set_TINT(handle, TINT);
 800168c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800168e:	f7fe ff63 	bl	8000558 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	ec43 2b10 	vmov	d0, r2, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff2c 	bl	80014f8 <AS7343_set_TINT>

	uint16_t max_count;
	uint16_t min_count;

	while(true) {
		max_count = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		min_count = 0xffff;
 80016a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		AS7343_set_gain(handle, currentGain);
 80016ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff01 	bl	80014bc <AS7343_set_gain>

		uint16_t data[18];
		AS7343_enable_spectral_measurement(handle, true);
 80016ba:	2101      	movs	r1, #1
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fd1a 	bl	80010f6 <AS7343_enable_spectral_measurement>
		AS7343_read_18(handle, data);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fece 	bl	800146a <AS7343_read_18>
		AS7343_enable_spectral_measurement(handle, false);
 80016ce:	2100      	movs	r1, #0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fd10 	bl	80010f6 <AS7343_enable_spectral_measurement>

		for(uint8_t i = 0; i<18; i++){
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80016dc:	e03a      	b.n	8001754 <AS7343_optimizer+0xe4>
			if(i == 5 || i == 11 || i == 17) {
 80016de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d030      	beq.n	8001748 <AS7343_optimizer+0xd8>
 80016e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80016ea:	2b0b      	cmp	r3, #11
 80016ec:	d02c      	beq.n	8001748 <AS7343_optimizer+0xd8>
 80016ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80016f2:	2b11      	cmp	r3, #17
 80016f4:	d028      	beq.n	8001748 <AS7343_optimizer+0xd8>
				continue;
			}
			if(data[i]>max_count) {
 80016f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	3350      	adds	r3, #80	; 0x50
 80016fe:	443b      	add	r3, r7
 8001700:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001704:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001708:	429a      	cmp	r2, r3
 800170a:	d208      	bcs.n	800171e <AS7343_optimizer+0xae>
				max_count = data[i];
 800170c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	3350      	adds	r3, #80	; 0x50
 8001714:	443b      	add	r3, r7
 8001716:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 800171a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			}
			if(data[i]<min_count) {
 800171e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	3350      	adds	r3, #80	; 0x50
 8001726:	443b      	add	r3, r7
 8001728:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 800172c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001730:	429a      	cmp	r2, r3
 8001732:	d90a      	bls.n	800174a <AS7343_optimizer+0xda>
				min_count = data[i];
 8001734:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	3350      	adds	r3, #80	; 0x50
 800173c:	443b      	add	r3, r7
 800173e:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8001742:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001746:	e000      	b.n	800174a <AS7343_optimizer+0xda>
				continue;
 8001748:	bf00      	nop
		for(uint8_t i = 0; i<18; i++){
 800174a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800174e:	3301      	adds	r3, #1
 8001750:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001754:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001758:	2b11      	cmp	r3, #17
 800175a:	d9c0      	bls.n	80016de <AS7343_optimizer+0x6e>
			}
		}

		if (max_count > 0xE665) {
 800175c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001760:	f24e 6265 	movw	r2, #58981	; 0xe665
 8001764:	4293      	cmp	r3, r2
 8001766:	d909      	bls.n	800177c <AS7343_optimizer+0x10c>
			if(currentGain == 0){
 8001768:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <AS7343_optimizer+0x128>
				//TODO: send optimizer failed due to saturation message
				break;
			}
			currentGain -= 1;
 8001770:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001774:	3b01      	subs	r3, #1
 8001776:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			continue;
 800177a:	e01d      	b.n	80017b8 <AS7343_optimizer+0x148>
		}

		else if (min_count == 0) {
 800177c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <AS7343_optimizer+0x12c>
			if(currentGain == 12){
 8001784:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001788:	2b0c      	cmp	r3, #12
 800178a:	d009      	beq.n	80017a0 <AS7343_optimizer+0x130>
				//TODO: send optimizer failed due to saturation message
				break;
			}
			currentGain += 1;
 800178c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001790:	3301      	adds	r3, #1
 8001792:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			continue;
 8001796:	e00f      	b.n	80017b8 <AS7343_optimizer+0x148>
				break;
 8001798:	bf00      	nop
 800179a:	e002      	b.n	80017a2 <AS7343_optimizer+0x132>
		}

		else {

			break;
 800179c:	bf00      	nop
 800179e:	e000      	b.n	80017a2 <AS7343_optimizer+0x132>
				break;
 80017a0:	bf00      	nop
		}
	}

	float counts_expected = (float) max_count;
 80017a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float multiplier = 0.90;
 80017b2:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <AS7343_optimizer+0x344>)
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b6:	e000      	b.n	80017ba <AS7343_optimizer+0x14a>
	while(true) {
 80017b8:	e772      	b.n	80016a0 <AS7343_optimizer+0x30>

	while(true) {
		//set to loop once only, might change the algorithm in the future
		max_count = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		float exp = (multiplier*(float)FSR-counts_expected);
 80017c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		if (exp<0){
 80017de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	f100 80b9 	bmi.w	8001960 <AS7343_optimizer+0x2f0>
			break;
		}
		float temp_TINT = TINT + pow(2, log((multiplier*(float)FSR-counts_expected))/log(2))*(2.0/720.0);
 80017ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017f0:	f7fe feb2 	bl	8000558 <__aeabi_f2d>
 80017f4:	4604      	mov	r4, r0
 80017f6:	460d      	mov	r5, r1
 80017f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001802:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800180e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001812:	ee17 0a90 	vmov	r0, s15
 8001816:	f7fe fe9f 	bl	8000558 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ec43 2b10 	vmov	d0, r2, r3
 8001822:	f00a faf9 	bl	800be18 <log>
 8001826:	ec51 0b10 	vmov	r0, r1, d0
 800182a:	a359      	add	r3, pc, #356	; (adr r3, 8001990 <AS7343_optimizer+0x320>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7ff f814 	bl	800085c <__aeabi_ddiv>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	ec43 2b17 	vmov	d7, r2, r3
 800183c:	eeb0 1a47 	vmov.f32	s2, s14
 8001840:	eef0 1a67 	vmov.f32	s3, s15
 8001844:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8001998 <AS7343_optimizer+0x328>
 8001848:	f00a fb24 	bl	800be94 <pow>
 800184c:	ec51 0b10 	vmov	r0, r1, d0
 8001850:	a353      	add	r3, pc, #332	; (adr r3, 80019a0 <AS7343_optimizer+0x330>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fed7 	bl	8000608 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4620      	mov	r0, r4
 8001860:	4629      	mov	r1, r5
 8001862:	f7fe fd1b 	bl	800029c <__adddf3>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f9c3 	bl	8000bf8 <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(temp_TINT>max_TINT){
 8001876:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800187a:	edd7 7a00 	vldr	s15, [r7]
 800187e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	dc6d      	bgt.n	8001964 <AS7343_optimizer+0x2f4>
			break;
		}

		AS7343_set_TINT(handle, temp_TINT);
 8001888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800188a:	f7fe fe65 	bl	8000558 <__aeabi_f2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b10 	vmov	d0, r2, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fe2e 	bl	80014f8 <AS7343_set_TINT>

		uint16_t data[18];
		AS7343_enable_spectral_measurement(handle, true);
 800189c:	2101      	movs	r1, #1
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fc29 	bl	80010f6 <AS7343_enable_spectral_measurement>
		AS7343_read_18(handle, data);
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	4619      	mov	r1, r3
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fddd 	bl	800146a <AS7343_read_18>
		AS7343_enable_spectral_measurement(handle, false);
 80018b0:	2100      	movs	r1, #0
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fc1f 	bl	80010f6 <AS7343_enable_spectral_measurement>

		for(uint8_t i = 0; i<18; i++){
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80018be:	e026      	b.n	800190e <AS7343_optimizer+0x29e>
			if(i == 5 || i == 11 || i == 17) {
 80018c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d01c      	beq.n	8001902 <AS7343_optimizer+0x292>
 80018c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018cc:	2b0b      	cmp	r3, #11
 80018ce:	d018      	beq.n	8001902 <AS7343_optimizer+0x292>
 80018d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018d4:	2b11      	cmp	r3, #17
 80018d6:	d014      	beq.n	8001902 <AS7343_optimizer+0x292>
				continue;
			}
			if(data[i]>max_count) {
 80018d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	3350      	adds	r3, #80	; 0x50
 80018e0:	443b      	add	r3, r7
 80018e2:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 80018e6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20a      	bcs.n	8001904 <AS7343_optimizer+0x294>
				max_count = data[i];
 80018ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	3350      	adds	r3, #80	; 0x50
 80018f6:	443b      	add	r3, r7
 80018f8:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 80018fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001900:	e000      	b.n	8001904 <AS7343_optimizer+0x294>
				continue;
 8001902:	bf00      	nop
		for(uint8_t i = 0; i<18; i++){
 8001904:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001908:	3301      	adds	r3, #1
 800190a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800190e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001912:	2b11      	cmp	r3, #17
 8001914:	d9d4      	bls.n	80018c0 <AS7343_optimizer+0x250>
			}
		}

		if (max_count >= multiplier*0xFFEE) {
 8001916:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001922:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001926:	eddf 6a24 	vldr	s13, [pc, #144]	; 80019b8 <AS7343_optimizer+0x348>
 800192a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800192e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	db10      	blt.n	800195a <AS7343_optimizer+0x2ea>
			multiplier = multiplier - 0.05;
 8001938:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800193a:	f7fe fe0d 	bl	8000558 <__aeabi_f2d>
 800193e:	a31a      	add	r3, pc, #104	; (adr r3, 80019a8 <AS7343_optimizer+0x338>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe fca8 	bl	8000298 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f952 	bl	8000bf8 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(true) {
 8001958:	e72f      	b.n	80017ba <AS7343_optimizer+0x14a>
			continue;
		}
		else {
			TINT = temp_TINT;
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;
 800195e:	e002      	b.n	8001966 <AS7343_optimizer+0x2f6>
			break;
 8001960:	bf00      	nop
 8001962:	e000      	b.n	8001966 <AS7343_optimizer+0x2f6>
			break;
 8001964:	bf00      	nop
	}
	AS7343_set_gain(handle, currentGain);
 8001966:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fda5 	bl	80014bc <AS7343_set_gain>
	AS7343_set_TINT(handle, TINT);
 8001972:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001974:	f7fe fdf0 	bl	8000558 <__aeabi_f2d>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	ec43 2b10 	vmov	d0, r2, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fdb9 	bl	80014f8 <AS7343_set_TINT>

}
 8001986:	bf00      	nop
 8001988:	3750      	adds	r7, #80	; 0x50
 800198a:	46bd      	mov	sp, r7
 800198c:	bdb0      	pop	{r4, r5, r7, pc}
 800198e:	bf00      	nop
 8001990:	fefa39ef 	.word	0xfefa39ef
 8001994:	3fe62e42 	.word	0x3fe62e42
 8001998:	00000000 	.word	0x00000000
 800199c:	40000000 	.word	0x40000000
 80019a0:	16c16c17 	.word	0x16c16c17
 80019a4:	3f66c16c 	.word	0x3f66c16c
 80019a8:	9999999a 	.word	0x9999999a
 80019ac:	3fa99999 	.word	0x3fa99999
 80019b0:	43360000 	.word	0x43360000
 80019b4:	3f666666 	.word	0x3f666666
 80019b8:	477fee00 	.word	0x477fee00

080019bc <PASCO2_read>:
//	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
//
//
//}

uint8_t PASCO2_read(pasco2_handle_t *handle, uint8_t regAddress){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af04      	add	r7, sp, #16
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buffer;

	HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address<<1, regAddress, 1, &rx_buffer, 1, 10);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	889b      	ldrh	r3, [r3, #4]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	b299      	uxth	r1, r3
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	230a      	movs	r3, #10
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	2301      	movs	r3, #1
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	f107 030f 	add.w	r3, r7, #15
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2301      	movs	r3, #1
 80019e8:	f003 f916 	bl	8004c18 <HAL_I2C_Mem_Read>

	return rx_buffer;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <PASCO2_write>:

bool PASCO2_write(pasco2_handle_t *handle, uint8_t regAddress, uint8_t data){
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af04      	add	r7, sp, #16
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	70fb      	strb	r3, [r7, #3]
 8001a02:	4613      	mov	r3, r2
 8001a04:	70bb      	strb	r3, [r7, #2]
	if(HAL_I2C_Mem_Write(handle->i2c_handle, handle->device_address<<1, regAddress, 1, &data, 1, 10) == HAL_OK) {
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	b299      	uxth	r1, r3
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	230a      	movs	r3, #10
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	1cbb      	adds	r3, r7, #2
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2301      	movs	r3, #1
 8001a24:	f002 fffe 	bl	8004a24 <HAL_I2C_Mem_Write>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <PASCO2_write+0x3c>
		return true;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <PASCO2_write+0x3e>
	}
	return false;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <PASCO2_init>:

void PASCO2_init(pasco2_handle_t *handle) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	//set pressure
	PASCO2_write(handle, PASCO2_PRESS_REF_H, 0x03);
 8001a44:	2203      	movs	r2, #3
 8001a46:	210b      	movs	r1, #11
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffd4 	bl	80019f6 <PASCO2_write>
	PASCO2_write(handle, PASCO2_PRESS_REF_L, 0xF5);
 8001a4e:	22f5      	movs	r2, #245	; 0xf5
 8001a50:	210c      	movs	r1, #12
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffcf 	bl	80019f6 <PASCO2_write>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <PASCO2_get_ppm>:
	else {
		return false;
	}
}

uint16_t PASCO2_get_ppm(pasco2_handle_t *handle) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

	PASCO2_write(handle, PASCO2_MEAS_CFG, 0x01);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ffc2 	bl	80019f6 <PASCO2_write>

	HAL_Delay(1000);
 8001a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a76:	f001 fe0d 	bl	8003694 <HAL_Delay>
	uint8_t ppm_h = PASCO2_read(handle, PASCO2_CO2PPM_H);
 8001a7a:	2105      	movs	r1, #5
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff9d 	bl	80019bc <PASCO2_read>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001a86:	200a      	movs	r0, #10
 8001a88:	f001 fe04 	bl	8003694 <HAL_Delay>
	uint8_t ppm_l = PASCO2_read(handle, PASCO2_CO2PPM_L);
 8001a8c:	2106      	movs	r1, #6
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ff94 	bl	80019bc <PASCO2_read>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73bb      	strb	r3, [r7, #14]

	uint16_t ppm = (((uint16_t)ppm_h)<<8) | ppm_l;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	7bbb      	ldrb	r3, [r7, #14]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	81bb      	strh	r3, [r7, #12]

	return ppm;
 8001aa8:	89bb      	ldrh	r3, [r7, #12]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <PCA9548a_Select>:
 */

#include "main.h"
#include "PCA9548a.h"

void PCA9548a_Select(pca9548a_handle_t *handle, uint8_t channel) {
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af02      	add	r7, sp, #8
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
	//Select Mux channel
	uint8_t data = 1 << channel;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1, &data, 1, 10);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	889b      	ldrh	r3, [r3, #4]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	b299      	uxth	r1, r3
 8001ad6:	f107 020f 	add.w	r2, r7, #15
 8001ada:	230a      	movs	r3, #10
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f002 fc7c 	bl	80043dc <HAL_I2C_Master_Transmit>
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <VEML6031_read>:
#include "main.h"
#include "VEML6031.h"

#include <assert.h>

uint8_t VEML6031_read(veml6031_handle_t* handle, uint8_t reg_address) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af04      	add	r7, sp, #16
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buffer;

	HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address<<1, reg_address, 1, &rx_buffer, 1, 10);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	889b      	ldrh	r3, [r3, #4]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	b299      	uxth	r1, r3
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	230a      	movs	r3, #10
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	f107 030f 	add.w	r3, r7, #15
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	f003 f87e 	bl	8004c18 <HAL_I2C_Mem_Read>

	return rx_buffer;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <VEML6031_write>:

bool VEML6031_write(veml6031_handle_t* handle, uint8_t reg_address, uint8_t data) {
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af04      	add	r7, sp, #16
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
 8001b32:	4613      	mov	r3, r2
 8001b34:	70bb      	strb	r3, [r7, #2]
	if(HAL_I2C_Mem_Write(handle->i2c_handle, handle->device_address<<1, reg_address, 1, &data, 1, 10) == HAL_OK) {
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	889b      	ldrh	r3, [r3, #4]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	b299      	uxth	r1, r3
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	230a      	movs	r3, #10
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	1cbb      	adds	r3, r7, #2
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2301      	movs	r3, #1
 8001b54:	f002 ff66 	bl	8004a24 <HAL_I2C_Mem_Write>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <VEML6031_write+0x3c>
		return true;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <VEML6031_write+0x3e>
	}
	return false;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <VEML6031_optimizer>:

float VEML6031_optimizer(veml6031_handle_t* handle) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	float resolution = 0.0034;  // resolution with TINT = 400ms and gain = 2
 8001b74:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <VEML6031_optimizer+0xfc>)
 8001b76:	617b      	str	r3, [r7, #20]
	uint8_t current_TINT = 0x07;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	74fb      	strb	r3, [r7, #19]
	uint8_t current_GAIN = 0x19;
 8001b7c:	2319      	movs	r3, #25
 8001b7e:	74bb      	strb	r3, [r7, #18]
	bool max_saturation = false;
 8001b80:	2300      	movs	r3, #0
 8001b82:	747b      	strb	r3, [r7, #17]
	VEML6031_write(handle, ALS_CONF_0, 0x71);
 8001b84:	2271      	movs	r2, #113	; 0x71
 8001b86:	2100      	movs	r1, #0
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ffcc 	bl	8001b26 <VEML6031_write>
	VEML6031_write(handle, ALS_CONF_1, 0x88);
 8001b8e:	2288      	movs	r2, #136	; 0x88
 8001b90:	2101      	movs	r1, #1
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffc7 	bl	8001b26 <VEML6031_write>

	uint8_t conf0 = VEML6031_read(handle, ALS_CONF_0) & 0x8f;
 8001b98:	2100      	movs	r1, #0
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa6 	bl	8001aec <VEML6031_read>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba6:	743b      	strb	r3, [r7, #16]
	uint8_t conf1 = VEML6031_read(handle, ALS_CONF_1) & 0xe7;
 8001ba8:	2101      	movs	r1, #1
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff9e 	bl	8001aec <VEML6031_read>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f023 0318 	bic.w	r3, r3, #24
 8001bb6:	73fb      	strb	r3, [r7, #15]

	while(true){
		uint16_t data = VEML6031_read_light(handle);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f857 	bl	8001c6c <VEML6031_read_light>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	81bb      	strh	r3, [r7, #12]

		if(data>0.8*0xFFFF) { //change resolution if data is close to saturation
 8001bc2:	89bb      	ldrh	r3, [r7, #12]
 8001bc4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d944      	bls.n	8001c56 <VEML6031_optimizer+0xea>
			//change gain
			if(current_TINT == 0x1) {
 8001bcc:	7cfb      	ldrb	r3, [r7, #19]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d12a      	bne.n	8001c28 <VEML6031_optimizer+0xbc>
				if(current_GAIN == 0x3) { //min gain and TINT reached
 8001bd2:	7cbb      	ldrb	r3, [r7, #18]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d113      	bne.n	8001c00 <VEML6031_optimizer+0x94>
					//change PD
					if(max_saturation) {
 8001bd8:	7c7b      	ldrb	r3, [r7, #17]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <VEML6031_optimizer+0x78>
						return 0;
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e03a      	b.n	8001c5a <VEML6031_optimizer+0xee>
					}
					max_saturation = true;
 8001be4:	2301      	movs	r3, #1
 8001be6:	747b      	strb	r3, [r7, #17]
					current_GAIN = 0x32;
 8001be8:	2332      	movs	r3, #50	; 0x32
 8001bea:	74bb      	strb	r3, [r7, #18]
					VEML6031_write(handle, ALS_CONF_1, conf1 | 0x4);
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff94 	bl	8001b26 <VEML6031_write>
 8001bfe:	e023      	b.n	8001c48 <VEML6031_optimizer+0xdc>
				}
				else {
					current_GAIN = current_GAIN>>1;
 8001c00:	7cbb      	ldrb	r3, [r7, #18]
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	74bb      	strb	r3, [r7, #18]
					VEML6031_write(handle, ALS_CONF_1, conf1 | ((current_GAIN & 0x03)<<3));
 8001c06:	7cbb      	ldrb	r3, [r7, #18]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	f003 0318 	and.w	r3, r3, #24
 8001c10:	b25a      	sxtb	r2, r3
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2101      	movs	r1, #1
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff80 	bl	8001b26 <VEML6031_write>
 8001c26:	e00f      	b.n	8001c48 <VEML6031_optimizer+0xdc>
				}
			}
			//change integration time
			else {
				current_TINT -= 0x1; //change TINT
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	74fb      	strb	r3, [r7, #19]
				VEML6031_write(handle, ALS_CONF_0, conf0 | current_TINT << 4);
 8001c2e:	7cfb      	ldrb	r3, [r7, #19]
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ff6f 	bl	8001b26 <VEML6031_write>
			}
			resolution *= 2.0;
 8001c48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c50:	edc7 7a05 	vstr	s15, [r7, #20]
	while(true){
 8001c54:	e7b0      	b.n	8001bb8 <VEML6031_optimizer+0x4c>
		}
		else {
			break;
 8001c56:	bf00      	nop
		}
	}

	return resolution;
 8001c58:	697b      	ldr	r3, [r7, #20]
}
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	3b5ed289 	.word	0x3b5ed289

08001c6c <VEML6031_read_light>:

uint16_t VEML6031_read_light(veml6031_handle_t* handle) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
//	VEML6031_write(handle, ALS_CONF_0, 0x71);
//	VEML6031_write(handle, ALS_CONF_1, 0x88);
	uint8_t conf0 = VEML6031_read(handle, ALS_CONF_0);
 8001c74:	2100      	movs	r1, #0
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ff38 	bl	8001aec <VEML6031_read>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73fb      	strb	r3, [r7, #15]
	uint8_t conf1 = VEML6031_read(handle, ALS_CONF_1);
 8001c80:	2101      	movs	r1, #1
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ff32 	bl	8001aec <VEML6031_read>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73bb      	strb	r3, [r7, #14]

	//Trigger reading
	VEML6031_write(handle, ALS_CONF_0, conf0 & 0xFE);
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	2100      	movs	r1, #0
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff44 	bl	8001b26 <VEML6031_write>
	VEML6031_write(handle, ALS_CONF_1, conf1^0x81);
 8001c9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ca0:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2101      	movs	r1, #1
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff3a 	bl	8001b26 <VEML6031_write>

//	VEML6031_write(handle, ALS_CONF_0, conf0 | 0x04);
	HAL_Delay(500);
 8001cb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cb6:	f001 fced 	bl	8003694 <HAL_Delay>


	uint8_t data_L = VEML6031_read(handle, ALS_DATA_L);
 8001cba:	2110      	movs	r1, #16
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff15 	bl	8001aec <VEML6031_read>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	737b      	strb	r3, [r7, #13]
	uint8_t data_H = VEML6031_read(handle, ALS_DATA_H);
 8001cc6:	2111      	movs	r1, #17
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff0f 	bl	8001aec <VEML6031_read>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	733b      	strb	r3, [r7, #12]

	uint16_t light_intensity = (((uint16_t)data_H)<<8) | data_L;
 8001cd2:	7b3b      	ldrb	r3, [r7, #12]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	7b7b      	ldrb	r3, [r7, #13]
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	817b      	strh	r3, [r7, #10]
	//Sleep
//	VEML6031_write(handle, ALS_CONF_0, conf0 | 0x01);
//	VEML6031_write(handle, ALS_CONF_1, conf1^0x81);
//	HAL_Delay(100);

	return light_intensity;
 8001ce2:	897b      	ldrh	r3, [r7, #10]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <scan_I2C_bus>:
bool MLX90614_counter_timeout_flag = false;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void scan_I2C_bus(I2C_HandleTypeDef* bus, uint8_t busNo) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	char buf[20];

	sprintf(buf, "Scanning Bus %d\r\n", busNo);
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4922      	ldr	r1, [pc, #136]	; (8001d88 <scan_I2C_bus+0x9c>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f006 fc33 	bl	800856c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 100);
 8001d06:	f107 010c 	add.w	r1, r7, #12
 8001d0a:	2364      	movs	r3, #100	; 0x64
 8001d0c:	2214      	movs	r2, #20
 8001d0e:	481f      	ldr	r0, [pc, #124]	; (8001d8c <scan_I2C_bus+0xa0>)
 8001d10:	f005 f86d 	bl	8006dee <HAL_UART_Transmit>
	memset(buf, 0, sizeof(buf));
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2214      	movs	r2, #20
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f005 fc43 	bl	80075a8 <memset>

	for (int i = 0; i<0x7F; i++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	e027      	b.n	8001d78 <scan_I2C_bus+0x8c>
	  {
		  result = HAL_I2C_IsDeviceReady(bus, (uint16_t) (i<<1), 3, 5);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	b299      	uxth	r1, r3
 8001d30:	2305      	movs	r3, #5
 8001d32:	2203      	movs	r2, #3
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f003 f995 	bl	8005064 <HAL_I2C_IsDeviceReady>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//		  {
//			  sprintf(buf, "--\r\n");
//			  HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 100);
//			  memset(buf, 0, sizeof(buf));
//		  }
		  if (result == HAL_OK)
 8001d40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d114      	bne.n	8001d72 <scan_I2C_bus+0x86>
		  {
			  sprintf(buf, "0x%X\r\n", i);
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4e:	4910      	ldr	r1, [pc, #64]	; (8001d90 <scan_I2C_bus+0xa4>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f006 fc0b 	bl	800856c <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 100);
 8001d56:	f107 010c 	add.w	r1, r7, #12
 8001d5a:	2364      	movs	r3, #100	; 0x64
 8001d5c:	2214      	movs	r2, #20
 8001d5e:	480b      	ldr	r0, [pc, #44]	; (8001d8c <scan_I2C_bus+0xa0>)
 8001d60:	f005 f845 	bl	8006dee <HAL_UART_Transmit>
			  memset(buf, 0, sizeof(buf));
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	2214      	movs	r2, #20
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 fc1b 	bl	80075a8 <memset>
	for (int i = 0; i<0x7F; i++)
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	3301      	adds	r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	2b7e      	cmp	r3, #126	; 0x7e
 8001d7c:	ddd4      	ble.n	8001d28 <scan_I2C_bus+0x3c>
		  }
	  }
}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	0800d060 	.word	0x0800d060
 8001d8c:	2000033c 	.word	0x2000033c
 8001d90:	0800d074 	.word	0x0800d074

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	b0b0      	sub	sp, #192	; 0xc0
 8001d98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9a:	f001 fc09 	bl	80035b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9e:	f000 fb3b 	bl	8002418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da2:	f000 fce7 	bl	8002774 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001da6:	f000 fbe7 	bl	8002578 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001daa:	f000 fc13 	bl	80025d4 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001dae:	f000 fc8d 	bl	80026cc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001db2:	f000 fc3d 	bl	8002630 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001db6:	f000 fb8d 	bl	80024d4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001dba:	f000 fcb1 	bl	8002720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  huart2 = huart1;
 8001dbe:	4a75      	ldr	r2, [pc, #468]	; (8001f94 <main+0x200>)
 8001dc0:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <main+0x204>)
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	2344      	movs	r3, #68	; 0x44
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f005 fbdf 	bl	800758c <memcpy>

  //I2C Mux handler
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4872      	ldr	r0, [pc, #456]	; (8001f9c <main+0x208>)
 8001dd4:	f002 f98a 	bl	80040ec <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001dd8:	2064      	movs	r0, #100	; 0x64
 8001dda:	f001 fc5b 	bl	8003694 <HAL_Delay>
  pca9548a.i2c_handle = &hi2c1;
 8001dde:	4b70      	ldr	r3, [pc, #448]	; (8001fa0 <main+0x20c>)
 8001de0:	4a70      	ldr	r2, [pc, #448]	; (8001fa4 <main+0x210>)
 8001de2:	601a      	str	r2, [r3, #0]
  pca9548a.device_address = (uint16_t)PCA9548_ADDR0;
 8001de4:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <main+0x20c>)
 8001de6:	2270      	movs	r2, #112	; 0x70
 8001de8:	809a      	strh	r2, [r3, #4]
  PCA9548a_Select(&pca9548a, 0);
 8001dea:	2100      	movs	r1, #0
 8001dec:	486c      	ldr	r0, [pc, #432]	; (8001fa0 <main+0x20c>)
 8001dee:	f7ff fe60 	bl	8001ab2 <PCA9548a_Select>

  //SHT handler
  sht31d.i2c_handle = &hi2c3;
 8001df2:	4b6d      	ldr	r3, [pc, #436]	; (8001fa8 <main+0x214>)
 8001df4:	4a6d      	ldr	r2, [pc, #436]	; (8001fac <main+0x218>)
 8001df6:	601a      	str	r2, [r3, #0]
  sht31d.device_address = (uint16_t)SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW;
 8001df8:	4b6b      	ldr	r3, [pc, #428]	; (8001fa8 <main+0x214>)
 8001dfa:	2244      	movs	r2, #68	; 0x44
 8001dfc:	809a      	strh	r2, [r3, #4]
  sht3x_init(&sht31d);
 8001dfe:	486a      	ldr	r0, [pc, #424]	; (8001fa8 <main+0x214>)
 8001e00:	f001 f834 	bl	8002e6c <sht3x_init>

  //PASCO2 handler
  pasco2.i2c_handle = &hi2c3;
 8001e04:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <main+0x21c>)
 8001e06:	4a69      	ldr	r2, [pc, #420]	; (8001fac <main+0x218>)
 8001e08:	601a      	str	r2, [r3, #0]
  pasco2.device_address = (uint16_t)PASCO2_ADDR;
 8001e0a:	4b69      	ldr	r3, [pc, #420]	; (8001fb0 <main+0x21c>)
 8001e0c:	2228      	movs	r2, #40	; 0x28
 8001e0e:	809a      	strh	r2, [r3, #4]
  PASCO2_init(&pasco2);
 8001e10:	4867      	ldr	r0, [pc, #412]	; (8001fb0 <main+0x21c>)
 8001e12:	f7ff fe13 	bl	8001a3c <PASCO2_init>

  //VEML6031 handler
  veml6031.i2c_handle = &hi2c3;
 8001e16:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <main+0x220>)
 8001e18:	4a64      	ldr	r2, [pc, #400]	; (8001fac <main+0x218>)
 8001e1a:	601a      	str	r2, [r3, #0]
  veml6031.device_address = VEML6031_I2C_ADDRESS;
 8001e1c:	4b65      	ldr	r3, [pc, #404]	; (8001fb4 <main+0x220>)
 8001e1e:	2229      	movs	r2, #41	; 0x29
 8001e20:	809a      	strh	r2, [r3, #4]

  //VEML6031 handler
  as7343.i2c_handle = &hi2c3;
 8001e22:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <main+0x224>)
 8001e24:	4a61      	ldr	r2, [pc, #388]	; (8001fac <main+0x218>)
 8001e26:	601a      	str	r2, [r3, #0]
  as7343.device_address = AS7343_ADDR_A;
 8001e28:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <main+0x224>)
 8001e2a:	2239      	movs	r2, #57	; 0x39
 8001e2c:	809a      	strh	r2, [r3, #4]
  AS7343_power(&as7343, true);
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4861      	ldr	r0, [pc, #388]	; (8001fb8 <main+0x224>)
 8001e32:	f7ff f929 	bl	8001088 <AS7343_power>
  AS7343_set_cycle(&as7343, 3);
 8001e36:	2103      	movs	r1, #3
 8001e38:	485f      	ldr	r0, [pc, #380]	; (8001fb8 <main+0x224>)
 8001e3a:	f7ff f972 	bl	8001122 <AS7343_set_cycle>
  AS7343_direct_config_3_chain(&as7343);
 8001e3e:	485e      	ldr	r0, [pc, #376]	; (8001fb8 <main+0x224>)
 8001e40:	f7ff f981 	bl	8001146 <AS7343_direct_config_3_chain>

  //MLX90614 handler
  MLX90614_Init(&hi2c1);
 8001e44:	4857      	ldr	r0, [pc, #348]	; (8001fa4 <main+0x210>)
 8001e46:	f000 fd99 	bl	800297c <MLX90614_Init>

  uint16_t as7343_channels[18];

  uint32_t uart_buf_len;
  char uart_buf[100];
  HAL_Delay(100);
 8001e4a:	2064      	movs	r0, #100	; 0x64
 8001e4c:	f001 fc22 	bl	8003694 <HAL_Delay>

  scan_I2C_bus(&hi2c1, 1);
 8001e50:	2101      	movs	r1, #1
 8001e52:	4854      	ldr	r0, [pc, #336]	; (8001fa4 <main+0x210>)
 8001e54:	f7ff ff4a 	bl	8001cec <scan_I2C_bus>
  scan_I2C_bus(&hi2c3, 3);
 8001e58:	2103      	movs	r1, #3
 8001e5a:	4854      	ldr	r0, [pc, #336]	; (8001fac <main+0x218>)
 8001e5c:	f7ff ff46 	bl	8001cec <scan_I2C_bus>

  HAL_TIM_Base_Start_IT(&htim3);
 8001e60:	4856      	ldr	r0, [pc, #344]	; (8001fbc <main+0x228>)
 8001e62:	f004 fb81 	bl	8006568 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
//	  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
//	  memset(uart_buf, 0, sizeof(uart_buf));

//	  PCA9548a_Select(&pca9548a, 1);

	  if(SHT31_counter_timeout_flag) {
 8001e6c:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <main+0x22c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d032      	beq.n	8001eda <main+0x146>
	  	//trigger SHT35 read

	  	SHT31_counter_timeout_flag = 0;
 8001e74:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <main+0x22c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]

	  	sht3x_read_temperature_and_humidity(&sht31d, &(sht31_temp), &(sht31_humidity) );
 8001e7a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e82:	4619      	mov	r1, r3
 8001e84:	4848      	ldr	r0, [pc, #288]	; (8001fa8 <main+0x214>)
 8001e86:	f001 f831 	bl	8002eec <sht3x_read_temperature_and_humidity>

	  	uart_buf_len = sprintf(uart_buf, "Temperature: %0.2f and Humidity: %.2f\r\n\n", sht31_temp, sht31_humidity);
 8001e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb62 	bl	8000558 <__aeabi_f2d>
 8001e94:	4604      	mov	r4, r0
 8001e96:	460d      	mov	r5, r1
 8001e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fb5b 	bl	8000558 <__aeabi_f2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	1d38      	adds	r0, r7, #4
 8001ea8:	e9cd 2300 	strd	r2, r3, [sp]
 8001eac:	4622      	mov	r2, r4
 8001eae:	462b      	mov	r3, r5
 8001eb0:	4944      	ldr	r1, [pc, #272]	; (8001fc4 <main+0x230>)
 8001eb2:	f006 fb5b 	bl	800856c <siprintf>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001ebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	1d39      	adds	r1, r7, #4
 8001ec4:	2364      	movs	r3, #100	; 0x64
 8001ec6:	4834      	ldr	r0, [pc, #208]	; (8001f98 <main+0x204>)
 8001ec8:	f004 ff91 	bl	8006dee <HAL_UART_Transmit>
	  	memset(uart_buf, 0, sizeof(uart_buf));
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2264      	movs	r2, #100	; 0x64
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f005 fb68 	bl	80075a8 <memset>
 8001ed8:	e236      	b.n	8002348 <main+0x5b4>
	  }

	  else if(PASCO2_counter_timeout_flag) {
 8001eda:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <main+0x234>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d021      	beq.n	8001f26 <main+0x192>
	  	//trigger PASCO2 read

	  	PASCO2_counter_timeout_flag = 0;
 8001ee2:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <main+0x234>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]

		co2_ppm = PASCO2_get_ppm(&pasco2);
 8001ee8:	4831      	ldr	r0, [pc, #196]	; (8001fb0 <main+0x21c>)
 8001eea:	f7ff fdb9 	bl	8001a60 <PASCO2_get_ppm>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

		uart_buf_len = sprintf(uart_buf, "CO2 Concentration (ppm): %d\r\n\n", co2_ppm);
 8001ef4:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	4934      	ldr	r1, [pc, #208]	; (8001fcc <main+0x238>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f006 fb35 	bl	800856c <siprintf>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001f08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	1d39      	adds	r1, r7, #4
 8001f10:	2364      	movs	r3, #100	; 0x64
 8001f12:	4820      	ldr	r0, [pc, #128]	; (8001f94 <main+0x200>)
 8001f14:	f004 ff6b 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2264      	movs	r2, #100	; 0x64
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f005 fb42 	bl	80075a8 <memset>
 8001f24:	e210      	b.n	8002348 <main+0x5b4>
	  }
	  else if(VEML6031_counter_timeout_flag) {
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <main+0x23c>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d054      	beq.n	8001fd8 <main+0x244>
	  	//trigger VEML6031 read

		VEML6031_counter_timeout_flag = 0;
 8001f2e:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <main+0x23c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]

		resolution = VEML6031_optimizer(&veml6031);
 8001f34:	481f      	ldr	r0, [pc, #124]	; (8001fb4 <main+0x220>)
 8001f36:	f7ff fe19 	bl	8001b6c <VEML6031_optimizer>
 8001f3a:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		lux = VEML6031_read_light(&veml6031)*resolution;
 8001f3e:	481d      	ldr	r0, [pc, #116]	; (8001fb4 <main+0x220>)
 8001f40:	f7ff fe94 	bl	8001c6c <VEML6031_read_light>
 8001f44:	4603      	mov	r3, r0
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f4e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f5a:	ee17 3a90 	vmov	r3, s15
 8001f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

		uart_buf_len = sprintf(uart_buf, "Light Intensity (lux): %d\r\n\n", lux);
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001f68:	491a      	ldr	r1, [pc, #104]	; (8001fd4 <main+0x240>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f006 fafe 	bl	800856c <siprintf>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001f76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	1d39      	adds	r1, r7, #4
 8001f7e:	2364      	movs	r3, #100	; 0x64
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <main+0x200>)
 8001f82:	f004 ff34 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2264      	movs	r2, #100	; 0x64
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f005 fb0b 	bl	80075a8 <memset>
 8001f92:	e1d9      	b.n	8002348 <main+0x5b4>
 8001f94:	20000380 	.word	0x20000380
 8001f98:	2000033c 	.word	0x2000033c
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	200003c4 	.word	0x200003c4
 8001fa4:	2000024c 	.word	0x2000024c
 8001fa8:	200003cc 	.word	0x200003cc
 8001fac:	200002a0 	.word	0x200002a0
 8001fb0:	200003d4 	.word	0x200003d4
 8001fb4:	200003dc 	.word	0x200003dc
 8001fb8:	200003e4 	.word	0x200003e4
 8001fbc:	200002f4 	.word	0x200002f4
 8001fc0:	200003ec 	.word	0x200003ec
 8001fc4:	0800d07c 	.word	0x0800d07c
 8001fc8:	200003ed 	.word	0x200003ed
 8001fcc:	0800d0a8 	.word	0x0800d0a8
 8001fd0:	200003ee 	.word	0x200003ee
 8001fd4:	0800d0c8 	.word	0x0800d0c8
	  }
	  else if(AS7343_counter_timeout_flag) {
 8001fd8:	4be0      	ldr	r3, [pc, #896]	; (800235c <main+0x5c8>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 81b3 	beq.w	8002348 <main+0x5b4>
	  	//trigger VEML6031 read

		AS7343_counter_timeout_flag = 0;
 8001fe2:	4bde      	ldr	r3, [pc, #888]	; (800235c <main+0x5c8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]

		AS7343_optimizer(&as7343, 1000.0);
 8001fe8:	ed9f 0add 	vldr	s0, [pc, #884]	; 8002360 <main+0x5cc>
 8001fec:	48dd      	ldr	r0, [pc, #884]	; (8002364 <main+0x5d0>)
 8001fee:	f7ff fb3f 	bl	8001670 <AS7343_optimizer>
		HAL_Delay(20);
 8001ff2:	2014      	movs	r0, #20
 8001ff4:	f001 fb4e 	bl	8003694 <HAL_Delay>
		AS7343_read_18(&as7343, as7343_channels);
 8001ff8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	48d9      	ldr	r0, [pc, #868]	; (8002364 <main+0x5d0>)
 8002000:	f7ff fa33 	bl	800146a <AS7343_read_18>

		uart_buf_len = sprintf(uart_buf, "AS7343 F1: 0x%x - 0d%d\r\n", as7343_channels[12], as7343_channels[12]);
 8002004:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002008:	461a      	mov	r2, r3
 800200a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800200e:	1d38      	adds	r0, r7, #4
 8002010:	49d5      	ldr	r1, [pc, #852]	; (8002368 <main+0x5d4>)
 8002012:	f006 faab 	bl	800856c <siprintf>
 8002016:	4603      	mov	r3, r0
 8002018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 800201c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002020:	b29a      	uxth	r2, r3
 8002022:	1d39      	adds	r1, r7, #4
 8002024:	2364      	movs	r3, #100	; 0x64
 8002026:	48d1      	ldr	r0, [pc, #836]	; (800236c <main+0x5d8>)
 8002028:	f004 fee1 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2264      	movs	r2, #100	; 0x64
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f005 fab8 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F2: 0x%x - 0d%d\r\n", as7343_channels[6], as7343_channels[6]);
 8002038:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800203c:	461a      	mov	r2, r3
 800203e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002042:	1d38      	adds	r0, r7, #4
 8002044:	49ca      	ldr	r1, [pc, #808]	; (8002370 <main+0x5dc>)
 8002046:	f006 fa91 	bl	800856c <siprintf>
 800204a:	4603      	mov	r3, r0
 800204c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 8002050:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002054:	b29a      	uxth	r2, r3
 8002056:	1d39      	adds	r1, r7, #4
 8002058:	2364      	movs	r3, #100	; 0x64
 800205a:	48c4      	ldr	r0, [pc, #784]	; (800236c <main+0x5d8>)
 800205c:	f004 fec7 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	2264      	movs	r2, #100	; 0x64
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f005 fa9e 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 FZ: 0x%x - 0d%d\r\n", as7343_channels[0], as7343_channels[0]);
 800206c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002070:	461a      	mov	r2, r3
 8002072:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002076:	1d38      	adds	r0, r7, #4
 8002078:	49be      	ldr	r1, [pc, #760]	; (8002374 <main+0x5e0>)
 800207a:	f006 fa77 	bl	800856c <siprintf>
 800207e:	4603      	mov	r3, r0
 8002080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 8002084:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002088:	b29a      	uxth	r2, r3
 800208a:	1d39      	adds	r1, r7, #4
 800208c:	2364      	movs	r3, #100	; 0x64
 800208e:	48b7      	ldr	r0, [pc, #732]	; (800236c <main+0x5d8>)
 8002090:	f004 fead 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2264      	movs	r2, #100	; 0x64
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f005 fa84 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F3: 0x%x - 0d%d\r\n", as7343_channels[7], as7343_channels[7]);
 80020a0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80020a4:	461a      	mov	r2, r3
 80020a6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80020aa:	1d38      	adds	r0, r7, #4
 80020ac:	49b2      	ldr	r1, [pc, #712]	; (8002378 <main+0x5e4>)
 80020ae:	f006 fa5d 	bl	800856c <siprintf>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 80020b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020bc:	b29a      	uxth	r2, r3
 80020be:	1d39      	adds	r1, r7, #4
 80020c0:	2364      	movs	r3, #100	; 0x64
 80020c2:	48aa      	ldr	r0, [pc, #680]	; (800236c <main+0x5d8>)
 80020c4:	f004 fe93 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2264      	movs	r2, #100	; 0x64
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 fa6a 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F4: 0x%x - 0d%d\r\n", as7343_channels[8], as7343_channels[8]);
 80020d4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80020d8:	461a      	mov	r2, r3
 80020da:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80020de:	1d38      	adds	r0, r7, #4
 80020e0:	49a6      	ldr	r1, [pc, #664]	; (800237c <main+0x5e8>)
 80020e2:	f006 fa43 	bl	800856c <siprintf>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 80020ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	1d39      	adds	r1, r7, #4
 80020f4:	2364      	movs	r3, #100	; 0x64
 80020f6:	489d      	ldr	r0, [pc, #628]	; (800236c <main+0x5d8>)
 80020f8:	f004 fe79 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2264      	movs	r2, #100	; 0x64
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f005 fa50 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 FY: 0x%x - 0d%d\r\n", as7343_channels[1], as7343_channels[1]);
 8002108:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800210c:	461a      	mov	r2, r3
 800210e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002112:	1d38      	adds	r0, r7, #4
 8002114:	499a      	ldr	r1, [pc, #616]	; (8002380 <main+0x5ec>)
 8002116:	f006 fa29 	bl	800856c <siprintf>
 800211a:	4603      	mov	r3, r0
 800211c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 8002120:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002124:	b29a      	uxth	r2, r3
 8002126:	1d39      	adds	r1, r7, #4
 8002128:	2364      	movs	r3, #100	; 0x64
 800212a:	4890      	ldr	r0, [pc, #576]	; (800236c <main+0x5d8>)
 800212c:	f004 fe5f 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	2264      	movs	r2, #100	; 0x64
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f005 fa36 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F5: 0x%x - 0d%d\r\n", as7343_channels[15], as7343_channels[15]);
 800213c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002140:	461a      	mov	r2, r3
 8002142:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002146:	1d38      	adds	r0, r7, #4
 8002148:	498e      	ldr	r1, [pc, #568]	; (8002384 <main+0x5f0>)
 800214a:	f006 fa0f 	bl	800856c <siprintf>
 800214e:	4603      	mov	r3, r0
 8002150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 8002154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002158:	b29a      	uxth	r2, r3
 800215a:	1d39      	adds	r1, r7, #4
 800215c:	2364      	movs	r3, #100	; 0x64
 800215e:	4883      	ldr	r0, [pc, #524]	; (800236c <main+0x5d8>)
 8002160:	f004 fe45 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	2264      	movs	r2, #100	; 0x64
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f005 fa1c 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 FXL: 0x%x - 0d%d\r\n", as7343_channels[2], as7343_channels[2]);
 8002170:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002174:	461a      	mov	r2, r3
 8002176:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800217a:	1d38      	adds	r0, r7, #4
 800217c:	4982      	ldr	r1, [pc, #520]	; (8002388 <main+0x5f4>)
 800217e:	f006 f9f5 	bl	800856c <siprintf>
 8002182:	4603      	mov	r3, r0
 8002184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 8002188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800218c:	b29a      	uxth	r2, r3
 800218e:	1d39      	adds	r1, r7, #4
 8002190:	2364      	movs	r3, #100	; 0x64
 8002192:	4876      	ldr	r0, [pc, #472]	; (800236c <main+0x5d8>)
 8002194:	f004 fe2b 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	2264      	movs	r2, #100	; 0x64
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f005 fa02 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F6: 0x%x - 0d%d\r\n", as7343_channels[9], as7343_channels[9]);
 80021a4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80021a8:	461a      	mov	r2, r3
 80021aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80021ae:	1d38      	adds	r0, r7, #4
 80021b0:	4976      	ldr	r1, [pc, #472]	; (800238c <main+0x5f8>)
 80021b2:	f006 f9db 	bl	800856c <siprintf>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 80021bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	1d39      	adds	r1, r7, #4
 80021c4:	2364      	movs	r3, #100	; 0x64
 80021c6:	4869      	ldr	r0, [pc, #420]	; (800236c <main+0x5d8>)
 80021c8:	f004 fe11 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	2264      	movs	r2, #100	; 0x64
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f005 f9e8 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F7: 0x%x - 0d%d\r\n", as7343_channels[13], as7343_channels[13]);
 80021d8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80021dc:	461a      	mov	r2, r3
 80021de:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80021e2:	1d38      	adds	r0, r7, #4
 80021e4:	496a      	ldr	r1, [pc, #424]	; (8002390 <main+0x5fc>)
 80021e6:	f006 f9c1 	bl	800856c <siprintf>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 80021f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	1d39      	adds	r1, r7, #4
 80021f8:	2364      	movs	r3, #100	; 0x64
 80021fa:	485c      	ldr	r0, [pc, #368]	; (800236c <main+0x5d8>)
 80021fc:	f004 fdf7 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2264      	movs	r2, #100	; 0x64
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f005 f9ce 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 F8: 0x%x - 0d%d\r\n", as7343_channels[14], as7343_channels[14]);
 800220c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002210:	461a      	mov	r2, r3
 8002212:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002216:	1d38      	adds	r0, r7, #4
 8002218:	495e      	ldr	r1, [pc, #376]	; (8002394 <main+0x600>)
 800221a:	f006 f9a7 	bl	800856c <siprintf>
 800221e:	4603      	mov	r3, r0
 8002220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 8002224:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002228:	b29a      	uxth	r2, r3
 800222a:	1d39      	adds	r1, r7, #4
 800222c:	2364      	movs	r3, #100	; 0x64
 800222e:	484f      	ldr	r0, [pc, #316]	; (800236c <main+0x5d8>)
 8002230:	f004 fddd 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	2264      	movs	r2, #100	; 0x64
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f005 f9b4 	bl	80075a8 <memset>

		uart_buf_len = sprintf(uart_buf, "AS7343 NIR: 0x%x - 0d%d\r\n", as7343_channels[3], as7343_channels[3]);
 8002240:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002244:	461a      	mov	r2, r3
 8002246:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800224a:	1d38      	adds	r0, r7, #4
 800224c:	4952      	ldr	r1, [pc, #328]	; (8002398 <main+0x604>)
 800224e:	f006 f98d 	bl	800856c <siprintf>
 8002252:	4603      	mov	r3, r0
 8002254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 8002258:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800225c:	b29a      	uxth	r2, r3
 800225e:	1d39      	adds	r1, r7, #4
 8002260:	2364      	movs	r3, #100	; 0x64
 8002262:	4842      	ldr	r0, [pc, #264]	; (800236c <main+0x5d8>)
 8002264:	f004 fdc3 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	2264      	movs	r2, #100	; 0x64
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f005 f99a 	bl	80075a8 <memset>

		uint16_t VIS = (as7343_channels[4]<<1)+(as7343_channels[10]<<1);
 8002274:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	b29b      	uxth	r3, r3
 8002284:	4413      	add	r3, r2
 8002286:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		uart_buf_len = sprintf(uart_buf, "AS7343 VIS: 0x%x - 0d%d\r\n", as7343_channels[4], as7343_channels[4]);
 800228a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800228e:	461a      	mov	r2, r3
 8002290:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002294:	1d38      	adds	r0, r7, #4
 8002296:	4941      	ldr	r1, [pc, #260]	; (800239c <main+0x608>)
 8002298:	f006 f968 	bl	800856c <siprintf>
 800229c:	4603      	mov	r3, r0
 800229e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 80022a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	1d39      	adds	r1, r7, #4
 80022aa:	2364      	movs	r3, #100	; 0x64
 80022ac:	482f      	ldr	r0, [pc, #188]	; (800236c <main+0x5d8>)
 80022ae:	f004 fd9e 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2264      	movs	r2, #100	; 0x64
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f005 f975 	bl	80075a8 <memset>

		uint8_t as7343_AGAIN = AS7343_get_gain(&as7343);
 80022be:	4829      	ldr	r0, [pc, #164]	; (8002364 <main+0x5d0>)
 80022c0:	f7ff f90c 	bl	80014dc <AS7343_get_gain>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
		uart_buf_len = sprintf(uart_buf, "AS7343 GAIN: %d\r\n", as7343_AGAIN);
 80022ca:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	4933      	ldr	r1, [pc, #204]	; (80023a0 <main+0x60c>)
 80022d2:	4618      	mov	r0, r3
 80022d4:	f006 f94a 	bl	800856c <siprintf>
 80022d8:	4603      	mov	r3, r0
 80022da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 80022de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	1d39      	adds	r1, r7, #4
 80022e6:	2364      	movs	r3, #100	; 0x64
 80022e8:	4820      	ldr	r0, [pc, #128]	; (800236c <main+0x5d8>)
 80022ea:	f004 fd80 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	2264      	movs	r2, #100	; 0x64
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f005 f957 	bl	80075a8 <memset>

		as7343_TINT = AS7343_get_TINT(&as7343);
 80022fa:	481a      	ldr	r0, [pc, #104]	; (8002364 <main+0x5d0>)
 80022fc:	f7ff f97c 	bl	80015f8 <AS7343_get_TINT>
 8002300:	ec53 2b10 	vmov	r2, r3, d0
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f7fe fc76 	bl	8000bf8 <__aeabi_d2f>
 800230c:	4603      	mov	r3, r0
 800230e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		uart_buf_len = sprintf(uart_buf, "AS7343 TINT: %f\r\n\n\n", as7343_TINT);
 8002312:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002316:	f7fe f91f 	bl	8000558 <__aeabi_f2d>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	1d38      	adds	r0, r7, #4
 8002320:	4920      	ldr	r1, [pc, #128]	; (80023a4 <main+0x610>)
 8002322:	f006 f923 	bl	800856c <siprintf>
 8002326:	4603      	mov	r3, r0
 8002328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 800232c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002330:	b29a      	uxth	r2, r3
 8002332:	1d39      	adds	r1, r7, #4
 8002334:	2364      	movs	r3, #100	; 0x64
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <main+0x5d8>)
 8002338:	f004 fd59 	bl	8006dee <HAL_UART_Transmit>
		memset(uart_buf, 0, sizeof(uart_buf));
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2264      	movs	r2, #100	; 0x64
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f005 f930 	bl	80075a8 <memset>
	  }
	  if(MLX90614_counter_timeout_flag) {
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <main+0x614>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f43f ad8d 	beq.w	8001e6c <main+0xd8>
	  		  //trigger MLX90614 read

	    MLX90614_counter_timeout_flag = 0;
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <main+0x614>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e028      	b.n	80023ac <main+0x618>
 800235a:	bf00      	nop
 800235c:	200003ef 	.word	0x200003ef
 8002360:	447a0000 	.word	0x447a0000
 8002364:	200003e4 	.word	0x200003e4
 8002368:	0800d0e8 	.word	0x0800d0e8
 800236c:	20000380 	.word	0x20000380
 8002370:	0800d104 	.word	0x0800d104
 8002374:	0800d120 	.word	0x0800d120
 8002378:	0800d13c 	.word	0x0800d13c
 800237c:	0800d158 	.word	0x0800d158
 8002380:	0800d174 	.word	0x0800d174
 8002384:	0800d190 	.word	0x0800d190
 8002388:	0800d1ac 	.word	0x0800d1ac
 800238c:	0800d1c8 	.word	0x0800d1c8
 8002390:	0800d1e4 	.word	0x0800d1e4
 8002394:	0800d200 	.word	0x0800d200
 8002398:	0800d21c 	.word	0x0800d21c
 800239c:	0800d238 	.word	0x0800d238
 80023a0:	0800d254 	.word	0x0800d254
 80023a4:	0800d268 	.word	0x0800d268
 80023a8:	200003f0 	.word	0x200003f0

	  	temp_obj1 = MLX90614_ReadTObj1();
 80023ac:	f000 fc82 	bl	8002cb4 <MLX90614_ReadTObj1>
 80023b0:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
	  	HAL_Delay(5);
 80023b4:	2005      	movs	r0, #5
 80023b6:	f001 f96d 	bl	8003694 <HAL_Delay>
	  	temp_amb = MLX90614_ReadTAmb();
 80023ba:	f000 fc9b 	bl	8002cf4 <MLX90614_ReadTAmb>
 80023be:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94

	  	uart_buf_len = sprintf(uart_buf, "IR Sensor: T obj1: %.2f, T amb: %.2f\r\n", temp_obj1, temp_amb);
 80023c2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80023c6:	f7fe f8c7 	bl	8000558 <__aeabi_f2d>
 80023ca:	4604      	mov	r4, r0
 80023cc:	460d      	mov	r5, r1
 80023ce:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80023d2:	f7fe f8c1 	bl	8000558 <__aeabi_f2d>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	1d38      	adds	r0, r7, #4
 80023dc:	e9cd 2300 	strd	r2, r3, [sp]
 80023e0:	4622      	mov	r2, r4
 80023e2:	462b      	mov	r3, r5
 80023e4:	490a      	ldr	r1, [pc, #40]	; (8002410 <main+0x67c>)
 80023e6:	f006 f8c1 	bl	800856c <siprintf>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  	HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 80023f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	1d39      	adds	r1, r7, #4
 80023f8:	2364      	movs	r3, #100	; 0x64
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <main+0x680>)
 80023fc:	f004 fcf7 	bl	8006dee <HAL_UART_Transmit>
	  	memset(uart_buf, 0, sizeof(uart_buf));
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	2264      	movs	r2, #100	; 0x64
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f005 f8ce 	bl	80075a8 <memset>
	  if(SHT31_counter_timeout_flag) {
 800240c:	e52e      	b.n	8001e6c <main+0xd8>
 800240e:	bf00      	nop
 8002410:	0800d27c 	.word	0x0800d27c
 8002414:	20000380 	.word	0x20000380

08002418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b094      	sub	sp, #80	; 0x50
 800241c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800241e:	f107 0320 	add.w	r3, r7, #32
 8002422:	2230      	movs	r2, #48	; 0x30
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f005 f8be 	bl	80075a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	4b22      	ldr	r3, [pc, #136]	; (80024cc <SystemClock_Config+0xb4>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a21      	ldr	r2, [pc, #132]	; (80024cc <SystemClock_Config+0xb4>)
 8002446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <SystemClock_Config+0xb4>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <SystemClock_Config+0xb8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <SystemClock_Config+0xb8>)
 8002462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <SystemClock_Config+0xb8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002474:	2302      	movs	r3, #2
 8002476:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002478:	2301      	movs	r3, #1
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800247c:	2310      	movs	r3, #16
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002480:	2300      	movs	r3, #0
 8002482:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002484:	f107 0320 	add.w	r3, r7, #32
 8002488:	4618      	mov	r0, r3
 800248a:	f003 fbc5 	bl	8005c18 <HAL_RCC_OscConfig>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002494:	f000 fa42 	bl	800291c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002498:	230f      	movs	r3, #15
 800249a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fe28 	bl	8006108 <HAL_RCC_ClockConfig>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80024be:	f000 fa2d 	bl	800291c <Error_Handler>
  }
}
 80024c2:	bf00      	nop
 80024c4:	3750      	adds	r7, #80	; 0x50
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40007000 	.word	0x40007000

080024d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024da:	463b      	mov	r3, r7
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <MX_ADC1_Init+0x98>)
 80024e8:	4a21      	ldr	r2, [pc, #132]	; (8002570 <MX_ADC1_Init+0x9c>)
 80024ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <MX_ADC1_Init+0x98>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <MX_ADC1_Init+0x98>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80024f8:	4b1c      	ldr	r3, [pc, #112]	; (800256c <MX_ADC1_Init+0x98>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <MX_ADC1_Init+0x98>)
 8002500:	2200      	movs	r2, #0
 8002502:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <MX_ADC1_Init+0x98>)
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <MX_ADC1_Init+0x98>)
 800250e:	2200      	movs	r2, #0
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <MX_ADC1_Init+0x98>)
 8002514:	4a17      	ldr	r2, [pc, #92]	; (8002574 <MX_ADC1_Init+0xa0>)
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_ADC1_Init+0x98>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <MX_ADC1_Init+0x98>)
 8002520:	2201      	movs	r2, #1
 8002522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_ADC1_Init+0x98>)
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_ADC1_Init+0x98>)
 800252e:	2201      	movs	r2, #1
 8002530:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002532:	480e      	ldr	r0, [pc, #56]	; (800256c <MX_ADC1_Init+0x98>)
 8002534:	f001 f8d2 	bl	80036dc <HAL_ADC_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800253e:	f000 f9ed 	bl	800291c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002542:	2309      	movs	r3, #9
 8002544:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800254e:	463b      	mov	r3, r7
 8002550:	4619      	mov	r1, r3
 8002552:	4806      	ldr	r0, [pc, #24]	; (800256c <MX_ADC1_Init+0x98>)
 8002554:	f001 f906 	bl	8003764 <HAL_ADC_ConfigChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800255e:	f000 f9dd 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000204 	.word	0x20000204
 8002570:	40012000 	.word	0x40012000
 8002574:	0f000001 	.word	0x0f000001

08002578 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <MX_I2C1_Init+0x50>)
 800257e:	4a13      	ldr	r2, [pc, #76]	; (80025cc <MX_I2C1_Init+0x54>)
 8002580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <MX_I2C1_Init+0x50>)
 8002584:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <MX_I2C1_Init+0x58>)
 8002586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <MX_I2C1_Init+0x50>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <MX_I2C1_Init+0x50>)
 8002590:	2200      	movs	r2, #0
 8002592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <MX_I2C1_Init+0x50>)
 8002596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800259a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <MX_I2C1_Init+0x50>)
 800259e:	2200      	movs	r2, #0
 80025a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <MX_I2C1_Init+0x50>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <MX_I2C1_Init+0x50>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <MX_I2C1_Init+0x50>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025b4:	4804      	ldr	r0, [pc, #16]	; (80025c8 <MX_I2C1_Init+0x50>)
 80025b6:	f001 fdcd 	bl	8004154 <HAL_I2C_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025c0:	f000 f9ac 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	2000024c 	.word	0x2000024c
 80025cc:	40005400 	.word	0x40005400
 80025d0:	000186a0 	.word	0x000186a0

080025d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <MX_I2C3_Init+0x50>)
 80025da:	4a13      	ldr	r2, [pc, #76]	; (8002628 <MX_I2C3_Init+0x54>)
 80025dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_I2C3_Init+0x50>)
 80025e0:	4a12      	ldr	r2, [pc, #72]	; (800262c <MX_I2C3_Init+0x58>)
 80025e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <MX_I2C3_Init+0x50>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_I2C3_Init+0x50>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MX_I2C3_Init+0x50>)
 80025f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <MX_I2C3_Init+0x50>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_I2C3_Init+0x50>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <MX_I2C3_Init+0x50>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_I2C3_Init+0x50>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002610:	4804      	ldr	r0, [pc, #16]	; (8002624 <MX_I2C3_Init+0x50>)
 8002612:	f001 fd9f 	bl	8004154 <HAL_I2C_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800261c:	f000 f97e 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200002a0 	.word	0x200002a0
 8002628:	40005c00 	.word	0x40005c00
 800262c:	000186a0 	.word	0x000186a0

08002630 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002636:	f107 0308 	add.w	r3, r7, #8
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002644:	463b      	mov	r3, r7
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <MX_TIM3_Init+0x94>)
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <MX_TIM3_Init+0x98>)
 8002650:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <MX_TIM3_Init+0x94>)
 8002654:	227c      	movs	r2, #124	; 0x7c
 8002656:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <MX_TIM3_Init+0x94>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63998;
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <MX_TIM3_Init+0x94>)
 8002660:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
 8002664:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <MX_TIM3_Init+0x94>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <MX_TIM3_Init+0x94>)
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002672:	4814      	ldr	r0, [pc, #80]	; (80026c4 <MX_TIM3_Init+0x94>)
 8002674:	f003 ff28 	bl	80064c8 <HAL_TIM_Base_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800267e:	f000 f94d 	bl	800291c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002686:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002688:	f107 0308 	add.w	r3, r7, #8
 800268c:	4619      	mov	r1, r3
 800268e:	480d      	ldr	r0, [pc, #52]	; (80026c4 <MX_TIM3_Init+0x94>)
 8002690:	f004 f8d4 	bl	800683c <HAL_TIM_ConfigClockSource>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800269a:	f000 f93f 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026a6:	463b      	mov	r3, r7
 80026a8:	4619      	mov	r1, r3
 80026aa:	4806      	ldr	r0, [pc, #24]	; (80026c4 <MX_TIM3_Init+0x94>)
 80026ac:	f004 fad0 	bl	8006c50 <HAL_TIMEx_MasterConfigSynchronization>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026b6:	f000 f931 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200002f4 	.word	0x200002f4
 80026c8:	40000400 	.word	0x40000400

080026cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <MX_USART1_UART_Init+0x50>)
 80026d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026f2:	220c      	movs	r2, #12
 80026f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002702:	4805      	ldr	r0, [pc, #20]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 8002704:	f004 fb26 	bl	8006d54 <HAL_UART_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800270e:	f000 f905 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	2000033c 	.word	0x2000033c
 800271c:	40011000 	.word	0x40011000

08002720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <MX_USART2_UART_Init+0x50>)
 8002728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <MX_USART2_UART_Init+0x4c>)
 800272c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <MX_USART2_UART_Init+0x4c>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002746:	220c      	movs	r2, #12
 8002748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <MX_USART2_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002752:	2200      	movs	r2, #0
 8002754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002758:	f004 fafc 	bl	8006d54 <HAL_UART_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002762:	f000 f8db 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000380 	.word	0x20000380
 8002770:	40004400 	.word	0x40004400

08002774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277a:	f107 030c 	add.w	r3, r7, #12
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	4b30      	ldr	r3, [pc, #192]	; (8002850 <MX_GPIO_Init+0xdc>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a2f      	ldr	r2, [pc, #188]	; (8002850 <MX_GPIO_Init+0xdc>)
 8002794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <MX_GPIO_Init+0xdc>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	4b29      	ldr	r3, [pc, #164]	; (8002850 <MX_GPIO_Init+0xdc>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a28      	ldr	r2, [pc, #160]	; (8002850 <MX_GPIO_Init+0xdc>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <MX_GPIO_Init+0xdc>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <MX_GPIO_Init+0xdc>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a21      	ldr	r2, [pc, #132]	; (8002850 <MX_GPIO_Init+0xdc>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <MX_GPIO_Init+0xdc>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	2101      	movs	r1, #1
 80027e2:	481c      	ldr	r0, [pc, #112]	; (8002854 <MX_GPIO_Init+0xe0>)
 80027e4:	f001 fc82 	bl	80040ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80027e8:	2200      	movs	r2, #0
 80027ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ee:	481a      	ldr	r0, [pc, #104]	; (8002858 <MX_GPIO_Init+0xe4>)
 80027f0:	f001 fc7c 	bl	80040ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027f4:	2301      	movs	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f8:	2301      	movs	r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	4619      	mov	r1, r3
 800280a:	4812      	ldr	r0, [pc, #72]	; (8002854 <MX_GPIO_Init+0xe0>)
 800280c:	f001 faea 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002810:	2332      	movs	r3, #50	; 0x32
 8002812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002814:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	4619      	mov	r1, r3
 8002824:	480b      	ldr	r0, [pc, #44]	; (8002854 <MX_GPIO_Init+0xe0>)
 8002826:	f001 fadd 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800282a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002830:	2301      	movs	r3, #1
 8002832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	4619      	mov	r1, r3
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <MX_GPIO_Init+0xe4>)
 8002844:	f001 face 	bl	8003de4 <HAL_GPIO_Init>

}
 8002848:	bf00      	nop
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	40020000 	.word	0x40020000
 8002858:	40020400 	.word	0x40020400

0800285c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	/*
	 * Calls when Timer period is reached T = 0.5s
	 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002868:	4823      	ldr	r0, [pc, #140]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800286a:	f001 fc58 	bl	800411e <HAL_GPIO_TogglePin>

	if(--SHT31_counter == 0) {
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	4b21      	ldr	r3, [pc, #132]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_TIM_PeriodElapsedCallback+0x32>
		//SHT3x Handler
		SHT31_counter_timeout_flag = true;
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
		SHT31_counter = SHT31_COUNTER;
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800288a:	2214      	movs	r2, #20
 800288c:	801a      	strh	r2, [r3, #0]
	}
	if(--PASCO2_counter == 0) {
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <HAL_TIM_PeriodElapsedCallback+0x52>
		//PASCO2 Handler
		PASCO2_counter_timeout_flag = true;
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
		PASCO2_counter = PASCO2_COUNTER;
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80028aa:	2214      	movs	r2, #20
 80028ac:	801a      	strh	r2, [r3, #0]
	}
	if(--VEML6031_counter == 0) {
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80028b8:	801a      	strh	r2, [r3, #0]
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_TIM_PeriodElapsedCallback+0x72>
		//VEML6031 Handler
		VEML6031_counter_timeout_flag = true;
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
		VEML6031_counter = VEML6031_COUNTER;
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80028ca:	2214      	movs	r2, #20
 80028cc:	801a      	strh	r2, [r3, #0]
//	if(--AS7343_counter == 0) {
//		//AS7343 Handler
//		AS7343_counter_timeout_flag = true;
//		AS7343_counter = AS7343_COUNTER;
//	}
	if(--MLX90614_counter == 0) {
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <HAL_TIM_PeriodElapsedCallback+0x92>
		//MLX90614 Handler
		MLX90614_counter_timeout_flag = true;
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
		MLX90614_counter = MLX90614_COUNTER;
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80028ea:	220a      	movs	r2, #10
 80028ec:	801a      	strh	r2, [r3, #0]
	}

}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40020400 	.word	0x40020400
 80028fc:	20000000 	.word	0x20000000
 8002900:	200003ec 	.word	0x200003ec
 8002904:	20000002 	.word	0x20000002
 8002908:	200003ed 	.word	0x200003ed
 800290c:	20000004 	.word	0x20000004
 8002910:	200003ee 	.word	0x200003ee
 8002914:	20000006 	.word	0x20000006
 8002918:	200003f0 	.word	0x200003f0

0800291c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002920:	b672      	cpsid	i
}
 8002922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002924:	e7fe      	b.n	8002924 <Error_Handler+0x8>

08002926 <crc8>:

I2C_HandleTypeDef 	*MLX90614_i2c;
extern UART_HandleTypeDef huart2;
char uart_buf[128] = {'\0'};

uint8_t crc8 (uint8_t inCrc, uint8_t inData) {
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	460a      	mov	r2, r1
 8002930:	71fb      	strb	r3, [r7, #7]
 8002932:	4613      	mov	r3, r2
 8002934:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint8_t data;

	data = inCrc ^ inData;
 8002936:	79fa      	ldrb	r2, [r7, #7]
 8002938:	79bb      	ldrb	r3, [r7, #6]
 800293a:	4053      	eors	r3, r2
 800293c:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i<8; i++) {
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	e011      	b.n	8002968 <crc8+0x42>
		if((data & 0x80) != 0){
 8002944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002948:	2b00      	cmp	r3, #0
 800294a:	da07      	bge.n	800295c <crc8+0x36>
			data <<= 1;
 800294c:	7bbb      	ldrb	r3, [r7, #14]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	73bb      	strb	r3, [r7, #14]
			data ^= 0x07;
 8002952:	7bbb      	ldrb	r3, [r7, #14]
 8002954:	f083 0307 	eor.w	r3, r3, #7
 8002958:	73bb      	strb	r3, [r7, #14]
 800295a:	e002      	b.n	8002962 <crc8+0x3c>
		}
		else {
			data <<= 1;
 800295c:	7bbb      	ldrb	r3, [r7, #14]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i<8; i++) {
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	3301      	adds	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b07      	cmp	r3, #7
 800296c:	d9ea      	bls.n	8002944 <crc8+0x1e>
		}
	}
	return data;
 800296e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <MLX90614_Init>:

void MLX90614_Init(I2C_HandleTypeDef *hi2c){
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	/*
	 * Initialize MLX90614 I2C and registers
	 */

	MLX90614_i2c = hi2c;
 8002984:	4a5a      	ldr	r2, [pc, #360]	; (8002af0 <MLX90614_Init+0x174>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6013      	str	r3, [r2, #0]

	uint16_t data = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	81fb      	strh	r3, [r7, #14]

	sprintf(uart_buf, "Starting Initialization of MLX_90614 IR Sensor:\r\n");
 800298e:	4959      	ldr	r1, [pc, #356]	; (8002af4 <MLX90614_Init+0x178>)
 8002990:	4859      	ldr	r0, [pc, #356]	; (8002af8 <MLX90614_Init+0x17c>)
 8002992:	f005 fdeb 	bl	800856c <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 8002996:	2364      	movs	r3, #100	; 0x64
 8002998:	2280      	movs	r2, #128	; 0x80
 800299a:	4957      	ldr	r1, [pc, #348]	; (8002af8 <MLX90614_Init+0x17c>)
 800299c:	4857      	ldr	r0, [pc, #348]	; (8002afc <MLX90614_Init+0x180>)
 800299e:	f004 fa26 	bl	8006dee <HAL_UART_Transmit>
	HAL_Delay(100);
 80029a2:	2064      	movs	r0, #100	; 0x64
 80029a4:	f000 fe76 	bl	8003694 <HAL_Delay>
	memset(uart_buf, 0, sizeof(uart_buf));
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	2100      	movs	r1, #0
 80029ac:	4852      	ldr	r0, [pc, #328]	; (8002af8 <MLX90614_Init+0x17c>)
 80029ae:	f004 fdfb 	bl	80075a8 <memset>

	MLX90614_WriteReg(MLX90614_TOMIN, 0x6AB3);
 80029b2:	f646 21b3 	movw	r1, #27315	; 0x6ab3
 80029b6:	2020      	movs	r0, #32
 80029b8:	f000 f8b0 	bl	8002b1c <MLX90614_WriteReg>
	MLX90614_ReadReg(MLX90614_TOMIN, &data);
 80029bc:	f107 030e 	add.w	r3, r7, #14
 80029c0:	4619      	mov	r1, r3
 80029c2:	2020      	movs	r0, #32
 80029c4:	f000 f924 	bl	8002c10 <MLX90614_ReadReg>
    sprintf(uart_buf, "ToMin: 0x%X\r\n", data);
 80029c8:	89fb      	ldrh	r3, [r7, #14]
 80029ca:	461a      	mov	r2, r3
 80029cc:	494c      	ldr	r1, [pc, #304]	; (8002b00 <MLX90614_Init+0x184>)
 80029ce:	484a      	ldr	r0, [pc, #296]	; (8002af8 <MLX90614_Init+0x17c>)
 80029d0:	f005 fdcc 	bl	800856c <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 80029d4:	2364      	movs	r3, #100	; 0x64
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	4947      	ldr	r1, [pc, #284]	; (8002af8 <MLX90614_Init+0x17c>)
 80029da:	4848      	ldr	r0, [pc, #288]	; (8002afc <MLX90614_Init+0x180>)
 80029dc:	f004 fa07 	bl	8006dee <HAL_UART_Transmit>
    HAL_Delay(100);
 80029e0:	2064      	movs	r0, #100	; 0x64
 80029e2:	f000 fe57 	bl	8003694 <HAL_Delay>

    MLX90614_WriteReg(MLX90614_TOMAX, 0x7E3B);
 80029e6:	f647 613b 	movw	r1, #32315	; 0x7e3b
 80029ea:	2021      	movs	r0, #33	; 0x21
 80029ec:	f000 f896 	bl	8002b1c <MLX90614_WriteReg>
    MLX90614_ReadReg(MLX90614_TOMAX, &data);
 80029f0:	f107 030e 	add.w	r3, r7, #14
 80029f4:	4619      	mov	r1, r3
 80029f6:	2021      	movs	r0, #33	; 0x21
 80029f8:	f000 f90a 	bl	8002c10 <MLX90614_ReadReg>
    sprintf(uart_buf, "ToMax: 0x%X\r\n", data);
 80029fc:	89fb      	ldrh	r3, [r7, #14]
 80029fe:	461a      	mov	r2, r3
 8002a00:	4940      	ldr	r1, [pc, #256]	; (8002b04 <MLX90614_Init+0x188>)
 8002a02:	483d      	ldr	r0, [pc, #244]	; (8002af8 <MLX90614_Init+0x17c>)
 8002a04:	f005 fdb2 	bl	800856c <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 8002a08:	2364      	movs	r3, #100	; 0x64
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	493a      	ldr	r1, [pc, #232]	; (8002af8 <MLX90614_Init+0x17c>)
 8002a0e:	483b      	ldr	r0, [pc, #236]	; (8002afc <MLX90614_Init+0x180>)
 8002a10:	f004 f9ed 	bl	8006dee <HAL_UART_Transmit>
    HAL_Delay(100);
 8002a14:	2064      	movs	r0, #100	; 0x64
 8002a16:	f000 fe3d 	bl	8003694 <HAL_Delay>

//    MLX90614_WriteReg(MLX90614_PWMCTRL, 0x);
    MLX90614_ReadReg(MLX90614_PWMCTRL, &data);
 8002a1a:	f107 030e 	add.w	r3, r7, #14
 8002a1e:	4619      	mov	r1, r3
 8002a20:	2022      	movs	r0, #34	; 0x22
 8002a22:	f000 f8f5 	bl	8002c10 <MLX90614_ReadReg>
    sprintf(uart_buf, "PWMCTRL: 0x%X\r\n", data);
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4937      	ldr	r1, [pc, #220]	; (8002b08 <MLX90614_Init+0x18c>)
 8002a2c:	4832      	ldr	r0, [pc, #200]	; (8002af8 <MLX90614_Init+0x17c>)
 8002a2e:	f005 fd9d 	bl	800856c <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 8002a32:	2364      	movs	r3, #100	; 0x64
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	4930      	ldr	r1, [pc, #192]	; (8002af8 <MLX90614_Init+0x17c>)
 8002a38:	4830      	ldr	r0, [pc, #192]	; (8002afc <MLX90614_Init+0x180>)
 8002a3a:	f004 f9d8 	bl	8006dee <HAL_UART_Transmit>
    HAL_Delay(100);
 8002a3e:	2064      	movs	r0, #100	; 0x64
 8002a40:	f000 fe28 	bl	8003694 <HAL_Delay>

//    MLX90614_WriteReg(MLX90614_TARANGE, 0x);
    MLX90614_ReadReg(MLX90614_TARANGE, &data);
 8002a44:	f107 030e 	add.w	r3, r7, #14
 8002a48:	4619      	mov	r1, r3
 8002a4a:	2023      	movs	r0, #35	; 0x23
 8002a4c:	f000 f8e0 	bl	8002c10 <MLX90614_ReadReg>
    sprintf(uart_buf, "TA Range: 0x%X\r\n", data);
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	461a      	mov	r2, r3
 8002a54:	492d      	ldr	r1, [pc, #180]	; (8002b0c <MLX90614_Init+0x190>)
 8002a56:	4828      	ldr	r0, [pc, #160]	; (8002af8 <MLX90614_Init+0x17c>)
 8002a58:	f005 fd88 	bl	800856c <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 8002a5c:	2364      	movs	r3, #100	; 0x64
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	4925      	ldr	r1, [pc, #148]	; (8002af8 <MLX90614_Init+0x17c>)
 8002a62:	4826      	ldr	r0, [pc, #152]	; (8002afc <MLX90614_Init+0x180>)
 8002a64:	f004 f9c3 	bl	8006dee <HAL_UART_Transmit>
    HAL_Delay(100);
 8002a68:	2064      	movs	r0, #100	; 0x64
 8002a6a:	f000 fe13 	bl	8003694 <HAL_Delay>

    MLX90614_WriteReg(MLX90614_EMISSIVITY, 0xFAE1);
 8002a6e:	f64f 21e1 	movw	r1, #64225	; 0xfae1
 8002a72:	2024      	movs	r0, #36	; 0x24
 8002a74:	f000 f852 	bl	8002b1c <MLX90614_WriteReg>
    MLX90614_ReadReg(MLX90614_EMISSIVITY, &data);
 8002a78:	f107 030e 	add.w	r3, r7, #14
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	2024      	movs	r0, #36	; 0x24
 8002a80:	f000 f8c6 	bl	8002c10 <MLX90614_ReadReg>
    sprintf(uart_buf, "EMISSIVITY: 0x%X\r\n", data);
 8002a84:	89fb      	ldrh	r3, [r7, #14]
 8002a86:	461a      	mov	r2, r3
 8002a88:	4921      	ldr	r1, [pc, #132]	; (8002b10 <MLX90614_Init+0x194>)
 8002a8a:	481b      	ldr	r0, [pc, #108]	; (8002af8 <MLX90614_Init+0x17c>)
 8002a8c:	f005 fd6e 	bl	800856c <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 8002a90:	2364      	movs	r3, #100	; 0x64
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	4918      	ldr	r1, [pc, #96]	; (8002af8 <MLX90614_Init+0x17c>)
 8002a96:	4819      	ldr	r0, [pc, #100]	; (8002afc <MLX90614_Init+0x180>)
 8002a98:	f004 f9a9 	bl	8006dee <HAL_UART_Transmit>
    HAL_Delay(100);
 8002a9c:	2064      	movs	r0, #100	; 0x64
 8002a9e:	f000 fdf9 	bl	8003694 <HAL_Delay>

    MLX90614_ReadReg(MLX90614_CFG1, &data);
 8002aa2:	f107 030e 	add.w	r3, r7, #14
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2025      	movs	r0, #37	; 0x25
 8002aaa:	f000 f8b1 	bl	8002c10 <MLX90614_ReadReg>
    sprintf(uart_buf, "CFG1: 0x%X\r\n", data);
 8002aae:	89fb      	ldrh	r3, [r7, #14]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4918      	ldr	r1, [pc, #96]	; (8002b14 <MLX90614_Init+0x198>)
 8002ab4:	4810      	ldr	r0, [pc, #64]	; (8002af8 <MLX90614_Init+0x17c>)
 8002ab6:	f005 fd59 	bl	800856c <siprintf>
    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 8002aba:	2364      	movs	r3, #100	; 0x64
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	490e      	ldr	r1, [pc, #56]	; (8002af8 <MLX90614_Init+0x17c>)
 8002ac0:	480e      	ldr	r0, [pc, #56]	; (8002afc <MLX90614_Init+0x180>)
 8002ac2:	f004 f994 	bl	8006dee <HAL_UART_Transmit>
    HAL_Delay(100);
 8002ac6:	2064      	movs	r0, #100	; 0x64
 8002ac8:	f000 fde4 	bl	8003694 <HAL_Delay>
//    MLX90614_ReadReg(MLX90614_PWMCTRL, &data);
//    sprintf(uart_buf, "PWMCTRL: 0x%X\r\n", data);
//    HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
//    HAL_Delay(100);

    sprintf(uart_buf, "MLX_90614 IR Sensor Initialization Finished.\r\n");
 8002acc:	4912      	ldr	r1, [pc, #72]	; (8002b18 <MLX90614_Init+0x19c>)
 8002ace:	480a      	ldr	r0, [pc, #40]	; (8002af8 <MLX90614_Init+0x17c>)
 8002ad0:	f005 fd4c 	bl	800856c <siprintf>
	HAL_UART_Transmit(&huart2, uart_buf, sizeof(uart_buf), 100);
 8002ad4:	2364      	movs	r3, #100	; 0x64
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	4907      	ldr	r1, [pc, #28]	; (8002af8 <MLX90614_Init+0x17c>)
 8002ada:	4808      	ldr	r0, [pc, #32]	; (8002afc <MLX90614_Init+0x180>)
 8002adc:	f004 f987 	bl	8006dee <HAL_UART_Transmit>
	HAL_Delay(100);
 8002ae0:	2064      	movs	r0, #100	; 0x64
 8002ae2:	f000 fdd7 	bl	8003694 <HAL_Delay>
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200003f4 	.word	0x200003f4
 8002af4:	0800d2a4 	.word	0x0800d2a4
 8002af8:	200003f8 	.word	0x200003f8
 8002afc:	20000380 	.word	0x20000380
 8002b00:	0800d2d8 	.word	0x0800d2d8
 8002b04:	0800d2e8 	.word	0x0800d2e8
 8002b08:	0800d2f8 	.word	0x0800d2f8
 8002b0c:	0800d308 	.word	0x0800d308
 8002b10:	0800d31c 	.word	0x0800d31c
 8002b14:	0800d330 	.word	0x0800d330
 8002b18:	0800d340 	.word	0x0800d340

08002b1c <MLX90614_WriteReg>:

void MLX90614_WriteReg(uint8_t regAddr, uint16_t data) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	4603      	mov	r3, r0
 8002b24:	460a      	mov	r2, r1
 8002b26:	71fb      	strb	r3, [r7, #7]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	80bb      	strh	r3, [r7, #4]
	 *
	 */

	uint8_t i2cdata[4];
	uint8_t crc;
	uint8_t lsb = data & 0x00FF;
 8002b2c:	88bb      	ldrh	r3, [r7, #4]
 8002b2e:	73fb      	strb	r3, [r7, #15]
	uint8_t msb = (data >> 8);
 8002b30:	88bb      	ldrh	r3, [r7, #4]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	73bb      	strb	r3, [r7, #14]

	crc = crc8(0x0, MLX90614_DEFAULT_SA<<1);
 8002b38:	21b4      	movs	r1, #180	; 0xb4
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7ff fef3 	bl	8002926 <crc8>
 8002b40:	4603      	mov	r3, r0
 8002b42:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, regAddr);
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	7b7b      	ldrb	r3, [r7, #13]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff feeb 	bl	8002926 <crc8>
 8002b50:	4603      	mov	r3, r0
 8002b52:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, 0x00);
 8002b54:	7b7b      	ldrb	r3, [r7, #13]
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fee4 	bl	8002926 <crc8>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, 0x00);
 8002b62:	7b7b      	ldrb	r3, [r7, #13]
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fedd 	bl	8002926 <crc8>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	737b      	strb	r3, [r7, #13]

	i2cdata[0] = regAddr;
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	723b      	strb	r3, [r7, #8]
	i2cdata[1] = 0x00;
 8002b74:	2300      	movs	r3, #0
 8002b76:	727b      	strb	r3, [r7, #9]
	i2cdata[2] = 0x00;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	72bb      	strb	r3, [r7, #10]
	i2cdata[3] = crc;
 8002b7c:	7b7b      	ldrb	r3, [r7, #13]
 8002b7e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(MLX90614_i2c, (MLX90614_DEFAULT_SA << 1), i2cdata, 4, 0xFFFF);
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <MLX90614_WriteReg+0xf0>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	f107 0208 	add.w	r2, r7, #8
 8002b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2304      	movs	r3, #4
 8002b90:	21b4      	movs	r1, #180	; 0xb4
 8002b92:	f001 fc23 	bl	80043dc <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8002b96:	200a      	movs	r0, #10
 8002b98:	f000 fd7c 	bl	8003694 <HAL_Delay>

	crc = crc8(0x0, MLX90614_DEFAULT_SA<<1);
 8002b9c:	21b4      	movs	r1, #180	; 0xb4
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7ff fec1 	bl	8002926 <crc8>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, regAddr);
 8002ba8:	79fa      	ldrb	r2, [r7, #7]
 8002baa:	7b7b      	ldrb	r3, [r7, #13]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff feb9 	bl	8002926 <crc8>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, lsb);
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	7b7b      	ldrb	r3, [r7, #13]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff feb1 	bl	8002926 <crc8>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	737b      	strb	r3, [r7, #13]
	crc = crc8(crc, msb);
 8002bc8:	7bba      	ldrb	r2, [r7, #14]
 8002bca:	7b7b      	ldrb	r3, [r7, #13]
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fea9 	bl	8002926 <crc8>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	737b      	strb	r3, [r7, #13]

	i2cdata[0] = regAddr;
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	723b      	strb	r3, [r7, #8]
	i2cdata[1] = lsb;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	727b      	strb	r3, [r7, #9]
	i2cdata[2] = msb;
 8002be0:	7bbb      	ldrb	r3, [r7, #14]
 8002be2:	72bb      	strb	r3, [r7, #10]
	i2cdata[3] = crc;
 8002be4:	7b7b      	ldrb	r3, [r7, #13]
 8002be6:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(MLX90614_i2c, (MLX90614_DEFAULT_SA << 1), i2cdata, 4, 0xFFFF);
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <MLX90614_WriteReg+0xf0>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	f107 0208 	add.w	r2, r7, #8
 8002bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	21b4      	movs	r1, #180	; 0xb4
 8002bfa:	f001 fbef 	bl	80043dc <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8002bfe:	200a      	movs	r0, #10
 8002c00:	f000 fd48 	bl	8003694 <HAL_Delay>

	return;
 8002c04:	bf00      	nop
}
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200003f4 	.word	0x200003f4

08002c10 <MLX90614_ReadReg>:

bool MLX90614_ReadReg(uint8_t regAddr, uint16_t * dest) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af04      	add	r7, sp, #16
 8002c16:	4603      	mov	r3, r0
 8002c18:	6039      	str	r1, [r7, #0]
 8002c1a:	71fb      	strb	r3, [r7, #7]
	 *
	 */

	uint8_t in_buff[3], crc;

	HAL_I2C_Mem_Read(MLX90614_i2c, (MLX90614_DEFAULT_SA<<1), regAddr, 1, in_buff, 3, 100);
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <MLX90614_ReadReg+0xa0>)
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	2364      	movs	r3, #100	; 0x64
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	2303      	movs	r3, #3
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2301      	movs	r3, #1
 8002c34:	21b4      	movs	r1, #180	; 0xb4
 8002c36:	f001 ffef 	bl	8004c18 <HAL_I2C_Mem_Read>

	crc = crc8(0x0, MLX90614_DEFAULT_SA<<1);
 8002c3a:	21b4      	movs	r1, #180	; 0xb4
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7ff fe72 	bl	8002926 <crc8>
 8002c42:	4603      	mov	r3, r0
 8002c44:	73fb      	strb	r3, [r7, #15]
	crc = crc8(crc, regAddr);
 8002c46:	79fa      	ldrb	r2, [r7, #7]
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fe6a 	bl	8002926 <crc8>
 8002c52:	4603      	mov	r3, r0
 8002c54:	73fb      	strb	r3, [r7, #15]
	crc = crc8(crc, (MLX90614_DEFAULT_SA<<1) + 1);
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	21b5      	movs	r1, #181	; 0xb5
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fe63 	bl	8002926 <crc8>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]
	crc = crc8(crc, in_buff[0]);
 8002c64:	7b3a      	ldrb	r2, [r7, #12]
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fe5b 	bl	8002926 <crc8>
 8002c70:	4603      	mov	r3, r0
 8002c72:	73fb      	strb	r3, [r7, #15]
	crc = crc8(crc, in_buff[1]);
 8002c74:	7b7a      	ldrb	r2, [r7, #13]
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fe53 	bl	8002926 <crc8>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]

	if (crc == in_buff[2]) {
 8002c84:	7bbb      	ldrb	r3, [r7, #14]
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d10b      	bne.n	8002ca4 <MLX90614_ReadReg+0x94>
		*dest = ((uint16_t)in_buff[1] << 8) | in_buff[0];
 8002c8c:	7b7b      	ldrb	r3, [r7, #13]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	7b3b      	ldrb	r3, [r7, #12]
 8002c94:	b21b      	sxth	r3, r3
 8002c96:	4313      	orrs	r3, r2
 8002c98:	b21b      	sxth	r3, r3
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	801a      	strh	r2, [r3, #0]
		return 1;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <MLX90614_ReadReg+0x96>
	}

	else {
		return 0;
 8002ca4:	2300      	movs	r3, #0
	}
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200003f4 	.word	0x200003f4

08002cb4 <MLX90614_ReadTObj1>:

float MLX90614_ReadTObj1() {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
	uint16_t data;

	if(MLX90614_ReadReg(MLX90614_TOBJ1, &data)) {
 8002cba:	1dbb      	adds	r3, r7, #6
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	2007      	movs	r0, #7
 8002cc0:	f7ff ffa6 	bl	8002c10 <MLX90614_ReadReg>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <MLX90614_ReadTObj1+0x32>
		if(data & 0x8000) {
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da02      	bge.n	8002cd8 <MLX90614_ReadTObj1+0x24>
			return -1.0;
 8002cd2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002cd6:	e008      	b.n	8002cea <MLX90614_ReadTObj1+0x36>
		}
		return MLX90614_CalcTemp(data);
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f824 	bl	8002d28 <MLX90614_CalcTemp>
 8002ce0:	eef0 7a40 	vmov.f32	s15, s0
 8002ce4:	e001      	b.n	8002cea <MLX90614_ReadTObj1+0x36>
	}
	return -1.00;
 8002ce6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <MLX90614_ReadTAmb>:
		return MLX90614_CalcTemp(data);
	}
	return -1.00;
}

float MLX90614_ReadTAmb() {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
	uint16_t data;

	if(MLX90614_ReadReg(MLX90614_TAMB, &data)) {
 8002cfa:	1dbb      	adds	r3, r7, #6
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	2006      	movs	r0, #6
 8002d00:	f7ff ff86 	bl	8002c10 <MLX90614_ReadReg>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <MLX90614_ReadTAmb+0x24>
		return MLX90614_CalcTemp(data);
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 f80b 	bl	8002d28 <MLX90614_CalcTemp>
 8002d12:	eef0 7a40 	vmov.f32	s15, s0
 8002d16:	e001      	b.n	8002d1c <MLX90614_ReadTAmb+0x28>
	}
	return -1.00;
 8002d18:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8002d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <MLX90614_CalcTemp>:

float MLX90614_CalcTemp(uint16_t rawTemp) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
	float temp;

	temp = (int16_t)rawTemp*0.02 - 273.15; //Celsius
 8002d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fbfc 	bl	8000534 <__aeabi_i2d>
 8002d3c:	a30e      	add	r3, pc, #56	; (adr r3, 8002d78 <MLX90614_CalcTemp+0x50>)
 8002d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d42:	f7fd fc61 	bl	8000608 <__aeabi_dmul>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	a30c      	add	r3, pc, #48	; (adr r3, 8002d80 <MLX90614_CalcTemp+0x58>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f7fd faa0 	bl	8000298 <__aeabi_dsub>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f7fd ff4a 	bl	8000bf8 <__aeabi_d2f>
 8002d64:	4603      	mov	r3, r0
 8002d66:	60fb      	str	r3, [r7, #12]

	return temp;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	ee07 3a90 	vmov	s15, r3
	//TO DO: Implement other units
}
 8002d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	47ae147b 	.word	0x47ae147b
 8002d7c:	3f947ae1 	.word	0x3f947ae1
 8002d80:	66666666 	.word	0x66666666
 8002d84:	40711266 	.word	0x40711266

08002d88 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8002d92:	23ff      	movs	r3, #255	; 0xff
 8002d94:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	e020      	b.n	8002dde <calculate_crc+0x56>
		crc ^= data[i];
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	4053      	eors	r3, r2
 8002da8:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	e010      	b.n	8002dd2 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8002db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da06      	bge.n	8002dc6 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002dc2:	75fb      	strb	r3, [r7, #23]
 8002dc4:	e002      	b.n	8002dcc <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b07      	cmp	r3, #7
 8002dd6:	d9eb      	bls.n	8002db0 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d3da      	bcc.n	8002d9c <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8002e00:	887b      	ldrh	r3, [r7, #2]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	733b      	strb	r3, [r7, #12]
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	889b      	ldrh	r3, [r3, #4]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	b299      	uxth	r1, r3
 8002e1c:	f107 020c 	add.w	r2, r7, #12
 8002e20:	231e      	movs	r3, #30
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2302      	movs	r3, #2
 8002e26:	f001 fad9 	bl	80043dc <HAL_I2C_Master_Transmit>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <sht3x_send_command+0x42>
	}

	return true;
 8002e34:	2301      	movs	r3, #1
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	460a      	mov	r2, r1
 8002e48:	71fb      	strb	r3, [r7, #7]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	79bb      	ldrb	r3, [r7, #6]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af04      	add	r7, sp, #16
 8002e72:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <sht3x_init+0x1e>
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <sht3x_init+0x74>)
 8002e80:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <sht3x_init+0x78>)
 8002e82:	2138      	movs	r1, #56	; 0x38
 8002e84:	4818      	ldr	r0, [pc, #96]	; (8002ee8 <sht3x_init+0x7c>)
 8002e86:	f004 fb27 	bl	80074d8 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	889b      	ldrh	r3, [r3, #4]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	b299      	uxth	r1, r3
 8002e96:	231e      	movs	r3, #30
 8002e98:	9302      	str	r3, [sp, #8]
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8002eaa:	f001 feb5 	bl	8004c18 <HAL_I2C_Mem_Read>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e00e      	b.n	8002ed6 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff62 	bl	8002d88 <calculate_crc>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8002ec8:	7bbb      	ldrb	r3, [r7, #14]
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <sht3x_init+0x68>
		return false;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <sht3x_init+0x6a>
	}

	return true;
 8002ed4:	2301      	movs	r3, #1
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	0800d370 	.word	0x0800d370
 8002ee4:	0800d3c4 	.word	0x0800d3c4
 8002ee8:	0800d3b0 	.word	0x0800d3b0

08002eec <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8002ef8:	f642 4106 	movw	r1, #11270	; 0x2c06
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff ff79 	bl	8002df4 <sht3x_send_command>

	HAL_Delay(1);
 8002f02:	2001      	movs	r0, #1
 8002f04:	f000 fbc6 	bl	8003694 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	889b      	ldrh	r3, [r3, #4]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	b299      	uxth	r1, r3
 8002f14:	f107 0214 	add.w	r2, r7, #20
 8002f18:	231e      	movs	r3, #30
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2306      	movs	r3, #6
 8002f1e:	f001 fb5b 	bl	80045d8 <HAL_I2C_Master_Receive>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e050      	b.n	8002fce <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	2102      	movs	r1, #2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ff28 	bl	8002d88 <calculate_crc>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	3303      	adds	r3, #3
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff1f 	bl	8002d88 <calculate_crc>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8002f4e:	7dbb      	ldrb	r3, [r7, #22]
 8002f50:	7ffa      	ldrb	r2, [r7, #31]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d103      	bne.n	8002f5e <sht3x_read_temperature_and_humidity+0x72>
 8002f56:	7e7b      	ldrb	r3, [r7, #25]
 8002f58:	7fba      	ldrb	r2, [r7, #30]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d001      	beq.n	8002f62 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e035      	b.n	8002fce <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 8002f62:	7d3b      	ldrb	r3, [r7, #20]
 8002f64:	7d7a      	ldrb	r2, [r7, #21]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff68 	bl	8002e3e <uint8_to_uint16>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	7e3a      	ldrb	r2, [r7, #24]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff60 	bl	8002e3e <uint8_to_uint16>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8002f82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002fd8 <sht3x_read_temperature_and_humidity+0xec>
 8002f92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f96:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002fdc <sht3x_read_temperature_and_humidity+0xf0>
 8002f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f9e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002fe0 <sht3x_read_temperature_and_humidity+0xf4>
 8002fa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8002fac:	8b7b      	ldrh	r3, [r7, #26]
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002fe4 <sht3x_read_temperature_and_humidity+0xf8>
 8002fba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fbe:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002fdc <sht3x_read_temperature_and_humidity+0xf0>
 8002fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8002fcc:	2301      	movs	r3, #1
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	432f0000 	.word	0x432f0000
 8002fdc:	477fff00 	.word	0x477fff00
 8002fe0:	42340000 	.word	0x42340000
 8002fe4:	42c80000 	.word	0x42c80000

08002fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_MspInit+0x4c>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <HAL_MspInit+0x4c>)
 8002ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <HAL_MspInit+0x4c>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_MspInit+0x4c>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a08      	ldr	r2, [pc, #32]	; (8003034 <HAL_MspInit+0x4c>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_MspInit+0x4c>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800

08003038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_ADC_MspInit+0x7c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d127      	bne.n	80030aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <HAL_ADC_MspInit+0x80>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <HAL_ADC_MspInit+0x80>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003068:	6453      	str	r3, [r2, #68]	; 0x44
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <HAL_ADC_MspInit+0x80>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_ADC_MspInit+0x80>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_ADC_MspInit+0x80>)
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_ADC_MspInit+0x80>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003092:	2302      	movs	r3, #2
 8003094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003096:	2303      	movs	r3, #3
 8003098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4619      	mov	r1, r3
 80030a4:	4805      	ldr	r0, [pc, #20]	; (80030bc <HAL_ADC_MspInit+0x84>)
 80030a6:	f000 fe9d 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030aa:	bf00      	nop
 80030ac:	3728      	adds	r7, #40	; 0x28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40012000 	.word	0x40012000
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40020400 	.word	0x40020400

080030c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a42      	ldr	r2, [pc, #264]	; (80031e8 <HAL_I2C_MspInit+0x128>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d12d      	bne.n	800313e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a40      	ldr	r2, [pc, #256]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b3e      	ldr	r3, [pc, #248]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003104:	2312      	movs	r3, #18
 8003106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003110:	2304      	movs	r3, #4
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003114:	f107 031c 	add.w	r3, r7, #28
 8003118:	4619      	mov	r1, r3
 800311a:	4835      	ldr	r0, [pc, #212]	; (80031f0 <HAL_I2C_MspInit+0x130>)
 800311c:	f000 fe62 	bl	8003de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	4a30      	ldr	r2, [pc, #192]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 800312a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800312e:	6413      	str	r3, [r2, #64]	; 0x40
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800313c:	e04f      	b.n	80031de <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <HAL_I2C_MspInit+0x134>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d14a      	bne.n	80031de <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	4b27      	ldr	r3, [pc, #156]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6313      	str	r3, [r2, #48]	; 0x30
 8003158:	4b24      	ldr	r3, [pc, #144]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 800316e:	f043 0302 	orr.w	r3, r3, #2
 8003172:	6313      	str	r3, [r2, #48]	; 0x30
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003186:	2312      	movs	r3, #18
 8003188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318e:	2303      	movs	r3, #3
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003192:	2304      	movs	r3, #4
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003196:	f107 031c 	add.w	r3, r7, #28
 800319a:	4619      	mov	r1, r3
 800319c:	4816      	ldr	r0, [pc, #88]	; (80031f8 <HAL_I2C_MspInit+0x138>)
 800319e:	f000 fe21 	bl	8003de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031a2:	2310      	movs	r3, #16
 80031a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a6:	2312      	movs	r3, #18
 80031a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80031b2:	2309      	movs	r3, #9
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	4619      	mov	r1, r3
 80031bc:	480c      	ldr	r0, [pc, #48]	; (80031f0 <HAL_I2C_MspInit+0x130>)
 80031be:	f000 fe11 	bl	8003de4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a08      	ldr	r2, [pc, #32]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 80031cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_I2C_MspInit+0x12c>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
}
 80031de:	bf00      	nop
 80031e0:	3730      	adds	r7, #48	; 0x30
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40005400 	.word	0x40005400
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40005c00 	.word	0x40005c00
 80031f8:	40020000 	.word	0x40020000

080031fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <HAL_TIM_Base_MspInit+0x48>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d115      	bne.n	800323a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_TIM_Base_MspInit+0x4c>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <HAL_TIM_Base_MspInit+0x4c>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_TIM_Base_MspInit+0x4c>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	201d      	movs	r0, #29
 8003230:	f000 fda1 	bl	8003d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003234:	201d      	movs	r0, #29
 8003236:	f000 fdba 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40000400 	.word	0x40000400
 8003248:	40023800 	.word	0x40023800

0800324c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	; 0x30
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a32      	ldr	r2, [pc, #200]	; (8003334 <HAL_UART_MspInit+0xe8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d12d      	bne.n	80032ca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <HAL_UART_MspInit+0xec>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4a30      	ldr	r2, [pc, #192]	; (8003338 <HAL_UART_MspInit+0xec>)
 8003278:	f043 0310 	orr.w	r3, r3, #16
 800327c:	6453      	str	r3, [r2, #68]	; 0x44
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <HAL_UART_MspInit+0xec>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_UART_MspInit+0xec>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a29      	ldr	r2, [pc, #164]	; (8003338 <HAL_UART_MspInit+0xec>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b27      	ldr	r3, [pc, #156]	; (8003338 <HAL_UART_MspInit+0xec>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b4:	2303      	movs	r3, #3
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032b8:	2307      	movs	r3, #7
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032bc:	f107 031c 	add.w	r3, r7, #28
 80032c0:	4619      	mov	r1, r3
 80032c2:	481e      	ldr	r0, [pc, #120]	; (800333c <HAL_UART_MspInit+0xf0>)
 80032c4:	f000 fd8e 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032c8:	e030      	b.n	800332c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <HAL_UART_MspInit+0xf4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d12b      	bne.n	800332c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <HAL_UART_MspInit+0xec>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4a16      	ldr	r2, [pc, #88]	; (8003338 <HAL_UART_MspInit+0xec>)
 80032de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e2:	6413      	str	r3, [r2, #64]	; 0x40
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <HAL_UART_MspInit+0xec>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	4b10      	ldr	r3, [pc, #64]	; (8003338 <HAL_UART_MspInit+0xec>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	4a0f      	ldr	r2, [pc, #60]	; (8003338 <HAL_UART_MspInit+0xec>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_UART_MspInit+0xec>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800330c:	230c      	movs	r3, #12
 800330e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003318:	2303      	movs	r3, #3
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800331c:	2307      	movs	r3, #7
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	4619      	mov	r1, r3
 8003326:	4805      	ldr	r0, [pc, #20]	; (800333c <HAL_UART_MspInit+0xf0>)
 8003328:	f000 fd5c 	bl	8003de4 <HAL_GPIO_Init>
}
 800332c:	bf00      	nop
 800332e:	3730      	adds	r7, #48	; 0x30
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40011000 	.word	0x40011000
 8003338:	40023800 	.word	0x40023800
 800333c:	40020000 	.word	0x40020000
 8003340:	40004400 	.word	0x40004400

08003344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003348:	e7fe      	b.n	8003348 <NMI_Handler+0x4>

0800334a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800334e:	e7fe      	b.n	800334e <HardFault_Handler+0x4>

08003350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <MemManage_Handler+0x4>

08003356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800335a:	e7fe      	b.n	800335a <BusFault_Handler+0x4>

0800335c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <UsageFault_Handler+0x4>

08003362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003390:	f000 f960 	bl	8003654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	bd80      	pop	{r7, pc}

08003398 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800339c:	4802      	ldr	r0, [pc, #8]	; (80033a8 <TIM3_IRQHandler+0x10>)
 800339e:	f003 f945 	bl	800662c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	200002f4 	.word	0x200002f4

080033ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return 1;
 80033b0:	2301      	movs	r3, #1
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <_kill>:

int _kill(int pid, int sig)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033c6:	f004 f8a5 	bl	8007514 <__errno>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2216      	movs	r2, #22
 80033ce:	601a      	str	r2, [r3, #0]
  return -1;
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <_exit>:

void _exit (int status)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ffe7 	bl	80033bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80033ee:	e7fe      	b.n	80033ee <_exit+0x12>

080033f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e00a      	b.n	8003418 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003402:	f3af 8000 	nop.w
 8003406:	4601      	mov	r1, r0
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	60ba      	str	r2, [r7, #8]
 800340e:	b2ca      	uxtb	r2, r1
 8003410:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	3301      	adds	r3, #1
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	dbf0      	blt.n	8003402 <_read+0x12>
  }

  return len;
 8003420:	687b      	ldr	r3, [r7, #4]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b086      	sub	sp, #24
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	e009      	b.n	8003450 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	60ba      	str	r2, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3301      	adds	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	dbf1      	blt.n	800343c <_write+0x12>
  }
  return len;
 8003458:	687b      	ldr	r3, [r7, #4]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <_close>:

int _close(int file)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800348a:	605a      	str	r2, [r3, #4]
  return 0;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <_isatty>:

int _isatty(int file)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034a2:	2301      	movs	r3, #1
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <_sbrk+0x5c>)
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <_sbrk+0x60>)
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <_sbrk+0x64>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d102      	bne.n	80034ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034e8:	4b11      	ldr	r3, [pc, #68]	; (8003530 <_sbrk+0x64>)
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <_sbrk+0x68>)
 80034ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <_sbrk+0x64>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d207      	bcs.n	800350c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034fc:	f004 f80a 	bl	8007514 <__errno>
 8003500:	4603      	mov	r3, r0
 8003502:	220c      	movs	r2, #12
 8003504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	e009      	b.n	8003520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <_sbrk+0x64>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <_sbrk+0x64>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	4a05      	ldr	r2, [pc, #20]	; (8003530 <_sbrk+0x64>)
 800351c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800351e:	68fb      	ldr	r3, [r7, #12]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20020000 	.word	0x20020000
 800352c:	00000400 	.word	0x00000400
 8003530:	20000478 	.word	0x20000478
 8003534:	20000490 	.word	0x20000490

08003538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <SystemInit+0x20>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	4a05      	ldr	r2, [pc, #20]	; (8003558 <SystemInit+0x20>)
 8003544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800355c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003594 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003560:	480d      	ldr	r0, [pc, #52]	; (8003598 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003562:	490e      	ldr	r1, [pc, #56]	; (800359c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003564:	4a0e      	ldr	r2, [pc, #56]	; (80035a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003568:	e002      	b.n	8003570 <LoopCopyDataInit>

0800356a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800356a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800356c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800356e:	3304      	adds	r3, #4

08003570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003574:	d3f9      	bcc.n	800356a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003576:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003578:	4c0b      	ldr	r4, [pc, #44]	; (80035a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800357a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800357c:	e001      	b.n	8003582 <LoopFillZerobss>

0800357e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800357e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003580:	3204      	adds	r2, #4

08003582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003584:	d3fb      	bcc.n	800357e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003586:	f7ff ffd7 	bl	8003538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800358a:	f003 ffdb 	bl	8007544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800358e:	f7fe fc01 	bl	8001d94 <main>
  bx  lr    
 8003592:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800359c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80035a0:	0800d8d8 	.word	0x0800d8d8
  ldr r2, =_sbss
 80035a4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80035a8:	20000490 	.word	0x20000490

080035ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035ac:	e7fe      	b.n	80035ac <ADC_IRQHandler>
	...

080035b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <HAL_Init+0x40>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <HAL_Init+0x40>)
 80035ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_Init+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <HAL_Init+0x40>)
 80035c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_Init+0x40>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a07      	ldr	r2, [pc, #28]	; (80035f0 <HAL_Init+0x40>)
 80035d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d8:	2003      	movs	r0, #3
 80035da:	f000 fbc1 	bl	8003d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035de:	200f      	movs	r0, #15
 80035e0:	f000 f808 	bl	80035f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035e4:	f7ff fd00 	bl	8002fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023c00 	.word	0x40023c00

080035f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035fc:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_InitTick+0x54>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_InitTick+0x58>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4619      	mov	r1, r3
 8003606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800360a:	fbb3 f3f1 	udiv	r3, r3, r1
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fbd9 	bl	8003dca <HAL_SYSTICK_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e00e      	b.n	8003640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d80a      	bhi.n	800363e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003628:	2200      	movs	r2, #0
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f000 fba1 	bl	8003d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003634:	4a06      	ldr	r2, [pc, #24]	; (8003650 <HAL_InitTick+0x5c>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000008 	.word	0x20000008
 800364c:	20000010 	.word	0x20000010
 8003650:	2000000c 	.word	0x2000000c

08003654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_IncTick+0x20>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_IncTick+0x24>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4413      	add	r3, r2
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_IncTick+0x24>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000010 	.word	0x20000010
 8003678:	2000047c 	.word	0x2000047c

0800367c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return uwTick;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_GetTick+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	2000047c 	.word	0x2000047c

08003694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff ffee 	bl	800367c <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d005      	beq.n	80036ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <HAL_Delay+0x44>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ba:	bf00      	nop
 80036bc:	f7ff ffde 	bl	800367c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8f7      	bhi.n	80036bc <HAL_Delay+0x28>
  {
  }
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000010 	.word	0x20000010

080036dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e033      	b.n	800375a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fc9c 	bl	8003038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d118      	bne.n	800374c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003722:	f023 0302 	bic.w	r3, r3, #2
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f94a 	bl	80039c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40
 800374a:	e001      	b.n	8003750 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x1c>
 800377c:	2302      	movs	r3, #2
 800377e:	e113      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x244>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b09      	cmp	r3, #9
 800378e:	d925      	bls.n	80037dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68d9      	ldr	r1, [r3, #12]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	4613      	mov	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	3b1e      	subs	r3, #30
 80037a6:	2207      	movs	r2, #7
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43da      	mvns	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	400a      	ands	r2, r1
 80037b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68d9      	ldr	r1, [r3, #12]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	4618      	mov	r0, r3
 80037c8:	4603      	mov	r3, r0
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4403      	add	r3, r0
 80037ce:	3b1e      	subs	r3, #30
 80037d0:	409a      	lsls	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	e022      	b.n	8003822 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6919      	ldr	r1, [r3, #16]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	4613      	mov	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	2207      	movs	r2, #7
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43da      	mvns	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	400a      	ands	r2, r1
 80037fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6919      	ldr	r1, [r3, #16]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	4618      	mov	r0, r3
 8003812:	4603      	mov	r3, r0
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	4403      	add	r3, r0
 8003818:	409a      	lsls	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b06      	cmp	r3, #6
 8003828:	d824      	bhi.n	8003874 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	3b05      	subs	r3, #5
 800383c:	221f      	movs	r2, #31
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	400a      	ands	r2, r1
 800384a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	4618      	mov	r0, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	3b05      	subs	r3, #5
 8003866:	fa00 f203 	lsl.w	r2, r0, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	635a      	str	r2, [r3, #52]	; 0x34
 8003872:	e04c      	b.n	800390e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	d824      	bhi.n	80038c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	3b23      	subs	r3, #35	; 0x23
 800388e:	221f      	movs	r2, #31
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43da      	mvns	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	400a      	ands	r2, r1
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4618      	mov	r0, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	3b23      	subs	r3, #35	; 0x23
 80038b8:	fa00 f203 	lsl.w	r2, r0, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
 80038c4:	e023      	b.n	800390e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	3b41      	subs	r3, #65	; 0x41
 80038d8:	221f      	movs	r2, #31
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	400a      	ands	r2, r1
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	4618      	mov	r0, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	3b41      	subs	r3, #65	; 0x41
 8003902:	fa00 f203 	lsl.w	r2, r0, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800390e:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <HAL_ADC_ConfigChannel+0x250>)
 8003910:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a28      	ldr	r2, [pc, #160]	; (80039b8 <HAL_ADC_ConfigChannel+0x254>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d10f      	bne.n	800393c <HAL_ADC_ConfigChannel+0x1d8>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b12      	cmp	r3, #18
 8003922:	d10b      	bne.n	800393c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <HAL_ADC_ConfigChannel+0x254>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d12b      	bne.n	800399e <HAL_ADC_ConfigChannel+0x23a>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <HAL_ADC_ConfigChannel+0x258>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <HAL_ADC_ConfigChannel+0x1f4>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b11      	cmp	r3, #17
 8003956:	d122      	bne.n	800399e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a11      	ldr	r2, [pc, #68]	; (80039bc <HAL_ADC_ConfigChannel+0x258>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d111      	bne.n	800399e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_ADC_ConfigChannel+0x25c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <HAL_ADC_ConfigChannel+0x260>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	0c9a      	lsrs	r2, r3, #18
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003990:	e002      	b.n	8003998 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	3b01      	subs	r3, #1
 8003996:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f9      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40012300 	.word	0x40012300
 80039b8:	40012000 	.word	0x40012000
 80039bc:	10000012 	.word	0x10000012
 80039c0:	20000008 	.word	0x20000008
 80039c4:	431bde83 	.word	0x431bde83

080039c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039d0:	4b79      	ldr	r3, [pc, #484]	; (8003bb8 <ADC_Init+0x1f0>)
 80039d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	021a      	lsls	r2, r3, #8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6899      	ldr	r1, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	4a58      	ldr	r2, [pc, #352]	; (8003bbc <ADC_Init+0x1f4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d022      	beq.n	8003aa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6899      	ldr	r1, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6899      	ldr	r1, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	e00f      	b.n	8003ac6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ab4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ac4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0202 	bic.w	r2, r2, #2
 8003ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7e1b      	ldrb	r3, [r3, #24]
 8003ae0:	005a      	lsls	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01b      	beq.n	8003b2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6859      	ldr	r1, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	035a      	lsls	r2, r3, #13
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	e007      	b.n	8003b3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	051a      	lsls	r2, r3, #20
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b7e:	025a      	lsls	r2, r3, #9
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6899      	ldr	r1, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	029a      	lsls	r2, r3, #10
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40012300 	.word	0x40012300
 8003bbc:	0f000001 	.word	0x0f000001

08003bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	60d3      	str	r3, [r2, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <__NVIC_GetPriorityGrouping+0x18>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 0307 	and.w	r3, r3, #7
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	db0b      	blt.n	8003c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	4907      	ldr	r1, [pc, #28]	; (8003c5c <__NVIC_EnableIRQ+0x38>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2001      	movs	r0, #1
 8003c46:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	e000e100 	.word	0xe000e100

08003c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	db0a      	blt.n	8003c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	490c      	ldr	r1, [pc, #48]	; (8003cac <__NVIC_SetPriority+0x4c>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	0112      	lsls	r2, r2, #4
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	440b      	add	r3, r1
 8003c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c88:	e00a      	b.n	8003ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <__NVIC_SetPriority+0x50>)
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	3b04      	subs	r3, #4
 8003c98:	0112      	lsls	r2, r2, #4
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	761a      	strb	r2, [r3, #24]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000e100 	.word	0xe000e100
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f1c3 0307 	rsb	r3, r3, #7
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	bf28      	it	cs
 8003cd2:	2304      	movcs	r3, #4
 8003cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d902      	bls.n	8003ce4 <NVIC_EncodePriority+0x30>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3b03      	subs	r3, #3
 8003ce2:	e000      	b.n	8003ce6 <NVIC_EncodePriority+0x32>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	43d9      	mvns	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d0c:	4313      	orrs	r3, r2
         );
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d2c:	d301      	bcc.n	8003d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e00f      	b.n	8003d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <SysTick_Config+0x40>)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3a:	210f      	movs	r1, #15
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d40:	f7ff ff8e 	bl	8003c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <SysTick_Config+0x40>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <SysTick_Config+0x40>)
 8003d4c:	2207      	movs	r2, #7
 8003d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	e000e010 	.word	0xe000e010

08003d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff29 	bl	8003bc0 <__NVIC_SetPriorityGrouping>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d88:	f7ff ff3e 	bl	8003c08 <__NVIC_GetPriorityGrouping>
 8003d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f7ff ff8e 	bl	8003cb4 <NVIC_EncodePriority>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff5d 	bl	8003c60 <__NVIC_SetPriority>
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff31 	bl	8003c24 <__NVIC_EnableIRQ>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ffa2 	bl	8003d1c <SysTick_Config>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	; 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	e159      	b.n	80040b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e00:	2201      	movs	r2, #1
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	f040 8148 	bne.w	80040ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d005      	beq.n	8003e36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d130      	bne.n	8003e98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	2203      	movs	r2, #3
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 0201 	and.w	r2, r3, #1
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d017      	beq.n	8003ed4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	2203      	movs	r2, #3
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d123      	bne.n	8003f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	08da      	lsrs	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3208      	adds	r2, #8
 8003ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	08da      	lsrs	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3208      	adds	r2, #8
 8003f22:	69b9      	ldr	r1, [r7, #24]
 8003f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	2203      	movs	r2, #3
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0203 	and.w	r2, r3, #3
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80a2 	beq.w	80040ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	4b57      	ldr	r3, [pc, #348]	; (80040cc <HAL_GPIO_Init+0x2e8>)
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	4a56      	ldr	r2, [pc, #344]	; (80040cc <HAL_GPIO_Init+0x2e8>)
 8003f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f78:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7a:	4b54      	ldr	r3, [pc, #336]	; (80040cc <HAL_GPIO_Init+0x2e8>)
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f86:	4a52      	ldr	r2, [pc, #328]	; (80040d0 <HAL_GPIO_Init+0x2ec>)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	220f      	movs	r2, #15
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a49      	ldr	r2, [pc, #292]	; (80040d4 <HAL_GPIO_Init+0x2f0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d019      	beq.n	8003fe6 <HAL_GPIO_Init+0x202>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a48      	ldr	r2, [pc, #288]	; (80040d8 <HAL_GPIO_Init+0x2f4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_GPIO_Init+0x1fe>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a47      	ldr	r2, [pc, #284]	; (80040dc <HAL_GPIO_Init+0x2f8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00d      	beq.n	8003fde <HAL_GPIO_Init+0x1fa>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a46      	ldr	r2, [pc, #280]	; (80040e0 <HAL_GPIO_Init+0x2fc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <HAL_GPIO_Init+0x1f6>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a45      	ldr	r2, [pc, #276]	; (80040e4 <HAL_GPIO_Init+0x300>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d101      	bne.n	8003fd6 <HAL_GPIO_Init+0x1f2>
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	e008      	b.n	8003fe8 <HAL_GPIO_Init+0x204>
 8003fd6:	2307      	movs	r3, #7
 8003fd8:	e006      	b.n	8003fe8 <HAL_GPIO_Init+0x204>
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e004      	b.n	8003fe8 <HAL_GPIO_Init+0x204>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e002      	b.n	8003fe8 <HAL_GPIO_Init+0x204>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <HAL_GPIO_Init+0x204>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	f002 0203 	and.w	r2, r2, #3
 8003fee:	0092      	lsls	r2, r2, #2
 8003ff0:	4093      	lsls	r3, r2
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ff8:	4935      	ldr	r1, [pc, #212]	; (80040d0 <HAL_GPIO_Init+0x2ec>)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	3302      	adds	r3, #2
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <HAL_GPIO_Init+0x304>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800402a:	4a2f      	ldr	r2, [pc, #188]	; (80040e8 <HAL_GPIO_Init+0x304>)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004030:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <HAL_GPIO_Init+0x304>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004054:	4a24      	ldr	r2, [pc, #144]	; (80040e8 <HAL_GPIO_Init+0x304>)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800405a:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <HAL_GPIO_Init+0x304>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800407e:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <HAL_GPIO_Init+0x304>)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004084:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <HAL_GPIO_Init+0x304>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040a8:	4a0f      	ldr	r2, [pc, #60]	; (80040e8 <HAL_GPIO_Init+0x304>)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3301      	adds	r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	f67f aea2 	bls.w	8003e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	3724      	adds	r7, #36	; 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40013800 	.word	0x40013800
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020400 	.word	0x40020400
 80040dc:	40020800 	.word	0x40020800
 80040e0:	40020c00 	.word	0x40020c00
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40013c00 	.word	0x40013c00

080040ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	807b      	strh	r3, [r7, #2]
 80040f8:	4613      	mov	r3, r2
 80040fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040fc:	787b      	ldrb	r3, [r7, #1]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004102:	887a      	ldrh	r2, [r7, #2]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004108:	e003      	b.n	8004112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800410a:	887b      	ldrh	r3, [r7, #2]
 800410c:	041a      	lsls	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	619a      	str	r2, [r3, #24]
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	460b      	mov	r3, r1
 8004128:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004130:	887a      	ldrh	r2, [r7, #2]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4013      	ands	r3, r2
 8004136:	041a      	lsls	r2, r3, #16
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43d9      	mvns	r1, r3
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	400b      	ands	r3, r1
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e12b      	b.n	80043be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fe ffa0 	bl	80030c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2224      	movs	r2, #36	; 0x24
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041b8:	f002 f95e 	bl	8006478 <HAL_RCC_GetPCLK1Freq>
 80041bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4a81      	ldr	r2, [pc, #516]	; (80043c8 <HAL_I2C_Init+0x274>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d807      	bhi.n	80041d8 <HAL_I2C_Init+0x84>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4a80      	ldr	r2, [pc, #512]	; (80043cc <HAL_I2C_Init+0x278>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	bf94      	ite	ls
 80041d0:	2301      	movls	r3, #1
 80041d2:	2300      	movhi	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e006      	b.n	80041e6 <HAL_I2C_Init+0x92>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a7d      	ldr	r2, [pc, #500]	; (80043d0 <HAL_I2C_Init+0x27c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	bf94      	ite	ls
 80041e0:	2301      	movls	r3, #1
 80041e2:	2300      	movhi	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0e7      	b.n	80043be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4a78      	ldr	r2, [pc, #480]	; (80043d4 <HAL_I2C_Init+0x280>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	0c9b      	lsrs	r3, r3, #18
 80041f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a6a      	ldr	r2, [pc, #424]	; (80043c8 <HAL_I2C_Init+0x274>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d802      	bhi.n	8004228 <HAL_I2C_Init+0xd4>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	3301      	adds	r3, #1
 8004226:	e009      	b.n	800423c <HAL_I2C_Init+0xe8>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	4a69      	ldr	r2, [pc, #420]	; (80043d8 <HAL_I2C_Init+0x284>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	099b      	lsrs	r3, r3, #6
 800423a:	3301      	adds	r3, #1
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	430b      	orrs	r3, r1
 8004242:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800424e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	495c      	ldr	r1, [pc, #368]	; (80043c8 <HAL_I2C_Init+0x274>)
 8004258:	428b      	cmp	r3, r1
 800425a:	d819      	bhi.n	8004290 <HAL_I2C_Init+0x13c>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1e59      	subs	r1, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	fbb1 f3f3 	udiv	r3, r1, r3
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004270:	400b      	ands	r3, r1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_I2C_Init+0x138>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1e59      	subs	r1, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fbb1 f3f3 	udiv	r3, r1, r3
 8004284:	3301      	adds	r3, #1
 8004286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428a:	e051      	b.n	8004330 <HAL_I2C_Init+0x1dc>
 800428c:	2304      	movs	r3, #4
 800428e:	e04f      	b.n	8004330 <HAL_I2C_Init+0x1dc>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d111      	bne.n	80042bc <HAL_I2C_Init+0x168>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1e58      	subs	r0, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	440b      	add	r3, r1
 80042a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042aa:	3301      	adds	r3, #1
 80042ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	e012      	b.n	80042e2 <HAL_I2C_Init+0x18e>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1e58      	subs	r0, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6859      	ldr	r1, [r3, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	0099      	lsls	r1, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Init+0x196>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e022      	b.n	8004330 <HAL_I2C_Init+0x1dc>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10e      	bne.n	8004310 <HAL_I2C_Init+0x1bc>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1e58      	subs	r0, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6859      	ldr	r1, [r3, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	440b      	add	r3, r1
 8004300:	fbb0 f3f3 	udiv	r3, r0, r3
 8004304:	3301      	adds	r3, #1
 8004306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430e:	e00f      	b.n	8004330 <HAL_I2C_Init+0x1dc>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1e58      	subs	r0, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6859      	ldr	r1, [r3, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	0099      	lsls	r1, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	fbb0 f3f3 	udiv	r3, r0, r3
 8004326:	3301      	adds	r3, #1
 8004328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	6809      	ldr	r1, [r1, #0]
 8004334:	4313      	orrs	r3, r2
 8004336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800435e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6911      	ldr	r1, [r2, #16]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68d2      	ldr	r2, [r2, #12]
 800436a:	4311      	orrs	r1, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	430b      	orrs	r3, r1
 8004372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	000186a0 	.word	0x000186a0
 80043cc:	001e847f 	.word	0x001e847f
 80043d0:	003d08ff 	.word	0x003d08ff
 80043d4:	431bde83 	.word	0x431bde83
 80043d8:	10624dd3 	.word	0x10624dd3

080043dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	461a      	mov	r2, r3
 80043e8:	460b      	mov	r3, r1
 80043ea:	817b      	strh	r3, [r7, #10]
 80043ec:	4613      	mov	r3, r2
 80043ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043f0:	f7ff f944 	bl	800367c <HAL_GetTick>
 80043f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b20      	cmp	r3, #32
 8004400:	f040 80e0 	bne.w	80045c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	2319      	movs	r3, #25
 800440a:	2201      	movs	r2, #1
 800440c:	4970      	ldr	r1, [pc, #448]	; (80045d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f001 fa24 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800441a:	2302      	movs	r3, #2
 800441c:	e0d3      	b.n	80045c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_I2C_Master_Transmit+0x50>
 8004428:	2302      	movs	r3, #2
 800442a:	e0cc      	b.n	80045c6 <HAL_I2C_Master_Transmit+0x1ea>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d007      	beq.n	8004452 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0201 	orr.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004460:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2221      	movs	r2, #33	; 0x21
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2210      	movs	r2, #16
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	893a      	ldrh	r2, [r7, #8]
 8004482:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a50      	ldr	r2, [pc, #320]	; (80045d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004494:	8979      	ldrh	r1, [r7, #10]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	6a3a      	ldr	r2, [r7, #32]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 ff10 	bl	80052c0 <I2C_MasterRequestWrite>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e08d      	b.n	80045c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044c0:	e066      	b.n	8004590 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	6a39      	ldr	r1, [r7, #32]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f001 fa9e 	bl	8005a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d107      	bne.n	80044ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e06b      	b.n	80045c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	781a      	ldrb	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d11b      	bne.n	8004564 <HAL_I2C_Master_Transmit+0x188>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004530:	2b00      	cmp	r3, #0
 8004532:	d017      	beq.n	8004564 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	6a39      	ldr	r1, [r7, #32]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f001 fa8e 	bl	8005a8a <I2C_WaitOnBTFFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00d      	beq.n	8004590 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	2b04      	cmp	r3, #4
 800457a:	d107      	bne.n	800458c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e01a      	b.n	80045c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d194      	bne.n	80044c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	00100002 	.word	0x00100002
 80045d4:	ffff0000 	.word	0xffff0000

080045d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08c      	sub	sp, #48	; 0x30
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	461a      	mov	r2, r3
 80045e4:	460b      	mov	r3, r1
 80045e6:	817b      	strh	r3, [r7, #10]
 80045e8:	4613      	mov	r3, r2
 80045ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ec:	f7ff f846 	bl	800367c <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	f040 820b 	bne.w	8004a16 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	2319      	movs	r3, #25
 8004606:	2201      	movs	r2, #1
 8004608:	497c      	ldr	r1, [pc, #496]	; (80047fc <HAL_I2C_Master_Receive+0x224>)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f001 f926 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004616:	2302      	movs	r3, #2
 8004618:	e1fe      	b.n	8004a18 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_I2C_Master_Receive+0x50>
 8004624:	2302      	movs	r3, #2
 8004626:	e1f7      	b.n	8004a18 <HAL_I2C_Master_Receive+0x440>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	d007      	beq.n	800464e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2222      	movs	r2, #34	; 0x22
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2210      	movs	r2, #16
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	893a      	ldrh	r2, [r7, #8]
 800467e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a5c      	ldr	r2, [pc, #368]	; (8004800 <HAL_I2C_Master_Receive+0x228>)
 800468e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004690:	8979      	ldrh	r1, [r7, #10]
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fe94 	bl	80053c4 <I2C_MasterRequestRead>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e1b8      	b.n	8004a18 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d113      	bne.n	80046d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ae:	2300      	movs	r3, #0
 80046b0:	623b      	str	r3, [r7, #32]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	623b      	str	r3, [r7, #32]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e18c      	b.n	80049f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d11b      	bne.n	8004716 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e16c      	b.n	80049f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471a:	2b02      	cmp	r3, #2
 800471c:	d11b      	bne.n	8004756 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800473c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	e14c      	b.n	80049f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800477c:	e138      	b.n	80049f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	2b03      	cmp	r3, #3
 8004784:	f200 80f1 	bhi.w	800496a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	2b01      	cmp	r3, #1
 800478e:	d123      	bne.n	80047d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f001 f9b9 	bl	8005b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e139      	b.n	8004a18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047d6:	e10b      	b.n	80049f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d14e      	bne.n	800487e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	2200      	movs	r2, #0
 80047e8:	4906      	ldr	r1, [pc, #24]	; (8004804 <HAL_I2C_Master_Receive+0x22c>)
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f001 f836 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e10e      	b.n	8004a18 <HAL_I2C_Master_Receive+0x440>
 80047fa:	bf00      	nop
 80047fc:	00100002 	.word	0x00100002
 8004800:	ffff0000 	.word	0xffff0000
 8004804:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800487c:	e0b8      	b.n	80049f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	2200      	movs	r2, #0
 8004886:	4966      	ldr	r1, [pc, #408]	; (8004a20 <HAL_I2C_Master_Receive+0x448>)
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 ffe7 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0bf      	b.n	8004a18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	2200      	movs	r2, #0
 80048e2:	494f      	ldr	r1, [pc, #316]	; (8004a20 <HAL_I2C_Master_Receive+0x448>)
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 ffb9 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e091      	b.n	8004a18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004968:	e042      	b.n	80049f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f001 f8cc 	bl	8005b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e04c      	b.n	8004a18 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d118      	bne.n	80049f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f47f aec2 	bne.w	800477e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	00010004 	.word	0x00010004

08004a24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	461a      	mov	r2, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	817b      	strh	r3, [r7, #10]
 8004a36:	460b      	mov	r3, r1
 8004a38:	813b      	strh	r3, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a3e:	f7fe fe1d 	bl	800367c <HAL_GetTick>
 8004a42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	f040 80d9 	bne.w	8004c04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2319      	movs	r3, #25
 8004a58:	2201      	movs	r2, #1
 8004a5a:	496d      	ldr	r1, [pc, #436]	; (8004c10 <HAL_I2C_Mem_Write+0x1ec>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fefd 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e0cc      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_I2C_Mem_Write+0x56>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e0c5      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d007      	beq.n	8004aa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2221      	movs	r2, #33	; 0x21
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2240      	movs	r2, #64	; 0x40
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a4d      	ldr	r2, [pc, #308]	; (8004c14 <HAL_I2C_Mem_Write+0x1f0>)
 8004ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ae2:	88f8      	ldrh	r0, [r7, #6]
 8004ae4:	893a      	ldrh	r2, [r7, #8]
 8004ae6:	8979      	ldrh	r1, [r7, #10]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	4603      	mov	r3, r0
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fd34 	bl	8005560 <I2C_RequestMemoryWrite>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d052      	beq.n	8004ba4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e081      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 ff7e 	bl	8005a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00d      	beq.n	8004b2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d107      	bne.n	8004b2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e06b      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_I2C_Mem_Write+0x180>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d017      	beq.n	8004ba4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	781a      	ldrb	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1aa      	bne.n	8004b02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 ff6a 	bl	8005a8a <I2C_WaitOnBTFFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d107      	bne.n	8004bd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e016      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	00100002 	.word	0x00100002
 8004c14:	ffff0000 	.word	0xffff0000

08004c18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	4608      	mov	r0, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	817b      	strh	r3, [r7, #10]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	813b      	strh	r3, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c32:	f7fe fd23 	bl	800367c <HAL_GetTick>
 8004c36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	f040 8208 	bne.w	8005056 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2319      	movs	r3, #25
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	497b      	ldr	r1, [pc, #492]	; (8004e3c <HAL_I2C_Mem_Read+0x224>)
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fe03 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e1fb      	b.n	8005058 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_I2C_Mem_Read+0x56>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e1f4      	b.n	8005058 <HAL_I2C_Mem_Read+0x440>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d007      	beq.n	8004c94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2222      	movs	r2, #34	; 0x22
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2240      	movs	r2, #64	; 0x40
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a5b      	ldr	r2, [pc, #364]	; (8004e40 <HAL_I2C_Mem_Read+0x228>)
 8004cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cd6:	88f8      	ldrh	r0, [r7, #6]
 8004cd8:	893a      	ldrh	r2, [r7, #8]
 8004cda:	8979      	ldrh	r1, [r7, #10]
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fcd0 	bl	800568c <I2C_RequestMemoryRead>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e1b0      	b.n	8005058 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d113      	bne.n	8004d26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	623b      	str	r3, [r7, #32]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	623b      	str	r3, [r7, #32]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	623b      	str	r3, [r7, #32]
 8004d12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e184      	b.n	8005030 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d11b      	bne.n	8004d66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e164      	b.n	8005030 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d11b      	bne.n	8004da6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	e144      	b.n	8005030 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004dbc:	e138      	b.n	8005030 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	f200 80f1 	bhi.w	8004faa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d123      	bne.n	8004e18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fe99 	bl	8005b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e139      	b.n	8005058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e16:	e10b      	b.n	8005030 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d14e      	bne.n	8004ebe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	2200      	movs	r2, #0
 8004e28:	4906      	ldr	r1, [pc, #24]	; (8004e44 <HAL_I2C_Mem_Read+0x22c>)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fd16 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e10e      	b.n	8005058 <HAL_I2C_Mem_Read+0x440>
 8004e3a:	bf00      	nop
 8004e3c:	00100002 	.word	0x00100002
 8004e40:	ffff0000 	.word	0xffff0000
 8004e44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ebc:	e0b8      	b.n	8005030 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4966      	ldr	r1, [pc, #408]	; (8005060 <HAL_I2C_Mem_Read+0x448>)
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fcc7 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0bf      	b.n	8005058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	2200      	movs	r2, #0
 8004f22:	494f      	ldr	r1, [pc, #316]	; (8005060 <HAL_I2C_Mem_Read+0x448>)
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fc99 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e091      	b.n	8005058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fa8:	e042      	b.n	8005030 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fdac 	bl	8005b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e04c      	b.n	8005058 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d118      	bne.n	8005030 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	f47f aec2 	bne.w	8004dbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005056:	2302      	movs	r3, #2
  }
}
 8005058:	4618      	mov	r0, r3
 800505a:	3728      	adds	r7, #40	; 0x28
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	00010004 	.word	0x00010004

08005064 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	460b      	mov	r3, r1
 8005072:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005074:	f7fe fb02 	bl	800367c <HAL_GetTick>
 8005078:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b20      	cmp	r3, #32
 8005088:	f040 8111 	bne.w	80052ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	2319      	movs	r3, #25
 8005092:	2201      	movs	r2, #1
 8005094:	4988      	ldr	r1, [pc, #544]	; (80052b8 <HAL_I2C_IsDeviceReady+0x254>)
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fbe0 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
 80050a4:	e104      	b.n	80052b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_I2C_IsDeviceReady+0x50>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e0fd      	b.n	80052b0 <HAL_I2C_IsDeviceReady+0x24c>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d007      	beq.n	80050da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2224      	movs	r2, #36	; 0x24
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a70      	ldr	r2, [pc, #448]	; (80052bc <HAL_I2C_IsDeviceReady+0x258>)
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2200      	movs	r2, #0
 8005116:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fb9e 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00d      	beq.n	8005142 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005134:	d103      	bne.n	800513e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800513c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e0b6      	b.n	80052b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005142:	897b      	ldrh	r3, [r7, #10]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005150:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005152:	f7fe fa93 	bl	800367c <HAL_GetTick>
 8005156:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005186:	e025      	b.n	80051d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005188:	f7fe fa78 	bl	800367c <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d302      	bcc.n	800519e <HAL_I2C_IsDeviceReady+0x13a>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	22a0      	movs	r2, #160	; 0xa0
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	bf0c      	ite	eq
 80051b4:	2301      	moveq	r3, #1
 80051b6:	2300      	movne	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2ba0      	cmp	r3, #160	; 0xa0
 80051de:	d005      	beq.n	80051ec <HAL_I2C_IsDeviceReady+0x188>
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <HAL_I2C_IsDeviceReady+0x188>
 80051e6:	7dbb      	ldrb	r3, [r7, #22]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0cd      	beq.n	8005188 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d129      	bne.n	8005256 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005210:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	2319      	movs	r3, #25
 800522e:	2201      	movs	r2, #1
 8005230:	4921      	ldr	r1, [pc, #132]	; (80052b8 <HAL_I2C_IsDeviceReady+0x254>)
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fb12 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e036      	b.n	80052b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	e02c      	b.n	80052b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005264:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800526e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2319      	movs	r3, #25
 8005276:	2201      	movs	r2, #1
 8005278:	490f      	ldr	r1, [pc, #60]	; (80052b8 <HAL_I2C_IsDeviceReady+0x254>)
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 faee 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e012      	b.n	80052b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	3301      	adds	r3, #1
 800528e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	429a      	cmp	r2, r3
 8005296:	f4ff af32 	bcc.w	80050fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
  }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3720      	adds	r7, #32
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	00100002 	.word	0x00100002
 80052bc:	ffff0000 	.word	0xffff0000

080052c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	460b      	mov	r3, r1
 80052ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d006      	beq.n	80052ea <I2C_MasterRequestWrite+0x2a>
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d003      	beq.n	80052ea <I2C_MasterRequestWrite+0x2a>
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052e8:	d108      	bne.n	80052fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e00b      	b.n	8005314 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	2b12      	cmp	r3, #18
 8005302:	d107      	bne.n	8005314 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005312:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fa9b 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00d      	beq.n	8005348 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533a:	d103      	bne.n	8005344 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005342:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e035      	b.n	80053b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005350:	d108      	bne.n	8005364 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005352:	897b      	ldrh	r3, [r7, #10]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005360:	611a      	str	r2, [r3, #16]
 8005362:	e01b      	b.n	800539c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005364:	897b      	ldrh	r3, [r7, #10]
 8005366:	11db      	asrs	r3, r3, #7
 8005368:	b2db      	uxtb	r3, r3
 800536a:	f003 0306 	and.w	r3, r3, #6
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f063 030f 	orn	r3, r3, #15
 8005374:	b2da      	uxtb	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	490e      	ldr	r1, [pc, #56]	; (80053bc <I2C_MasterRequestWrite+0xfc>)
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fac1 	bl	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e010      	b.n	80053b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005392:	897b      	ldrh	r3, [r7, #10]
 8005394:	b2da      	uxtb	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	4907      	ldr	r1, [pc, #28]	; (80053c0 <I2C_MasterRequestWrite+0x100>)
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fab1 	bl	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	00010008 	.word	0x00010008
 80053c0:	00010002 	.word	0x00010002

080053c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	460b      	mov	r3, r1
 80053d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d006      	beq.n	80053fe <I2C_MasterRequestRead+0x3a>
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d003      	beq.n	80053fe <I2C_MasterRequestRead+0x3a>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053fc:	d108      	bne.n	8005410 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e00b      	b.n	8005428 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	2b11      	cmp	r3, #17
 8005416:	d107      	bne.n	8005428 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005426:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fa11 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00d      	beq.n	800545c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544e:	d103      	bne.n	8005458 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005456:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e079      	b.n	8005550 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005464:	d108      	bne.n	8005478 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005466:	897b      	ldrh	r3, [r7, #10]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	b2da      	uxtb	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	611a      	str	r2, [r3, #16]
 8005476:	e05f      	b.n	8005538 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005478:	897b      	ldrh	r3, [r7, #10]
 800547a:	11db      	asrs	r3, r3, #7
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0306 	and.w	r3, r3, #6
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f063 030f 	orn	r3, r3, #15
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	4930      	ldr	r1, [pc, #192]	; (8005558 <I2C_MasterRequestRead+0x194>)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fa37 	bl	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e054      	b.n	8005550 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054a6:	897b      	ldrh	r3, [r7, #10]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	4929      	ldr	r1, [pc, #164]	; (800555c <I2C_MasterRequestRead+0x198>)
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fa27 	bl	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e044      	b.n	8005550 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f9af 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005512:	d103      	bne.n	800551c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e017      	b.n	8005550 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005520:	897b      	ldrh	r3, [r7, #10]
 8005522:	11db      	asrs	r3, r3, #7
 8005524:	b2db      	uxtb	r3, r3
 8005526:	f003 0306 	and.w	r3, r3, #6
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f063 030e 	orn	r3, r3, #14
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4907      	ldr	r1, [pc, #28]	; (800555c <I2C_MasterRequestRead+0x198>)
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f9e3 	bl	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	00010008 	.word	0x00010008
 800555c:	00010002 	.word	0x00010002

08005560 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	4608      	mov	r0, r1
 800556a:	4611      	mov	r1, r2
 800556c:	461a      	mov	r2, r3
 800556e:	4603      	mov	r3, r0
 8005570:	817b      	strh	r3, [r7, #10]
 8005572:	460b      	mov	r3, r1
 8005574:	813b      	strh	r3, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005588:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	2200      	movs	r2, #0
 8005592:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f960 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00d      	beq.n	80055be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b0:	d103      	bne.n	80055ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e05f      	b.n	800567e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055be:	897b      	ldrh	r3, [r7, #10]
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	6a3a      	ldr	r2, [r7, #32]
 80055d2:	492d      	ldr	r1, [pc, #180]	; (8005688 <I2C_RequestMemoryWrite+0x128>)
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f998 	bl	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e04c      	b.n	800567e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fc:	6a39      	ldr	r1, [r7, #32]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 fa02 	bl	8005a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	2b04      	cmp	r3, #4
 8005610:	d107      	bne.n	8005622 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005620:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e02b      	b.n	800567e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d105      	bne.n	8005638 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800562c:	893b      	ldrh	r3, [r7, #8]
 800562e:	b2da      	uxtb	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	611a      	str	r2, [r3, #16]
 8005636:	e021      	b.n	800567c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005638:	893b      	ldrh	r3, [r7, #8]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	b29b      	uxth	r3, r3
 800563e:	b2da      	uxtb	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005648:	6a39      	ldr	r1, [r7, #32]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f9dc 	bl	8005a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00d      	beq.n	8005672 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b04      	cmp	r3, #4
 800565c:	d107      	bne.n	800566e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e005      	b.n	800567e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005672:	893b      	ldrh	r3, [r7, #8]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	00010002 	.word	0x00010002

0800568c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	4608      	mov	r0, r1
 8005696:	4611      	mov	r1, r2
 8005698:	461a      	mov	r2, r3
 800569a:	4603      	mov	r3, r0
 800569c:	817b      	strh	r3, [r7, #10]
 800569e:	460b      	mov	r3, r1
 80056a0:	813b      	strh	r3, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f8c2 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00d      	beq.n	80056fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ec:	d103      	bne.n	80056f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e0aa      	b.n	8005850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056fa:	897b      	ldrh	r3, [r7, #10]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005708:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	6a3a      	ldr	r2, [r7, #32]
 800570e:	4952      	ldr	r1, [pc, #328]	; (8005858 <I2C_RequestMemoryRead+0x1cc>)
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f8fa 	bl	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e097      	b.n	8005850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005738:	6a39      	ldr	r1, [r7, #32]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f964 	bl	8005a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00d      	beq.n	8005762 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	2b04      	cmp	r3, #4
 800574c:	d107      	bne.n	800575e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800575c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e076      	b.n	8005850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d105      	bne.n	8005774 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005768:	893b      	ldrh	r3, [r7, #8]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	611a      	str	r2, [r3, #16]
 8005772:	e021      	b.n	80057b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	b29b      	uxth	r3, r3
 800577a:	b2da      	uxtb	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	6a39      	ldr	r1, [r7, #32]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f93e 	bl	8005a08 <I2C_WaitOnTXEFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00d      	beq.n	80057ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	2b04      	cmp	r3, #4
 8005798:	d107      	bne.n	80057aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e050      	b.n	8005850 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057ae:	893b      	ldrh	r3, [r7, #8]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	6a39      	ldr	r1, [r7, #32]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f923 	bl	8005a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00d      	beq.n	80057e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d107      	bne.n	80057e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e035      	b.n	8005850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f82b 	bl	800585c <I2C_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00d      	beq.n	8005828 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800581a:	d103      	bne.n	8005824 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005822:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e013      	b.n	8005850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005828:	897b      	ldrh	r3, [r7, #10]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	b2da      	uxtb	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	6a3a      	ldr	r2, [r7, #32]
 800583c:	4906      	ldr	r1, [pc, #24]	; (8005858 <I2C_RequestMemoryRead+0x1cc>)
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f863 	bl	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	00010002 	.word	0x00010002

0800585c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	4613      	mov	r3, r2
 800586a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800586c:	e025      	b.n	80058ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d021      	beq.n	80058ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005876:	f7fd ff01 	bl	800367c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d302      	bcc.n	800588c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d116      	bne.n	80058ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f043 0220 	orr.w	r2, r3, #32
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e023      	b.n	8005902 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d10d      	bne.n	80058e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	43da      	mvns	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4013      	ands	r3, r2
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	461a      	mov	r2, r3
 80058de:	e00c      	b.n	80058fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d0b6      	beq.n	800586e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005918:	e051      	b.n	80059be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005928:	d123      	bne.n	8005972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005938:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005942:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f043 0204 	orr.w	r2, r3, #4
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e046      	b.n	8005a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d021      	beq.n	80059be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fd fe7f 	bl	800367c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d116      	bne.n	80059be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e020      	b.n	8005a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d10c      	bne.n	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	43da      	mvns	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4013      	ands	r3, r2
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bf14      	ite	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	2300      	moveq	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	e00b      	b.n	80059fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	43da      	mvns	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4013      	ands	r3, r2
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d18d      	bne.n	800591a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a14:	e02d      	b.n	8005a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f8ce 	bl	8005bb8 <I2C_IsAcknowledgeFailed>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e02d      	b.n	8005a82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d021      	beq.n	8005a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2e:	f7fd fe25 	bl	800367c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d116      	bne.n	8005a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f043 0220 	orr.w	r2, r3, #32
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e007      	b.n	8005a82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7c:	2b80      	cmp	r3, #128	; 0x80
 8005a7e:	d1ca      	bne.n	8005a16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a96:	e02d      	b.n	8005af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f88d 	bl	8005bb8 <I2C_IsAcknowledgeFailed>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e02d      	b.n	8005b04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d021      	beq.n	8005af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab0:	f7fd fde4 	bl	800367c <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d302      	bcc.n	8005ac6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d116      	bne.n	8005af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f043 0220 	orr.w	r2, r3, #32
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e007      	b.n	8005b04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d1ca      	bne.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b18:	e042      	b.n	8005ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d119      	bne.n	8005b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0210 	mvn.w	r2, #16
 8005b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e029      	b.n	8005bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5c:	f7fd fd8e 	bl	800367c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d302      	bcc.n	8005b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d116      	bne.n	8005ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e007      	b.n	8005bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d1b5      	bne.n	8005b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bce:	d11b      	bne.n	8005c08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	f043 0204 	orr.w	r2, r3, #4
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e267      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d075      	beq.n	8005d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c36:	4b88      	ldr	r3, [pc, #544]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d00c      	beq.n	8005c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c42:	4b85      	ldr	r3, [pc, #532]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d112      	bne.n	8005c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c4e:	4b82      	ldr	r3, [pc, #520]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5a:	d10b      	bne.n	8005c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5c:	4b7e      	ldr	r3, [pc, #504]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d05b      	beq.n	8005d20 <HAL_RCC_OscConfig+0x108>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d157      	bne.n	8005d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e242      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7c:	d106      	bne.n	8005c8c <HAL_RCC_OscConfig+0x74>
 8005c7e:	4b76      	ldr	r3, [pc, #472]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a75      	ldr	r2, [pc, #468]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	e01d      	b.n	8005cc8 <HAL_RCC_OscConfig+0xb0>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c94:	d10c      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x98>
 8005c96:	4b70      	ldr	r3, [pc, #448]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6f      	ldr	r2, [pc, #444]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	4b6d      	ldr	r3, [pc, #436]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a6c      	ldr	r2, [pc, #432]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	e00b      	b.n	8005cc8 <HAL_RCC_OscConfig+0xb0>
 8005cb0:	4b69      	ldr	r3, [pc, #420]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a68      	ldr	r2, [pc, #416]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	4b66      	ldr	r3, [pc, #408]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a65      	ldr	r2, [pc, #404]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d013      	beq.n	8005cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fd fcd4 	bl	800367c <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cd8:	f7fd fcd0 	bl	800367c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b64      	cmp	r3, #100	; 0x64
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e207      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cea:	4b5b      	ldr	r3, [pc, #364]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f0      	beq.n	8005cd8 <HAL_RCC_OscConfig+0xc0>
 8005cf6:	e014      	b.n	8005d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf8:	f7fd fcc0 	bl	800367c <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d00:	f7fd fcbc 	bl	800367c <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b64      	cmp	r3, #100	; 0x64
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e1f3      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d12:	4b51      	ldr	r3, [pc, #324]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f0      	bne.n	8005d00 <HAL_RCC_OscConfig+0xe8>
 8005d1e:	e000      	b.n	8005d22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d063      	beq.n	8005df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d2e:	4b4a      	ldr	r3, [pc, #296]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00b      	beq.n	8005d52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d3a:	4b47      	ldr	r3, [pc, #284]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d11c      	bne.n	8005d80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d46:	4b44      	ldr	r3, [pc, #272]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d116      	bne.n	8005d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d52:	4b41      	ldr	r3, [pc, #260]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d005      	beq.n	8005d6a <HAL_RCC_OscConfig+0x152>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d001      	beq.n	8005d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e1c7      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d6a:	4b3b      	ldr	r3, [pc, #236]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4937      	ldr	r1, [pc, #220]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d7e:	e03a      	b.n	8005df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d020      	beq.n	8005dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d88:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <HAL_RCC_OscConfig+0x244>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8e:	f7fd fc75 	bl	800367c <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d96:	f7fd fc71 	bl	800367c <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e1a8      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da8:	4b2b      	ldr	r3, [pc, #172]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db4:	4b28      	ldr	r3, [pc, #160]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	4925      	ldr	r1, [pc, #148]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	600b      	str	r3, [r1, #0]
 8005dc8:	e015      	b.n	8005df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dca:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <HAL_RCC_OscConfig+0x244>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd0:	f7fd fc54 	bl	800367c <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dd8:	f7fd fc50 	bl	800367c <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e187      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dea:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d036      	beq.n	8005e70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d016      	beq.n	8005e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e0a:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <HAL_RCC_OscConfig+0x248>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e10:	f7fd fc34 	bl	800367c <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e18:	f7fd fc30 	bl	800367c <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e167      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f0      	beq.n	8005e18 <HAL_RCC_OscConfig+0x200>
 8005e36:	e01b      	b.n	8005e70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_RCC_OscConfig+0x248>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e3e:	f7fd fc1d 	bl	800367c <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e44:	e00e      	b.n	8005e64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e46:	f7fd fc19 	bl	800367c <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d907      	bls.n	8005e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e150      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	42470000 	.word	0x42470000
 8005e60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e64:	4b88      	ldr	r3, [pc, #544]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1ea      	bne.n	8005e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8097 	beq.w	8005fac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e82:	4b81      	ldr	r3, [pc, #516]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10f      	bne.n	8005eae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	4b7d      	ldr	r3, [pc, #500]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	4a7c      	ldr	r2, [pc, #496]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e9e:	4b7a      	ldr	r3, [pc, #488]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	60bb      	str	r3, [r7, #8]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eae:	4b77      	ldr	r3, [pc, #476]	; (800608c <HAL_RCC_OscConfig+0x474>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d118      	bne.n	8005eec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eba:	4b74      	ldr	r3, [pc, #464]	; (800608c <HAL_RCC_OscConfig+0x474>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a73      	ldr	r2, [pc, #460]	; (800608c <HAL_RCC_OscConfig+0x474>)
 8005ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ec6:	f7fd fbd9 	bl	800367c <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ece:	f7fd fbd5 	bl	800367c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e10c      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee0:	4b6a      	ldr	r3, [pc, #424]	; (800608c <HAL_RCC_OscConfig+0x474>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0f0      	beq.n	8005ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d106      	bne.n	8005f02 <HAL_RCC_OscConfig+0x2ea>
 8005ef4:	4b64      	ldr	r3, [pc, #400]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef8:	4a63      	ldr	r2, [pc, #396]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	6713      	str	r3, [r2, #112]	; 0x70
 8005f00:	e01c      	b.n	8005f3c <HAL_RCC_OscConfig+0x324>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	d10c      	bne.n	8005f24 <HAL_RCC_OscConfig+0x30c>
 8005f0a:	4b5f      	ldr	r3, [pc, #380]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0e:	4a5e      	ldr	r2, [pc, #376]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005f10:	f043 0304 	orr.w	r3, r3, #4
 8005f14:	6713      	str	r3, [r2, #112]	; 0x70
 8005f16:	4b5c      	ldr	r3, [pc, #368]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	4a5b      	ldr	r2, [pc, #364]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	6713      	str	r3, [r2, #112]	; 0x70
 8005f22:	e00b      	b.n	8005f3c <HAL_RCC_OscConfig+0x324>
 8005f24:	4b58      	ldr	r3, [pc, #352]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	4a57      	ldr	r2, [pc, #348]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005f2a:	f023 0301 	bic.w	r3, r3, #1
 8005f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f30:	4b55      	ldr	r3, [pc, #340]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	4a54      	ldr	r2, [pc, #336]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005f36:	f023 0304 	bic.w	r3, r3, #4
 8005f3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d015      	beq.n	8005f70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f44:	f7fd fb9a 	bl	800367c <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f4a:	e00a      	b.n	8005f62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f4c:	f7fd fb96 	bl	800367c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e0cb      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f62:	4b49      	ldr	r3, [pc, #292]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0ee      	beq.n	8005f4c <HAL_RCC_OscConfig+0x334>
 8005f6e:	e014      	b.n	8005f9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f70:	f7fd fb84 	bl	800367c <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f76:	e00a      	b.n	8005f8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f78:	f7fd fb80 	bl	800367c <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e0b5      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f8e:	4b3e      	ldr	r3, [pc, #248]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1ee      	bne.n	8005f78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d105      	bne.n	8005fac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fa0:	4b39      	ldr	r3, [pc, #228]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	4a38      	ldr	r2, [pc, #224]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005faa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80a1 	beq.w	80060f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fb6:	4b34      	ldr	r3, [pc, #208]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d05c      	beq.n	800607c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d141      	bne.n	800604e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fca:	4b31      	ldr	r3, [pc, #196]	; (8006090 <HAL_RCC_OscConfig+0x478>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7fd fb54 	bl	800367c <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd8:	f7fd fb50 	bl	800367c <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e087      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fea:	4b27      	ldr	r3, [pc, #156]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69da      	ldr	r2, [r3, #28]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	019b      	lsls	r3, r3, #6
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	3b01      	subs	r3, #1
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	061b      	lsls	r3, r3, #24
 800601a:	491b      	ldr	r1, [pc, #108]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 800601c:	4313      	orrs	r3, r2
 800601e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006020:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <HAL_RCC_OscConfig+0x478>)
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006026:	f7fd fb29 	bl	800367c <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800602e:	f7fd fb25 	bl	800367c <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e05c      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <HAL_RCC_OscConfig+0x416>
 800604c:	e054      	b.n	80060f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <HAL_RCC_OscConfig+0x478>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006054:	f7fd fb12 	bl	800367c <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800605c:	f7fd fb0e 	bl	800367c <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e045      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_RCC_OscConfig+0x470>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0x444>
 800607a:	e03d      	b.n	80060f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d107      	bne.n	8006094 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e038      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
 8006088:	40023800 	.word	0x40023800
 800608c:	40007000 	.word	0x40007000
 8006090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006094:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <HAL_RCC_OscConfig+0x4ec>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d028      	beq.n	80060f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d121      	bne.n	80060f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d11a      	bne.n	80060f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060c4:	4013      	ands	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d111      	bne.n	80060f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	3b01      	subs	r3, #1
 80060de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d107      	bne.n	80060f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d001      	beq.n	80060f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40023800 	.word	0x40023800

08006108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e0cc      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800611c:	4b68      	ldr	r3, [pc, #416]	; (80062c0 <HAL_RCC_ClockConfig+0x1b8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d90c      	bls.n	8006144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612a:	4b65      	ldr	r3, [pc, #404]	; (80062c0 <HAL_RCC_ClockConfig+0x1b8>)
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006132:	4b63      	ldr	r3, [pc, #396]	; (80062c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0b8      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d020      	beq.n	8006192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800615c:	4b59      	ldr	r3, [pc, #356]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	4a58      	ldr	r2, [pc, #352]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006162:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006174:	4b53      	ldr	r3, [pc, #332]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	4a52      	ldr	r2, [pc, #328]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800617e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006180:	4b50      	ldr	r3, [pc, #320]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	494d      	ldr	r1, [pc, #308]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	4313      	orrs	r3, r2
 8006190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d044      	beq.n	8006228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d107      	bne.n	80061b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a6:	4b47      	ldr	r3, [pc, #284]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d119      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e07f      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d003      	beq.n	80061c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d107      	bne.n	80061d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c6:	4b3f      	ldr	r3, [pc, #252]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e06f      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d6:	4b3b      	ldr	r3, [pc, #236]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e067      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061e6:	4b37      	ldr	r3, [pc, #220]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f023 0203 	bic.w	r2, r3, #3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	4934      	ldr	r1, [pc, #208]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061f8:	f7fd fa40 	bl	800367c <HAL_GetTick>
 80061fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fe:	e00a      	b.n	8006216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006200:	f7fd fa3c 	bl	800367c <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	f241 3288 	movw	r2, #5000	; 0x1388
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e04f      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006216:	4b2b      	ldr	r3, [pc, #172]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 020c 	and.w	r2, r3, #12
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	429a      	cmp	r2, r3
 8006226:	d1eb      	bne.n	8006200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006228:	4b25      	ldr	r3, [pc, #148]	; (80062c0 <HAL_RCC_ClockConfig+0x1b8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d20c      	bcs.n	8006250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006236:	4b22      	ldr	r3, [pc, #136]	; (80062c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800623e:	4b20      	ldr	r3, [pc, #128]	; (80062c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e032      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800625c:	4b19      	ldr	r3, [pc, #100]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	4916      	ldr	r1, [pc, #88]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	4313      	orrs	r3, r2
 800626c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800627a:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	490e      	ldr	r1, [pc, #56]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	4313      	orrs	r3, r2
 800628c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800628e:	f000 f821 	bl	80062d4 <HAL_RCC_GetSysClockFreq>
 8006292:	4602      	mov	r2, r0
 8006294:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	091b      	lsrs	r3, r3, #4
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	490a      	ldr	r1, [pc, #40]	; (80062c8 <HAL_RCC_ClockConfig+0x1c0>)
 80062a0:	5ccb      	ldrb	r3, [r1, r3]
 80062a2:	fa22 f303 	lsr.w	r3, r2, r3
 80062a6:	4a09      	ldr	r2, [pc, #36]	; (80062cc <HAL_RCC_ClockConfig+0x1c4>)
 80062a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062aa:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fd f9a0 	bl	80035f4 <HAL_InitTick>

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40023c00 	.word	0x40023c00
 80062c4:	40023800 	.word	0x40023800
 80062c8:	0800d3d0 	.word	0x0800d3d0
 80062cc:	20000008 	.word	0x20000008
 80062d0:	2000000c 	.word	0x2000000c

080062d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062d8:	b090      	sub	sp, #64	; 0x40
 80062da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	637b      	str	r3, [r7, #52]	; 0x34
 80062e0:	2300      	movs	r3, #0
 80062e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e4:	2300      	movs	r3, #0
 80062e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062ec:	4b59      	ldr	r3, [pc, #356]	; (8006454 <HAL_RCC_GetSysClockFreq+0x180>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 030c 	and.w	r3, r3, #12
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d00d      	beq.n	8006314 <HAL_RCC_GetSysClockFreq+0x40>
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	f200 80a1 	bhi.w	8006440 <HAL_RCC_GetSysClockFreq+0x16c>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_RCC_GetSysClockFreq+0x34>
 8006302:	2b04      	cmp	r3, #4
 8006304:	d003      	beq.n	800630e <HAL_RCC_GetSysClockFreq+0x3a>
 8006306:	e09b      	b.n	8006440 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006308:	4b53      	ldr	r3, [pc, #332]	; (8006458 <HAL_RCC_GetSysClockFreq+0x184>)
 800630a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800630c:	e09b      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800630e:	4b53      	ldr	r3, [pc, #332]	; (800645c <HAL_RCC_GetSysClockFreq+0x188>)
 8006310:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006312:	e098      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006314:	4b4f      	ldr	r3, [pc, #316]	; (8006454 <HAL_RCC_GetSysClockFreq+0x180>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800631e:	4b4d      	ldr	r3, [pc, #308]	; (8006454 <HAL_RCC_GetSysClockFreq+0x180>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d028      	beq.n	800637c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800632a:	4b4a      	ldr	r3, [pc, #296]	; (8006454 <HAL_RCC_GetSysClockFreq+0x180>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	099b      	lsrs	r3, r3, #6
 8006330:	2200      	movs	r2, #0
 8006332:	623b      	str	r3, [r7, #32]
 8006334:	627a      	str	r2, [r7, #36]	; 0x24
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800633c:	2100      	movs	r1, #0
 800633e:	4b47      	ldr	r3, [pc, #284]	; (800645c <HAL_RCC_GetSysClockFreq+0x188>)
 8006340:	fb03 f201 	mul.w	r2, r3, r1
 8006344:	2300      	movs	r3, #0
 8006346:	fb00 f303 	mul.w	r3, r0, r3
 800634a:	4413      	add	r3, r2
 800634c:	4a43      	ldr	r2, [pc, #268]	; (800645c <HAL_RCC_GetSysClockFreq+0x188>)
 800634e:	fba0 1202 	umull	r1, r2, r0, r2
 8006352:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006354:	460a      	mov	r2, r1
 8006356:	62ba      	str	r2, [r7, #40]	; 0x28
 8006358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800635a:	4413      	add	r3, r2
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006360:	2200      	movs	r2, #0
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	61fa      	str	r2, [r7, #28]
 8006366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800636a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800636e:	f7fa fc93 	bl	8000c98 <__aeabi_uldivmod>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4613      	mov	r3, r2
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800637a:	e053      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800637c:	4b35      	ldr	r3, [pc, #212]	; (8006454 <HAL_RCC_GetSysClockFreq+0x180>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	099b      	lsrs	r3, r3, #6
 8006382:	2200      	movs	r2, #0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	617a      	str	r2, [r7, #20]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800638e:	f04f 0b00 	mov.w	fp, #0
 8006392:	4652      	mov	r2, sl
 8006394:	465b      	mov	r3, fp
 8006396:	f04f 0000 	mov.w	r0, #0
 800639a:	f04f 0100 	mov.w	r1, #0
 800639e:	0159      	lsls	r1, r3, #5
 80063a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063a4:	0150      	lsls	r0, r2, #5
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	ebb2 080a 	subs.w	r8, r2, sl
 80063ae:	eb63 090b 	sbc.w	r9, r3, fp
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80063be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80063c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80063c6:	ebb2 0408 	subs.w	r4, r2, r8
 80063ca:	eb63 0509 	sbc.w	r5, r3, r9
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	00eb      	lsls	r3, r5, #3
 80063d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063dc:	00e2      	lsls	r2, r4, #3
 80063de:	4614      	mov	r4, r2
 80063e0:	461d      	mov	r5, r3
 80063e2:	eb14 030a 	adds.w	r3, r4, sl
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	eb45 030b 	adc.w	r3, r5, fp
 80063ec:	607b      	str	r3, [r7, #4]
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063fa:	4629      	mov	r1, r5
 80063fc:	028b      	lsls	r3, r1, #10
 80063fe:	4621      	mov	r1, r4
 8006400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006404:	4621      	mov	r1, r4
 8006406:	028a      	lsls	r2, r1, #10
 8006408:	4610      	mov	r0, r2
 800640a:	4619      	mov	r1, r3
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	2200      	movs	r2, #0
 8006410:	60bb      	str	r3, [r7, #8]
 8006412:	60fa      	str	r2, [r7, #12]
 8006414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006418:	f7fa fc3e 	bl	8000c98 <__aeabi_uldivmod>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4613      	mov	r3, r2
 8006422:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006424:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <HAL_RCC_GetSysClockFreq+0x180>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	0c1b      	lsrs	r3, r3, #16
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	3301      	adds	r3, #1
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	fbb2 f3f3 	udiv	r3, r2, r3
 800643c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800643e:	e002      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_RCC_GetSysClockFreq+0x184>)
 8006442:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006448:	4618      	mov	r0, r3
 800644a:	3740      	adds	r7, #64	; 0x40
 800644c:	46bd      	mov	sp, r7
 800644e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006452:	bf00      	nop
 8006454:	40023800 	.word	0x40023800
 8006458:	00f42400 	.word	0x00f42400
 800645c:	017d7840 	.word	0x017d7840

08006460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006464:	4b03      	ldr	r3, [pc, #12]	; (8006474 <HAL_RCC_GetHCLKFreq+0x14>)
 8006466:	681b      	ldr	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20000008 	.word	0x20000008

08006478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800647c:	f7ff fff0 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 8006480:	4602      	mov	r2, r0
 8006482:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	0a9b      	lsrs	r3, r3, #10
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	4903      	ldr	r1, [pc, #12]	; (800649c <HAL_RCC_GetPCLK1Freq+0x24>)
 800648e:	5ccb      	ldrb	r3, [r1, r3]
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006494:	4618      	mov	r0, r3
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40023800 	.word	0x40023800
 800649c:	0800d3e0 	.word	0x0800d3e0

080064a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064a4:	f7ff ffdc 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 80064a8:	4602      	mov	r2, r0
 80064aa:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	0b5b      	lsrs	r3, r3, #13
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	4903      	ldr	r1, [pc, #12]	; (80064c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064b6:	5ccb      	ldrb	r3, [r1, r3]
 80064b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064bc:	4618      	mov	r0, r3
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40023800 	.word	0x40023800
 80064c4:	0800d3e0 	.word	0x0800d3e0

080064c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e041      	b.n	800655e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fc fe84 	bl	80031fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4610      	mov	r0, r2
 8006508:	f000 fa88 	bl	8006a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b01      	cmp	r3, #1
 800657a:	d001      	beq.n	8006580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e044      	b.n	800660a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0201 	orr.w	r2, r2, #1
 8006596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1e      	ldr	r2, [pc, #120]	; (8006618 <HAL_TIM_Base_Start_IT+0xb0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d018      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x6c>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065aa:	d013      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x6c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a1a      	ldr	r2, [pc, #104]	; (800661c <HAL_TIM_Base_Start_IT+0xb4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00e      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x6c>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a19      	ldr	r2, [pc, #100]	; (8006620 <HAL_TIM_Base_Start_IT+0xb8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d009      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x6c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a17      	ldr	r2, [pc, #92]	; (8006624 <HAL_TIM_Base_Start_IT+0xbc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x6c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a16      	ldr	r2, [pc, #88]	; (8006628 <HAL_TIM_Base_Start_IT+0xc0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d111      	bne.n	80065f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b06      	cmp	r3, #6
 80065e4:	d010      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0201 	orr.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f6:	e007      	b.n	8006608 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40010000 	.word	0x40010000
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40000c00 	.word	0x40000c00
 8006628:	40014000 	.word	0x40014000

0800662c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b02      	cmp	r3, #2
 8006640:	d122      	bne.n	8006688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b02      	cmp	r3, #2
 800664e:	d11b      	bne.n	8006688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0202 	mvn.w	r2, #2
 8006658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f9b5 	bl	80069de <HAL_TIM_IC_CaptureCallback>
 8006674:	e005      	b.n	8006682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f9a7 	bl	80069ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f9b8 	bl	80069f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b04      	cmp	r3, #4
 8006694:	d122      	bne.n	80066dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d11b      	bne.n	80066dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0204 	mvn.w	r2, #4
 80066ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f98b 	bl	80069de <HAL_TIM_IC_CaptureCallback>
 80066c8:	e005      	b.n	80066d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f97d 	bl	80069ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f98e 	bl	80069f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d122      	bne.n	8006730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d11b      	bne.n	8006730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0208 	mvn.w	r2, #8
 8006700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2204      	movs	r2, #4
 8006706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f961 	bl	80069de <HAL_TIM_IC_CaptureCallback>
 800671c:	e005      	b.n	800672a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f953 	bl	80069ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f964 	bl	80069f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b10      	cmp	r3, #16
 800673c:	d122      	bne.n	8006784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b10      	cmp	r3, #16
 800674a:	d11b      	bne.n	8006784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0210 	mvn.w	r2, #16
 8006754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2208      	movs	r2, #8
 800675a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f937 	bl	80069de <HAL_TIM_IC_CaptureCallback>
 8006770:	e005      	b.n	800677e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f929 	bl	80069ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f93a 	bl	80069f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b01      	cmp	r3, #1
 8006790:	d10e      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b01      	cmp	r3, #1
 800679e:	d107      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0201 	mvn.w	r2, #1
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fc f856 	bl	800285c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ba:	2b80      	cmp	r3, #128	; 0x80
 80067bc:	d10e      	bne.n	80067dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	d107      	bne.n	80067dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fab2 	bl	8006d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d10e      	bne.n	8006808 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	d107      	bne.n	8006808 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f8ff 	bl	8006a06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b20      	cmp	r3, #32
 8006814:	d10e      	bne.n	8006834 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b20      	cmp	r3, #32
 8006822:	d107      	bne.n	8006834 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0220 	mvn.w	r2, #32
 800682c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa7c 	bl	8006d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_TIM_ConfigClockSource+0x1c>
 8006854:	2302      	movs	r3, #2
 8006856:	e0b4      	b.n	80069c2 <HAL_TIM_ConfigClockSource+0x186>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800687e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006890:	d03e      	beq.n	8006910 <HAL_TIM_ConfigClockSource+0xd4>
 8006892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006896:	f200 8087 	bhi.w	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 800689a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689e:	f000 8086 	beq.w	80069ae <HAL_TIM_ConfigClockSource+0x172>
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a6:	d87f      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068a8:	2b70      	cmp	r3, #112	; 0x70
 80068aa:	d01a      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0xa6>
 80068ac:	2b70      	cmp	r3, #112	; 0x70
 80068ae:	d87b      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068b0:	2b60      	cmp	r3, #96	; 0x60
 80068b2:	d050      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x11a>
 80068b4:	2b60      	cmp	r3, #96	; 0x60
 80068b6:	d877      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068b8:	2b50      	cmp	r3, #80	; 0x50
 80068ba:	d03c      	beq.n	8006936 <HAL_TIM_ConfigClockSource+0xfa>
 80068bc:	2b50      	cmp	r3, #80	; 0x50
 80068be:	d873      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068c0:	2b40      	cmp	r3, #64	; 0x40
 80068c2:	d058      	beq.n	8006976 <HAL_TIM_ConfigClockSource+0x13a>
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	d86f      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068c8:	2b30      	cmp	r3, #48	; 0x30
 80068ca:	d064      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x15a>
 80068cc:	2b30      	cmp	r3, #48	; 0x30
 80068ce:	d86b      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d060      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x15a>
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d867      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d05c      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x15a>
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d05a      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x15a>
 80068e0:	e062      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6899      	ldr	r1, [r3, #8]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f000 f98d 	bl	8006c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	609a      	str	r2, [r3, #8]
      break;
 800690e:	e04f      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6899      	ldr	r1, [r3, #8]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f000 f976 	bl	8006c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006932:	609a      	str	r2, [r3, #8]
      break;
 8006934:	e03c      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6859      	ldr	r1, [r3, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	461a      	mov	r2, r3
 8006944:	f000 f8ea 	bl	8006b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2150      	movs	r1, #80	; 0x50
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f943 	bl	8006bda <TIM_ITRx_SetConfig>
      break;
 8006954:	e02c      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6818      	ldr	r0, [r3, #0]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	6859      	ldr	r1, [r3, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	461a      	mov	r2, r3
 8006964:	f000 f909 	bl	8006b7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2160      	movs	r1, #96	; 0x60
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f933 	bl	8006bda <TIM_ITRx_SetConfig>
      break;
 8006974:	e01c      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6859      	ldr	r1, [r3, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	461a      	mov	r2, r3
 8006984:	f000 f8ca 	bl	8006b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2140      	movs	r1, #64	; 0x40
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f923 	bl	8006bda <TIM_ITRx_SetConfig>
      break;
 8006994:	e00c      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f000 f91a 	bl	8006bda <TIM_ITRx_SetConfig>
      break;
 80069a6:	e003      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]
      break;
 80069ac:	e000      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a34      	ldr	r2, [pc, #208]	; (8006b00 <TIM_Base_SetConfig+0xe4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00f      	beq.n	8006a54 <TIM_Base_SetConfig+0x38>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3a:	d00b      	beq.n	8006a54 <TIM_Base_SetConfig+0x38>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a31      	ldr	r2, [pc, #196]	; (8006b04 <TIM_Base_SetConfig+0xe8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <TIM_Base_SetConfig+0x38>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a30      	ldr	r2, [pc, #192]	; (8006b08 <TIM_Base_SetConfig+0xec>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_Base_SetConfig+0x38>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a2f      	ldr	r2, [pc, #188]	; (8006b0c <TIM_Base_SetConfig+0xf0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d108      	bne.n	8006a66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a25      	ldr	r2, [pc, #148]	; (8006b00 <TIM_Base_SetConfig+0xe4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d01b      	beq.n	8006aa6 <TIM_Base_SetConfig+0x8a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a74:	d017      	beq.n	8006aa6 <TIM_Base_SetConfig+0x8a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a22      	ldr	r2, [pc, #136]	; (8006b04 <TIM_Base_SetConfig+0xe8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <TIM_Base_SetConfig+0x8a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a21      	ldr	r2, [pc, #132]	; (8006b08 <TIM_Base_SetConfig+0xec>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00f      	beq.n	8006aa6 <TIM_Base_SetConfig+0x8a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a20      	ldr	r2, [pc, #128]	; (8006b0c <TIM_Base_SetConfig+0xf0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00b      	beq.n	8006aa6 <TIM_Base_SetConfig+0x8a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a1f      	ldr	r2, [pc, #124]	; (8006b10 <TIM_Base_SetConfig+0xf4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d007      	beq.n	8006aa6 <TIM_Base_SetConfig+0x8a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a1e      	ldr	r2, [pc, #120]	; (8006b14 <TIM_Base_SetConfig+0xf8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d003      	beq.n	8006aa6 <TIM_Base_SetConfig+0x8a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a1d      	ldr	r2, [pc, #116]	; (8006b18 <TIM_Base_SetConfig+0xfc>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d108      	bne.n	8006ab8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a08      	ldr	r2, [pc, #32]	; (8006b00 <TIM_Base_SetConfig+0xe4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d103      	bne.n	8006aec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	615a      	str	r2, [r3, #20]
}
 8006af2:	bf00      	nop
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40000400 	.word	0x40000400
 8006b08:	40000800 	.word	0x40000800
 8006b0c:	40000c00 	.word	0x40000c00
 8006b10:	40014000 	.word	0x40014000
 8006b14:	40014400 	.word	0x40014400
 8006b18:	40014800 	.word	0x40014800

08006b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f023 0201 	bic.w	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f023 030a 	bic.w	r3, r3, #10
 8006b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b087      	sub	sp, #28
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	f023 0210 	bic.w	r2, r3, #16
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	031b      	lsls	r3, r3, #12
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f043 0307 	orr.w	r3, r3, #7
 8006bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	609a      	str	r2, [r3, #8]
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	021a      	lsls	r2, r3, #8
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	609a      	str	r2, [r3, #8]
}
 8006c44:	bf00      	nop
 8006c46:	371c      	adds	r7, #28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e050      	b.n	8006d0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1c      	ldr	r2, [pc, #112]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d018      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb4:	d013      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a18      	ldr	r2, [pc, #96]	; (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00e      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a16      	ldr	r2, [pc, #88]	; (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d009      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d004      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d10c      	bne.n	8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40000400 	.word	0x40000400
 8006d20:	40000800 	.word	0x40000800
 8006d24:	40000c00 	.word	0x40000c00
 8006d28:	40014000 	.word	0x40014000

08006d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e03f      	b.n	8006de6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fc fa66 	bl	800324c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2224      	movs	r2, #36	; 0x24
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f929 	bl	8006ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b08a      	sub	sp, #40	; 0x28
 8006df2:	af02      	add	r7, sp, #8
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	d17c      	bne.n	8006f08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_UART_Transmit+0x2c>
 8006e14:	88fb      	ldrh	r3, [r7, #6]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e075      	b.n	8006f0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_UART_Transmit+0x3e>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e06e      	b.n	8006f0a <HAL_UART_Transmit+0x11c>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2221      	movs	r2, #33	; 0x21
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e42:	f7fc fc1b 	bl	800367c <HAL_GetTick>
 8006e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	88fa      	ldrh	r2, [r7, #6]
 8006e4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	88fa      	ldrh	r2, [r7, #6]
 8006e52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5c:	d108      	bne.n	8006e70 <HAL_UART_Transmit+0x82>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	e003      	b.n	8006e78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e80:	e02a      	b.n	8006ed8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2180      	movs	r1, #128	; 0x80
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f840 	bl	8006f12 <UART_WaitOnFlagUntilTimeout>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e036      	b.n	8006f0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10b      	bne.n	8006eba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	3302      	adds	r3, #2
 8006eb6:	61bb      	str	r3, [r7, #24]
 8006eb8:	e007      	b.n	8006eca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	781a      	ldrb	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1cf      	bne.n	8006e82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2140      	movs	r1, #64	; 0x40
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f810 	bl	8006f12 <UART_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e006      	b.n	8006f0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e000      	b.n	8006f0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f08:	2302      	movs	r3, #2
  }
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3720      	adds	r7, #32
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b090      	sub	sp, #64	; 0x40
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f22:	e050      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2a:	d04c      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d007      	beq.n	8006f42 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f32:	f7fc fba3 	bl	800367c <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d241      	bcs.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	330c      	adds	r3, #12
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	330c      	adds	r3, #12
 8006f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f62:	637a      	str	r2, [r7, #52]	; 0x34
 8006f64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e5      	bne.n	8006f42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3314      	adds	r3, #20
 8006f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	613b      	str	r3, [r7, #16]
   return(result);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f023 0301 	bic.w	r3, r3, #1
 8006f8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3314      	adds	r3, #20
 8006f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f96:	623a      	str	r2, [r7, #32]
 8006f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	69f9      	ldr	r1, [r7, #28]
 8006f9c:	6a3a      	ldr	r2, [r7, #32]
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1e5      	bne.n	8006f76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e00f      	b.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d09f      	beq.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3740      	adds	r7, #64	; 0x40
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff4:	b0c0      	sub	sp, #256	; 0x100
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700c:	68d9      	ldr	r1, [r3, #12]
 800700e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	ea40 0301 	orr.w	r3, r0, r1
 8007018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800701a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	431a      	orrs	r2, r3
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	431a      	orrs	r2, r3
 8007030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800703c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007048:	f021 010c 	bic.w	r1, r1, #12
 800704c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007056:	430b      	orrs	r3, r1
 8007058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800705a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706a:	6999      	ldr	r1, [r3, #24]
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	ea40 0301 	orr.w	r3, r0, r1
 8007076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b8f      	ldr	r3, [pc, #572]	; (80072bc <UART_SetConfig+0x2cc>)
 8007080:	429a      	cmp	r2, r3
 8007082:	d005      	beq.n	8007090 <UART_SetConfig+0xa0>
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	4b8d      	ldr	r3, [pc, #564]	; (80072c0 <UART_SetConfig+0x2d0>)
 800708c:	429a      	cmp	r2, r3
 800708e:	d104      	bne.n	800709a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007090:	f7ff fa06 	bl	80064a0 <HAL_RCC_GetPCLK2Freq>
 8007094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007098:	e003      	b.n	80070a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800709a:	f7ff f9ed 	bl	8006478 <HAL_RCC_GetPCLK1Freq>
 800709e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ac:	f040 810c 	bne.w	80072c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80070c2:	4622      	mov	r2, r4
 80070c4:	462b      	mov	r3, r5
 80070c6:	1891      	adds	r1, r2, r2
 80070c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80070ca:	415b      	adcs	r3, r3
 80070cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070d2:	4621      	mov	r1, r4
 80070d4:	eb12 0801 	adds.w	r8, r2, r1
 80070d8:	4629      	mov	r1, r5
 80070da:	eb43 0901 	adc.w	r9, r3, r1
 80070de:	f04f 0200 	mov.w	r2, #0
 80070e2:	f04f 0300 	mov.w	r3, #0
 80070e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070f2:	4690      	mov	r8, r2
 80070f4:	4699      	mov	r9, r3
 80070f6:	4623      	mov	r3, r4
 80070f8:	eb18 0303 	adds.w	r3, r8, r3
 80070fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007100:	462b      	mov	r3, r5
 8007102:	eb49 0303 	adc.w	r3, r9, r3
 8007106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800710a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800711a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800711e:	460b      	mov	r3, r1
 8007120:	18db      	adds	r3, r3, r3
 8007122:	653b      	str	r3, [r7, #80]	; 0x50
 8007124:	4613      	mov	r3, r2
 8007126:	eb42 0303 	adc.w	r3, r2, r3
 800712a:	657b      	str	r3, [r7, #84]	; 0x54
 800712c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007134:	f7f9 fdb0 	bl	8000c98 <__aeabi_uldivmod>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4b61      	ldr	r3, [pc, #388]	; (80072c4 <UART_SetConfig+0x2d4>)
 800713e:	fba3 2302 	umull	r2, r3, r3, r2
 8007142:	095b      	lsrs	r3, r3, #5
 8007144:	011c      	lsls	r4, r3, #4
 8007146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800714a:	2200      	movs	r2, #0
 800714c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007158:	4642      	mov	r2, r8
 800715a:	464b      	mov	r3, r9
 800715c:	1891      	adds	r1, r2, r2
 800715e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007160:	415b      	adcs	r3, r3
 8007162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007168:	4641      	mov	r1, r8
 800716a:	eb12 0a01 	adds.w	sl, r2, r1
 800716e:	4649      	mov	r1, r9
 8007170:	eb43 0b01 	adc.w	fp, r3, r1
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007188:	4692      	mov	sl, r2
 800718a:	469b      	mov	fp, r3
 800718c:	4643      	mov	r3, r8
 800718e:	eb1a 0303 	adds.w	r3, sl, r3
 8007192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007196:	464b      	mov	r3, r9
 8007198:	eb4b 0303 	adc.w	r3, fp, r3
 800719c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071b4:	460b      	mov	r3, r1
 80071b6:	18db      	adds	r3, r3, r3
 80071b8:	643b      	str	r3, [r7, #64]	; 0x40
 80071ba:	4613      	mov	r3, r2
 80071bc:	eb42 0303 	adc.w	r3, r2, r3
 80071c0:	647b      	str	r3, [r7, #68]	; 0x44
 80071c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80071ca:	f7f9 fd65 	bl	8000c98 <__aeabi_uldivmod>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4611      	mov	r1, r2
 80071d4:	4b3b      	ldr	r3, [pc, #236]	; (80072c4 <UART_SetConfig+0x2d4>)
 80071d6:	fba3 2301 	umull	r2, r3, r3, r1
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	2264      	movs	r2, #100	; 0x64
 80071de:	fb02 f303 	mul.w	r3, r2, r3
 80071e2:	1acb      	subs	r3, r1, r3
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071ea:	4b36      	ldr	r3, [pc, #216]	; (80072c4 <UART_SetConfig+0x2d4>)
 80071ec:	fba3 2302 	umull	r2, r3, r3, r2
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071f8:	441c      	add	r4, r3
 80071fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800720c:	4642      	mov	r2, r8
 800720e:	464b      	mov	r3, r9
 8007210:	1891      	adds	r1, r2, r2
 8007212:	63b9      	str	r1, [r7, #56]	; 0x38
 8007214:	415b      	adcs	r3, r3
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800721c:	4641      	mov	r1, r8
 800721e:	1851      	adds	r1, r2, r1
 8007220:	6339      	str	r1, [r7, #48]	; 0x30
 8007222:	4649      	mov	r1, r9
 8007224:	414b      	adcs	r3, r1
 8007226:	637b      	str	r3, [r7, #52]	; 0x34
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007234:	4659      	mov	r1, fp
 8007236:	00cb      	lsls	r3, r1, #3
 8007238:	4651      	mov	r1, sl
 800723a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800723e:	4651      	mov	r1, sl
 8007240:	00ca      	lsls	r2, r1, #3
 8007242:	4610      	mov	r0, r2
 8007244:	4619      	mov	r1, r3
 8007246:	4603      	mov	r3, r0
 8007248:	4642      	mov	r2, r8
 800724a:	189b      	adds	r3, r3, r2
 800724c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007250:	464b      	mov	r3, r9
 8007252:	460a      	mov	r2, r1
 8007254:	eb42 0303 	adc.w	r3, r2, r3
 8007258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800725c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800726c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007270:	460b      	mov	r3, r1
 8007272:	18db      	adds	r3, r3, r3
 8007274:	62bb      	str	r3, [r7, #40]	; 0x28
 8007276:	4613      	mov	r3, r2
 8007278:	eb42 0303 	adc.w	r3, r2, r3
 800727c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800727e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007286:	f7f9 fd07 	bl	8000c98 <__aeabi_uldivmod>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <UART_SetConfig+0x2d4>)
 8007290:	fba3 1302 	umull	r1, r3, r3, r2
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	2164      	movs	r1, #100	; 0x64
 8007298:	fb01 f303 	mul.w	r3, r1, r3
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	3332      	adds	r3, #50	; 0x32
 80072a2:	4a08      	ldr	r2, [pc, #32]	; (80072c4 <UART_SetConfig+0x2d4>)
 80072a4:	fba2 2303 	umull	r2, r3, r2, r3
 80072a8:	095b      	lsrs	r3, r3, #5
 80072aa:	f003 0207 	and.w	r2, r3, #7
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4422      	add	r2, r4
 80072b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072b8:	e105      	b.n	80074c6 <UART_SetConfig+0x4d6>
 80072ba:	bf00      	nop
 80072bc:	40011000 	.word	0x40011000
 80072c0:	40011400 	.word	0x40011400
 80072c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80072d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80072d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80072da:	4642      	mov	r2, r8
 80072dc:	464b      	mov	r3, r9
 80072de:	1891      	adds	r1, r2, r2
 80072e0:	6239      	str	r1, [r7, #32]
 80072e2:	415b      	adcs	r3, r3
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
 80072e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072ea:	4641      	mov	r1, r8
 80072ec:	1854      	adds	r4, r2, r1
 80072ee:	4649      	mov	r1, r9
 80072f0:	eb43 0501 	adc.w	r5, r3, r1
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	00eb      	lsls	r3, r5, #3
 80072fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007302:	00e2      	lsls	r2, r4, #3
 8007304:	4614      	mov	r4, r2
 8007306:	461d      	mov	r5, r3
 8007308:	4643      	mov	r3, r8
 800730a:	18e3      	adds	r3, r4, r3
 800730c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007310:	464b      	mov	r3, r9
 8007312:	eb45 0303 	adc.w	r3, r5, r3
 8007316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800731a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007336:	4629      	mov	r1, r5
 8007338:	008b      	lsls	r3, r1, #2
 800733a:	4621      	mov	r1, r4
 800733c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007340:	4621      	mov	r1, r4
 8007342:	008a      	lsls	r2, r1, #2
 8007344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007348:	f7f9 fca6 	bl	8000c98 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4b60      	ldr	r3, [pc, #384]	; (80074d4 <UART_SetConfig+0x4e4>)
 8007352:	fba3 2302 	umull	r2, r3, r3, r2
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	011c      	lsls	r4, r3, #4
 800735a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800735e:	2200      	movs	r2, #0
 8007360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800736c:	4642      	mov	r2, r8
 800736e:	464b      	mov	r3, r9
 8007370:	1891      	adds	r1, r2, r2
 8007372:	61b9      	str	r1, [r7, #24]
 8007374:	415b      	adcs	r3, r3
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800737c:	4641      	mov	r1, r8
 800737e:	1851      	adds	r1, r2, r1
 8007380:	6139      	str	r1, [r7, #16]
 8007382:	4649      	mov	r1, r9
 8007384:	414b      	adcs	r3, r1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007394:	4659      	mov	r1, fp
 8007396:	00cb      	lsls	r3, r1, #3
 8007398:	4651      	mov	r1, sl
 800739a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739e:	4651      	mov	r1, sl
 80073a0:	00ca      	lsls	r2, r1, #3
 80073a2:	4610      	mov	r0, r2
 80073a4:	4619      	mov	r1, r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	4642      	mov	r2, r8
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073b0:	464b      	mov	r3, r9
 80073b2:	460a      	mov	r2, r1
 80073b4:	eb42 0303 	adc.w	r3, r2, r3
 80073b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80073c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80073c8:	f04f 0200 	mov.w	r2, #0
 80073cc:	f04f 0300 	mov.w	r3, #0
 80073d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80073d4:	4649      	mov	r1, r9
 80073d6:	008b      	lsls	r3, r1, #2
 80073d8:	4641      	mov	r1, r8
 80073da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073de:	4641      	mov	r1, r8
 80073e0:	008a      	lsls	r2, r1, #2
 80073e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073e6:	f7f9 fc57 	bl	8000c98 <__aeabi_uldivmod>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4b39      	ldr	r3, [pc, #228]	; (80074d4 <UART_SetConfig+0x4e4>)
 80073f0:	fba3 1302 	umull	r1, r3, r3, r2
 80073f4:	095b      	lsrs	r3, r3, #5
 80073f6:	2164      	movs	r1, #100	; 0x64
 80073f8:	fb01 f303 	mul.w	r3, r1, r3
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	011b      	lsls	r3, r3, #4
 8007400:	3332      	adds	r3, #50	; 0x32
 8007402:	4a34      	ldr	r2, [pc, #208]	; (80074d4 <UART_SetConfig+0x4e4>)
 8007404:	fba2 2303 	umull	r2, r3, r2, r3
 8007408:	095b      	lsrs	r3, r3, #5
 800740a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800740e:	441c      	add	r4, r3
 8007410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007414:	2200      	movs	r2, #0
 8007416:	673b      	str	r3, [r7, #112]	; 0x70
 8007418:	677a      	str	r2, [r7, #116]	; 0x74
 800741a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800741e:	4642      	mov	r2, r8
 8007420:	464b      	mov	r3, r9
 8007422:	1891      	adds	r1, r2, r2
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	415b      	adcs	r3, r3
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800742e:	4641      	mov	r1, r8
 8007430:	1851      	adds	r1, r2, r1
 8007432:	6039      	str	r1, [r7, #0]
 8007434:	4649      	mov	r1, r9
 8007436:	414b      	adcs	r3, r1
 8007438:	607b      	str	r3, [r7, #4]
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007446:	4659      	mov	r1, fp
 8007448:	00cb      	lsls	r3, r1, #3
 800744a:	4651      	mov	r1, sl
 800744c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007450:	4651      	mov	r1, sl
 8007452:	00ca      	lsls	r2, r1, #3
 8007454:	4610      	mov	r0, r2
 8007456:	4619      	mov	r1, r3
 8007458:	4603      	mov	r3, r0
 800745a:	4642      	mov	r2, r8
 800745c:	189b      	adds	r3, r3, r2
 800745e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007460:	464b      	mov	r3, r9
 8007462:	460a      	mov	r2, r1
 8007464:	eb42 0303 	adc.w	r3, r2, r3
 8007468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800746a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	663b      	str	r3, [r7, #96]	; 0x60
 8007474:	667a      	str	r2, [r7, #100]	; 0x64
 8007476:	f04f 0200 	mov.w	r2, #0
 800747a:	f04f 0300 	mov.w	r3, #0
 800747e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007482:	4649      	mov	r1, r9
 8007484:	008b      	lsls	r3, r1, #2
 8007486:	4641      	mov	r1, r8
 8007488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800748c:	4641      	mov	r1, r8
 800748e:	008a      	lsls	r2, r1, #2
 8007490:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007494:	f7f9 fc00 	bl	8000c98 <__aeabi_uldivmod>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <UART_SetConfig+0x4e4>)
 800749e:	fba3 1302 	umull	r1, r3, r3, r2
 80074a2:	095b      	lsrs	r3, r3, #5
 80074a4:	2164      	movs	r1, #100	; 0x64
 80074a6:	fb01 f303 	mul.w	r3, r1, r3
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	3332      	adds	r3, #50	; 0x32
 80074b0:	4a08      	ldr	r2, [pc, #32]	; (80074d4 <UART_SetConfig+0x4e4>)
 80074b2:	fba2 2303 	umull	r2, r3, r2, r3
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	f003 020f 	and.w	r2, r3, #15
 80074bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4422      	add	r2, r4
 80074c4:	609a      	str	r2, [r3, #8]
}
 80074c6:	bf00      	nop
 80074c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80074cc:	46bd      	mov	sp, r7
 80074ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074d2:	bf00      	nop
 80074d4:	51eb851f 	.word	0x51eb851f

080074d8 <__assert_func>:
 80074d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074da:	4614      	mov	r4, r2
 80074dc:	461a      	mov	r2, r3
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <__assert_func+0x2c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4605      	mov	r5, r0
 80074e4:	68d8      	ldr	r0, [r3, #12]
 80074e6:	b14c      	cbz	r4, 80074fc <__assert_func+0x24>
 80074e8:	4b07      	ldr	r3, [pc, #28]	; (8007508 <__assert_func+0x30>)
 80074ea:	9100      	str	r1, [sp, #0]
 80074ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074f0:	4906      	ldr	r1, [pc, #24]	; (800750c <__assert_func+0x34>)
 80074f2:	462b      	mov	r3, r5
 80074f4:	f000 f814 	bl	8007520 <fiprintf>
 80074f8:	f001 ffc6 	bl	8009488 <abort>
 80074fc:	4b04      	ldr	r3, [pc, #16]	; (8007510 <__assert_func+0x38>)
 80074fe:	461c      	mov	r4, r3
 8007500:	e7f3      	b.n	80074ea <__assert_func+0x12>
 8007502:	bf00      	nop
 8007504:	20000014 	.word	0x20000014
 8007508:	0800d3e8 	.word	0x0800d3e8
 800750c:	0800d3f5 	.word	0x0800d3f5
 8007510:	0800d423 	.word	0x0800d423

08007514 <__errno>:
 8007514:	4b01      	ldr	r3, [pc, #4]	; (800751c <__errno+0x8>)
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000014 	.word	0x20000014

08007520 <fiprintf>:
 8007520:	b40e      	push	{r1, r2, r3}
 8007522:	b503      	push	{r0, r1, lr}
 8007524:	4601      	mov	r1, r0
 8007526:	ab03      	add	r3, sp, #12
 8007528:	4805      	ldr	r0, [pc, #20]	; (8007540 <fiprintf+0x20>)
 800752a:	f853 2b04 	ldr.w	r2, [r3], #4
 800752e:	6800      	ldr	r0, [r0, #0]
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	f000 f86b 	bl	800760c <_vfiprintf_r>
 8007536:	b002      	add	sp, #8
 8007538:	f85d eb04 	ldr.w	lr, [sp], #4
 800753c:	b003      	add	sp, #12
 800753e:	4770      	bx	lr
 8007540:	20000014 	.word	0x20000014

08007544 <__libc_init_array>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	4d0d      	ldr	r5, [pc, #52]	; (800757c <__libc_init_array+0x38>)
 8007548:	4c0d      	ldr	r4, [pc, #52]	; (8007580 <__libc_init_array+0x3c>)
 800754a:	1b64      	subs	r4, r4, r5
 800754c:	10a4      	asrs	r4, r4, #2
 800754e:	2600      	movs	r6, #0
 8007550:	42a6      	cmp	r6, r4
 8007552:	d109      	bne.n	8007568 <__libc_init_array+0x24>
 8007554:	4d0b      	ldr	r5, [pc, #44]	; (8007584 <__libc_init_array+0x40>)
 8007556:	4c0c      	ldr	r4, [pc, #48]	; (8007588 <__libc_init_array+0x44>)
 8007558:	f005 fd74 	bl	800d044 <_init>
 800755c:	1b64      	subs	r4, r4, r5
 800755e:	10a4      	asrs	r4, r4, #2
 8007560:	2600      	movs	r6, #0
 8007562:	42a6      	cmp	r6, r4
 8007564:	d105      	bne.n	8007572 <__libc_init_array+0x2e>
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	f855 3b04 	ldr.w	r3, [r5], #4
 800756c:	4798      	blx	r3
 800756e:	3601      	adds	r6, #1
 8007570:	e7ee      	b.n	8007550 <__libc_init_array+0xc>
 8007572:	f855 3b04 	ldr.w	r3, [r5], #4
 8007576:	4798      	blx	r3
 8007578:	3601      	adds	r6, #1
 800757a:	e7f2      	b.n	8007562 <__libc_init_array+0x1e>
 800757c:	0800d8d0 	.word	0x0800d8d0
 8007580:	0800d8d0 	.word	0x0800d8d0
 8007584:	0800d8d0 	.word	0x0800d8d0
 8007588:	0800d8d4 	.word	0x0800d8d4

0800758c <memcpy>:
 800758c:	440a      	add	r2, r1
 800758e:	4291      	cmp	r1, r2
 8007590:	f100 33ff 	add.w	r3, r0, #4294967295
 8007594:	d100      	bne.n	8007598 <memcpy+0xc>
 8007596:	4770      	bx	lr
 8007598:	b510      	push	{r4, lr}
 800759a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800759e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075a2:	4291      	cmp	r1, r2
 80075a4:	d1f9      	bne.n	800759a <memcpy+0xe>
 80075a6:	bd10      	pop	{r4, pc}

080075a8 <memset>:
 80075a8:	4402      	add	r2, r0
 80075aa:	4603      	mov	r3, r0
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d100      	bne.n	80075b2 <memset+0xa>
 80075b0:	4770      	bx	lr
 80075b2:	f803 1b01 	strb.w	r1, [r3], #1
 80075b6:	e7f9      	b.n	80075ac <memset+0x4>

080075b8 <__sfputc_r>:
 80075b8:	6893      	ldr	r3, [r2, #8]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	b410      	push	{r4}
 80075c0:	6093      	str	r3, [r2, #8]
 80075c2:	da08      	bge.n	80075d6 <__sfputc_r+0x1e>
 80075c4:	6994      	ldr	r4, [r2, #24]
 80075c6:	42a3      	cmp	r3, r4
 80075c8:	db01      	blt.n	80075ce <__sfputc_r+0x16>
 80075ca:	290a      	cmp	r1, #10
 80075cc:	d103      	bne.n	80075d6 <__sfputc_r+0x1e>
 80075ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d2:	f001 be99 	b.w	8009308 <__swbuf_r>
 80075d6:	6813      	ldr	r3, [r2, #0]
 80075d8:	1c58      	adds	r0, r3, #1
 80075da:	6010      	str	r0, [r2, #0]
 80075dc:	7019      	strb	r1, [r3, #0]
 80075de:	4608      	mov	r0, r1
 80075e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <__sfputs_r>:
 80075e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e8:	4606      	mov	r6, r0
 80075ea:	460f      	mov	r7, r1
 80075ec:	4614      	mov	r4, r2
 80075ee:	18d5      	adds	r5, r2, r3
 80075f0:	42ac      	cmp	r4, r5
 80075f2:	d101      	bne.n	80075f8 <__sfputs_r+0x12>
 80075f4:	2000      	movs	r0, #0
 80075f6:	e007      	b.n	8007608 <__sfputs_r+0x22>
 80075f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fc:	463a      	mov	r2, r7
 80075fe:	4630      	mov	r0, r6
 8007600:	f7ff ffda 	bl	80075b8 <__sfputc_r>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d1f3      	bne.n	80075f0 <__sfputs_r+0xa>
 8007608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800760c <_vfiprintf_r>:
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	460d      	mov	r5, r1
 8007612:	b09d      	sub	sp, #116	; 0x74
 8007614:	4614      	mov	r4, r2
 8007616:	4698      	mov	r8, r3
 8007618:	4606      	mov	r6, r0
 800761a:	b118      	cbz	r0, 8007624 <_vfiprintf_r+0x18>
 800761c:	6983      	ldr	r3, [r0, #24]
 800761e:	b90b      	cbnz	r3, 8007624 <_vfiprintf_r+0x18>
 8007620:	f002 fece 	bl	800a3c0 <__sinit>
 8007624:	4b89      	ldr	r3, [pc, #548]	; (800784c <_vfiprintf_r+0x240>)
 8007626:	429d      	cmp	r5, r3
 8007628:	d11b      	bne.n	8007662 <_vfiprintf_r+0x56>
 800762a:	6875      	ldr	r5, [r6, #4]
 800762c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800762e:	07d9      	lsls	r1, r3, #31
 8007630:	d405      	bmi.n	800763e <_vfiprintf_r+0x32>
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	059a      	lsls	r2, r3, #22
 8007636:	d402      	bmi.n	800763e <_vfiprintf_r+0x32>
 8007638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800763a:	f003 fad2 	bl	800abe2 <__retarget_lock_acquire_recursive>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	071b      	lsls	r3, r3, #28
 8007642:	d501      	bpl.n	8007648 <_vfiprintf_r+0x3c>
 8007644:	692b      	ldr	r3, [r5, #16]
 8007646:	b9eb      	cbnz	r3, 8007684 <_vfiprintf_r+0x78>
 8007648:	4629      	mov	r1, r5
 800764a:	4630      	mov	r0, r6
 800764c:	f001 feae 	bl	80093ac <__swsetup_r>
 8007650:	b1c0      	cbz	r0, 8007684 <_vfiprintf_r+0x78>
 8007652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007654:	07dc      	lsls	r4, r3, #31
 8007656:	d50e      	bpl.n	8007676 <_vfiprintf_r+0x6a>
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	b01d      	add	sp, #116	; 0x74
 800765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007662:	4b7b      	ldr	r3, [pc, #492]	; (8007850 <_vfiprintf_r+0x244>)
 8007664:	429d      	cmp	r5, r3
 8007666:	d101      	bne.n	800766c <_vfiprintf_r+0x60>
 8007668:	68b5      	ldr	r5, [r6, #8]
 800766a:	e7df      	b.n	800762c <_vfiprintf_r+0x20>
 800766c:	4b79      	ldr	r3, [pc, #484]	; (8007854 <_vfiprintf_r+0x248>)
 800766e:	429d      	cmp	r5, r3
 8007670:	bf08      	it	eq
 8007672:	68f5      	ldreq	r5, [r6, #12]
 8007674:	e7da      	b.n	800762c <_vfiprintf_r+0x20>
 8007676:	89ab      	ldrh	r3, [r5, #12]
 8007678:	0598      	lsls	r0, r3, #22
 800767a:	d4ed      	bmi.n	8007658 <_vfiprintf_r+0x4c>
 800767c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800767e:	f003 fab1 	bl	800abe4 <__retarget_lock_release_recursive>
 8007682:	e7e9      	b.n	8007658 <_vfiprintf_r+0x4c>
 8007684:	2300      	movs	r3, #0
 8007686:	9309      	str	r3, [sp, #36]	; 0x24
 8007688:	2320      	movs	r3, #32
 800768a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800768e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007692:	2330      	movs	r3, #48	; 0x30
 8007694:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007858 <_vfiprintf_r+0x24c>
 8007698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800769c:	f04f 0901 	mov.w	r9, #1
 80076a0:	4623      	mov	r3, r4
 80076a2:	469a      	mov	sl, r3
 80076a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076a8:	b10a      	cbz	r2, 80076ae <_vfiprintf_r+0xa2>
 80076aa:	2a25      	cmp	r2, #37	; 0x25
 80076ac:	d1f9      	bne.n	80076a2 <_vfiprintf_r+0x96>
 80076ae:	ebba 0b04 	subs.w	fp, sl, r4
 80076b2:	d00b      	beq.n	80076cc <_vfiprintf_r+0xc0>
 80076b4:	465b      	mov	r3, fp
 80076b6:	4622      	mov	r2, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7ff ff93 	bl	80075e6 <__sfputs_r>
 80076c0:	3001      	adds	r0, #1
 80076c2:	f000 80aa 	beq.w	800781a <_vfiprintf_r+0x20e>
 80076c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076c8:	445a      	add	r2, fp
 80076ca:	9209      	str	r2, [sp, #36]	; 0x24
 80076cc:	f89a 3000 	ldrb.w	r3, [sl]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 80a2 	beq.w	800781a <_vfiprintf_r+0x20e>
 80076d6:	2300      	movs	r3, #0
 80076d8:	f04f 32ff 	mov.w	r2, #4294967295
 80076dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076e0:	f10a 0a01 	add.w	sl, sl, #1
 80076e4:	9304      	str	r3, [sp, #16]
 80076e6:	9307      	str	r3, [sp, #28]
 80076e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076ec:	931a      	str	r3, [sp, #104]	; 0x68
 80076ee:	4654      	mov	r4, sl
 80076f0:	2205      	movs	r2, #5
 80076f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f6:	4858      	ldr	r0, [pc, #352]	; (8007858 <_vfiprintf_r+0x24c>)
 80076f8:	f7f8 fd7a 	bl	80001f0 <memchr>
 80076fc:	9a04      	ldr	r2, [sp, #16]
 80076fe:	b9d8      	cbnz	r0, 8007738 <_vfiprintf_r+0x12c>
 8007700:	06d1      	lsls	r1, r2, #27
 8007702:	bf44      	itt	mi
 8007704:	2320      	movmi	r3, #32
 8007706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800770a:	0713      	lsls	r3, r2, #28
 800770c:	bf44      	itt	mi
 800770e:	232b      	movmi	r3, #43	; 0x2b
 8007710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007714:	f89a 3000 	ldrb.w	r3, [sl]
 8007718:	2b2a      	cmp	r3, #42	; 0x2a
 800771a:	d015      	beq.n	8007748 <_vfiprintf_r+0x13c>
 800771c:	9a07      	ldr	r2, [sp, #28]
 800771e:	4654      	mov	r4, sl
 8007720:	2000      	movs	r0, #0
 8007722:	f04f 0c0a 	mov.w	ip, #10
 8007726:	4621      	mov	r1, r4
 8007728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800772c:	3b30      	subs	r3, #48	; 0x30
 800772e:	2b09      	cmp	r3, #9
 8007730:	d94e      	bls.n	80077d0 <_vfiprintf_r+0x1c4>
 8007732:	b1b0      	cbz	r0, 8007762 <_vfiprintf_r+0x156>
 8007734:	9207      	str	r2, [sp, #28]
 8007736:	e014      	b.n	8007762 <_vfiprintf_r+0x156>
 8007738:	eba0 0308 	sub.w	r3, r0, r8
 800773c:	fa09 f303 	lsl.w	r3, r9, r3
 8007740:	4313      	orrs	r3, r2
 8007742:	9304      	str	r3, [sp, #16]
 8007744:	46a2      	mov	sl, r4
 8007746:	e7d2      	b.n	80076ee <_vfiprintf_r+0xe2>
 8007748:	9b03      	ldr	r3, [sp, #12]
 800774a:	1d19      	adds	r1, r3, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	9103      	str	r1, [sp, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	bfbb      	ittet	lt
 8007754:	425b      	neglt	r3, r3
 8007756:	f042 0202 	orrlt.w	r2, r2, #2
 800775a:	9307      	strge	r3, [sp, #28]
 800775c:	9307      	strlt	r3, [sp, #28]
 800775e:	bfb8      	it	lt
 8007760:	9204      	strlt	r2, [sp, #16]
 8007762:	7823      	ldrb	r3, [r4, #0]
 8007764:	2b2e      	cmp	r3, #46	; 0x2e
 8007766:	d10c      	bne.n	8007782 <_vfiprintf_r+0x176>
 8007768:	7863      	ldrb	r3, [r4, #1]
 800776a:	2b2a      	cmp	r3, #42	; 0x2a
 800776c:	d135      	bne.n	80077da <_vfiprintf_r+0x1ce>
 800776e:	9b03      	ldr	r3, [sp, #12]
 8007770:	1d1a      	adds	r2, r3, #4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	9203      	str	r2, [sp, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	bfb8      	it	lt
 800777a:	f04f 33ff 	movlt.w	r3, #4294967295
 800777e:	3402      	adds	r4, #2
 8007780:	9305      	str	r3, [sp, #20]
 8007782:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007868 <_vfiprintf_r+0x25c>
 8007786:	7821      	ldrb	r1, [r4, #0]
 8007788:	2203      	movs	r2, #3
 800778a:	4650      	mov	r0, sl
 800778c:	f7f8 fd30 	bl	80001f0 <memchr>
 8007790:	b140      	cbz	r0, 80077a4 <_vfiprintf_r+0x198>
 8007792:	2340      	movs	r3, #64	; 0x40
 8007794:	eba0 000a 	sub.w	r0, r0, sl
 8007798:	fa03 f000 	lsl.w	r0, r3, r0
 800779c:	9b04      	ldr	r3, [sp, #16]
 800779e:	4303      	orrs	r3, r0
 80077a0:	3401      	adds	r4, #1
 80077a2:	9304      	str	r3, [sp, #16]
 80077a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a8:	482c      	ldr	r0, [pc, #176]	; (800785c <_vfiprintf_r+0x250>)
 80077aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077ae:	2206      	movs	r2, #6
 80077b0:	f7f8 fd1e 	bl	80001f0 <memchr>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d03f      	beq.n	8007838 <_vfiprintf_r+0x22c>
 80077b8:	4b29      	ldr	r3, [pc, #164]	; (8007860 <_vfiprintf_r+0x254>)
 80077ba:	bb1b      	cbnz	r3, 8007804 <_vfiprintf_r+0x1f8>
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	3307      	adds	r3, #7
 80077c0:	f023 0307 	bic.w	r3, r3, #7
 80077c4:	3308      	adds	r3, #8
 80077c6:	9303      	str	r3, [sp, #12]
 80077c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ca:	443b      	add	r3, r7
 80077cc:	9309      	str	r3, [sp, #36]	; 0x24
 80077ce:	e767      	b.n	80076a0 <_vfiprintf_r+0x94>
 80077d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80077d4:	460c      	mov	r4, r1
 80077d6:	2001      	movs	r0, #1
 80077d8:	e7a5      	b.n	8007726 <_vfiprintf_r+0x11a>
 80077da:	2300      	movs	r3, #0
 80077dc:	3401      	adds	r4, #1
 80077de:	9305      	str	r3, [sp, #20]
 80077e0:	4619      	mov	r1, r3
 80077e2:	f04f 0c0a 	mov.w	ip, #10
 80077e6:	4620      	mov	r0, r4
 80077e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ec:	3a30      	subs	r2, #48	; 0x30
 80077ee:	2a09      	cmp	r2, #9
 80077f0:	d903      	bls.n	80077fa <_vfiprintf_r+0x1ee>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0c5      	beq.n	8007782 <_vfiprintf_r+0x176>
 80077f6:	9105      	str	r1, [sp, #20]
 80077f8:	e7c3      	b.n	8007782 <_vfiprintf_r+0x176>
 80077fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80077fe:	4604      	mov	r4, r0
 8007800:	2301      	movs	r3, #1
 8007802:	e7f0      	b.n	80077e6 <_vfiprintf_r+0x1da>
 8007804:	ab03      	add	r3, sp, #12
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	462a      	mov	r2, r5
 800780a:	4b16      	ldr	r3, [pc, #88]	; (8007864 <_vfiprintf_r+0x258>)
 800780c:	a904      	add	r1, sp, #16
 800780e:	4630      	mov	r0, r6
 8007810:	f000 f8cc 	bl	80079ac <_printf_float>
 8007814:	4607      	mov	r7, r0
 8007816:	1c78      	adds	r0, r7, #1
 8007818:	d1d6      	bne.n	80077c8 <_vfiprintf_r+0x1bc>
 800781a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800781c:	07d9      	lsls	r1, r3, #31
 800781e:	d405      	bmi.n	800782c <_vfiprintf_r+0x220>
 8007820:	89ab      	ldrh	r3, [r5, #12]
 8007822:	059a      	lsls	r2, r3, #22
 8007824:	d402      	bmi.n	800782c <_vfiprintf_r+0x220>
 8007826:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007828:	f003 f9dc 	bl	800abe4 <__retarget_lock_release_recursive>
 800782c:	89ab      	ldrh	r3, [r5, #12]
 800782e:	065b      	lsls	r3, r3, #25
 8007830:	f53f af12 	bmi.w	8007658 <_vfiprintf_r+0x4c>
 8007834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007836:	e711      	b.n	800765c <_vfiprintf_r+0x50>
 8007838:	ab03      	add	r3, sp, #12
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	462a      	mov	r2, r5
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <_vfiprintf_r+0x258>)
 8007840:	a904      	add	r1, sp, #16
 8007842:	4630      	mov	r0, r6
 8007844:	f000 fb56 	bl	8007ef4 <_printf_i>
 8007848:	e7e4      	b.n	8007814 <_vfiprintf_r+0x208>
 800784a:	bf00      	nop
 800784c:	0800d67c 	.word	0x0800d67c
 8007850:	0800d69c 	.word	0x0800d69c
 8007854:	0800d65c 	.word	0x0800d65c
 8007858:	0800d428 	.word	0x0800d428
 800785c:	0800d432 	.word	0x0800d432
 8007860:	080079ad 	.word	0x080079ad
 8007864:	080075e7 	.word	0x080075e7
 8007868:	0800d42e 	.word	0x0800d42e

0800786c <__cvt>:
 800786c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	ec55 4b10 	vmov	r4, r5, d0
 8007874:	2d00      	cmp	r5, #0
 8007876:	460e      	mov	r6, r1
 8007878:	4619      	mov	r1, r3
 800787a:	462b      	mov	r3, r5
 800787c:	bfbb      	ittet	lt
 800787e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007882:	461d      	movlt	r5, r3
 8007884:	2300      	movge	r3, #0
 8007886:	232d      	movlt	r3, #45	; 0x2d
 8007888:	700b      	strb	r3, [r1, #0]
 800788a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800788c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007890:	4691      	mov	r9, r2
 8007892:	f023 0820 	bic.w	r8, r3, #32
 8007896:	bfbc      	itt	lt
 8007898:	4622      	movlt	r2, r4
 800789a:	4614      	movlt	r4, r2
 800789c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078a0:	d005      	beq.n	80078ae <__cvt+0x42>
 80078a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078a6:	d100      	bne.n	80078aa <__cvt+0x3e>
 80078a8:	3601      	adds	r6, #1
 80078aa:	2102      	movs	r1, #2
 80078ac:	e000      	b.n	80078b0 <__cvt+0x44>
 80078ae:	2103      	movs	r1, #3
 80078b0:	ab03      	add	r3, sp, #12
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	ab02      	add	r3, sp, #8
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	ec45 4b10 	vmov	d0, r4, r5
 80078bc:	4653      	mov	r3, sl
 80078be:	4632      	mov	r2, r6
 80078c0:	f001 fe76 	bl	80095b0 <_dtoa_r>
 80078c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078c8:	4607      	mov	r7, r0
 80078ca:	d102      	bne.n	80078d2 <__cvt+0x66>
 80078cc:	f019 0f01 	tst.w	r9, #1
 80078d0:	d022      	beq.n	8007918 <__cvt+0xac>
 80078d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078d6:	eb07 0906 	add.w	r9, r7, r6
 80078da:	d110      	bne.n	80078fe <__cvt+0x92>
 80078dc:	783b      	ldrb	r3, [r7, #0]
 80078de:	2b30      	cmp	r3, #48	; 0x30
 80078e0:	d10a      	bne.n	80078f8 <__cvt+0x8c>
 80078e2:	2200      	movs	r2, #0
 80078e4:	2300      	movs	r3, #0
 80078e6:	4620      	mov	r0, r4
 80078e8:	4629      	mov	r1, r5
 80078ea:	f7f9 f8f5 	bl	8000ad8 <__aeabi_dcmpeq>
 80078ee:	b918      	cbnz	r0, 80078f8 <__cvt+0x8c>
 80078f0:	f1c6 0601 	rsb	r6, r6, #1
 80078f4:	f8ca 6000 	str.w	r6, [sl]
 80078f8:	f8da 3000 	ldr.w	r3, [sl]
 80078fc:	4499      	add	r9, r3
 80078fe:	2200      	movs	r2, #0
 8007900:	2300      	movs	r3, #0
 8007902:	4620      	mov	r0, r4
 8007904:	4629      	mov	r1, r5
 8007906:	f7f9 f8e7 	bl	8000ad8 <__aeabi_dcmpeq>
 800790a:	b108      	cbz	r0, 8007910 <__cvt+0xa4>
 800790c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007910:	2230      	movs	r2, #48	; 0x30
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	454b      	cmp	r3, r9
 8007916:	d307      	bcc.n	8007928 <__cvt+0xbc>
 8007918:	9b03      	ldr	r3, [sp, #12]
 800791a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800791c:	1bdb      	subs	r3, r3, r7
 800791e:	4638      	mov	r0, r7
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	b004      	add	sp, #16
 8007924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007928:	1c59      	adds	r1, r3, #1
 800792a:	9103      	str	r1, [sp, #12]
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e7f0      	b.n	8007912 <__cvt+0xa6>

08007930 <__exponent>:
 8007930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007932:	4603      	mov	r3, r0
 8007934:	2900      	cmp	r1, #0
 8007936:	bfb8      	it	lt
 8007938:	4249      	neglt	r1, r1
 800793a:	f803 2b02 	strb.w	r2, [r3], #2
 800793e:	bfb4      	ite	lt
 8007940:	222d      	movlt	r2, #45	; 0x2d
 8007942:	222b      	movge	r2, #43	; 0x2b
 8007944:	2909      	cmp	r1, #9
 8007946:	7042      	strb	r2, [r0, #1]
 8007948:	dd2a      	ble.n	80079a0 <__exponent+0x70>
 800794a:	f10d 0407 	add.w	r4, sp, #7
 800794e:	46a4      	mov	ip, r4
 8007950:	270a      	movs	r7, #10
 8007952:	46a6      	mov	lr, r4
 8007954:	460a      	mov	r2, r1
 8007956:	fb91 f6f7 	sdiv	r6, r1, r7
 800795a:	fb07 1516 	mls	r5, r7, r6, r1
 800795e:	3530      	adds	r5, #48	; 0x30
 8007960:	2a63      	cmp	r2, #99	; 0x63
 8007962:	f104 34ff 	add.w	r4, r4, #4294967295
 8007966:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800796a:	4631      	mov	r1, r6
 800796c:	dcf1      	bgt.n	8007952 <__exponent+0x22>
 800796e:	3130      	adds	r1, #48	; 0x30
 8007970:	f1ae 0502 	sub.w	r5, lr, #2
 8007974:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007978:	1c44      	adds	r4, r0, #1
 800797a:	4629      	mov	r1, r5
 800797c:	4561      	cmp	r1, ip
 800797e:	d30a      	bcc.n	8007996 <__exponent+0x66>
 8007980:	f10d 0209 	add.w	r2, sp, #9
 8007984:	eba2 020e 	sub.w	r2, r2, lr
 8007988:	4565      	cmp	r5, ip
 800798a:	bf88      	it	hi
 800798c:	2200      	movhi	r2, #0
 800798e:	4413      	add	r3, r2
 8007990:	1a18      	subs	r0, r3, r0
 8007992:	b003      	add	sp, #12
 8007994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800799a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800799e:	e7ed      	b.n	800797c <__exponent+0x4c>
 80079a0:	2330      	movs	r3, #48	; 0x30
 80079a2:	3130      	adds	r1, #48	; 0x30
 80079a4:	7083      	strb	r3, [r0, #2]
 80079a6:	70c1      	strb	r1, [r0, #3]
 80079a8:	1d03      	adds	r3, r0, #4
 80079aa:	e7f1      	b.n	8007990 <__exponent+0x60>

080079ac <_printf_float>:
 80079ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b0:	ed2d 8b02 	vpush	{d8}
 80079b4:	b08d      	sub	sp, #52	; 0x34
 80079b6:	460c      	mov	r4, r1
 80079b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079bc:	4616      	mov	r6, r2
 80079be:	461f      	mov	r7, r3
 80079c0:	4605      	mov	r5, r0
 80079c2:	f003 f909 	bl	800abd8 <_localeconv_r>
 80079c6:	f8d0 a000 	ldr.w	sl, [r0]
 80079ca:	4650      	mov	r0, sl
 80079cc:	f7f8 fc08 	bl	80001e0 <strlen>
 80079d0:	2300      	movs	r3, #0
 80079d2:	930a      	str	r3, [sp, #40]	; 0x28
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	9305      	str	r3, [sp, #20]
 80079d8:	f8d8 3000 	ldr.w	r3, [r8]
 80079dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80079e0:	3307      	adds	r3, #7
 80079e2:	f023 0307 	bic.w	r3, r3, #7
 80079e6:	f103 0208 	add.w	r2, r3, #8
 80079ea:	f8c8 2000 	str.w	r2, [r8]
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079fe:	9307      	str	r3, [sp, #28]
 8007a00:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a04:	ee08 0a10 	vmov	s16, r0
 8007a08:	4b9f      	ldr	r3, [pc, #636]	; (8007c88 <_printf_float+0x2dc>)
 8007a0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a12:	f7f9 f893 	bl	8000b3c <__aeabi_dcmpun>
 8007a16:	bb88      	cbnz	r0, 8007a7c <_printf_float+0xd0>
 8007a18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a1c:	4b9a      	ldr	r3, [pc, #616]	; (8007c88 <_printf_float+0x2dc>)
 8007a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a22:	f7f9 f86d 	bl	8000b00 <__aeabi_dcmple>
 8007a26:	bb48      	cbnz	r0, 8007a7c <_printf_float+0xd0>
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	4649      	mov	r1, r9
 8007a30:	f7f9 f85c 	bl	8000aec <__aeabi_dcmplt>
 8007a34:	b110      	cbz	r0, 8007a3c <_printf_float+0x90>
 8007a36:	232d      	movs	r3, #45	; 0x2d
 8007a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a3c:	4b93      	ldr	r3, [pc, #588]	; (8007c8c <_printf_float+0x2e0>)
 8007a3e:	4894      	ldr	r0, [pc, #592]	; (8007c90 <_printf_float+0x2e4>)
 8007a40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a44:	bf94      	ite	ls
 8007a46:	4698      	movls	r8, r3
 8007a48:	4680      	movhi	r8, r0
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	6123      	str	r3, [r4, #16]
 8007a4e:	9b05      	ldr	r3, [sp, #20]
 8007a50:	f023 0204 	bic.w	r2, r3, #4
 8007a54:	6022      	str	r2, [r4, #0]
 8007a56:	f04f 0900 	mov.w	r9, #0
 8007a5a:	9700      	str	r7, [sp, #0]
 8007a5c:	4633      	mov	r3, r6
 8007a5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a60:	4621      	mov	r1, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f9d8 	bl	8007e18 <_printf_common>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	f040 8090 	bne.w	8007b8e <_printf_float+0x1e2>
 8007a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a72:	b00d      	add	sp, #52	; 0x34
 8007a74:	ecbd 8b02 	vpop	{d8}
 8007a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7c:	4642      	mov	r2, r8
 8007a7e:	464b      	mov	r3, r9
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f9 f85a 	bl	8000b3c <__aeabi_dcmpun>
 8007a88:	b140      	cbz	r0, 8007a9c <_printf_float+0xf0>
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bfbc      	itt	lt
 8007a90:	232d      	movlt	r3, #45	; 0x2d
 8007a92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a96:	487f      	ldr	r0, [pc, #508]	; (8007c94 <_printf_float+0x2e8>)
 8007a98:	4b7f      	ldr	r3, [pc, #508]	; (8007c98 <_printf_float+0x2ec>)
 8007a9a:	e7d1      	b.n	8007a40 <_printf_float+0x94>
 8007a9c:	6863      	ldr	r3, [r4, #4]
 8007a9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007aa2:	9206      	str	r2, [sp, #24]
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	d13f      	bne.n	8007b28 <_printf_float+0x17c>
 8007aa8:	2306      	movs	r3, #6
 8007aaa:	6063      	str	r3, [r4, #4]
 8007aac:	9b05      	ldr	r3, [sp, #20]
 8007aae:	6861      	ldr	r1, [r4, #4]
 8007ab0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	ab0a      	add	r3, sp, #40	; 0x28
 8007aba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007abe:	ab09      	add	r3, sp, #36	; 0x24
 8007ac0:	ec49 8b10 	vmov	d0, r8, r9
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	6022      	str	r2, [r4, #0]
 8007ac8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007acc:	4628      	mov	r0, r5
 8007ace:	f7ff fecd 	bl	800786c <__cvt>
 8007ad2:	9b06      	ldr	r3, [sp, #24]
 8007ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ad6:	2b47      	cmp	r3, #71	; 0x47
 8007ad8:	4680      	mov	r8, r0
 8007ada:	d108      	bne.n	8007aee <_printf_float+0x142>
 8007adc:	1cc8      	adds	r0, r1, #3
 8007ade:	db02      	blt.n	8007ae6 <_printf_float+0x13a>
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	4299      	cmp	r1, r3
 8007ae4:	dd41      	ble.n	8007b6a <_printf_float+0x1be>
 8007ae6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007aea:	fa5f fb8b 	uxtb.w	fp, fp
 8007aee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007af2:	d820      	bhi.n	8007b36 <_printf_float+0x18a>
 8007af4:	3901      	subs	r1, #1
 8007af6:	465a      	mov	r2, fp
 8007af8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007afc:	9109      	str	r1, [sp, #36]	; 0x24
 8007afe:	f7ff ff17 	bl	8007930 <__exponent>
 8007b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b04:	1813      	adds	r3, r2, r0
 8007b06:	2a01      	cmp	r2, #1
 8007b08:	4681      	mov	r9, r0
 8007b0a:	6123      	str	r3, [r4, #16]
 8007b0c:	dc02      	bgt.n	8007b14 <_printf_float+0x168>
 8007b0e:	6822      	ldr	r2, [r4, #0]
 8007b10:	07d2      	lsls	r2, r2, #31
 8007b12:	d501      	bpl.n	8007b18 <_printf_float+0x16c>
 8007b14:	3301      	adds	r3, #1
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d09c      	beq.n	8007a5a <_printf_float+0xae>
 8007b20:	232d      	movs	r3, #45	; 0x2d
 8007b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b26:	e798      	b.n	8007a5a <_printf_float+0xae>
 8007b28:	9a06      	ldr	r2, [sp, #24]
 8007b2a:	2a47      	cmp	r2, #71	; 0x47
 8007b2c:	d1be      	bne.n	8007aac <_printf_float+0x100>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1bc      	bne.n	8007aac <_printf_float+0x100>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e7b9      	b.n	8007aaa <_printf_float+0xfe>
 8007b36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b3a:	d118      	bne.n	8007b6e <_printf_float+0x1c2>
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	6863      	ldr	r3, [r4, #4]
 8007b40:	dd0b      	ble.n	8007b5a <_printf_float+0x1ae>
 8007b42:	6121      	str	r1, [r4, #16]
 8007b44:	b913      	cbnz	r3, 8007b4c <_printf_float+0x1a0>
 8007b46:	6822      	ldr	r2, [r4, #0]
 8007b48:	07d0      	lsls	r0, r2, #31
 8007b4a:	d502      	bpl.n	8007b52 <_printf_float+0x1a6>
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	440b      	add	r3, r1
 8007b50:	6123      	str	r3, [r4, #16]
 8007b52:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b54:	f04f 0900 	mov.w	r9, #0
 8007b58:	e7de      	b.n	8007b18 <_printf_float+0x16c>
 8007b5a:	b913      	cbnz	r3, 8007b62 <_printf_float+0x1b6>
 8007b5c:	6822      	ldr	r2, [r4, #0]
 8007b5e:	07d2      	lsls	r2, r2, #31
 8007b60:	d501      	bpl.n	8007b66 <_printf_float+0x1ba>
 8007b62:	3302      	adds	r3, #2
 8007b64:	e7f4      	b.n	8007b50 <_printf_float+0x1a4>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e7f2      	b.n	8007b50 <_printf_float+0x1a4>
 8007b6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b70:	4299      	cmp	r1, r3
 8007b72:	db05      	blt.n	8007b80 <_printf_float+0x1d4>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	6121      	str	r1, [r4, #16]
 8007b78:	07d8      	lsls	r0, r3, #31
 8007b7a:	d5ea      	bpl.n	8007b52 <_printf_float+0x1a6>
 8007b7c:	1c4b      	adds	r3, r1, #1
 8007b7e:	e7e7      	b.n	8007b50 <_printf_float+0x1a4>
 8007b80:	2900      	cmp	r1, #0
 8007b82:	bfd4      	ite	le
 8007b84:	f1c1 0202 	rsble	r2, r1, #2
 8007b88:	2201      	movgt	r2, #1
 8007b8a:	4413      	add	r3, r2
 8007b8c:	e7e0      	b.n	8007b50 <_printf_float+0x1a4>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	055a      	lsls	r2, r3, #21
 8007b92:	d407      	bmi.n	8007ba4 <_printf_float+0x1f8>
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	4642      	mov	r2, r8
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d12c      	bne.n	8007bfc <_printf_float+0x250>
 8007ba2:	e764      	b.n	8007a6e <_printf_float+0xc2>
 8007ba4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ba8:	f240 80e0 	bls.w	8007d6c <_printf_float+0x3c0>
 8007bac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f7f8 ff90 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d034      	beq.n	8007c26 <_printf_float+0x27a>
 8007bbc:	4a37      	ldr	r2, [pc, #220]	; (8007c9c <_printf_float+0x2f0>)
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f af51 	beq.w	8007a6e <_printf_float+0xc2>
 8007bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	db02      	blt.n	8007bda <_printf_float+0x22e>
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	07d8      	lsls	r0, r3, #31
 8007bd8:	d510      	bpl.n	8007bfc <_printf_float+0x250>
 8007bda:	ee18 3a10 	vmov	r3, s16
 8007bde:	4652      	mov	r2, sl
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	f43f af41 	beq.w	8007a6e <_printf_float+0xc2>
 8007bec:	f04f 0800 	mov.w	r8, #0
 8007bf0:	f104 091a 	add.w	r9, r4, #26
 8007bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	4543      	cmp	r3, r8
 8007bfa:	dc09      	bgt.n	8007c10 <_printf_float+0x264>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	079b      	lsls	r3, r3, #30
 8007c00:	f100 8105 	bmi.w	8007e0e <_printf_float+0x462>
 8007c04:	68e0      	ldr	r0, [r4, #12]
 8007c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c08:	4298      	cmp	r0, r3
 8007c0a:	bfb8      	it	lt
 8007c0c:	4618      	movlt	r0, r3
 8007c0e:	e730      	b.n	8007a72 <_printf_float+0xc6>
 8007c10:	2301      	movs	r3, #1
 8007c12:	464a      	mov	r2, r9
 8007c14:	4631      	mov	r1, r6
 8007c16:	4628      	mov	r0, r5
 8007c18:	47b8      	blx	r7
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	f43f af27 	beq.w	8007a6e <_printf_float+0xc2>
 8007c20:	f108 0801 	add.w	r8, r8, #1
 8007c24:	e7e6      	b.n	8007bf4 <_printf_float+0x248>
 8007c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	dc39      	bgt.n	8007ca0 <_printf_float+0x2f4>
 8007c2c:	4a1b      	ldr	r2, [pc, #108]	; (8007c9c <_printf_float+0x2f0>)
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4631      	mov	r1, r6
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b8      	blx	r7
 8007c36:	3001      	adds	r0, #1
 8007c38:	f43f af19 	beq.w	8007a6e <_printf_float+0xc2>
 8007c3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c40:	4313      	orrs	r3, r2
 8007c42:	d102      	bne.n	8007c4a <_printf_float+0x29e>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	07d9      	lsls	r1, r3, #31
 8007c48:	d5d8      	bpl.n	8007bfc <_printf_float+0x250>
 8007c4a:	ee18 3a10 	vmov	r3, s16
 8007c4e:	4652      	mov	r2, sl
 8007c50:	4631      	mov	r1, r6
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b8      	blx	r7
 8007c56:	3001      	adds	r0, #1
 8007c58:	f43f af09 	beq.w	8007a6e <_printf_float+0xc2>
 8007c5c:	f04f 0900 	mov.w	r9, #0
 8007c60:	f104 0a1a 	add.w	sl, r4, #26
 8007c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c66:	425b      	negs	r3, r3
 8007c68:	454b      	cmp	r3, r9
 8007c6a:	dc01      	bgt.n	8007c70 <_printf_float+0x2c4>
 8007c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c6e:	e792      	b.n	8007b96 <_printf_float+0x1ea>
 8007c70:	2301      	movs	r3, #1
 8007c72:	4652      	mov	r2, sl
 8007c74:	4631      	mov	r1, r6
 8007c76:	4628      	mov	r0, r5
 8007c78:	47b8      	blx	r7
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	f43f aef7 	beq.w	8007a6e <_printf_float+0xc2>
 8007c80:	f109 0901 	add.w	r9, r9, #1
 8007c84:	e7ee      	b.n	8007c64 <_printf_float+0x2b8>
 8007c86:	bf00      	nop
 8007c88:	7fefffff 	.word	0x7fefffff
 8007c8c:	0800d439 	.word	0x0800d439
 8007c90:	0800d43d 	.word	0x0800d43d
 8007c94:	0800d445 	.word	0x0800d445
 8007c98:	0800d441 	.word	0x0800d441
 8007c9c:	0800d449 	.word	0x0800d449
 8007ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ca2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	bfa8      	it	ge
 8007ca8:	461a      	movge	r2, r3
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	4691      	mov	r9, r2
 8007cae:	dc37      	bgt.n	8007d20 <_printf_float+0x374>
 8007cb0:	f04f 0b00 	mov.w	fp, #0
 8007cb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cb8:	f104 021a 	add.w	r2, r4, #26
 8007cbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cbe:	9305      	str	r3, [sp, #20]
 8007cc0:	eba3 0309 	sub.w	r3, r3, r9
 8007cc4:	455b      	cmp	r3, fp
 8007cc6:	dc33      	bgt.n	8007d30 <_printf_float+0x384>
 8007cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	db3b      	blt.n	8007d48 <_printf_float+0x39c>
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	07da      	lsls	r2, r3, #31
 8007cd4:	d438      	bmi.n	8007d48 <_printf_float+0x39c>
 8007cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd8:	9a05      	ldr	r2, [sp, #20]
 8007cda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cdc:	1a9a      	subs	r2, r3, r2
 8007cde:	eba3 0901 	sub.w	r9, r3, r1
 8007ce2:	4591      	cmp	r9, r2
 8007ce4:	bfa8      	it	ge
 8007ce6:	4691      	movge	r9, r2
 8007ce8:	f1b9 0f00 	cmp.w	r9, #0
 8007cec:	dc35      	bgt.n	8007d5a <_printf_float+0x3ae>
 8007cee:	f04f 0800 	mov.w	r8, #0
 8007cf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cf6:	f104 0a1a 	add.w	sl, r4, #26
 8007cfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cfe:	1a9b      	subs	r3, r3, r2
 8007d00:	eba3 0309 	sub.w	r3, r3, r9
 8007d04:	4543      	cmp	r3, r8
 8007d06:	f77f af79 	ble.w	8007bfc <_printf_float+0x250>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4652      	mov	r2, sl
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b8      	blx	r7
 8007d14:	3001      	adds	r0, #1
 8007d16:	f43f aeaa 	beq.w	8007a6e <_printf_float+0xc2>
 8007d1a:	f108 0801 	add.w	r8, r8, #1
 8007d1e:	e7ec      	b.n	8007cfa <_printf_float+0x34e>
 8007d20:	4613      	mov	r3, r2
 8007d22:	4631      	mov	r1, r6
 8007d24:	4642      	mov	r2, r8
 8007d26:	4628      	mov	r0, r5
 8007d28:	47b8      	blx	r7
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	d1c0      	bne.n	8007cb0 <_printf_float+0x304>
 8007d2e:	e69e      	b.n	8007a6e <_printf_float+0xc2>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4631      	mov	r1, r6
 8007d34:	4628      	mov	r0, r5
 8007d36:	9205      	str	r2, [sp, #20]
 8007d38:	47b8      	blx	r7
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	f43f ae97 	beq.w	8007a6e <_printf_float+0xc2>
 8007d40:	9a05      	ldr	r2, [sp, #20]
 8007d42:	f10b 0b01 	add.w	fp, fp, #1
 8007d46:	e7b9      	b.n	8007cbc <_printf_float+0x310>
 8007d48:	ee18 3a10 	vmov	r3, s16
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b8      	blx	r7
 8007d54:	3001      	adds	r0, #1
 8007d56:	d1be      	bne.n	8007cd6 <_printf_float+0x32a>
 8007d58:	e689      	b.n	8007a6e <_printf_float+0xc2>
 8007d5a:	9a05      	ldr	r2, [sp, #20]
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	4442      	add	r2, r8
 8007d60:	4631      	mov	r1, r6
 8007d62:	4628      	mov	r0, r5
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	d1c1      	bne.n	8007cee <_printf_float+0x342>
 8007d6a:	e680      	b.n	8007a6e <_printf_float+0xc2>
 8007d6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d6e:	2a01      	cmp	r2, #1
 8007d70:	dc01      	bgt.n	8007d76 <_printf_float+0x3ca>
 8007d72:	07db      	lsls	r3, r3, #31
 8007d74:	d538      	bpl.n	8007de8 <_printf_float+0x43c>
 8007d76:	2301      	movs	r3, #1
 8007d78:	4642      	mov	r2, r8
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	47b8      	blx	r7
 8007d80:	3001      	adds	r0, #1
 8007d82:	f43f ae74 	beq.w	8007a6e <_printf_float+0xc2>
 8007d86:	ee18 3a10 	vmov	r3, s16
 8007d8a:	4652      	mov	r2, sl
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b8      	blx	r7
 8007d92:	3001      	adds	r0, #1
 8007d94:	f43f ae6b 	beq.w	8007a6e <_printf_float+0xc2>
 8007d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f7f8 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007da4:	b9d8      	cbnz	r0, 8007dde <_printf_float+0x432>
 8007da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da8:	f108 0201 	add.w	r2, r8, #1
 8007dac:	3b01      	subs	r3, #1
 8007dae:	4631      	mov	r1, r6
 8007db0:	4628      	mov	r0, r5
 8007db2:	47b8      	blx	r7
 8007db4:	3001      	adds	r0, #1
 8007db6:	d10e      	bne.n	8007dd6 <_printf_float+0x42a>
 8007db8:	e659      	b.n	8007a6e <_printf_float+0xc2>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	4652      	mov	r2, sl
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	47b8      	blx	r7
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	f43f ae52 	beq.w	8007a6e <_printf_float+0xc2>
 8007dca:	f108 0801 	add.w	r8, r8, #1
 8007dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	4543      	cmp	r3, r8
 8007dd4:	dcf1      	bgt.n	8007dba <_printf_float+0x40e>
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ddc:	e6dc      	b.n	8007b98 <_printf_float+0x1ec>
 8007dde:	f04f 0800 	mov.w	r8, #0
 8007de2:	f104 0a1a 	add.w	sl, r4, #26
 8007de6:	e7f2      	b.n	8007dce <_printf_float+0x422>
 8007de8:	2301      	movs	r3, #1
 8007dea:	4642      	mov	r2, r8
 8007dec:	e7df      	b.n	8007dae <_printf_float+0x402>
 8007dee:	2301      	movs	r3, #1
 8007df0:	464a      	mov	r2, r9
 8007df2:	4631      	mov	r1, r6
 8007df4:	4628      	mov	r0, r5
 8007df6:	47b8      	blx	r7
 8007df8:	3001      	adds	r0, #1
 8007dfa:	f43f ae38 	beq.w	8007a6e <_printf_float+0xc2>
 8007dfe:	f108 0801 	add.w	r8, r8, #1
 8007e02:	68e3      	ldr	r3, [r4, #12]
 8007e04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e06:	1a5b      	subs	r3, r3, r1
 8007e08:	4543      	cmp	r3, r8
 8007e0a:	dcf0      	bgt.n	8007dee <_printf_float+0x442>
 8007e0c:	e6fa      	b.n	8007c04 <_printf_float+0x258>
 8007e0e:	f04f 0800 	mov.w	r8, #0
 8007e12:	f104 0919 	add.w	r9, r4, #25
 8007e16:	e7f4      	b.n	8007e02 <_printf_float+0x456>

08007e18 <_printf_common>:
 8007e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	4699      	mov	r9, r3
 8007e20:	688a      	ldr	r2, [r1, #8]
 8007e22:	690b      	ldr	r3, [r1, #16]
 8007e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	bfb8      	it	lt
 8007e2c:	4613      	movlt	r3, r2
 8007e2e:	6033      	str	r3, [r6, #0]
 8007e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e34:	4607      	mov	r7, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	b10a      	cbz	r2, 8007e3e <_printf_common+0x26>
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	6033      	str	r3, [r6, #0]
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	0699      	lsls	r1, r3, #26
 8007e42:	bf42      	ittt	mi
 8007e44:	6833      	ldrmi	r3, [r6, #0]
 8007e46:	3302      	addmi	r3, #2
 8007e48:	6033      	strmi	r3, [r6, #0]
 8007e4a:	6825      	ldr	r5, [r4, #0]
 8007e4c:	f015 0506 	ands.w	r5, r5, #6
 8007e50:	d106      	bne.n	8007e60 <_printf_common+0x48>
 8007e52:	f104 0a19 	add.w	sl, r4, #25
 8007e56:	68e3      	ldr	r3, [r4, #12]
 8007e58:	6832      	ldr	r2, [r6, #0]
 8007e5a:	1a9b      	subs	r3, r3, r2
 8007e5c:	42ab      	cmp	r3, r5
 8007e5e:	dc26      	bgt.n	8007eae <_printf_common+0x96>
 8007e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e64:	1e13      	subs	r3, r2, #0
 8007e66:	6822      	ldr	r2, [r4, #0]
 8007e68:	bf18      	it	ne
 8007e6a:	2301      	movne	r3, #1
 8007e6c:	0692      	lsls	r2, r2, #26
 8007e6e:	d42b      	bmi.n	8007ec8 <_printf_common+0xb0>
 8007e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e74:	4649      	mov	r1, r9
 8007e76:	4638      	mov	r0, r7
 8007e78:	47c0      	blx	r8
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d01e      	beq.n	8007ebc <_printf_common+0xa4>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	68e5      	ldr	r5, [r4, #12]
 8007e82:	6832      	ldr	r2, [r6, #0]
 8007e84:	f003 0306 	and.w	r3, r3, #6
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	bf08      	it	eq
 8007e8c:	1aad      	subeq	r5, r5, r2
 8007e8e:	68a3      	ldr	r3, [r4, #8]
 8007e90:	6922      	ldr	r2, [r4, #16]
 8007e92:	bf0c      	ite	eq
 8007e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e98:	2500      	movne	r5, #0
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	bfc4      	itt	gt
 8007e9e:	1a9b      	subgt	r3, r3, r2
 8007ea0:	18ed      	addgt	r5, r5, r3
 8007ea2:	2600      	movs	r6, #0
 8007ea4:	341a      	adds	r4, #26
 8007ea6:	42b5      	cmp	r5, r6
 8007ea8:	d11a      	bne.n	8007ee0 <_printf_common+0xc8>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	e008      	b.n	8007ec0 <_printf_common+0xa8>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	4652      	mov	r2, sl
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	47c0      	blx	r8
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d103      	bne.n	8007ec4 <_printf_common+0xac>
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	e7c6      	b.n	8007e56 <_printf_common+0x3e>
 8007ec8:	18e1      	adds	r1, r4, r3
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	2030      	movs	r0, #48	; 0x30
 8007ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ed2:	4422      	add	r2, r4
 8007ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007edc:	3302      	adds	r3, #2
 8007ede:	e7c7      	b.n	8007e70 <_printf_common+0x58>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	47c0      	blx	r8
 8007eea:	3001      	adds	r0, #1
 8007eec:	d0e6      	beq.n	8007ebc <_printf_common+0xa4>
 8007eee:	3601      	adds	r6, #1
 8007ef0:	e7d9      	b.n	8007ea6 <_printf_common+0x8e>
	...

08007ef4 <_printf_i>:
 8007ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef8:	7e0f      	ldrb	r7, [r1, #24]
 8007efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007efc:	2f78      	cmp	r7, #120	; 0x78
 8007efe:	4691      	mov	r9, r2
 8007f00:	4680      	mov	r8, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	469a      	mov	sl, r3
 8007f06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f0a:	d807      	bhi.n	8007f1c <_printf_i+0x28>
 8007f0c:	2f62      	cmp	r7, #98	; 0x62
 8007f0e:	d80a      	bhi.n	8007f26 <_printf_i+0x32>
 8007f10:	2f00      	cmp	r7, #0
 8007f12:	f000 80d8 	beq.w	80080c6 <_printf_i+0x1d2>
 8007f16:	2f58      	cmp	r7, #88	; 0x58
 8007f18:	f000 80a3 	beq.w	8008062 <_printf_i+0x16e>
 8007f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f24:	e03a      	b.n	8007f9c <_printf_i+0xa8>
 8007f26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f2a:	2b15      	cmp	r3, #21
 8007f2c:	d8f6      	bhi.n	8007f1c <_printf_i+0x28>
 8007f2e:	a101      	add	r1, pc, #4	; (adr r1, 8007f34 <_printf_i+0x40>)
 8007f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f34:	08007f8d 	.word	0x08007f8d
 8007f38:	08007fa1 	.word	0x08007fa1
 8007f3c:	08007f1d 	.word	0x08007f1d
 8007f40:	08007f1d 	.word	0x08007f1d
 8007f44:	08007f1d 	.word	0x08007f1d
 8007f48:	08007f1d 	.word	0x08007f1d
 8007f4c:	08007fa1 	.word	0x08007fa1
 8007f50:	08007f1d 	.word	0x08007f1d
 8007f54:	08007f1d 	.word	0x08007f1d
 8007f58:	08007f1d 	.word	0x08007f1d
 8007f5c:	08007f1d 	.word	0x08007f1d
 8007f60:	080080ad 	.word	0x080080ad
 8007f64:	08007fd1 	.word	0x08007fd1
 8007f68:	0800808f 	.word	0x0800808f
 8007f6c:	08007f1d 	.word	0x08007f1d
 8007f70:	08007f1d 	.word	0x08007f1d
 8007f74:	080080cf 	.word	0x080080cf
 8007f78:	08007f1d 	.word	0x08007f1d
 8007f7c:	08007fd1 	.word	0x08007fd1
 8007f80:	08007f1d 	.word	0x08007f1d
 8007f84:	08007f1d 	.word	0x08007f1d
 8007f88:	08008097 	.word	0x08008097
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	1d1a      	adds	r2, r3, #4
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	602a      	str	r2, [r5, #0]
 8007f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e0a3      	b.n	80080e8 <_printf_i+0x1f4>
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	6829      	ldr	r1, [r5, #0]
 8007fa4:	0606      	lsls	r6, r0, #24
 8007fa6:	f101 0304 	add.w	r3, r1, #4
 8007faa:	d50a      	bpl.n	8007fc2 <_printf_i+0xce>
 8007fac:	680e      	ldr	r6, [r1, #0]
 8007fae:	602b      	str	r3, [r5, #0]
 8007fb0:	2e00      	cmp	r6, #0
 8007fb2:	da03      	bge.n	8007fbc <_printf_i+0xc8>
 8007fb4:	232d      	movs	r3, #45	; 0x2d
 8007fb6:	4276      	negs	r6, r6
 8007fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fbc:	485e      	ldr	r0, [pc, #376]	; (8008138 <_printf_i+0x244>)
 8007fbe:	230a      	movs	r3, #10
 8007fc0:	e019      	b.n	8007ff6 <_printf_i+0x102>
 8007fc2:	680e      	ldr	r6, [r1, #0]
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fca:	bf18      	it	ne
 8007fcc:	b236      	sxthne	r6, r6
 8007fce:	e7ef      	b.n	8007fb0 <_printf_i+0xbc>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	6820      	ldr	r0, [r4, #0]
 8007fd4:	1d19      	adds	r1, r3, #4
 8007fd6:	6029      	str	r1, [r5, #0]
 8007fd8:	0601      	lsls	r1, r0, #24
 8007fda:	d501      	bpl.n	8007fe0 <_printf_i+0xec>
 8007fdc:	681e      	ldr	r6, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <_printf_i+0xf2>
 8007fe0:	0646      	lsls	r6, r0, #25
 8007fe2:	d5fb      	bpl.n	8007fdc <_printf_i+0xe8>
 8007fe4:	881e      	ldrh	r6, [r3, #0]
 8007fe6:	4854      	ldr	r0, [pc, #336]	; (8008138 <_printf_i+0x244>)
 8007fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8007fea:	bf0c      	ite	eq
 8007fec:	2308      	moveq	r3, #8
 8007fee:	230a      	movne	r3, #10
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ff6:	6865      	ldr	r5, [r4, #4]
 8007ff8:	60a5      	str	r5, [r4, #8]
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	bfa2      	ittt	ge
 8007ffe:	6821      	ldrge	r1, [r4, #0]
 8008000:	f021 0104 	bicge.w	r1, r1, #4
 8008004:	6021      	strge	r1, [r4, #0]
 8008006:	b90e      	cbnz	r6, 800800c <_printf_i+0x118>
 8008008:	2d00      	cmp	r5, #0
 800800a:	d04d      	beq.n	80080a8 <_printf_i+0x1b4>
 800800c:	4615      	mov	r5, r2
 800800e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008012:	fb03 6711 	mls	r7, r3, r1, r6
 8008016:	5dc7      	ldrb	r7, [r0, r7]
 8008018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800801c:	4637      	mov	r7, r6
 800801e:	42bb      	cmp	r3, r7
 8008020:	460e      	mov	r6, r1
 8008022:	d9f4      	bls.n	800800e <_printf_i+0x11a>
 8008024:	2b08      	cmp	r3, #8
 8008026:	d10b      	bne.n	8008040 <_printf_i+0x14c>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	07de      	lsls	r6, r3, #31
 800802c:	d508      	bpl.n	8008040 <_printf_i+0x14c>
 800802e:	6923      	ldr	r3, [r4, #16]
 8008030:	6861      	ldr	r1, [r4, #4]
 8008032:	4299      	cmp	r1, r3
 8008034:	bfde      	ittt	le
 8008036:	2330      	movle	r3, #48	; 0x30
 8008038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800803c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008040:	1b52      	subs	r2, r2, r5
 8008042:	6122      	str	r2, [r4, #16]
 8008044:	f8cd a000 	str.w	sl, [sp]
 8008048:	464b      	mov	r3, r9
 800804a:	aa03      	add	r2, sp, #12
 800804c:	4621      	mov	r1, r4
 800804e:	4640      	mov	r0, r8
 8008050:	f7ff fee2 	bl	8007e18 <_printf_common>
 8008054:	3001      	adds	r0, #1
 8008056:	d14c      	bne.n	80080f2 <_printf_i+0x1fe>
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
 800805c:	b004      	add	sp, #16
 800805e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008062:	4835      	ldr	r0, [pc, #212]	; (8008138 <_printf_i+0x244>)
 8008064:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008068:	6829      	ldr	r1, [r5, #0]
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008070:	6029      	str	r1, [r5, #0]
 8008072:	061d      	lsls	r5, r3, #24
 8008074:	d514      	bpl.n	80080a0 <_printf_i+0x1ac>
 8008076:	07df      	lsls	r7, r3, #31
 8008078:	bf44      	itt	mi
 800807a:	f043 0320 	orrmi.w	r3, r3, #32
 800807e:	6023      	strmi	r3, [r4, #0]
 8008080:	b91e      	cbnz	r6, 800808a <_printf_i+0x196>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	f023 0320 	bic.w	r3, r3, #32
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	2310      	movs	r3, #16
 800808c:	e7b0      	b.n	8007ff0 <_printf_i+0xfc>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	f043 0320 	orr.w	r3, r3, #32
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	2378      	movs	r3, #120	; 0x78
 8008098:	4828      	ldr	r0, [pc, #160]	; (800813c <_printf_i+0x248>)
 800809a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800809e:	e7e3      	b.n	8008068 <_printf_i+0x174>
 80080a0:	0659      	lsls	r1, r3, #25
 80080a2:	bf48      	it	mi
 80080a4:	b2b6      	uxthmi	r6, r6
 80080a6:	e7e6      	b.n	8008076 <_printf_i+0x182>
 80080a8:	4615      	mov	r5, r2
 80080aa:	e7bb      	b.n	8008024 <_printf_i+0x130>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	6826      	ldr	r6, [r4, #0]
 80080b0:	6961      	ldr	r1, [r4, #20]
 80080b2:	1d18      	adds	r0, r3, #4
 80080b4:	6028      	str	r0, [r5, #0]
 80080b6:	0635      	lsls	r5, r6, #24
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	d501      	bpl.n	80080c0 <_printf_i+0x1cc>
 80080bc:	6019      	str	r1, [r3, #0]
 80080be:	e002      	b.n	80080c6 <_printf_i+0x1d2>
 80080c0:	0670      	lsls	r0, r6, #25
 80080c2:	d5fb      	bpl.n	80080bc <_printf_i+0x1c8>
 80080c4:	8019      	strh	r1, [r3, #0]
 80080c6:	2300      	movs	r3, #0
 80080c8:	6123      	str	r3, [r4, #16]
 80080ca:	4615      	mov	r5, r2
 80080cc:	e7ba      	b.n	8008044 <_printf_i+0x150>
 80080ce:	682b      	ldr	r3, [r5, #0]
 80080d0:	1d1a      	adds	r2, r3, #4
 80080d2:	602a      	str	r2, [r5, #0]
 80080d4:	681d      	ldr	r5, [r3, #0]
 80080d6:	6862      	ldr	r2, [r4, #4]
 80080d8:	2100      	movs	r1, #0
 80080da:	4628      	mov	r0, r5
 80080dc:	f7f8 f888 	bl	80001f0 <memchr>
 80080e0:	b108      	cbz	r0, 80080e6 <_printf_i+0x1f2>
 80080e2:	1b40      	subs	r0, r0, r5
 80080e4:	6060      	str	r0, [r4, #4]
 80080e6:	6863      	ldr	r3, [r4, #4]
 80080e8:	6123      	str	r3, [r4, #16]
 80080ea:	2300      	movs	r3, #0
 80080ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f0:	e7a8      	b.n	8008044 <_printf_i+0x150>
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	462a      	mov	r2, r5
 80080f6:	4649      	mov	r1, r9
 80080f8:	4640      	mov	r0, r8
 80080fa:	47d0      	blx	sl
 80080fc:	3001      	adds	r0, #1
 80080fe:	d0ab      	beq.n	8008058 <_printf_i+0x164>
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	079b      	lsls	r3, r3, #30
 8008104:	d413      	bmi.n	800812e <_printf_i+0x23a>
 8008106:	68e0      	ldr	r0, [r4, #12]
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	4298      	cmp	r0, r3
 800810c:	bfb8      	it	lt
 800810e:	4618      	movlt	r0, r3
 8008110:	e7a4      	b.n	800805c <_printf_i+0x168>
 8008112:	2301      	movs	r3, #1
 8008114:	4632      	mov	r2, r6
 8008116:	4649      	mov	r1, r9
 8008118:	4640      	mov	r0, r8
 800811a:	47d0      	blx	sl
 800811c:	3001      	adds	r0, #1
 800811e:	d09b      	beq.n	8008058 <_printf_i+0x164>
 8008120:	3501      	adds	r5, #1
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	9903      	ldr	r1, [sp, #12]
 8008126:	1a5b      	subs	r3, r3, r1
 8008128:	42ab      	cmp	r3, r5
 800812a:	dcf2      	bgt.n	8008112 <_printf_i+0x21e>
 800812c:	e7eb      	b.n	8008106 <_printf_i+0x212>
 800812e:	2500      	movs	r5, #0
 8008130:	f104 0619 	add.w	r6, r4, #25
 8008134:	e7f5      	b.n	8008122 <_printf_i+0x22e>
 8008136:	bf00      	nop
 8008138:	0800d44b 	.word	0x0800d44b
 800813c:	0800d45c 	.word	0x0800d45c

08008140 <_scanf_float>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	b087      	sub	sp, #28
 8008146:	4617      	mov	r7, r2
 8008148:	9303      	str	r3, [sp, #12]
 800814a:	688b      	ldr	r3, [r1, #8]
 800814c:	1e5a      	subs	r2, r3, #1
 800814e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008152:	bf83      	ittte	hi
 8008154:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008158:	195b      	addhi	r3, r3, r5
 800815a:	9302      	strhi	r3, [sp, #8]
 800815c:	2300      	movls	r3, #0
 800815e:	bf86      	itte	hi
 8008160:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008164:	608b      	strhi	r3, [r1, #8]
 8008166:	9302      	strls	r3, [sp, #8]
 8008168:	680b      	ldr	r3, [r1, #0]
 800816a:	468b      	mov	fp, r1
 800816c:	2500      	movs	r5, #0
 800816e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008172:	f84b 3b1c 	str.w	r3, [fp], #28
 8008176:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800817a:	4680      	mov	r8, r0
 800817c:	460c      	mov	r4, r1
 800817e:	465e      	mov	r6, fp
 8008180:	46aa      	mov	sl, r5
 8008182:	46a9      	mov	r9, r5
 8008184:	9501      	str	r5, [sp, #4]
 8008186:	68a2      	ldr	r2, [r4, #8]
 8008188:	b152      	cbz	r2, 80081a0 <_scanf_float+0x60>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b4e      	cmp	r3, #78	; 0x4e
 8008190:	d864      	bhi.n	800825c <_scanf_float+0x11c>
 8008192:	2b40      	cmp	r3, #64	; 0x40
 8008194:	d83c      	bhi.n	8008210 <_scanf_float+0xd0>
 8008196:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800819a:	b2c8      	uxtb	r0, r1
 800819c:	280e      	cmp	r0, #14
 800819e:	d93a      	bls.n	8008216 <_scanf_float+0xd6>
 80081a0:	f1b9 0f00 	cmp.w	r9, #0
 80081a4:	d003      	beq.n	80081ae <_scanf_float+0x6e>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081b2:	f1ba 0f01 	cmp.w	sl, #1
 80081b6:	f200 8113 	bhi.w	80083e0 <_scanf_float+0x2a0>
 80081ba:	455e      	cmp	r6, fp
 80081bc:	f200 8105 	bhi.w	80083ca <_scanf_float+0x28a>
 80081c0:	2501      	movs	r5, #1
 80081c2:	4628      	mov	r0, r5
 80081c4:	b007      	add	sp, #28
 80081c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80081ce:	2a0d      	cmp	r2, #13
 80081d0:	d8e6      	bhi.n	80081a0 <_scanf_float+0x60>
 80081d2:	a101      	add	r1, pc, #4	; (adr r1, 80081d8 <_scanf_float+0x98>)
 80081d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081d8:	08008317 	.word	0x08008317
 80081dc:	080081a1 	.word	0x080081a1
 80081e0:	080081a1 	.word	0x080081a1
 80081e4:	080081a1 	.word	0x080081a1
 80081e8:	08008377 	.word	0x08008377
 80081ec:	0800834f 	.word	0x0800834f
 80081f0:	080081a1 	.word	0x080081a1
 80081f4:	080081a1 	.word	0x080081a1
 80081f8:	08008325 	.word	0x08008325
 80081fc:	080081a1 	.word	0x080081a1
 8008200:	080081a1 	.word	0x080081a1
 8008204:	080081a1 	.word	0x080081a1
 8008208:	080081a1 	.word	0x080081a1
 800820c:	080082dd 	.word	0x080082dd
 8008210:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008214:	e7db      	b.n	80081ce <_scanf_float+0x8e>
 8008216:	290e      	cmp	r1, #14
 8008218:	d8c2      	bhi.n	80081a0 <_scanf_float+0x60>
 800821a:	a001      	add	r0, pc, #4	; (adr r0, 8008220 <_scanf_float+0xe0>)
 800821c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008220:	080082cf 	.word	0x080082cf
 8008224:	080081a1 	.word	0x080081a1
 8008228:	080082cf 	.word	0x080082cf
 800822c:	08008363 	.word	0x08008363
 8008230:	080081a1 	.word	0x080081a1
 8008234:	0800827d 	.word	0x0800827d
 8008238:	080082b9 	.word	0x080082b9
 800823c:	080082b9 	.word	0x080082b9
 8008240:	080082b9 	.word	0x080082b9
 8008244:	080082b9 	.word	0x080082b9
 8008248:	080082b9 	.word	0x080082b9
 800824c:	080082b9 	.word	0x080082b9
 8008250:	080082b9 	.word	0x080082b9
 8008254:	080082b9 	.word	0x080082b9
 8008258:	080082b9 	.word	0x080082b9
 800825c:	2b6e      	cmp	r3, #110	; 0x6e
 800825e:	d809      	bhi.n	8008274 <_scanf_float+0x134>
 8008260:	2b60      	cmp	r3, #96	; 0x60
 8008262:	d8b2      	bhi.n	80081ca <_scanf_float+0x8a>
 8008264:	2b54      	cmp	r3, #84	; 0x54
 8008266:	d077      	beq.n	8008358 <_scanf_float+0x218>
 8008268:	2b59      	cmp	r3, #89	; 0x59
 800826a:	d199      	bne.n	80081a0 <_scanf_float+0x60>
 800826c:	2d07      	cmp	r5, #7
 800826e:	d197      	bne.n	80081a0 <_scanf_float+0x60>
 8008270:	2508      	movs	r5, #8
 8008272:	e029      	b.n	80082c8 <_scanf_float+0x188>
 8008274:	2b74      	cmp	r3, #116	; 0x74
 8008276:	d06f      	beq.n	8008358 <_scanf_float+0x218>
 8008278:	2b79      	cmp	r3, #121	; 0x79
 800827a:	e7f6      	b.n	800826a <_scanf_float+0x12a>
 800827c:	6821      	ldr	r1, [r4, #0]
 800827e:	05c8      	lsls	r0, r1, #23
 8008280:	d51a      	bpl.n	80082b8 <_scanf_float+0x178>
 8008282:	9b02      	ldr	r3, [sp, #8]
 8008284:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008288:	6021      	str	r1, [r4, #0]
 800828a:	f109 0901 	add.w	r9, r9, #1
 800828e:	b11b      	cbz	r3, 8008298 <_scanf_float+0x158>
 8008290:	3b01      	subs	r3, #1
 8008292:	3201      	adds	r2, #1
 8008294:	9302      	str	r3, [sp, #8]
 8008296:	60a2      	str	r2, [r4, #8]
 8008298:	68a3      	ldr	r3, [r4, #8]
 800829a:	3b01      	subs	r3, #1
 800829c:	60a3      	str	r3, [r4, #8]
 800829e:	6923      	ldr	r3, [r4, #16]
 80082a0:	3301      	adds	r3, #1
 80082a2:	6123      	str	r3, [r4, #16]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	607b      	str	r3, [r7, #4]
 80082ac:	f340 8084 	ble.w	80083b8 <_scanf_float+0x278>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	3301      	adds	r3, #1
 80082b4:	603b      	str	r3, [r7, #0]
 80082b6:	e766      	b.n	8008186 <_scanf_float+0x46>
 80082b8:	eb1a 0f05 	cmn.w	sl, r5
 80082bc:	f47f af70 	bne.w	80081a0 <_scanf_float+0x60>
 80082c0:	6822      	ldr	r2, [r4, #0]
 80082c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80082c6:	6022      	str	r2, [r4, #0]
 80082c8:	f806 3b01 	strb.w	r3, [r6], #1
 80082cc:	e7e4      	b.n	8008298 <_scanf_float+0x158>
 80082ce:	6822      	ldr	r2, [r4, #0]
 80082d0:	0610      	lsls	r0, r2, #24
 80082d2:	f57f af65 	bpl.w	80081a0 <_scanf_float+0x60>
 80082d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082da:	e7f4      	b.n	80082c6 <_scanf_float+0x186>
 80082dc:	f1ba 0f00 	cmp.w	sl, #0
 80082e0:	d10e      	bne.n	8008300 <_scanf_float+0x1c0>
 80082e2:	f1b9 0f00 	cmp.w	r9, #0
 80082e6:	d10e      	bne.n	8008306 <_scanf_float+0x1c6>
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80082ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80082f2:	d108      	bne.n	8008306 <_scanf_float+0x1c6>
 80082f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082f8:	6022      	str	r2, [r4, #0]
 80082fa:	f04f 0a01 	mov.w	sl, #1
 80082fe:	e7e3      	b.n	80082c8 <_scanf_float+0x188>
 8008300:	f1ba 0f02 	cmp.w	sl, #2
 8008304:	d055      	beq.n	80083b2 <_scanf_float+0x272>
 8008306:	2d01      	cmp	r5, #1
 8008308:	d002      	beq.n	8008310 <_scanf_float+0x1d0>
 800830a:	2d04      	cmp	r5, #4
 800830c:	f47f af48 	bne.w	80081a0 <_scanf_float+0x60>
 8008310:	3501      	adds	r5, #1
 8008312:	b2ed      	uxtb	r5, r5
 8008314:	e7d8      	b.n	80082c8 <_scanf_float+0x188>
 8008316:	f1ba 0f01 	cmp.w	sl, #1
 800831a:	f47f af41 	bne.w	80081a0 <_scanf_float+0x60>
 800831e:	f04f 0a02 	mov.w	sl, #2
 8008322:	e7d1      	b.n	80082c8 <_scanf_float+0x188>
 8008324:	b97d      	cbnz	r5, 8008346 <_scanf_float+0x206>
 8008326:	f1b9 0f00 	cmp.w	r9, #0
 800832a:	f47f af3c 	bne.w	80081a6 <_scanf_float+0x66>
 800832e:	6822      	ldr	r2, [r4, #0]
 8008330:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008334:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008338:	f47f af39 	bne.w	80081ae <_scanf_float+0x6e>
 800833c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008340:	6022      	str	r2, [r4, #0]
 8008342:	2501      	movs	r5, #1
 8008344:	e7c0      	b.n	80082c8 <_scanf_float+0x188>
 8008346:	2d03      	cmp	r5, #3
 8008348:	d0e2      	beq.n	8008310 <_scanf_float+0x1d0>
 800834a:	2d05      	cmp	r5, #5
 800834c:	e7de      	b.n	800830c <_scanf_float+0x1cc>
 800834e:	2d02      	cmp	r5, #2
 8008350:	f47f af26 	bne.w	80081a0 <_scanf_float+0x60>
 8008354:	2503      	movs	r5, #3
 8008356:	e7b7      	b.n	80082c8 <_scanf_float+0x188>
 8008358:	2d06      	cmp	r5, #6
 800835a:	f47f af21 	bne.w	80081a0 <_scanf_float+0x60>
 800835e:	2507      	movs	r5, #7
 8008360:	e7b2      	b.n	80082c8 <_scanf_float+0x188>
 8008362:	6822      	ldr	r2, [r4, #0]
 8008364:	0591      	lsls	r1, r2, #22
 8008366:	f57f af1b 	bpl.w	80081a0 <_scanf_float+0x60>
 800836a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800836e:	6022      	str	r2, [r4, #0]
 8008370:	f8cd 9004 	str.w	r9, [sp, #4]
 8008374:	e7a8      	b.n	80082c8 <_scanf_float+0x188>
 8008376:	6822      	ldr	r2, [r4, #0]
 8008378:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800837c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008380:	d006      	beq.n	8008390 <_scanf_float+0x250>
 8008382:	0550      	lsls	r0, r2, #21
 8008384:	f57f af0c 	bpl.w	80081a0 <_scanf_float+0x60>
 8008388:	f1b9 0f00 	cmp.w	r9, #0
 800838c:	f43f af0f 	beq.w	80081ae <_scanf_float+0x6e>
 8008390:	0591      	lsls	r1, r2, #22
 8008392:	bf58      	it	pl
 8008394:	9901      	ldrpl	r1, [sp, #4]
 8008396:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800839a:	bf58      	it	pl
 800839c:	eba9 0101 	subpl.w	r1, r9, r1
 80083a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80083a4:	bf58      	it	pl
 80083a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	f04f 0900 	mov.w	r9, #0
 80083b0:	e78a      	b.n	80082c8 <_scanf_float+0x188>
 80083b2:	f04f 0a03 	mov.w	sl, #3
 80083b6:	e787      	b.n	80082c8 <_scanf_float+0x188>
 80083b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083bc:	4639      	mov	r1, r7
 80083be:	4640      	mov	r0, r8
 80083c0:	4798      	blx	r3
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f43f aedf 	beq.w	8008186 <_scanf_float+0x46>
 80083c8:	e6ea      	b.n	80081a0 <_scanf_float+0x60>
 80083ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083d2:	463a      	mov	r2, r7
 80083d4:	4640      	mov	r0, r8
 80083d6:	4798      	blx	r3
 80083d8:	6923      	ldr	r3, [r4, #16]
 80083da:	3b01      	subs	r3, #1
 80083dc:	6123      	str	r3, [r4, #16]
 80083de:	e6ec      	b.n	80081ba <_scanf_float+0x7a>
 80083e0:	1e6b      	subs	r3, r5, #1
 80083e2:	2b06      	cmp	r3, #6
 80083e4:	d825      	bhi.n	8008432 <_scanf_float+0x2f2>
 80083e6:	2d02      	cmp	r5, #2
 80083e8:	d836      	bhi.n	8008458 <_scanf_float+0x318>
 80083ea:	455e      	cmp	r6, fp
 80083ec:	f67f aee8 	bls.w	80081c0 <_scanf_float+0x80>
 80083f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083f8:	463a      	mov	r2, r7
 80083fa:	4640      	mov	r0, r8
 80083fc:	4798      	blx	r3
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	3b01      	subs	r3, #1
 8008402:	6123      	str	r3, [r4, #16]
 8008404:	e7f1      	b.n	80083ea <_scanf_float+0x2aa>
 8008406:	9802      	ldr	r0, [sp, #8]
 8008408:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800840c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008410:	9002      	str	r0, [sp, #8]
 8008412:	463a      	mov	r2, r7
 8008414:	4640      	mov	r0, r8
 8008416:	4798      	blx	r3
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	3b01      	subs	r3, #1
 800841c:	6123      	str	r3, [r4, #16]
 800841e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008422:	fa5f fa8a 	uxtb.w	sl, sl
 8008426:	f1ba 0f02 	cmp.w	sl, #2
 800842a:	d1ec      	bne.n	8008406 <_scanf_float+0x2c6>
 800842c:	3d03      	subs	r5, #3
 800842e:	b2ed      	uxtb	r5, r5
 8008430:	1b76      	subs	r6, r6, r5
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	05da      	lsls	r2, r3, #23
 8008436:	d52f      	bpl.n	8008498 <_scanf_float+0x358>
 8008438:	055b      	lsls	r3, r3, #21
 800843a:	d510      	bpl.n	800845e <_scanf_float+0x31e>
 800843c:	455e      	cmp	r6, fp
 800843e:	f67f aebf 	bls.w	80081c0 <_scanf_float+0x80>
 8008442:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008446:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800844a:	463a      	mov	r2, r7
 800844c:	4640      	mov	r0, r8
 800844e:	4798      	blx	r3
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	3b01      	subs	r3, #1
 8008454:	6123      	str	r3, [r4, #16]
 8008456:	e7f1      	b.n	800843c <_scanf_float+0x2fc>
 8008458:	46aa      	mov	sl, r5
 800845a:	9602      	str	r6, [sp, #8]
 800845c:	e7df      	b.n	800841e <_scanf_float+0x2de>
 800845e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	2965      	cmp	r1, #101	; 0x65
 8008466:	f103 33ff 	add.w	r3, r3, #4294967295
 800846a:	f106 35ff 	add.w	r5, r6, #4294967295
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	d00c      	beq.n	800848c <_scanf_float+0x34c>
 8008472:	2945      	cmp	r1, #69	; 0x45
 8008474:	d00a      	beq.n	800848c <_scanf_float+0x34c>
 8008476:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800847a:	463a      	mov	r2, r7
 800847c:	4640      	mov	r0, r8
 800847e:	4798      	blx	r3
 8008480:	6923      	ldr	r3, [r4, #16]
 8008482:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008486:	3b01      	subs	r3, #1
 8008488:	1eb5      	subs	r5, r6, #2
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008490:	463a      	mov	r2, r7
 8008492:	4640      	mov	r0, r8
 8008494:	4798      	blx	r3
 8008496:	462e      	mov	r6, r5
 8008498:	6825      	ldr	r5, [r4, #0]
 800849a:	f015 0510 	ands.w	r5, r5, #16
 800849e:	d159      	bne.n	8008554 <_scanf_float+0x414>
 80084a0:	7035      	strb	r5, [r6, #0]
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ac:	d11b      	bne.n	80084e6 <_scanf_float+0x3a6>
 80084ae:	9b01      	ldr	r3, [sp, #4]
 80084b0:	454b      	cmp	r3, r9
 80084b2:	eba3 0209 	sub.w	r2, r3, r9
 80084b6:	d123      	bne.n	8008500 <_scanf_float+0x3c0>
 80084b8:	2200      	movs	r2, #0
 80084ba:	4659      	mov	r1, fp
 80084bc:	4640      	mov	r0, r8
 80084be:	f000 fe99 	bl	80091f4 <_strtod_r>
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	f012 0f02 	tst.w	r2, #2
 80084ca:	ec57 6b10 	vmov	r6, r7, d0
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	d021      	beq.n	8008516 <_scanf_float+0x3d6>
 80084d2:	9903      	ldr	r1, [sp, #12]
 80084d4:	1d1a      	adds	r2, r3, #4
 80084d6:	600a      	str	r2, [r1, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	e9c3 6700 	strd	r6, r7, [r3]
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	3301      	adds	r3, #1
 80084e2:	60e3      	str	r3, [r4, #12]
 80084e4:	e66d      	b.n	80081c2 <_scanf_float+0x82>
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0e5      	beq.n	80084b8 <_scanf_float+0x378>
 80084ec:	9905      	ldr	r1, [sp, #20]
 80084ee:	230a      	movs	r3, #10
 80084f0:	462a      	mov	r2, r5
 80084f2:	3101      	adds	r1, #1
 80084f4:	4640      	mov	r0, r8
 80084f6:	f000 ff05 	bl	8009304 <_strtol_r>
 80084fa:	9b04      	ldr	r3, [sp, #16]
 80084fc:	9e05      	ldr	r6, [sp, #20]
 80084fe:	1ac2      	subs	r2, r0, r3
 8008500:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008504:	429e      	cmp	r6, r3
 8008506:	bf28      	it	cs
 8008508:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800850c:	4912      	ldr	r1, [pc, #72]	; (8008558 <_scanf_float+0x418>)
 800850e:	4630      	mov	r0, r6
 8008510:	f000 f82c 	bl	800856c <siprintf>
 8008514:	e7d0      	b.n	80084b8 <_scanf_float+0x378>
 8008516:	9903      	ldr	r1, [sp, #12]
 8008518:	f012 0f04 	tst.w	r2, #4
 800851c:	f103 0204 	add.w	r2, r3, #4
 8008520:	600a      	str	r2, [r1, #0]
 8008522:	d1d9      	bne.n	80084d8 <_scanf_float+0x398>
 8008524:	f8d3 8000 	ldr.w	r8, [r3]
 8008528:	ee10 2a10 	vmov	r2, s0
 800852c:	ee10 0a10 	vmov	r0, s0
 8008530:	463b      	mov	r3, r7
 8008532:	4639      	mov	r1, r7
 8008534:	f7f8 fb02 	bl	8000b3c <__aeabi_dcmpun>
 8008538:	b128      	cbz	r0, 8008546 <_scanf_float+0x406>
 800853a:	4808      	ldr	r0, [pc, #32]	; (800855c <_scanf_float+0x41c>)
 800853c:	f000 f810 	bl	8008560 <nanf>
 8008540:	ed88 0a00 	vstr	s0, [r8]
 8008544:	e7cb      	b.n	80084de <_scanf_float+0x39e>
 8008546:	4630      	mov	r0, r6
 8008548:	4639      	mov	r1, r7
 800854a:	f7f8 fb55 	bl	8000bf8 <__aeabi_d2f>
 800854e:	f8c8 0000 	str.w	r0, [r8]
 8008552:	e7c4      	b.n	80084de <_scanf_float+0x39e>
 8008554:	2500      	movs	r5, #0
 8008556:	e634      	b.n	80081c2 <_scanf_float+0x82>
 8008558:	0800d46d 	.word	0x0800d46d
 800855c:	0800d423 	.word	0x0800d423

08008560 <nanf>:
 8008560:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008568 <nanf+0x8>
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	7fc00000 	.word	0x7fc00000

0800856c <siprintf>:
 800856c:	b40e      	push	{r1, r2, r3}
 800856e:	b500      	push	{lr}
 8008570:	b09c      	sub	sp, #112	; 0x70
 8008572:	ab1d      	add	r3, sp, #116	; 0x74
 8008574:	9002      	str	r0, [sp, #8]
 8008576:	9006      	str	r0, [sp, #24]
 8008578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800857c:	4809      	ldr	r0, [pc, #36]	; (80085a4 <siprintf+0x38>)
 800857e:	9107      	str	r1, [sp, #28]
 8008580:	9104      	str	r1, [sp, #16]
 8008582:	4909      	ldr	r1, [pc, #36]	; (80085a8 <siprintf+0x3c>)
 8008584:	f853 2b04 	ldr.w	r2, [r3], #4
 8008588:	9105      	str	r1, [sp, #20]
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	a902      	add	r1, sp, #8
 8008590:	f003 fa04 	bl	800b99c <_svfiprintf_r>
 8008594:	9b02      	ldr	r3, [sp, #8]
 8008596:	2200      	movs	r2, #0
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	b01c      	add	sp, #112	; 0x70
 800859c:	f85d eb04 	ldr.w	lr, [sp], #4
 80085a0:	b003      	add	sp, #12
 80085a2:	4770      	bx	lr
 80085a4:	20000014 	.word	0x20000014
 80085a8:	ffff0208 	.word	0xffff0208

080085ac <sulp>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	4604      	mov	r4, r0
 80085b0:	460d      	mov	r5, r1
 80085b2:	ec45 4b10 	vmov	d0, r4, r5
 80085b6:	4616      	mov	r6, r2
 80085b8:	f002 ff20 	bl	800b3fc <__ulp>
 80085bc:	ec51 0b10 	vmov	r0, r1, d0
 80085c0:	b17e      	cbz	r6, 80085e2 <sulp+0x36>
 80085c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	dd09      	ble.n	80085e2 <sulp+0x36>
 80085ce:	051b      	lsls	r3, r3, #20
 80085d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80085d4:	2400      	movs	r4, #0
 80085d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80085da:	4622      	mov	r2, r4
 80085dc:	462b      	mov	r3, r5
 80085de:	f7f8 f813 	bl	8000608 <__aeabi_dmul>
 80085e2:	bd70      	pop	{r4, r5, r6, pc}
 80085e4:	0000      	movs	r0, r0
	...

080085e8 <_strtod_l>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	ed2d 8b02 	vpush	{d8}
 80085f0:	b09d      	sub	sp, #116	; 0x74
 80085f2:	461f      	mov	r7, r3
 80085f4:	2300      	movs	r3, #0
 80085f6:	9318      	str	r3, [sp, #96]	; 0x60
 80085f8:	4ba2      	ldr	r3, [pc, #648]	; (8008884 <_strtod_l+0x29c>)
 80085fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	9305      	str	r3, [sp, #20]
 8008600:	4604      	mov	r4, r0
 8008602:	4618      	mov	r0, r3
 8008604:	4688      	mov	r8, r1
 8008606:	f7f7 fdeb 	bl	80001e0 <strlen>
 800860a:	f04f 0a00 	mov.w	sl, #0
 800860e:	4605      	mov	r5, r0
 8008610:	f04f 0b00 	mov.w	fp, #0
 8008614:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	2a2b      	cmp	r2, #43	; 0x2b
 800861e:	d04e      	beq.n	80086be <_strtod_l+0xd6>
 8008620:	d83b      	bhi.n	800869a <_strtod_l+0xb2>
 8008622:	2a0d      	cmp	r2, #13
 8008624:	d834      	bhi.n	8008690 <_strtod_l+0xa8>
 8008626:	2a08      	cmp	r2, #8
 8008628:	d834      	bhi.n	8008694 <_strtod_l+0xac>
 800862a:	2a00      	cmp	r2, #0
 800862c:	d03e      	beq.n	80086ac <_strtod_l+0xc4>
 800862e:	2300      	movs	r3, #0
 8008630:	930a      	str	r3, [sp, #40]	; 0x28
 8008632:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008634:	7833      	ldrb	r3, [r6, #0]
 8008636:	2b30      	cmp	r3, #48	; 0x30
 8008638:	f040 80b0 	bne.w	800879c <_strtod_l+0x1b4>
 800863c:	7873      	ldrb	r3, [r6, #1]
 800863e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008642:	2b58      	cmp	r3, #88	; 0x58
 8008644:	d168      	bne.n	8008718 <_strtod_l+0x130>
 8008646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	ab18      	add	r3, sp, #96	; 0x60
 800864c:	9702      	str	r7, [sp, #8]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	4a8d      	ldr	r2, [pc, #564]	; (8008888 <_strtod_l+0x2a0>)
 8008652:	ab19      	add	r3, sp, #100	; 0x64
 8008654:	a917      	add	r1, sp, #92	; 0x5c
 8008656:	4620      	mov	r0, r4
 8008658:	f001 ffb6 	bl	800a5c8 <__gethex>
 800865c:	f010 0707 	ands.w	r7, r0, #7
 8008660:	4605      	mov	r5, r0
 8008662:	d005      	beq.n	8008670 <_strtod_l+0x88>
 8008664:	2f06      	cmp	r7, #6
 8008666:	d12c      	bne.n	80086c2 <_strtod_l+0xda>
 8008668:	3601      	adds	r6, #1
 800866a:	2300      	movs	r3, #0
 800866c:	9617      	str	r6, [sp, #92]	; 0x5c
 800866e:	930a      	str	r3, [sp, #40]	; 0x28
 8008670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008672:	2b00      	cmp	r3, #0
 8008674:	f040 8590 	bne.w	8009198 <_strtod_l+0xbb0>
 8008678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867a:	b1eb      	cbz	r3, 80086b8 <_strtod_l+0xd0>
 800867c:	4652      	mov	r2, sl
 800867e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008682:	ec43 2b10 	vmov	d0, r2, r3
 8008686:	b01d      	add	sp, #116	; 0x74
 8008688:	ecbd 8b02 	vpop	{d8}
 800868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008690:	2a20      	cmp	r2, #32
 8008692:	d1cc      	bne.n	800862e <_strtod_l+0x46>
 8008694:	3301      	adds	r3, #1
 8008696:	9317      	str	r3, [sp, #92]	; 0x5c
 8008698:	e7be      	b.n	8008618 <_strtod_l+0x30>
 800869a:	2a2d      	cmp	r2, #45	; 0x2d
 800869c:	d1c7      	bne.n	800862e <_strtod_l+0x46>
 800869e:	2201      	movs	r2, #1
 80086a0:	920a      	str	r2, [sp, #40]	; 0x28
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80086a6:	785b      	ldrb	r3, [r3, #1]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1c2      	bne.n	8008632 <_strtod_l+0x4a>
 80086ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f040 856e 	bne.w	8009194 <_strtod_l+0xbac>
 80086b8:	4652      	mov	r2, sl
 80086ba:	465b      	mov	r3, fp
 80086bc:	e7e1      	b.n	8008682 <_strtod_l+0x9a>
 80086be:	2200      	movs	r2, #0
 80086c0:	e7ee      	b.n	80086a0 <_strtod_l+0xb8>
 80086c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086c4:	b13a      	cbz	r2, 80086d6 <_strtod_l+0xee>
 80086c6:	2135      	movs	r1, #53	; 0x35
 80086c8:	a81a      	add	r0, sp, #104	; 0x68
 80086ca:	f002 ffa2 	bl	800b612 <__copybits>
 80086ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086d0:	4620      	mov	r0, r4
 80086d2:	f002 fb61 	bl	800ad98 <_Bfree>
 80086d6:	3f01      	subs	r7, #1
 80086d8:	2f04      	cmp	r7, #4
 80086da:	d806      	bhi.n	80086ea <_strtod_l+0x102>
 80086dc:	e8df f007 	tbb	[pc, r7]
 80086e0:	1714030a 	.word	0x1714030a
 80086e4:	0a          	.byte	0x0a
 80086e5:	00          	.byte	0x00
 80086e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80086ea:	0728      	lsls	r0, r5, #28
 80086ec:	d5c0      	bpl.n	8008670 <_strtod_l+0x88>
 80086ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80086f2:	e7bd      	b.n	8008670 <_strtod_l+0x88>
 80086f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80086f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80086fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80086fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008702:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008706:	e7f0      	b.n	80086ea <_strtod_l+0x102>
 8008708:	f8df b180 	ldr.w	fp, [pc, #384]	; 800888c <_strtod_l+0x2a4>
 800870c:	e7ed      	b.n	80086ea <_strtod_l+0x102>
 800870e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008712:	f04f 3aff 	mov.w	sl, #4294967295
 8008716:	e7e8      	b.n	80086ea <_strtod_l+0x102>
 8008718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	9217      	str	r2, [sp, #92]	; 0x5c
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	2b30      	cmp	r3, #48	; 0x30
 8008722:	d0f9      	beq.n	8008718 <_strtod_l+0x130>
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0a3      	beq.n	8008670 <_strtod_l+0x88>
 8008728:	2301      	movs	r3, #1
 800872a:	f04f 0900 	mov.w	r9, #0
 800872e:	9304      	str	r3, [sp, #16]
 8008730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008732:	9308      	str	r3, [sp, #32]
 8008734:	f8cd 901c 	str.w	r9, [sp, #28]
 8008738:	464f      	mov	r7, r9
 800873a:	220a      	movs	r2, #10
 800873c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800873e:	7806      	ldrb	r6, [r0, #0]
 8008740:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008744:	b2d9      	uxtb	r1, r3
 8008746:	2909      	cmp	r1, #9
 8008748:	d92a      	bls.n	80087a0 <_strtod_l+0x1b8>
 800874a:	9905      	ldr	r1, [sp, #20]
 800874c:	462a      	mov	r2, r5
 800874e:	f003 fac6 	bl	800bcde <strncmp>
 8008752:	b398      	cbz	r0, 80087bc <_strtod_l+0x1d4>
 8008754:	2000      	movs	r0, #0
 8008756:	4632      	mov	r2, r6
 8008758:	463d      	mov	r5, r7
 800875a:	9005      	str	r0, [sp, #20]
 800875c:	4603      	mov	r3, r0
 800875e:	2a65      	cmp	r2, #101	; 0x65
 8008760:	d001      	beq.n	8008766 <_strtod_l+0x17e>
 8008762:	2a45      	cmp	r2, #69	; 0x45
 8008764:	d118      	bne.n	8008798 <_strtod_l+0x1b0>
 8008766:	b91d      	cbnz	r5, 8008770 <_strtod_l+0x188>
 8008768:	9a04      	ldr	r2, [sp, #16]
 800876a:	4302      	orrs	r2, r0
 800876c:	d09e      	beq.n	80086ac <_strtod_l+0xc4>
 800876e:	2500      	movs	r5, #0
 8008770:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008774:	f108 0201 	add.w	r2, r8, #1
 8008778:	9217      	str	r2, [sp, #92]	; 0x5c
 800877a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800877e:	2a2b      	cmp	r2, #43	; 0x2b
 8008780:	d075      	beq.n	800886e <_strtod_l+0x286>
 8008782:	2a2d      	cmp	r2, #45	; 0x2d
 8008784:	d07b      	beq.n	800887e <_strtod_l+0x296>
 8008786:	f04f 0c00 	mov.w	ip, #0
 800878a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800878e:	2909      	cmp	r1, #9
 8008790:	f240 8082 	bls.w	8008898 <_strtod_l+0x2b0>
 8008794:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008798:	2600      	movs	r6, #0
 800879a:	e09d      	b.n	80088d8 <_strtod_l+0x2f0>
 800879c:	2300      	movs	r3, #0
 800879e:	e7c4      	b.n	800872a <_strtod_l+0x142>
 80087a0:	2f08      	cmp	r7, #8
 80087a2:	bfd8      	it	le
 80087a4:	9907      	ldrle	r1, [sp, #28]
 80087a6:	f100 0001 	add.w	r0, r0, #1
 80087aa:	bfda      	itte	le
 80087ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80087b0:	9307      	strle	r3, [sp, #28]
 80087b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80087b6:	3701      	adds	r7, #1
 80087b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80087ba:	e7bf      	b.n	800873c <_strtod_l+0x154>
 80087bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087be:	195a      	adds	r2, r3, r5
 80087c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80087c2:	5d5a      	ldrb	r2, [r3, r5]
 80087c4:	2f00      	cmp	r7, #0
 80087c6:	d037      	beq.n	8008838 <_strtod_l+0x250>
 80087c8:	9005      	str	r0, [sp, #20]
 80087ca:	463d      	mov	r5, r7
 80087cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80087d0:	2b09      	cmp	r3, #9
 80087d2:	d912      	bls.n	80087fa <_strtod_l+0x212>
 80087d4:	2301      	movs	r3, #1
 80087d6:	e7c2      	b.n	800875e <_strtod_l+0x176>
 80087d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80087de:	785a      	ldrb	r2, [r3, #1]
 80087e0:	3001      	adds	r0, #1
 80087e2:	2a30      	cmp	r2, #48	; 0x30
 80087e4:	d0f8      	beq.n	80087d8 <_strtod_l+0x1f0>
 80087e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80087ea:	2b08      	cmp	r3, #8
 80087ec:	f200 84d9 	bhi.w	80091a2 <_strtod_l+0xbba>
 80087f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087f2:	9005      	str	r0, [sp, #20]
 80087f4:	2000      	movs	r0, #0
 80087f6:	9308      	str	r3, [sp, #32]
 80087f8:	4605      	mov	r5, r0
 80087fa:	3a30      	subs	r2, #48	; 0x30
 80087fc:	f100 0301 	add.w	r3, r0, #1
 8008800:	d014      	beq.n	800882c <_strtod_l+0x244>
 8008802:	9905      	ldr	r1, [sp, #20]
 8008804:	4419      	add	r1, r3
 8008806:	9105      	str	r1, [sp, #20]
 8008808:	462b      	mov	r3, r5
 800880a:	eb00 0e05 	add.w	lr, r0, r5
 800880e:	210a      	movs	r1, #10
 8008810:	4573      	cmp	r3, lr
 8008812:	d113      	bne.n	800883c <_strtod_l+0x254>
 8008814:	182b      	adds	r3, r5, r0
 8008816:	2b08      	cmp	r3, #8
 8008818:	f105 0501 	add.w	r5, r5, #1
 800881c:	4405      	add	r5, r0
 800881e:	dc1c      	bgt.n	800885a <_strtod_l+0x272>
 8008820:	9907      	ldr	r1, [sp, #28]
 8008822:	230a      	movs	r3, #10
 8008824:	fb03 2301 	mla	r3, r3, r1, r2
 8008828:	9307      	str	r3, [sp, #28]
 800882a:	2300      	movs	r3, #0
 800882c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800882e:	1c51      	adds	r1, r2, #1
 8008830:	9117      	str	r1, [sp, #92]	; 0x5c
 8008832:	7852      	ldrb	r2, [r2, #1]
 8008834:	4618      	mov	r0, r3
 8008836:	e7c9      	b.n	80087cc <_strtod_l+0x1e4>
 8008838:	4638      	mov	r0, r7
 800883a:	e7d2      	b.n	80087e2 <_strtod_l+0x1fa>
 800883c:	2b08      	cmp	r3, #8
 800883e:	dc04      	bgt.n	800884a <_strtod_l+0x262>
 8008840:	9e07      	ldr	r6, [sp, #28]
 8008842:	434e      	muls	r6, r1
 8008844:	9607      	str	r6, [sp, #28]
 8008846:	3301      	adds	r3, #1
 8008848:	e7e2      	b.n	8008810 <_strtod_l+0x228>
 800884a:	f103 0c01 	add.w	ip, r3, #1
 800884e:	f1bc 0f10 	cmp.w	ip, #16
 8008852:	bfd8      	it	le
 8008854:	fb01 f909 	mulle.w	r9, r1, r9
 8008858:	e7f5      	b.n	8008846 <_strtod_l+0x25e>
 800885a:	2d10      	cmp	r5, #16
 800885c:	bfdc      	itt	le
 800885e:	230a      	movle	r3, #10
 8008860:	fb03 2909 	mlale	r9, r3, r9, r2
 8008864:	e7e1      	b.n	800882a <_strtod_l+0x242>
 8008866:	2300      	movs	r3, #0
 8008868:	9305      	str	r3, [sp, #20]
 800886a:	2301      	movs	r3, #1
 800886c:	e77c      	b.n	8008768 <_strtod_l+0x180>
 800886e:	f04f 0c00 	mov.w	ip, #0
 8008872:	f108 0202 	add.w	r2, r8, #2
 8008876:	9217      	str	r2, [sp, #92]	; 0x5c
 8008878:	f898 2002 	ldrb.w	r2, [r8, #2]
 800887c:	e785      	b.n	800878a <_strtod_l+0x1a2>
 800887e:	f04f 0c01 	mov.w	ip, #1
 8008882:	e7f6      	b.n	8008872 <_strtod_l+0x28a>
 8008884:	0800d724 	.word	0x0800d724
 8008888:	0800d474 	.word	0x0800d474
 800888c:	7ff00000 	.word	0x7ff00000
 8008890:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008892:	1c51      	adds	r1, r2, #1
 8008894:	9117      	str	r1, [sp, #92]	; 0x5c
 8008896:	7852      	ldrb	r2, [r2, #1]
 8008898:	2a30      	cmp	r2, #48	; 0x30
 800889a:	d0f9      	beq.n	8008890 <_strtod_l+0x2a8>
 800889c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80088a0:	2908      	cmp	r1, #8
 80088a2:	f63f af79 	bhi.w	8008798 <_strtod_l+0x1b0>
 80088a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80088aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088ac:	9206      	str	r2, [sp, #24]
 80088ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088b0:	1c51      	adds	r1, r2, #1
 80088b2:	9117      	str	r1, [sp, #92]	; 0x5c
 80088b4:	7852      	ldrb	r2, [r2, #1]
 80088b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80088ba:	2e09      	cmp	r6, #9
 80088bc:	d937      	bls.n	800892e <_strtod_l+0x346>
 80088be:	9e06      	ldr	r6, [sp, #24]
 80088c0:	1b89      	subs	r1, r1, r6
 80088c2:	2908      	cmp	r1, #8
 80088c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80088c8:	dc02      	bgt.n	80088d0 <_strtod_l+0x2e8>
 80088ca:	4576      	cmp	r6, lr
 80088cc:	bfa8      	it	ge
 80088ce:	4676      	movge	r6, lr
 80088d0:	f1bc 0f00 	cmp.w	ip, #0
 80088d4:	d000      	beq.n	80088d8 <_strtod_l+0x2f0>
 80088d6:	4276      	negs	r6, r6
 80088d8:	2d00      	cmp	r5, #0
 80088da:	d14d      	bne.n	8008978 <_strtod_l+0x390>
 80088dc:	9904      	ldr	r1, [sp, #16]
 80088de:	4301      	orrs	r1, r0
 80088e0:	f47f aec6 	bne.w	8008670 <_strtod_l+0x88>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f47f aee1 	bne.w	80086ac <_strtod_l+0xc4>
 80088ea:	2a69      	cmp	r2, #105	; 0x69
 80088ec:	d027      	beq.n	800893e <_strtod_l+0x356>
 80088ee:	dc24      	bgt.n	800893a <_strtod_l+0x352>
 80088f0:	2a49      	cmp	r2, #73	; 0x49
 80088f2:	d024      	beq.n	800893e <_strtod_l+0x356>
 80088f4:	2a4e      	cmp	r2, #78	; 0x4e
 80088f6:	f47f aed9 	bne.w	80086ac <_strtod_l+0xc4>
 80088fa:	499f      	ldr	r1, [pc, #636]	; (8008b78 <_strtod_l+0x590>)
 80088fc:	a817      	add	r0, sp, #92	; 0x5c
 80088fe:	f002 f8bb 	bl	800aa78 <__match>
 8008902:	2800      	cmp	r0, #0
 8008904:	f43f aed2 	beq.w	80086ac <_strtod_l+0xc4>
 8008908:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b28      	cmp	r3, #40	; 0x28
 800890e:	d12d      	bne.n	800896c <_strtod_l+0x384>
 8008910:	499a      	ldr	r1, [pc, #616]	; (8008b7c <_strtod_l+0x594>)
 8008912:	aa1a      	add	r2, sp, #104	; 0x68
 8008914:	a817      	add	r0, sp, #92	; 0x5c
 8008916:	f002 f8c3 	bl	800aaa0 <__hexnan>
 800891a:	2805      	cmp	r0, #5
 800891c:	d126      	bne.n	800896c <_strtod_l+0x384>
 800891e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008920:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008924:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008928:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800892c:	e6a0      	b.n	8008670 <_strtod_l+0x88>
 800892e:	210a      	movs	r1, #10
 8008930:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008934:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008938:	e7b9      	b.n	80088ae <_strtod_l+0x2c6>
 800893a:	2a6e      	cmp	r2, #110	; 0x6e
 800893c:	e7db      	b.n	80088f6 <_strtod_l+0x30e>
 800893e:	4990      	ldr	r1, [pc, #576]	; (8008b80 <_strtod_l+0x598>)
 8008940:	a817      	add	r0, sp, #92	; 0x5c
 8008942:	f002 f899 	bl	800aa78 <__match>
 8008946:	2800      	cmp	r0, #0
 8008948:	f43f aeb0 	beq.w	80086ac <_strtod_l+0xc4>
 800894c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800894e:	498d      	ldr	r1, [pc, #564]	; (8008b84 <_strtod_l+0x59c>)
 8008950:	3b01      	subs	r3, #1
 8008952:	a817      	add	r0, sp, #92	; 0x5c
 8008954:	9317      	str	r3, [sp, #92]	; 0x5c
 8008956:	f002 f88f 	bl	800aa78 <__match>
 800895a:	b910      	cbnz	r0, 8008962 <_strtod_l+0x37a>
 800895c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800895e:	3301      	adds	r3, #1
 8008960:	9317      	str	r3, [sp, #92]	; 0x5c
 8008962:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008b94 <_strtod_l+0x5ac>
 8008966:	f04f 0a00 	mov.w	sl, #0
 800896a:	e681      	b.n	8008670 <_strtod_l+0x88>
 800896c:	4886      	ldr	r0, [pc, #536]	; (8008b88 <_strtod_l+0x5a0>)
 800896e:	f003 f917 	bl	800bba0 <nan>
 8008972:	ec5b ab10 	vmov	sl, fp, d0
 8008976:	e67b      	b.n	8008670 <_strtod_l+0x88>
 8008978:	9b05      	ldr	r3, [sp, #20]
 800897a:	9807      	ldr	r0, [sp, #28]
 800897c:	1af3      	subs	r3, r6, r3
 800897e:	2f00      	cmp	r7, #0
 8008980:	bf08      	it	eq
 8008982:	462f      	moveq	r7, r5
 8008984:	2d10      	cmp	r5, #16
 8008986:	9306      	str	r3, [sp, #24]
 8008988:	46a8      	mov	r8, r5
 800898a:	bfa8      	it	ge
 800898c:	f04f 0810 	movge.w	r8, #16
 8008990:	f7f7 fdc0 	bl	8000514 <__aeabi_ui2d>
 8008994:	2d09      	cmp	r5, #9
 8008996:	4682      	mov	sl, r0
 8008998:	468b      	mov	fp, r1
 800899a:	dd13      	ble.n	80089c4 <_strtod_l+0x3dc>
 800899c:	4b7b      	ldr	r3, [pc, #492]	; (8008b8c <_strtod_l+0x5a4>)
 800899e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80089a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80089a6:	f7f7 fe2f 	bl	8000608 <__aeabi_dmul>
 80089aa:	4682      	mov	sl, r0
 80089ac:	4648      	mov	r0, r9
 80089ae:	468b      	mov	fp, r1
 80089b0:	f7f7 fdb0 	bl	8000514 <__aeabi_ui2d>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4650      	mov	r0, sl
 80089ba:	4659      	mov	r1, fp
 80089bc:	f7f7 fc6e 	bl	800029c <__adddf3>
 80089c0:	4682      	mov	sl, r0
 80089c2:	468b      	mov	fp, r1
 80089c4:	2d0f      	cmp	r5, #15
 80089c6:	dc38      	bgt.n	8008a3a <_strtod_l+0x452>
 80089c8:	9b06      	ldr	r3, [sp, #24]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f43f ae50 	beq.w	8008670 <_strtod_l+0x88>
 80089d0:	dd24      	ble.n	8008a1c <_strtod_l+0x434>
 80089d2:	2b16      	cmp	r3, #22
 80089d4:	dc0b      	bgt.n	80089ee <_strtod_l+0x406>
 80089d6:	496d      	ldr	r1, [pc, #436]	; (8008b8c <_strtod_l+0x5a4>)
 80089d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e0:	4652      	mov	r2, sl
 80089e2:	465b      	mov	r3, fp
 80089e4:	f7f7 fe10 	bl	8000608 <__aeabi_dmul>
 80089e8:	4682      	mov	sl, r0
 80089ea:	468b      	mov	fp, r1
 80089ec:	e640      	b.n	8008670 <_strtod_l+0x88>
 80089ee:	9a06      	ldr	r2, [sp, #24]
 80089f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80089f4:	4293      	cmp	r3, r2
 80089f6:	db20      	blt.n	8008a3a <_strtod_l+0x452>
 80089f8:	4c64      	ldr	r4, [pc, #400]	; (8008b8c <_strtod_l+0x5a4>)
 80089fa:	f1c5 050f 	rsb	r5, r5, #15
 80089fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008a02:	4652      	mov	r2, sl
 8008a04:	465b      	mov	r3, fp
 8008a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a0a:	f7f7 fdfd 	bl	8000608 <__aeabi_dmul>
 8008a0e:	9b06      	ldr	r3, [sp, #24]
 8008a10:	1b5d      	subs	r5, r3, r5
 8008a12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a1a:	e7e3      	b.n	80089e4 <_strtod_l+0x3fc>
 8008a1c:	9b06      	ldr	r3, [sp, #24]
 8008a1e:	3316      	adds	r3, #22
 8008a20:	db0b      	blt.n	8008a3a <_strtod_l+0x452>
 8008a22:	9b05      	ldr	r3, [sp, #20]
 8008a24:	1b9e      	subs	r6, r3, r6
 8008a26:	4b59      	ldr	r3, [pc, #356]	; (8008b8c <_strtod_l+0x5a4>)
 8008a28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008a2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a30:	4650      	mov	r0, sl
 8008a32:	4659      	mov	r1, fp
 8008a34:	f7f7 ff12 	bl	800085c <__aeabi_ddiv>
 8008a38:	e7d6      	b.n	80089e8 <_strtod_l+0x400>
 8008a3a:	9b06      	ldr	r3, [sp, #24]
 8008a3c:	eba5 0808 	sub.w	r8, r5, r8
 8008a40:	4498      	add	r8, r3
 8008a42:	f1b8 0f00 	cmp.w	r8, #0
 8008a46:	dd74      	ble.n	8008b32 <_strtod_l+0x54a>
 8008a48:	f018 030f 	ands.w	r3, r8, #15
 8008a4c:	d00a      	beq.n	8008a64 <_strtod_l+0x47c>
 8008a4e:	494f      	ldr	r1, [pc, #316]	; (8008b8c <_strtod_l+0x5a4>)
 8008a50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a54:	4652      	mov	r2, sl
 8008a56:	465b      	mov	r3, fp
 8008a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a5c:	f7f7 fdd4 	bl	8000608 <__aeabi_dmul>
 8008a60:	4682      	mov	sl, r0
 8008a62:	468b      	mov	fp, r1
 8008a64:	f038 080f 	bics.w	r8, r8, #15
 8008a68:	d04f      	beq.n	8008b0a <_strtod_l+0x522>
 8008a6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008a6e:	dd22      	ble.n	8008ab6 <_strtod_l+0x4ce>
 8008a70:	2500      	movs	r5, #0
 8008a72:	462e      	mov	r6, r5
 8008a74:	9507      	str	r5, [sp, #28]
 8008a76:	9505      	str	r5, [sp, #20]
 8008a78:	2322      	movs	r3, #34	; 0x22
 8008a7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008b94 <_strtod_l+0x5ac>
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	f04f 0a00 	mov.w	sl, #0
 8008a84:	9b07      	ldr	r3, [sp, #28]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f43f adf2 	beq.w	8008670 <_strtod_l+0x88>
 8008a8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f002 f982 	bl	800ad98 <_Bfree>
 8008a94:	9905      	ldr	r1, [sp, #20]
 8008a96:	4620      	mov	r0, r4
 8008a98:	f002 f97e 	bl	800ad98 <_Bfree>
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f002 f97a 	bl	800ad98 <_Bfree>
 8008aa4:	9907      	ldr	r1, [sp, #28]
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f002 f976 	bl	800ad98 <_Bfree>
 8008aac:	4629      	mov	r1, r5
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f002 f972 	bl	800ad98 <_Bfree>
 8008ab4:	e5dc      	b.n	8008670 <_strtod_l+0x88>
 8008ab6:	4b36      	ldr	r3, [pc, #216]	; (8008b90 <_strtod_l+0x5a8>)
 8008ab8:	9304      	str	r3, [sp, #16]
 8008aba:	2300      	movs	r3, #0
 8008abc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008ac0:	4650      	mov	r0, sl
 8008ac2:	4659      	mov	r1, fp
 8008ac4:	4699      	mov	r9, r3
 8008ac6:	f1b8 0f01 	cmp.w	r8, #1
 8008aca:	dc21      	bgt.n	8008b10 <_strtod_l+0x528>
 8008acc:	b10b      	cbz	r3, 8008ad2 <_strtod_l+0x4ea>
 8008ace:	4682      	mov	sl, r0
 8008ad0:	468b      	mov	fp, r1
 8008ad2:	4b2f      	ldr	r3, [pc, #188]	; (8008b90 <_strtod_l+0x5a8>)
 8008ad4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008ad8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008adc:	4652      	mov	r2, sl
 8008ade:	465b      	mov	r3, fp
 8008ae0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008ae4:	f7f7 fd90 	bl	8000608 <__aeabi_dmul>
 8008ae8:	4b2a      	ldr	r3, [pc, #168]	; (8008b94 <_strtod_l+0x5ac>)
 8008aea:	460a      	mov	r2, r1
 8008aec:	400b      	ands	r3, r1
 8008aee:	492a      	ldr	r1, [pc, #168]	; (8008b98 <_strtod_l+0x5b0>)
 8008af0:	428b      	cmp	r3, r1
 8008af2:	4682      	mov	sl, r0
 8008af4:	d8bc      	bhi.n	8008a70 <_strtod_l+0x488>
 8008af6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008afa:	428b      	cmp	r3, r1
 8008afc:	bf86      	itte	hi
 8008afe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008b9c <_strtod_l+0x5b4>
 8008b02:	f04f 3aff 	movhi.w	sl, #4294967295
 8008b06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	e084      	b.n	8008c1a <_strtod_l+0x632>
 8008b10:	f018 0f01 	tst.w	r8, #1
 8008b14:	d005      	beq.n	8008b22 <_strtod_l+0x53a>
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f7f7 fd74 	bl	8000608 <__aeabi_dmul>
 8008b20:	2301      	movs	r3, #1
 8008b22:	9a04      	ldr	r2, [sp, #16]
 8008b24:	3208      	adds	r2, #8
 8008b26:	f109 0901 	add.w	r9, r9, #1
 8008b2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b2e:	9204      	str	r2, [sp, #16]
 8008b30:	e7c9      	b.n	8008ac6 <_strtod_l+0x4de>
 8008b32:	d0ea      	beq.n	8008b0a <_strtod_l+0x522>
 8008b34:	f1c8 0800 	rsb	r8, r8, #0
 8008b38:	f018 020f 	ands.w	r2, r8, #15
 8008b3c:	d00a      	beq.n	8008b54 <_strtod_l+0x56c>
 8008b3e:	4b13      	ldr	r3, [pc, #76]	; (8008b8c <_strtod_l+0x5a4>)
 8008b40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b44:	4650      	mov	r0, sl
 8008b46:	4659      	mov	r1, fp
 8008b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4c:	f7f7 fe86 	bl	800085c <__aeabi_ddiv>
 8008b50:	4682      	mov	sl, r0
 8008b52:	468b      	mov	fp, r1
 8008b54:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008b58:	d0d7      	beq.n	8008b0a <_strtod_l+0x522>
 8008b5a:	f1b8 0f1f 	cmp.w	r8, #31
 8008b5e:	dd1f      	ble.n	8008ba0 <_strtod_l+0x5b8>
 8008b60:	2500      	movs	r5, #0
 8008b62:	462e      	mov	r6, r5
 8008b64:	9507      	str	r5, [sp, #28]
 8008b66:	9505      	str	r5, [sp, #20]
 8008b68:	2322      	movs	r3, #34	; 0x22
 8008b6a:	f04f 0a00 	mov.w	sl, #0
 8008b6e:	f04f 0b00 	mov.w	fp, #0
 8008b72:	6023      	str	r3, [r4, #0]
 8008b74:	e786      	b.n	8008a84 <_strtod_l+0x49c>
 8008b76:	bf00      	nop
 8008b78:	0800d446 	.word	0x0800d446
 8008b7c:	0800d488 	.word	0x0800d488
 8008b80:	0800d43e 	.word	0x0800d43e
 8008b84:	0800d5cc 	.word	0x0800d5cc
 8008b88:	0800d423 	.word	0x0800d423
 8008b8c:	0800d7c0 	.word	0x0800d7c0
 8008b90:	0800d798 	.word	0x0800d798
 8008b94:	7ff00000 	.word	0x7ff00000
 8008b98:	7ca00000 	.word	0x7ca00000
 8008b9c:	7fefffff 	.word	0x7fefffff
 8008ba0:	f018 0310 	ands.w	r3, r8, #16
 8008ba4:	bf18      	it	ne
 8008ba6:	236a      	movne	r3, #106	; 0x6a
 8008ba8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008f58 <_strtod_l+0x970>
 8008bac:	9304      	str	r3, [sp, #16]
 8008bae:	4650      	mov	r0, sl
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f018 0f01 	tst.w	r8, #1
 8008bb8:	d004      	beq.n	8008bc4 <_strtod_l+0x5dc>
 8008bba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008bbe:	f7f7 fd23 	bl	8000608 <__aeabi_dmul>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008bc8:	f109 0908 	add.w	r9, r9, #8
 8008bcc:	d1f2      	bne.n	8008bb4 <_strtod_l+0x5cc>
 8008bce:	b10b      	cbz	r3, 8008bd4 <_strtod_l+0x5ec>
 8008bd0:	4682      	mov	sl, r0
 8008bd2:	468b      	mov	fp, r1
 8008bd4:	9b04      	ldr	r3, [sp, #16]
 8008bd6:	b1c3      	cbz	r3, 8008c0a <_strtod_l+0x622>
 8008bd8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008bdc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	4659      	mov	r1, fp
 8008be4:	dd11      	ble.n	8008c0a <_strtod_l+0x622>
 8008be6:	2b1f      	cmp	r3, #31
 8008be8:	f340 8124 	ble.w	8008e34 <_strtod_l+0x84c>
 8008bec:	2b34      	cmp	r3, #52	; 0x34
 8008bee:	bfde      	ittt	le
 8008bf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008bf4:	f04f 33ff 	movle.w	r3, #4294967295
 8008bf8:	fa03 f202 	lslle.w	r2, r3, r2
 8008bfc:	f04f 0a00 	mov.w	sl, #0
 8008c00:	bfcc      	ite	gt
 8008c02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008c06:	ea02 0b01 	andle.w	fp, r2, r1
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4650      	mov	r0, sl
 8008c10:	4659      	mov	r1, fp
 8008c12:	f7f7 ff61 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d1a2      	bne.n	8008b60 <_strtod_l+0x578>
 8008c1a:	9b07      	ldr	r3, [sp, #28]
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	9908      	ldr	r1, [sp, #32]
 8008c20:	462b      	mov	r3, r5
 8008c22:	463a      	mov	r2, r7
 8008c24:	4620      	mov	r0, r4
 8008c26:	f002 f91f 	bl	800ae68 <__s2b>
 8008c2a:	9007      	str	r0, [sp, #28]
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	f43f af1f 	beq.w	8008a70 <_strtod_l+0x488>
 8008c32:	9b05      	ldr	r3, [sp, #20]
 8008c34:	1b9e      	subs	r6, r3, r6
 8008c36:	9b06      	ldr	r3, [sp, #24]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfb4      	ite	lt
 8008c3c:	4633      	movlt	r3, r6
 8008c3e:	2300      	movge	r3, #0
 8008c40:	930c      	str	r3, [sp, #48]	; 0x30
 8008c42:	9b06      	ldr	r3, [sp, #24]
 8008c44:	2500      	movs	r5, #0
 8008c46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008c4a:	9312      	str	r3, [sp, #72]	; 0x48
 8008c4c:	462e      	mov	r6, r5
 8008c4e:	9b07      	ldr	r3, [sp, #28]
 8008c50:	4620      	mov	r0, r4
 8008c52:	6859      	ldr	r1, [r3, #4]
 8008c54:	f002 f860 	bl	800ad18 <_Balloc>
 8008c58:	9005      	str	r0, [sp, #20]
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	f43f af0c 	beq.w	8008a78 <_strtod_l+0x490>
 8008c60:	9b07      	ldr	r3, [sp, #28]
 8008c62:	691a      	ldr	r2, [r3, #16]
 8008c64:	3202      	adds	r2, #2
 8008c66:	f103 010c 	add.w	r1, r3, #12
 8008c6a:	0092      	lsls	r2, r2, #2
 8008c6c:	300c      	adds	r0, #12
 8008c6e:	f7fe fc8d 	bl	800758c <memcpy>
 8008c72:	ec4b ab10 	vmov	d0, sl, fp
 8008c76:	aa1a      	add	r2, sp, #104	; 0x68
 8008c78:	a919      	add	r1, sp, #100	; 0x64
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f002 fc3a 	bl	800b4f4 <__d2b>
 8008c80:	ec4b ab18 	vmov	d8, sl, fp
 8008c84:	9018      	str	r0, [sp, #96]	; 0x60
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f43f aef6 	beq.w	8008a78 <_strtod_l+0x490>
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f002 f984 	bl	800af9c <__i2b>
 8008c94:	4606      	mov	r6, r0
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f43f aeee 	beq.w	8008a78 <_strtod_l+0x490>
 8008c9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c9e:	9904      	ldr	r1, [sp, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	bfab      	itete	ge
 8008ca4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008ca6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008ca8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008caa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008cae:	bfac      	ite	ge
 8008cb0:	eb03 0902 	addge.w	r9, r3, r2
 8008cb4:	1ad7      	sublt	r7, r2, r3
 8008cb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008cb8:	eba3 0801 	sub.w	r8, r3, r1
 8008cbc:	4490      	add	r8, r2
 8008cbe:	4ba1      	ldr	r3, [pc, #644]	; (8008f44 <_strtod_l+0x95c>)
 8008cc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008cc4:	4598      	cmp	r8, r3
 8008cc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008cca:	f280 80c7 	bge.w	8008e5c <_strtod_l+0x874>
 8008cce:	eba3 0308 	sub.w	r3, r3, r8
 8008cd2:	2b1f      	cmp	r3, #31
 8008cd4:	eba2 0203 	sub.w	r2, r2, r3
 8008cd8:	f04f 0101 	mov.w	r1, #1
 8008cdc:	f300 80b1 	bgt.w	8008e42 <_strtod_l+0x85a>
 8008ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9308      	str	r3, [sp, #32]
 8008cea:	eb09 0802 	add.w	r8, r9, r2
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	45c1      	cmp	r9, r8
 8008cf2:	4417      	add	r7, r2
 8008cf4:	441f      	add	r7, r3
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	bfa8      	it	ge
 8008cfa:	4643      	movge	r3, r8
 8008cfc:	42bb      	cmp	r3, r7
 8008cfe:	bfa8      	it	ge
 8008d00:	463b      	movge	r3, r7
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfc2      	ittt	gt
 8008d06:	eba8 0803 	subgt.w	r8, r8, r3
 8008d0a:	1aff      	subgt	r7, r7, r3
 8008d0c:	eba9 0903 	subgt.w	r9, r9, r3
 8008d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dd17      	ble.n	8008d46 <_strtod_l+0x75e>
 8008d16:	4631      	mov	r1, r6
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f002 f9fe 	bl	800b11c <__pow5mult>
 8008d20:	4606      	mov	r6, r0
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f43f aea8 	beq.w	8008a78 <_strtod_l+0x490>
 8008d28:	4601      	mov	r1, r0
 8008d2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f002 f94b 	bl	800afc8 <__multiply>
 8008d32:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d34:	2800      	cmp	r0, #0
 8008d36:	f43f ae9f 	beq.w	8008a78 <_strtod_l+0x490>
 8008d3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f002 f82b 	bl	800ad98 <_Bfree>
 8008d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d44:	9318      	str	r3, [sp, #96]	; 0x60
 8008d46:	f1b8 0f00 	cmp.w	r8, #0
 8008d4a:	f300 808c 	bgt.w	8008e66 <_strtod_l+0x87e>
 8008d4e:	9b06      	ldr	r3, [sp, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	dd08      	ble.n	8008d66 <_strtod_l+0x77e>
 8008d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d56:	9905      	ldr	r1, [sp, #20]
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f002 f9df 	bl	800b11c <__pow5mult>
 8008d5e:	9005      	str	r0, [sp, #20]
 8008d60:	2800      	cmp	r0, #0
 8008d62:	f43f ae89 	beq.w	8008a78 <_strtod_l+0x490>
 8008d66:	2f00      	cmp	r7, #0
 8008d68:	dd08      	ble.n	8008d7c <_strtod_l+0x794>
 8008d6a:	9905      	ldr	r1, [sp, #20]
 8008d6c:	463a      	mov	r2, r7
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f002 fa2e 	bl	800b1d0 <__lshift>
 8008d74:	9005      	str	r0, [sp, #20]
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f43f ae7e 	beq.w	8008a78 <_strtod_l+0x490>
 8008d7c:	f1b9 0f00 	cmp.w	r9, #0
 8008d80:	dd08      	ble.n	8008d94 <_strtod_l+0x7ac>
 8008d82:	4631      	mov	r1, r6
 8008d84:	464a      	mov	r2, r9
 8008d86:	4620      	mov	r0, r4
 8008d88:	f002 fa22 	bl	800b1d0 <__lshift>
 8008d8c:	4606      	mov	r6, r0
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f43f ae72 	beq.w	8008a78 <_strtod_l+0x490>
 8008d94:	9a05      	ldr	r2, [sp, #20]
 8008d96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f002 faa5 	bl	800b2e8 <__mdiff>
 8008d9e:	4605      	mov	r5, r0
 8008da0:	2800      	cmp	r0, #0
 8008da2:	f43f ae69 	beq.w	8008a78 <_strtod_l+0x490>
 8008da6:	68c3      	ldr	r3, [r0, #12]
 8008da8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008daa:	2300      	movs	r3, #0
 8008dac:	60c3      	str	r3, [r0, #12]
 8008dae:	4631      	mov	r1, r6
 8008db0:	f002 fa7e 	bl	800b2b0 <__mcmp>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	da60      	bge.n	8008e7a <_strtod_l+0x892>
 8008db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dba:	ea53 030a 	orrs.w	r3, r3, sl
 8008dbe:	f040 8082 	bne.w	8008ec6 <_strtod_l+0x8de>
 8008dc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d17d      	bne.n	8008ec6 <_strtod_l+0x8de>
 8008dca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008dce:	0d1b      	lsrs	r3, r3, #20
 8008dd0:	051b      	lsls	r3, r3, #20
 8008dd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008dd6:	d976      	bls.n	8008ec6 <_strtod_l+0x8de>
 8008dd8:	696b      	ldr	r3, [r5, #20]
 8008dda:	b913      	cbnz	r3, 8008de2 <_strtod_l+0x7fa>
 8008ddc:	692b      	ldr	r3, [r5, #16]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	dd71      	ble.n	8008ec6 <_strtod_l+0x8de>
 8008de2:	4629      	mov	r1, r5
 8008de4:	2201      	movs	r2, #1
 8008de6:	4620      	mov	r0, r4
 8008de8:	f002 f9f2 	bl	800b1d0 <__lshift>
 8008dec:	4631      	mov	r1, r6
 8008dee:	4605      	mov	r5, r0
 8008df0:	f002 fa5e 	bl	800b2b0 <__mcmp>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	dd66      	ble.n	8008ec6 <_strtod_l+0x8de>
 8008df8:	9904      	ldr	r1, [sp, #16]
 8008dfa:	4a53      	ldr	r2, [pc, #332]	; (8008f48 <_strtod_l+0x960>)
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	f000 8081 	beq.w	8008f06 <_strtod_l+0x91e>
 8008e04:	ea02 010b 	and.w	r1, r2, fp
 8008e08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008e0c:	dc7b      	bgt.n	8008f06 <_strtod_l+0x91e>
 8008e0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e12:	f77f aea9 	ble.w	8008b68 <_strtod_l+0x580>
 8008e16:	4b4d      	ldr	r3, [pc, #308]	; (8008f4c <_strtod_l+0x964>)
 8008e18:	4650      	mov	r0, sl
 8008e1a:	4659      	mov	r1, fp
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f7f7 fbf3 	bl	8000608 <__aeabi_dmul>
 8008e22:	460b      	mov	r3, r1
 8008e24:	4303      	orrs	r3, r0
 8008e26:	bf08      	it	eq
 8008e28:	2322      	moveq	r3, #34	; 0x22
 8008e2a:	4682      	mov	sl, r0
 8008e2c:	468b      	mov	fp, r1
 8008e2e:	bf08      	it	eq
 8008e30:	6023      	streq	r3, [r4, #0]
 8008e32:	e62b      	b.n	8008a8c <_strtod_l+0x4a4>
 8008e34:	f04f 32ff 	mov.w	r2, #4294967295
 8008e38:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3c:	ea03 0a0a 	and.w	sl, r3, sl
 8008e40:	e6e3      	b.n	8008c0a <_strtod_l+0x622>
 8008e42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008e46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008e4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008e4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008e52:	fa01 f308 	lsl.w	r3, r1, r8
 8008e56:	9308      	str	r3, [sp, #32]
 8008e58:	910d      	str	r1, [sp, #52]	; 0x34
 8008e5a:	e746      	b.n	8008cea <_strtod_l+0x702>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9308      	str	r3, [sp, #32]
 8008e60:	2301      	movs	r3, #1
 8008e62:	930d      	str	r3, [sp, #52]	; 0x34
 8008e64:	e741      	b.n	8008cea <_strtod_l+0x702>
 8008e66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e68:	4642      	mov	r2, r8
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f002 f9b0 	bl	800b1d0 <__lshift>
 8008e70:	9018      	str	r0, [sp, #96]	; 0x60
 8008e72:	2800      	cmp	r0, #0
 8008e74:	f47f af6b 	bne.w	8008d4e <_strtod_l+0x766>
 8008e78:	e5fe      	b.n	8008a78 <_strtod_l+0x490>
 8008e7a:	465f      	mov	r7, fp
 8008e7c:	d16e      	bne.n	8008f5c <_strtod_l+0x974>
 8008e7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e84:	b342      	cbz	r2, 8008ed8 <_strtod_l+0x8f0>
 8008e86:	4a32      	ldr	r2, [pc, #200]	; (8008f50 <_strtod_l+0x968>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d128      	bne.n	8008ede <_strtod_l+0x8f6>
 8008e8c:	9b04      	ldr	r3, [sp, #16]
 8008e8e:	4651      	mov	r1, sl
 8008e90:	b1eb      	cbz	r3, 8008ece <_strtod_l+0x8e6>
 8008e92:	4b2d      	ldr	r3, [pc, #180]	; (8008f48 <_strtod_l+0x960>)
 8008e94:	403b      	ands	r3, r7
 8008e96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	d819      	bhi.n	8008ed4 <_strtod_l+0x8ec>
 8008ea0:	0d1b      	lsrs	r3, r3, #20
 8008ea2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eaa:	4299      	cmp	r1, r3
 8008eac:	d117      	bne.n	8008ede <_strtod_l+0x8f6>
 8008eae:	4b29      	ldr	r3, [pc, #164]	; (8008f54 <_strtod_l+0x96c>)
 8008eb0:	429f      	cmp	r7, r3
 8008eb2:	d102      	bne.n	8008eba <_strtod_l+0x8d2>
 8008eb4:	3101      	adds	r1, #1
 8008eb6:	f43f addf 	beq.w	8008a78 <_strtod_l+0x490>
 8008eba:	4b23      	ldr	r3, [pc, #140]	; (8008f48 <_strtod_l+0x960>)
 8008ebc:	403b      	ands	r3, r7
 8008ebe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008ec2:	f04f 0a00 	mov.w	sl, #0
 8008ec6:	9b04      	ldr	r3, [sp, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1a4      	bne.n	8008e16 <_strtod_l+0x82e>
 8008ecc:	e5de      	b.n	8008a8c <_strtod_l+0x4a4>
 8008ece:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed2:	e7ea      	b.n	8008eaa <_strtod_l+0x8c2>
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	e7e8      	b.n	8008eaa <_strtod_l+0x8c2>
 8008ed8:	ea53 030a 	orrs.w	r3, r3, sl
 8008edc:	d08c      	beq.n	8008df8 <_strtod_l+0x810>
 8008ede:	9b08      	ldr	r3, [sp, #32]
 8008ee0:	b1db      	cbz	r3, 8008f1a <_strtod_l+0x932>
 8008ee2:	423b      	tst	r3, r7
 8008ee4:	d0ef      	beq.n	8008ec6 <_strtod_l+0x8de>
 8008ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee8:	9a04      	ldr	r2, [sp, #16]
 8008eea:	4650      	mov	r0, sl
 8008eec:	4659      	mov	r1, fp
 8008eee:	b1c3      	cbz	r3, 8008f22 <_strtod_l+0x93a>
 8008ef0:	f7ff fb5c 	bl	80085ac <sulp>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	ec51 0b18 	vmov	r0, r1, d8
 8008efc:	f7f7 f9ce 	bl	800029c <__adddf3>
 8008f00:	4682      	mov	sl, r0
 8008f02:	468b      	mov	fp, r1
 8008f04:	e7df      	b.n	8008ec6 <_strtod_l+0x8de>
 8008f06:	4013      	ands	r3, r2
 8008f08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008f0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008f10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008f14:	f04f 3aff 	mov.w	sl, #4294967295
 8008f18:	e7d5      	b.n	8008ec6 <_strtod_l+0x8de>
 8008f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f1c:	ea13 0f0a 	tst.w	r3, sl
 8008f20:	e7e0      	b.n	8008ee4 <_strtod_l+0x8fc>
 8008f22:	f7ff fb43 	bl	80085ac <sulp>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	ec51 0b18 	vmov	r0, r1, d8
 8008f2e:	f7f7 f9b3 	bl	8000298 <__aeabi_dsub>
 8008f32:	2200      	movs	r2, #0
 8008f34:	2300      	movs	r3, #0
 8008f36:	4682      	mov	sl, r0
 8008f38:	468b      	mov	fp, r1
 8008f3a:	f7f7 fdcd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d0c1      	beq.n	8008ec6 <_strtod_l+0x8de>
 8008f42:	e611      	b.n	8008b68 <_strtod_l+0x580>
 8008f44:	fffffc02 	.word	0xfffffc02
 8008f48:	7ff00000 	.word	0x7ff00000
 8008f4c:	39500000 	.word	0x39500000
 8008f50:	000fffff 	.word	0x000fffff
 8008f54:	7fefffff 	.word	0x7fefffff
 8008f58:	0800d4a0 	.word	0x0800d4a0
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f002 fb24 	bl	800b5ac <__ratio>
 8008f64:	ec59 8b10 	vmov	r8, r9, d0
 8008f68:	ee10 0a10 	vmov	r0, s0
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f72:	4649      	mov	r1, r9
 8008f74:	f7f7 fdc4 	bl	8000b00 <__aeabi_dcmple>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d07a      	beq.n	8009072 <_strtod_l+0xa8a>
 8008f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d04a      	beq.n	8009018 <_strtod_l+0xa30>
 8008f82:	4b95      	ldr	r3, [pc, #596]	; (80091d8 <_strtod_l+0xbf0>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80091d8 <_strtod_l+0xbf0>
 8008f8e:	f04f 0800 	mov.w	r8, #0
 8008f92:	4b92      	ldr	r3, [pc, #584]	; (80091dc <_strtod_l+0xbf4>)
 8008f94:	403b      	ands	r3, r7
 8008f96:	930d      	str	r3, [sp, #52]	; 0x34
 8008f98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f9a:	4b91      	ldr	r3, [pc, #580]	; (80091e0 <_strtod_l+0xbf8>)
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	f040 80b0 	bne.w	8009102 <_strtod_l+0xb1a>
 8008fa2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fa6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008faa:	ec4b ab10 	vmov	d0, sl, fp
 8008fae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fb2:	f002 fa23 	bl	800b3fc <__ulp>
 8008fb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fba:	ec53 2b10 	vmov	r2, r3, d0
 8008fbe:	f7f7 fb23 	bl	8000608 <__aeabi_dmul>
 8008fc2:	4652      	mov	r2, sl
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	f7f7 f969 	bl	800029c <__adddf3>
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4983      	ldr	r1, [pc, #524]	; (80091dc <_strtod_l+0xbf4>)
 8008fce:	4a85      	ldr	r2, [pc, #532]	; (80091e4 <_strtod_l+0xbfc>)
 8008fd0:	4019      	ands	r1, r3
 8008fd2:	4291      	cmp	r1, r2
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	d960      	bls.n	800909a <_strtod_l+0xab2>
 8008fd8:	ee18 3a90 	vmov	r3, s17
 8008fdc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d104      	bne.n	8008fee <_strtod_l+0xa06>
 8008fe4:	ee18 3a10 	vmov	r3, s16
 8008fe8:	3301      	adds	r3, #1
 8008fea:	f43f ad45 	beq.w	8008a78 <_strtod_l+0x490>
 8008fee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80091f0 <_strtod_l+0xc08>
 8008ff2:	f04f 3aff 	mov.w	sl, #4294967295
 8008ff6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f001 fecd 	bl	800ad98 <_Bfree>
 8008ffe:	9905      	ldr	r1, [sp, #20]
 8009000:	4620      	mov	r0, r4
 8009002:	f001 fec9 	bl	800ad98 <_Bfree>
 8009006:	4631      	mov	r1, r6
 8009008:	4620      	mov	r0, r4
 800900a:	f001 fec5 	bl	800ad98 <_Bfree>
 800900e:	4629      	mov	r1, r5
 8009010:	4620      	mov	r0, r4
 8009012:	f001 fec1 	bl	800ad98 <_Bfree>
 8009016:	e61a      	b.n	8008c4e <_strtod_l+0x666>
 8009018:	f1ba 0f00 	cmp.w	sl, #0
 800901c:	d11b      	bne.n	8009056 <_strtod_l+0xa6e>
 800901e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009022:	b9f3      	cbnz	r3, 8009062 <_strtod_l+0xa7a>
 8009024:	4b6c      	ldr	r3, [pc, #432]	; (80091d8 <_strtod_l+0xbf0>)
 8009026:	2200      	movs	r2, #0
 8009028:	4640      	mov	r0, r8
 800902a:	4649      	mov	r1, r9
 800902c:	f7f7 fd5e 	bl	8000aec <__aeabi_dcmplt>
 8009030:	b9d0      	cbnz	r0, 8009068 <_strtod_l+0xa80>
 8009032:	4640      	mov	r0, r8
 8009034:	4649      	mov	r1, r9
 8009036:	4b6c      	ldr	r3, [pc, #432]	; (80091e8 <_strtod_l+0xc00>)
 8009038:	2200      	movs	r2, #0
 800903a:	f7f7 fae5 	bl	8000608 <__aeabi_dmul>
 800903e:	4680      	mov	r8, r0
 8009040:	4689      	mov	r9, r1
 8009042:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009046:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800904a:	9315      	str	r3, [sp, #84]	; 0x54
 800904c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009050:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009054:	e79d      	b.n	8008f92 <_strtod_l+0x9aa>
 8009056:	f1ba 0f01 	cmp.w	sl, #1
 800905a:	d102      	bne.n	8009062 <_strtod_l+0xa7a>
 800905c:	2f00      	cmp	r7, #0
 800905e:	f43f ad83 	beq.w	8008b68 <_strtod_l+0x580>
 8009062:	4b62      	ldr	r3, [pc, #392]	; (80091ec <_strtod_l+0xc04>)
 8009064:	2200      	movs	r2, #0
 8009066:	e78e      	b.n	8008f86 <_strtod_l+0x99e>
 8009068:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80091e8 <_strtod_l+0xc00>
 800906c:	f04f 0800 	mov.w	r8, #0
 8009070:	e7e7      	b.n	8009042 <_strtod_l+0xa5a>
 8009072:	4b5d      	ldr	r3, [pc, #372]	; (80091e8 <_strtod_l+0xc00>)
 8009074:	4640      	mov	r0, r8
 8009076:	4649      	mov	r1, r9
 8009078:	2200      	movs	r2, #0
 800907a:	f7f7 fac5 	bl	8000608 <__aeabi_dmul>
 800907e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009080:	4680      	mov	r8, r0
 8009082:	4689      	mov	r9, r1
 8009084:	b933      	cbnz	r3, 8009094 <_strtod_l+0xaac>
 8009086:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800908a:	900e      	str	r0, [sp, #56]	; 0x38
 800908c:	930f      	str	r3, [sp, #60]	; 0x3c
 800908e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009092:	e7dd      	b.n	8009050 <_strtod_l+0xa68>
 8009094:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009098:	e7f9      	b.n	800908e <_strtod_l+0xaa6>
 800909a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800909e:	9b04      	ldr	r3, [sp, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1a8      	bne.n	8008ff6 <_strtod_l+0xa0e>
 80090a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090aa:	0d1b      	lsrs	r3, r3, #20
 80090ac:	051b      	lsls	r3, r3, #20
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d1a1      	bne.n	8008ff6 <_strtod_l+0xa0e>
 80090b2:	4640      	mov	r0, r8
 80090b4:	4649      	mov	r1, r9
 80090b6:	f7f7 fe07 	bl	8000cc8 <__aeabi_d2lz>
 80090ba:	f7f7 fa77 	bl	80005ac <__aeabi_l2d>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4640      	mov	r0, r8
 80090c4:	4649      	mov	r1, r9
 80090c6:	f7f7 f8e7 	bl	8000298 <__aeabi_dsub>
 80090ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090d0:	ea43 030a 	orr.w	r3, r3, sl
 80090d4:	4313      	orrs	r3, r2
 80090d6:	4680      	mov	r8, r0
 80090d8:	4689      	mov	r9, r1
 80090da:	d055      	beq.n	8009188 <_strtod_l+0xba0>
 80090dc:	a336      	add	r3, pc, #216	; (adr r3, 80091b8 <_strtod_l+0xbd0>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	f7f7 fd03 	bl	8000aec <__aeabi_dcmplt>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f47f acd0 	bne.w	8008a8c <_strtod_l+0x4a4>
 80090ec:	a334      	add	r3, pc, #208	; (adr r3, 80091c0 <_strtod_l+0xbd8>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	4640      	mov	r0, r8
 80090f4:	4649      	mov	r1, r9
 80090f6:	f7f7 fd17 	bl	8000b28 <__aeabi_dcmpgt>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	f43f af7b 	beq.w	8008ff6 <_strtod_l+0xa0e>
 8009100:	e4c4      	b.n	8008a8c <_strtod_l+0x4a4>
 8009102:	9b04      	ldr	r3, [sp, #16]
 8009104:	b333      	cbz	r3, 8009154 <_strtod_l+0xb6c>
 8009106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009108:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800910c:	d822      	bhi.n	8009154 <_strtod_l+0xb6c>
 800910e:	a32e      	add	r3, pc, #184	; (adr r3, 80091c8 <_strtod_l+0xbe0>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	4640      	mov	r0, r8
 8009116:	4649      	mov	r1, r9
 8009118:	f7f7 fcf2 	bl	8000b00 <__aeabi_dcmple>
 800911c:	b1a0      	cbz	r0, 8009148 <_strtod_l+0xb60>
 800911e:	4649      	mov	r1, r9
 8009120:	4640      	mov	r0, r8
 8009122:	f7f7 fd49 	bl	8000bb8 <__aeabi_d2uiz>
 8009126:	2801      	cmp	r0, #1
 8009128:	bf38      	it	cc
 800912a:	2001      	movcc	r0, #1
 800912c:	f7f7 f9f2 	bl	8000514 <__aeabi_ui2d>
 8009130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009132:	4680      	mov	r8, r0
 8009134:	4689      	mov	r9, r1
 8009136:	bb23      	cbnz	r3, 8009182 <_strtod_l+0xb9a>
 8009138:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800913c:	9010      	str	r0, [sp, #64]	; 0x40
 800913e:	9311      	str	r3, [sp, #68]	; 0x44
 8009140:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009144:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800914c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009150:	1a9b      	subs	r3, r3, r2
 8009152:	9309      	str	r3, [sp, #36]	; 0x24
 8009154:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009158:	eeb0 0a48 	vmov.f32	s0, s16
 800915c:	eef0 0a68 	vmov.f32	s1, s17
 8009160:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009164:	f002 f94a 	bl	800b3fc <__ulp>
 8009168:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800916c:	ec53 2b10 	vmov	r2, r3, d0
 8009170:	f7f7 fa4a 	bl	8000608 <__aeabi_dmul>
 8009174:	ec53 2b18 	vmov	r2, r3, d8
 8009178:	f7f7 f890 	bl	800029c <__adddf3>
 800917c:	4682      	mov	sl, r0
 800917e:	468b      	mov	fp, r1
 8009180:	e78d      	b.n	800909e <_strtod_l+0xab6>
 8009182:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009186:	e7db      	b.n	8009140 <_strtod_l+0xb58>
 8009188:	a311      	add	r3, pc, #68	; (adr r3, 80091d0 <_strtod_l+0xbe8>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f7f7 fcad 	bl	8000aec <__aeabi_dcmplt>
 8009192:	e7b2      	b.n	80090fa <_strtod_l+0xb12>
 8009194:	2300      	movs	r3, #0
 8009196:	930a      	str	r3, [sp, #40]	; 0x28
 8009198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800919a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	f7ff ba6b 	b.w	8008678 <_strtod_l+0x90>
 80091a2:	2a65      	cmp	r2, #101	; 0x65
 80091a4:	f43f ab5f 	beq.w	8008866 <_strtod_l+0x27e>
 80091a8:	2a45      	cmp	r2, #69	; 0x45
 80091aa:	f43f ab5c 	beq.w	8008866 <_strtod_l+0x27e>
 80091ae:	2301      	movs	r3, #1
 80091b0:	f7ff bb94 	b.w	80088dc <_strtod_l+0x2f4>
 80091b4:	f3af 8000 	nop.w
 80091b8:	94a03595 	.word	0x94a03595
 80091bc:	3fdfffff 	.word	0x3fdfffff
 80091c0:	35afe535 	.word	0x35afe535
 80091c4:	3fe00000 	.word	0x3fe00000
 80091c8:	ffc00000 	.word	0xffc00000
 80091cc:	41dfffff 	.word	0x41dfffff
 80091d0:	94a03595 	.word	0x94a03595
 80091d4:	3fcfffff 	.word	0x3fcfffff
 80091d8:	3ff00000 	.word	0x3ff00000
 80091dc:	7ff00000 	.word	0x7ff00000
 80091e0:	7fe00000 	.word	0x7fe00000
 80091e4:	7c9fffff 	.word	0x7c9fffff
 80091e8:	3fe00000 	.word	0x3fe00000
 80091ec:	bff00000 	.word	0xbff00000
 80091f0:	7fefffff 	.word	0x7fefffff

080091f4 <_strtod_r>:
 80091f4:	4b01      	ldr	r3, [pc, #4]	; (80091fc <_strtod_r+0x8>)
 80091f6:	f7ff b9f7 	b.w	80085e8 <_strtod_l>
 80091fa:	bf00      	nop
 80091fc:	2000007c 	.word	0x2000007c

08009200 <_strtol_l.constprop.0>:
 8009200:	2b01      	cmp	r3, #1
 8009202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009206:	d001      	beq.n	800920c <_strtol_l.constprop.0+0xc>
 8009208:	2b24      	cmp	r3, #36	; 0x24
 800920a:	d906      	bls.n	800921a <_strtol_l.constprop.0+0x1a>
 800920c:	f7fe f982 	bl	8007514 <__errno>
 8009210:	2316      	movs	r3, #22
 8009212:	6003      	str	r3, [r0, #0]
 8009214:	2000      	movs	r0, #0
 8009216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009300 <_strtol_l.constprop.0+0x100>
 800921e:	460d      	mov	r5, r1
 8009220:	462e      	mov	r6, r5
 8009222:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009226:	f814 700c 	ldrb.w	r7, [r4, ip]
 800922a:	f017 0708 	ands.w	r7, r7, #8
 800922e:	d1f7      	bne.n	8009220 <_strtol_l.constprop.0+0x20>
 8009230:	2c2d      	cmp	r4, #45	; 0x2d
 8009232:	d132      	bne.n	800929a <_strtol_l.constprop.0+0x9a>
 8009234:	782c      	ldrb	r4, [r5, #0]
 8009236:	2701      	movs	r7, #1
 8009238:	1cb5      	adds	r5, r6, #2
 800923a:	2b00      	cmp	r3, #0
 800923c:	d05b      	beq.n	80092f6 <_strtol_l.constprop.0+0xf6>
 800923e:	2b10      	cmp	r3, #16
 8009240:	d109      	bne.n	8009256 <_strtol_l.constprop.0+0x56>
 8009242:	2c30      	cmp	r4, #48	; 0x30
 8009244:	d107      	bne.n	8009256 <_strtol_l.constprop.0+0x56>
 8009246:	782c      	ldrb	r4, [r5, #0]
 8009248:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800924c:	2c58      	cmp	r4, #88	; 0x58
 800924e:	d14d      	bne.n	80092ec <_strtol_l.constprop.0+0xec>
 8009250:	786c      	ldrb	r4, [r5, #1]
 8009252:	2310      	movs	r3, #16
 8009254:	3502      	adds	r5, #2
 8009256:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800925a:	f108 38ff 	add.w	r8, r8, #4294967295
 800925e:	f04f 0c00 	mov.w	ip, #0
 8009262:	fbb8 f9f3 	udiv	r9, r8, r3
 8009266:	4666      	mov	r6, ip
 8009268:	fb03 8a19 	mls	sl, r3, r9, r8
 800926c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009270:	f1be 0f09 	cmp.w	lr, #9
 8009274:	d816      	bhi.n	80092a4 <_strtol_l.constprop.0+0xa4>
 8009276:	4674      	mov	r4, lr
 8009278:	42a3      	cmp	r3, r4
 800927a:	dd24      	ble.n	80092c6 <_strtol_l.constprop.0+0xc6>
 800927c:	f1bc 0f00 	cmp.w	ip, #0
 8009280:	db1e      	blt.n	80092c0 <_strtol_l.constprop.0+0xc0>
 8009282:	45b1      	cmp	r9, r6
 8009284:	d31c      	bcc.n	80092c0 <_strtol_l.constprop.0+0xc0>
 8009286:	d101      	bne.n	800928c <_strtol_l.constprop.0+0x8c>
 8009288:	45a2      	cmp	sl, r4
 800928a:	db19      	blt.n	80092c0 <_strtol_l.constprop.0+0xc0>
 800928c:	fb06 4603 	mla	r6, r6, r3, r4
 8009290:	f04f 0c01 	mov.w	ip, #1
 8009294:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009298:	e7e8      	b.n	800926c <_strtol_l.constprop.0+0x6c>
 800929a:	2c2b      	cmp	r4, #43	; 0x2b
 800929c:	bf04      	itt	eq
 800929e:	782c      	ldrbeq	r4, [r5, #0]
 80092a0:	1cb5      	addeq	r5, r6, #2
 80092a2:	e7ca      	b.n	800923a <_strtol_l.constprop.0+0x3a>
 80092a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80092a8:	f1be 0f19 	cmp.w	lr, #25
 80092ac:	d801      	bhi.n	80092b2 <_strtol_l.constprop.0+0xb2>
 80092ae:	3c37      	subs	r4, #55	; 0x37
 80092b0:	e7e2      	b.n	8009278 <_strtol_l.constprop.0+0x78>
 80092b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80092b6:	f1be 0f19 	cmp.w	lr, #25
 80092ba:	d804      	bhi.n	80092c6 <_strtol_l.constprop.0+0xc6>
 80092bc:	3c57      	subs	r4, #87	; 0x57
 80092be:	e7db      	b.n	8009278 <_strtol_l.constprop.0+0x78>
 80092c0:	f04f 3cff 	mov.w	ip, #4294967295
 80092c4:	e7e6      	b.n	8009294 <_strtol_l.constprop.0+0x94>
 80092c6:	f1bc 0f00 	cmp.w	ip, #0
 80092ca:	da05      	bge.n	80092d8 <_strtol_l.constprop.0+0xd8>
 80092cc:	2322      	movs	r3, #34	; 0x22
 80092ce:	6003      	str	r3, [r0, #0]
 80092d0:	4646      	mov	r6, r8
 80092d2:	b942      	cbnz	r2, 80092e6 <_strtol_l.constprop.0+0xe6>
 80092d4:	4630      	mov	r0, r6
 80092d6:	e79e      	b.n	8009216 <_strtol_l.constprop.0+0x16>
 80092d8:	b107      	cbz	r7, 80092dc <_strtol_l.constprop.0+0xdc>
 80092da:	4276      	negs	r6, r6
 80092dc:	2a00      	cmp	r2, #0
 80092de:	d0f9      	beq.n	80092d4 <_strtol_l.constprop.0+0xd4>
 80092e0:	f1bc 0f00 	cmp.w	ip, #0
 80092e4:	d000      	beq.n	80092e8 <_strtol_l.constprop.0+0xe8>
 80092e6:	1e69      	subs	r1, r5, #1
 80092e8:	6011      	str	r1, [r2, #0]
 80092ea:	e7f3      	b.n	80092d4 <_strtol_l.constprop.0+0xd4>
 80092ec:	2430      	movs	r4, #48	; 0x30
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1b1      	bne.n	8009256 <_strtol_l.constprop.0+0x56>
 80092f2:	2308      	movs	r3, #8
 80092f4:	e7af      	b.n	8009256 <_strtol_l.constprop.0+0x56>
 80092f6:	2c30      	cmp	r4, #48	; 0x30
 80092f8:	d0a5      	beq.n	8009246 <_strtol_l.constprop.0+0x46>
 80092fa:	230a      	movs	r3, #10
 80092fc:	e7ab      	b.n	8009256 <_strtol_l.constprop.0+0x56>
 80092fe:	bf00      	nop
 8009300:	0800d4c9 	.word	0x0800d4c9

08009304 <_strtol_r>:
 8009304:	f7ff bf7c 	b.w	8009200 <_strtol_l.constprop.0>

08009308 <__swbuf_r>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	460e      	mov	r6, r1
 800930c:	4614      	mov	r4, r2
 800930e:	4605      	mov	r5, r0
 8009310:	b118      	cbz	r0, 800931a <__swbuf_r+0x12>
 8009312:	6983      	ldr	r3, [r0, #24]
 8009314:	b90b      	cbnz	r3, 800931a <__swbuf_r+0x12>
 8009316:	f001 f853 	bl	800a3c0 <__sinit>
 800931a:	4b21      	ldr	r3, [pc, #132]	; (80093a0 <__swbuf_r+0x98>)
 800931c:	429c      	cmp	r4, r3
 800931e:	d12b      	bne.n	8009378 <__swbuf_r+0x70>
 8009320:	686c      	ldr	r4, [r5, #4]
 8009322:	69a3      	ldr	r3, [r4, #24]
 8009324:	60a3      	str	r3, [r4, #8]
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	071a      	lsls	r2, r3, #28
 800932a:	d52f      	bpl.n	800938c <__swbuf_r+0x84>
 800932c:	6923      	ldr	r3, [r4, #16]
 800932e:	b36b      	cbz	r3, 800938c <__swbuf_r+0x84>
 8009330:	6923      	ldr	r3, [r4, #16]
 8009332:	6820      	ldr	r0, [r4, #0]
 8009334:	1ac0      	subs	r0, r0, r3
 8009336:	6963      	ldr	r3, [r4, #20]
 8009338:	b2f6      	uxtb	r6, r6
 800933a:	4283      	cmp	r3, r0
 800933c:	4637      	mov	r7, r6
 800933e:	dc04      	bgt.n	800934a <__swbuf_r+0x42>
 8009340:	4621      	mov	r1, r4
 8009342:	4628      	mov	r0, r5
 8009344:	f000 ffa8 	bl	800a298 <_fflush_r>
 8009348:	bb30      	cbnz	r0, 8009398 <__swbuf_r+0x90>
 800934a:	68a3      	ldr	r3, [r4, #8]
 800934c:	3b01      	subs	r3, #1
 800934e:	60a3      	str	r3, [r4, #8]
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	6022      	str	r2, [r4, #0]
 8009356:	701e      	strb	r6, [r3, #0]
 8009358:	6963      	ldr	r3, [r4, #20]
 800935a:	3001      	adds	r0, #1
 800935c:	4283      	cmp	r3, r0
 800935e:	d004      	beq.n	800936a <__swbuf_r+0x62>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	07db      	lsls	r3, r3, #31
 8009364:	d506      	bpl.n	8009374 <__swbuf_r+0x6c>
 8009366:	2e0a      	cmp	r6, #10
 8009368:	d104      	bne.n	8009374 <__swbuf_r+0x6c>
 800936a:	4621      	mov	r1, r4
 800936c:	4628      	mov	r0, r5
 800936e:	f000 ff93 	bl	800a298 <_fflush_r>
 8009372:	b988      	cbnz	r0, 8009398 <__swbuf_r+0x90>
 8009374:	4638      	mov	r0, r7
 8009376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009378:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <__swbuf_r+0x9c>)
 800937a:	429c      	cmp	r4, r3
 800937c:	d101      	bne.n	8009382 <__swbuf_r+0x7a>
 800937e:	68ac      	ldr	r4, [r5, #8]
 8009380:	e7cf      	b.n	8009322 <__swbuf_r+0x1a>
 8009382:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <__swbuf_r+0xa0>)
 8009384:	429c      	cmp	r4, r3
 8009386:	bf08      	it	eq
 8009388:	68ec      	ldreq	r4, [r5, #12]
 800938a:	e7ca      	b.n	8009322 <__swbuf_r+0x1a>
 800938c:	4621      	mov	r1, r4
 800938e:	4628      	mov	r0, r5
 8009390:	f000 f80c 	bl	80093ac <__swsetup_r>
 8009394:	2800      	cmp	r0, #0
 8009396:	d0cb      	beq.n	8009330 <__swbuf_r+0x28>
 8009398:	f04f 37ff 	mov.w	r7, #4294967295
 800939c:	e7ea      	b.n	8009374 <__swbuf_r+0x6c>
 800939e:	bf00      	nop
 80093a0:	0800d67c 	.word	0x0800d67c
 80093a4:	0800d69c 	.word	0x0800d69c
 80093a8:	0800d65c 	.word	0x0800d65c

080093ac <__swsetup_r>:
 80093ac:	4b32      	ldr	r3, [pc, #200]	; (8009478 <__swsetup_r+0xcc>)
 80093ae:	b570      	push	{r4, r5, r6, lr}
 80093b0:	681d      	ldr	r5, [r3, #0]
 80093b2:	4606      	mov	r6, r0
 80093b4:	460c      	mov	r4, r1
 80093b6:	b125      	cbz	r5, 80093c2 <__swsetup_r+0x16>
 80093b8:	69ab      	ldr	r3, [r5, #24]
 80093ba:	b913      	cbnz	r3, 80093c2 <__swsetup_r+0x16>
 80093bc:	4628      	mov	r0, r5
 80093be:	f000 ffff 	bl	800a3c0 <__sinit>
 80093c2:	4b2e      	ldr	r3, [pc, #184]	; (800947c <__swsetup_r+0xd0>)
 80093c4:	429c      	cmp	r4, r3
 80093c6:	d10f      	bne.n	80093e8 <__swsetup_r+0x3c>
 80093c8:	686c      	ldr	r4, [r5, #4]
 80093ca:	89a3      	ldrh	r3, [r4, #12]
 80093cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093d0:	0719      	lsls	r1, r3, #28
 80093d2:	d42c      	bmi.n	800942e <__swsetup_r+0x82>
 80093d4:	06dd      	lsls	r5, r3, #27
 80093d6:	d411      	bmi.n	80093fc <__swsetup_r+0x50>
 80093d8:	2309      	movs	r3, #9
 80093da:	6033      	str	r3, [r6, #0]
 80093dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	f04f 30ff 	mov.w	r0, #4294967295
 80093e6:	e03e      	b.n	8009466 <__swsetup_r+0xba>
 80093e8:	4b25      	ldr	r3, [pc, #148]	; (8009480 <__swsetup_r+0xd4>)
 80093ea:	429c      	cmp	r4, r3
 80093ec:	d101      	bne.n	80093f2 <__swsetup_r+0x46>
 80093ee:	68ac      	ldr	r4, [r5, #8]
 80093f0:	e7eb      	b.n	80093ca <__swsetup_r+0x1e>
 80093f2:	4b24      	ldr	r3, [pc, #144]	; (8009484 <__swsetup_r+0xd8>)
 80093f4:	429c      	cmp	r4, r3
 80093f6:	bf08      	it	eq
 80093f8:	68ec      	ldreq	r4, [r5, #12]
 80093fa:	e7e6      	b.n	80093ca <__swsetup_r+0x1e>
 80093fc:	0758      	lsls	r0, r3, #29
 80093fe:	d512      	bpl.n	8009426 <__swsetup_r+0x7a>
 8009400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009402:	b141      	cbz	r1, 8009416 <__swsetup_r+0x6a>
 8009404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009408:	4299      	cmp	r1, r3
 800940a:	d002      	beq.n	8009412 <__swsetup_r+0x66>
 800940c:	4630      	mov	r0, r6
 800940e:	f002 f95b 	bl	800b6c8 <_free_r>
 8009412:	2300      	movs	r3, #0
 8009414:	6363      	str	r3, [r4, #52]	; 0x34
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	2300      	movs	r3, #0
 8009420:	6063      	str	r3, [r4, #4]
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	f043 0308 	orr.w	r3, r3, #8
 800942c:	81a3      	strh	r3, [r4, #12]
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	b94b      	cbnz	r3, 8009446 <__swsetup_r+0x9a>
 8009432:	89a3      	ldrh	r3, [r4, #12]
 8009434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800943c:	d003      	beq.n	8009446 <__swsetup_r+0x9a>
 800943e:	4621      	mov	r1, r4
 8009440:	4630      	mov	r0, r6
 8009442:	f001 fbf5 	bl	800ac30 <__smakebuf_r>
 8009446:	89a0      	ldrh	r0, [r4, #12]
 8009448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800944c:	f010 0301 	ands.w	r3, r0, #1
 8009450:	d00a      	beq.n	8009468 <__swsetup_r+0xbc>
 8009452:	2300      	movs	r3, #0
 8009454:	60a3      	str	r3, [r4, #8]
 8009456:	6963      	ldr	r3, [r4, #20]
 8009458:	425b      	negs	r3, r3
 800945a:	61a3      	str	r3, [r4, #24]
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	b943      	cbnz	r3, 8009472 <__swsetup_r+0xc6>
 8009460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009464:	d1ba      	bne.n	80093dc <__swsetup_r+0x30>
 8009466:	bd70      	pop	{r4, r5, r6, pc}
 8009468:	0781      	lsls	r1, r0, #30
 800946a:	bf58      	it	pl
 800946c:	6963      	ldrpl	r3, [r4, #20]
 800946e:	60a3      	str	r3, [r4, #8]
 8009470:	e7f4      	b.n	800945c <__swsetup_r+0xb0>
 8009472:	2000      	movs	r0, #0
 8009474:	e7f7      	b.n	8009466 <__swsetup_r+0xba>
 8009476:	bf00      	nop
 8009478:	20000014 	.word	0x20000014
 800947c:	0800d67c 	.word	0x0800d67c
 8009480:	0800d69c 	.word	0x0800d69c
 8009484:	0800d65c 	.word	0x0800d65c

08009488 <abort>:
 8009488:	b508      	push	{r3, lr}
 800948a:	2006      	movs	r0, #6
 800948c:	f002 fbc8 	bl	800bc20 <raise>
 8009490:	2001      	movs	r0, #1
 8009492:	f7f9 ffa3 	bl	80033dc <_exit>

08009496 <quorem>:
 8009496:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949a:	6903      	ldr	r3, [r0, #16]
 800949c:	690c      	ldr	r4, [r1, #16]
 800949e:	42a3      	cmp	r3, r4
 80094a0:	4607      	mov	r7, r0
 80094a2:	f2c0 8081 	blt.w	80095a8 <quorem+0x112>
 80094a6:	3c01      	subs	r4, #1
 80094a8:	f101 0814 	add.w	r8, r1, #20
 80094ac:	f100 0514 	add.w	r5, r0, #20
 80094b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094b4:	9301      	str	r3, [sp, #4]
 80094b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094be:	3301      	adds	r3, #1
 80094c0:	429a      	cmp	r2, r3
 80094c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80094ce:	d331      	bcc.n	8009534 <quorem+0x9e>
 80094d0:	f04f 0e00 	mov.w	lr, #0
 80094d4:	4640      	mov	r0, r8
 80094d6:	46ac      	mov	ip, r5
 80094d8:	46f2      	mov	sl, lr
 80094da:	f850 2b04 	ldr.w	r2, [r0], #4
 80094de:	b293      	uxth	r3, r2
 80094e0:	fb06 e303 	mla	r3, r6, r3, lr
 80094e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	ebaa 0303 	sub.w	r3, sl, r3
 80094ee:	f8dc a000 	ldr.w	sl, [ip]
 80094f2:	0c12      	lsrs	r2, r2, #16
 80094f4:	fa13 f38a 	uxtah	r3, r3, sl
 80094f8:	fb06 e202 	mla	r2, r6, r2, lr
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	9b00      	ldr	r3, [sp, #0]
 8009500:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009504:	b292      	uxth	r2, r2
 8009506:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800950a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800950e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009512:	4581      	cmp	r9, r0
 8009514:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009518:	f84c 3b04 	str.w	r3, [ip], #4
 800951c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009520:	d2db      	bcs.n	80094da <quorem+0x44>
 8009522:	f855 300b 	ldr.w	r3, [r5, fp]
 8009526:	b92b      	cbnz	r3, 8009534 <quorem+0x9e>
 8009528:	9b01      	ldr	r3, [sp, #4]
 800952a:	3b04      	subs	r3, #4
 800952c:	429d      	cmp	r5, r3
 800952e:	461a      	mov	r2, r3
 8009530:	d32e      	bcc.n	8009590 <quorem+0xfa>
 8009532:	613c      	str	r4, [r7, #16]
 8009534:	4638      	mov	r0, r7
 8009536:	f001 febb 	bl	800b2b0 <__mcmp>
 800953a:	2800      	cmp	r0, #0
 800953c:	db24      	blt.n	8009588 <quorem+0xf2>
 800953e:	3601      	adds	r6, #1
 8009540:	4628      	mov	r0, r5
 8009542:	f04f 0c00 	mov.w	ip, #0
 8009546:	f858 2b04 	ldr.w	r2, [r8], #4
 800954a:	f8d0 e000 	ldr.w	lr, [r0]
 800954e:	b293      	uxth	r3, r2
 8009550:	ebac 0303 	sub.w	r3, ip, r3
 8009554:	0c12      	lsrs	r2, r2, #16
 8009556:	fa13 f38e 	uxtah	r3, r3, lr
 800955a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800955e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009562:	b29b      	uxth	r3, r3
 8009564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009568:	45c1      	cmp	r9, r8
 800956a:	f840 3b04 	str.w	r3, [r0], #4
 800956e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009572:	d2e8      	bcs.n	8009546 <quorem+0xb0>
 8009574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009578:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800957c:	b922      	cbnz	r2, 8009588 <quorem+0xf2>
 800957e:	3b04      	subs	r3, #4
 8009580:	429d      	cmp	r5, r3
 8009582:	461a      	mov	r2, r3
 8009584:	d30a      	bcc.n	800959c <quorem+0x106>
 8009586:	613c      	str	r4, [r7, #16]
 8009588:	4630      	mov	r0, r6
 800958a:	b003      	add	sp, #12
 800958c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009590:	6812      	ldr	r2, [r2, #0]
 8009592:	3b04      	subs	r3, #4
 8009594:	2a00      	cmp	r2, #0
 8009596:	d1cc      	bne.n	8009532 <quorem+0x9c>
 8009598:	3c01      	subs	r4, #1
 800959a:	e7c7      	b.n	800952c <quorem+0x96>
 800959c:	6812      	ldr	r2, [r2, #0]
 800959e:	3b04      	subs	r3, #4
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	d1f0      	bne.n	8009586 <quorem+0xf0>
 80095a4:	3c01      	subs	r4, #1
 80095a6:	e7eb      	b.n	8009580 <quorem+0xea>
 80095a8:	2000      	movs	r0, #0
 80095aa:	e7ee      	b.n	800958a <quorem+0xf4>
 80095ac:	0000      	movs	r0, r0
	...

080095b0 <_dtoa_r>:
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	ed2d 8b04 	vpush	{d8-d9}
 80095b8:	ec57 6b10 	vmov	r6, r7, d0
 80095bc:	b093      	sub	sp, #76	; 0x4c
 80095be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095c4:	9106      	str	r1, [sp, #24]
 80095c6:	ee10 aa10 	vmov	sl, s0
 80095ca:	4604      	mov	r4, r0
 80095cc:	9209      	str	r2, [sp, #36]	; 0x24
 80095ce:	930c      	str	r3, [sp, #48]	; 0x30
 80095d0:	46bb      	mov	fp, r7
 80095d2:	b975      	cbnz	r5, 80095f2 <_dtoa_r+0x42>
 80095d4:	2010      	movs	r0, #16
 80095d6:	f001 fb6b 	bl	800acb0 <malloc>
 80095da:	4602      	mov	r2, r0
 80095dc:	6260      	str	r0, [r4, #36]	; 0x24
 80095de:	b920      	cbnz	r0, 80095ea <_dtoa_r+0x3a>
 80095e0:	4ba7      	ldr	r3, [pc, #668]	; (8009880 <_dtoa_r+0x2d0>)
 80095e2:	21ea      	movs	r1, #234	; 0xea
 80095e4:	48a7      	ldr	r0, [pc, #668]	; (8009884 <_dtoa_r+0x2d4>)
 80095e6:	f7fd ff77 	bl	80074d8 <__assert_func>
 80095ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095ee:	6005      	str	r5, [r0, #0]
 80095f0:	60c5      	str	r5, [r0, #12]
 80095f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f4:	6819      	ldr	r1, [r3, #0]
 80095f6:	b151      	cbz	r1, 800960e <_dtoa_r+0x5e>
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	604a      	str	r2, [r1, #4]
 80095fc:	2301      	movs	r3, #1
 80095fe:	4093      	lsls	r3, r2
 8009600:	608b      	str	r3, [r1, #8]
 8009602:	4620      	mov	r0, r4
 8009604:	f001 fbc8 	bl	800ad98 <_Bfree>
 8009608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	1e3b      	subs	r3, r7, #0
 8009610:	bfaa      	itet	ge
 8009612:	2300      	movge	r3, #0
 8009614:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009618:	f8c8 3000 	strge.w	r3, [r8]
 800961c:	4b9a      	ldr	r3, [pc, #616]	; (8009888 <_dtoa_r+0x2d8>)
 800961e:	bfbc      	itt	lt
 8009620:	2201      	movlt	r2, #1
 8009622:	f8c8 2000 	strlt.w	r2, [r8]
 8009626:	ea33 030b 	bics.w	r3, r3, fp
 800962a:	d11b      	bne.n	8009664 <_dtoa_r+0xb4>
 800962c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800962e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009638:	4333      	orrs	r3, r6
 800963a:	f000 8592 	beq.w	800a162 <_dtoa_r+0xbb2>
 800963e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009640:	b963      	cbnz	r3, 800965c <_dtoa_r+0xac>
 8009642:	4b92      	ldr	r3, [pc, #584]	; (800988c <_dtoa_r+0x2dc>)
 8009644:	e022      	b.n	800968c <_dtoa_r+0xdc>
 8009646:	4b92      	ldr	r3, [pc, #584]	; (8009890 <_dtoa_r+0x2e0>)
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	3308      	adds	r3, #8
 800964c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	9801      	ldr	r0, [sp, #4]
 8009652:	b013      	add	sp, #76	; 0x4c
 8009654:	ecbd 8b04 	vpop	{d8-d9}
 8009658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965c:	4b8b      	ldr	r3, [pc, #556]	; (800988c <_dtoa_r+0x2dc>)
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	3303      	adds	r3, #3
 8009662:	e7f3      	b.n	800964c <_dtoa_r+0x9c>
 8009664:	2200      	movs	r2, #0
 8009666:	2300      	movs	r3, #0
 8009668:	4650      	mov	r0, sl
 800966a:	4659      	mov	r1, fp
 800966c:	f7f7 fa34 	bl	8000ad8 <__aeabi_dcmpeq>
 8009670:	ec4b ab19 	vmov	d9, sl, fp
 8009674:	4680      	mov	r8, r0
 8009676:	b158      	cbz	r0, 8009690 <_dtoa_r+0xe0>
 8009678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800967a:	2301      	movs	r3, #1
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 856b 	beq.w	800a15c <_dtoa_r+0xbac>
 8009686:	4883      	ldr	r0, [pc, #524]	; (8009894 <_dtoa_r+0x2e4>)
 8009688:	6018      	str	r0, [r3, #0]
 800968a:	1e43      	subs	r3, r0, #1
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	e7df      	b.n	8009650 <_dtoa_r+0xa0>
 8009690:	ec4b ab10 	vmov	d0, sl, fp
 8009694:	aa10      	add	r2, sp, #64	; 0x40
 8009696:	a911      	add	r1, sp, #68	; 0x44
 8009698:	4620      	mov	r0, r4
 800969a:	f001 ff2b 	bl	800b4f4 <__d2b>
 800969e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80096a2:	ee08 0a10 	vmov	s16, r0
 80096a6:	2d00      	cmp	r5, #0
 80096a8:	f000 8084 	beq.w	80097b4 <_dtoa_r+0x204>
 80096ac:	ee19 3a90 	vmov	r3, s19
 80096b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80096b8:	4656      	mov	r6, sl
 80096ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80096be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80096c6:	4b74      	ldr	r3, [pc, #464]	; (8009898 <_dtoa_r+0x2e8>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	4630      	mov	r0, r6
 80096cc:	4639      	mov	r1, r7
 80096ce:	f7f6 fde3 	bl	8000298 <__aeabi_dsub>
 80096d2:	a365      	add	r3, pc, #404	; (adr r3, 8009868 <_dtoa_r+0x2b8>)
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f7f6 ff96 	bl	8000608 <__aeabi_dmul>
 80096dc:	a364      	add	r3, pc, #400	; (adr r3, 8009870 <_dtoa_r+0x2c0>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f7f6 fddb 	bl	800029c <__adddf3>
 80096e6:	4606      	mov	r6, r0
 80096e8:	4628      	mov	r0, r5
 80096ea:	460f      	mov	r7, r1
 80096ec:	f7f6 ff22 	bl	8000534 <__aeabi_i2d>
 80096f0:	a361      	add	r3, pc, #388	; (adr r3, 8009878 <_dtoa_r+0x2c8>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	f7f6 ff87 	bl	8000608 <__aeabi_dmul>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f6 fdcb 	bl	800029c <__adddf3>
 8009706:	4606      	mov	r6, r0
 8009708:	460f      	mov	r7, r1
 800970a:	f7f7 fa2d 	bl	8000b68 <__aeabi_d2iz>
 800970e:	2200      	movs	r2, #0
 8009710:	9000      	str	r0, [sp, #0]
 8009712:	2300      	movs	r3, #0
 8009714:	4630      	mov	r0, r6
 8009716:	4639      	mov	r1, r7
 8009718:	f7f7 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800971c:	b150      	cbz	r0, 8009734 <_dtoa_r+0x184>
 800971e:	9800      	ldr	r0, [sp, #0]
 8009720:	f7f6 ff08 	bl	8000534 <__aeabi_i2d>
 8009724:	4632      	mov	r2, r6
 8009726:	463b      	mov	r3, r7
 8009728:	f7f7 f9d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800972c:	b910      	cbnz	r0, 8009734 <_dtoa_r+0x184>
 800972e:	9b00      	ldr	r3, [sp, #0]
 8009730:	3b01      	subs	r3, #1
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	9b00      	ldr	r3, [sp, #0]
 8009736:	2b16      	cmp	r3, #22
 8009738:	d85a      	bhi.n	80097f0 <_dtoa_r+0x240>
 800973a:	9a00      	ldr	r2, [sp, #0]
 800973c:	4b57      	ldr	r3, [pc, #348]	; (800989c <_dtoa_r+0x2ec>)
 800973e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	ec51 0b19 	vmov	r0, r1, d9
 800974a:	f7f7 f9cf 	bl	8000aec <__aeabi_dcmplt>
 800974e:	2800      	cmp	r0, #0
 8009750:	d050      	beq.n	80097f4 <_dtoa_r+0x244>
 8009752:	9b00      	ldr	r3, [sp, #0]
 8009754:	3b01      	subs	r3, #1
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	2300      	movs	r3, #0
 800975a:	930b      	str	r3, [sp, #44]	; 0x2c
 800975c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800975e:	1b5d      	subs	r5, r3, r5
 8009760:	1e6b      	subs	r3, r5, #1
 8009762:	9305      	str	r3, [sp, #20]
 8009764:	bf45      	ittet	mi
 8009766:	f1c5 0301 	rsbmi	r3, r5, #1
 800976a:	9304      	strmi	r3, [sp, #16]
 800976c:	2300      	movpl	r3, #0
 800976e:	2300      	movmi	r3, #0
 8009770:	bf4c      	ite	mi
 8009772:	9305      	strmi	r3, [sp, #20]
 8009774:	9304      	strpl	r3, [sp, #16]
 8009776:	9b00      	ldr	r3, [sp, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	db3d      	blt.n	80097f8 <_dtoa_r+0x248>
 800977c:	9b05      	ldr	r3, [sp, #20]
 800977e:	9a00      	ldr	r2, [sp, #0]
 8009780:	920a      	str	r2, [sp, #40]	; 0x28
 8009782:	4413      	add	r3, r2
 8009784:	9305      	str	r3, [sp, #20]
 8009786:	2300      	movs	r3, #0
 8009788:	9307      	str	r3, [sp, #28]
 800978a:	9b06      	ldr	r3, [sp, #24]
 800978c:	2b09      	cmp	r3, #9
 800978e:	f200 8089 	bhi.w	80098a4 <_dtoa_r+0x2f4>
 8009792:	2b05      	cmp	r3, #5
 8009794:	bfc4      	itt	gt
 8009796:	3b04      	subgt	r3, #4
 8009798:	9306      	strgt	r3, [sp, #24]
 800979a:	9b06      	ldr	r3, [sp, #24]
 800979c:	f1a3 0302 	sub.w	r3, r3, #2
 80097a0:	bfcc      	ite	gt
 80097a2:	2500      	movgt	r5, #0
 80097a4:	2501      	movle	r5, #1
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	f200 8087 	bhi.w	80098ba <_dtoa_r+0x30a>
 80097ac:	e8df f003 	tbb	[pc, r3]
 80097b0:	59383a2d 	.word	0x59383a2d
 80097b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80097b8:	441d      	add	r5, r3
 80097ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097be:	2b20      	cmp	r3, #32
 80097c0:	bfc1      	itttt	gt
 80097c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80097ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80097ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80097d2:	bfda      	itte	le
 80097d4:	f1c3 0320 	rsble	r3, r3, #32
 80097d8:	fa06 f003 	lslle.w	r0, r6, r3
 80097dc:	4318      	orrgt	r0, r3
 80097de:	f7f6 fe99 	bl	8000514 <__aeabi_ui2d>
 80097e2:	2301      	movs	r3, #1
 80097e4:	4606      	mov	r6, r0
 80097e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80097ea:	3d01      	subs	r5, #1
 80097ec:	930e      	str	r3, [sp, #56]	; 0x38
 80097ee:	e76a      	b.n	80096c6 <_dtoa_r+0x116>
 80097f0:	2301      	movs	r3, #1
 80097f2:	e7b2      	b.n	800975a <_dtoa_r+0x1aa>
 80097f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80097f6:	e7b1      	b.n	800975c <_dtoa_r+0x1ac>
 80097f8:	9b04      	ldr	r3, [sp, #16]
 80097fa:	9a00      	ldr	r2, [sp, #0]
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	4253      	negs	r3, r2
 8009802:	9307      	str	r3, [sp, #28]
 8009804:	2300      	movs	r3, #0
 8009806:	930a      	str	r3, [sp, #40]	; 0x28
 8009808:	e7bf      	b.n	800978a <_dtoa_r+0x1da>
 800980a:	2300      	movs	r3, #0
 800980c:	9308      	str	r3, [sp, #32]
 800980e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009810:	2b00      	cmp	r3, #0
 8009812:	dc55      	bgt.n	80098c0 <_dtoa_r+0x310>
 8009814:	2301      	movs	r3, #1
 8009816:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800981a:	461a      	mov	r2, r3
 800981c:	9209      	str	r2, [sp, #36]	; 0x24
 800981e:	e00c      	b.n	800983a <_dtoa_r+0x28a>
 8009820:	2301      	movs	r3, #1
 8009822:	e7f3      	b.n	800980c <_dtoa_r+0x25c>
 8009824:	2300      	movs	r3, #0
 8009826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009828:	9308      	str	r3, [sp, #32]
 800982a:	9b00      	ldr	r3, [sp, #0]
 800982c:	4413      	add	r3, r2
 800982e:	9302      	str	r3, [sp, #8]
 8009830:	3301      	adds	r3, #1
 8009832:	2b01      	cmp	r3, #1
 8009834:	9303      	str	r3, [sp, #12]
 8009836:	bfb8      	it	lt
 8009838:	2301      	movlt	r3, #1
 800983a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800983c:	2200      	movs	r2, #0
 800983e:	6042      	str	r2, [r0, #4]
 8009840:	2204      	movs	r2, #4
 8009842:	f102 0614 	add.w	r6, r2, #20
 8009846:	429e      	cmp	r6, r3
 8009848:	6841      	ldr	r1, [r0, #4]
 800984a:	d93d      	bls.n	80098c8 <_dtoa_r+0x318>
 800984c:	4620      	mov	r0, r4
 800984e:	f001 fa63 	bl	800ad18 <_Balloc>
 8009852:	9001      	str	r0, [sp, #4]
 8009854:	2800      	cmp	r0, #0
 8009856:	d13b      	bne.n	80098d0 <_dtoa_r+0x320>
 8009858:	4b11      	ldr	r3, [pc, #68]	; (80098a0 <_dtoa_r+0x2f0>)
 800985a:	4602      	mov	r2, r0
 800985c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009860:	e6c0      	b.n	80095e4 <_dtoa_r+0x34>
 8009862:	2301      	movs	r3, #1
 8009864:	e7df      	b.n	8009826 <_dtoa_r+0x276>
 8009866:	bf00      	nop
 8009868:	636f4361 	.word	0x636f4361
 800986c:	3fd287a7 	.word	0x3fd287a7
 8009870:	8b60c8b3 	.word	0x8b60c8b3
 8009874:	3fc68a28 	.word	0x3fc68a28
 8009878:	509f79fb 	.word	0x509f79fb
 800987c:	3fd34413 	.word	0x3fd34413
 8009880:	0800d5d6 	.word	0x0800d5d6
 8009884:	0800d5ed 	.word	0x0800d5ed
 8009888:	7ff00000 	.word	0x7ff00000
 800988c:	0800d5d2 	.word	0x0800d5d2
 8009890:	0800d5c9 	.word	0x0800d5c9
 8009894:	0800d44a 	.word	0x0800d44a
 8009898:	3ff80000 	.word	0x3ff80000
 800989c:	0800d7c0 	.word	0x0800d7c0
 80098a0:	0800d648 	.word	0x0800d648
 80098a4:	2501      	movs	r5, #1
 80098a6:	2300      	movs	r3, #0
 80098a8:	9306      	str	r3, [sp, #24]
 80098aa:	9508      	str	r5, [sp, #32]
 80098ac:	f04f 33ff 	mov.w	r3, #4294967295
 80098b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098b4:	2200      	movs	r2, #0
 80098b6:	2312      	movs	r3, #18
 80098b8:	e7b0      	b.n	800981c <_dtoa_r+0x26c>
 80098ba:	2301      	movs	r3, #1
 80098bc:	9308      	str	r3, [sp, #32]
 80098be:	e7f5      	b.n	80098ac <_dtoa_r+0x2fc>
 80098c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098c6:	e7b8      	b.n	800983a <_dtoa_r+0x28a>
 80098c8:	3101      	adds	r1, #1
 80098ca:	6041      	str	r1, [r0, #4]
 80098cc:	0052      	lsls	r2, r2, #1
 80098ce:	e7b8      	b.n	8009842 <_dtoa_r+0x292>
 80098d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098d2:	9a01      	ldr	r2, [sp, #4]
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	2b0e      	cmp	r3, #14
 80098da:	f200 809d 	bhi.w	8009a18 <_dtoa_r+0x468>
 80098de:	2d00      	cmp	r5, #0
 80098e0:	f000 809a 	beq.w	8009a18 <_dtoa_r+0x468>
 80098e4:	9b00      	ldr	r3, [sp, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	dd32      	ble.n	8009950 <_dtoa_r+0x3a0>
 80098ea:	4ab7      	ldr	r2, [pc, #732]	; (8009bc8 <_dtoa_r+0x618>)
 80098ec:	f003 030f 	and.w	r3, r3, #15
 80098f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098f8:	9b00      	ldr	r3, [sp, #0]
 80098fa:	05d8      	lsls	r0, r3, #23
 80098fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009900:	d516      	bpl.n	8009930 <_dtoa_r+0x380>
 8009902:	4bb2      	ldr	r3, [pc, #712]	; (8009bcc <_dtoa_r+0x61c>)
 8009904:	ec51 0b19 	vmov	r0, r1, d9
 8009908:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800990c:	f7f6 ffa6 	bl	800085c <__aeabi_ddiv>
 8009910:	f007 070f 	and.w	r7, r7, #15
 8009914:	4682      	mov	sl, r0
 8009916:	468b      	mov	fp, r1
 8009918:	2503      	movs	r5, #3
 800991a:	4eac      	ldr	r6, [pc, #688]	; (8009bcc <_dtoa_r+0x61c>)
 800991c:	b957      	cbnz	r7, 8009934 <_dtoa_r+0x384>
 800991e:	4642      	mov	r2, r8
 8009920:	464b      	mov	r3, r9
 8009922:	4650      	mov	r0, sl
 8009924:	4659      	mov	r1, fp
 8009926:	f7f6 ff99 	bl	800085c <__aeabi_ddiv>
 800992a:	4682      	mov	sl, r0
 800992c:	468b      	mov	fp, r1
 800992e:	e028      	b.n	8009982 <_dtoa_r+0x3d2>
 8009930:	2502      	movs	r5, #2
 8009932:	e7f2      	b.n	800991a <_dtoa_r+0x36a>
 8009934:	07f9      	lsls	r1, r7, #31
 8009936:	d508      	bpl.n	800994a <_dtoa_r+0x39a>
 8009938:	4640      	mov	r0, r8
 800993a:	4649      	mov	r1, r9
 800993c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009940:	f7f6 fe62 	bl	8000608 <__aeabi_dmul>
 8009944:	3501      	adds	r5, #1
 8009946:	4680      	mov	r8, r0
 8009948:	4689      	mov	r9, r1
 800994a:	107f      	asrs	r7, r7, #1
 800994c:	3608      	adds	r6, #8
 800994e:	e7e5      	b.n	800991c <_dtoa_r+0x36c>
 8009950:	f000 809b 	beq.w	8009a8a <_dtoa_r+0x4da>
 8009954:	9b00      	ldr	r3, [sp, #0]
 8009956:	4f9d      	ldr	r7, [pc, #628]	; (8009bcc <_dtoa_r+0x61c>)
 8009958:	425e      	negs	r6, r3
 800995a:	4b9b      	ldr	r3, [pc, #620]	; (8009bc8 <_dtoa_r+0x618>)
 800995c:	f006 020f 	and.w	r2, r6, #15
 8009960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	ec51 0b19 	vmov	r0, r1, d9
 800996c:	f7f6 fe4c 	bl	8000608 <__aeabi_dmul>
 8009970:	1136      	asrs	r6, r6, #4
 8009972:	4682      	mov	sl, r0
 8009974:	468b      	mov	fp, r1
 8009976:	2300      	movs	r3, #0
 8009978:	2502      	movs	r5, #2
 800997a:	2e00      	cmp	r6, #0
 800997c:	d17a      	bne.n	8009a74 <_dtoa_r+0x4c4>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1d3      	bne.n	800992a <_dtoa_r+0x37a>
 8009982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 8082 	beq.w	8009a8e <_dtoa_r+0x4de>
 800998a:	4b91      	ldr	r3, [pc, #580]	; (8009bd0 <_dtoa_r+0x620>)
 800998c:	2200      	movs	r2, #0
 800998e:	4650      	mov	r0, sl
 8009990:	4659      	mov	r1, fp
 8009992:	f7f7 f8ab 	bl	8000aec <__aeabi_dcmplt>
 8009996:	2800      	cmp	r0, #0
 8009998:	d079      	beq.n	8009a8e <_dtoa_r+0x4de>
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d076      	beq.n	8009a8e <_dtoa_r+0x4de>
 80099a0:	9b02      	ldr	r3, [sp, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dd36      	ble.n	8009a14 <_dtoa_r+0x464>
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	4650      	mov	r0, sl
 80099aa:	4659      	mov	r1, fp
 80099ac:	1e5f      	subs	r7, r3, #1
 80099ae:	2200      	movs	r2, #0
 80099b0:	4b88      	ldr	r3, [pc, #544]	; (8009bd4 <_dtoa_r+0x624>)
 80099b2:	f7f6 fe29 	bl	8000608 <__aeabi_dmul>
 80099b6:	9e02      	ldr	r6, [sp, #8]
 80099b8:	4682      	mov	sl, r0
 80099ba:	468b      	mov	fp, r1
 80099bc:	3501      	adds	r5, #1
 80099be:	4628      	mov	r0, r5
 80099c0:	f7f6 fdb8 	bl	8000534 <__aeabi_i2d>
 80099c4:	4652      	mov	r2, sl
 80099c6:	465b      	mov	r3, fp
 80099c8:	f7f6 fe1e 	bl	8000608 <__aeabi_dmul>
 80099cc:	4b82      	ldr	r3, [pc, #520]	; (8009bd8 <_dtoa_r+0x628>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	f7f6 fc64 	bl	800029c <__adddf3>
 80099d4:	46d0      	mov	r8, sl
 80099d6:	46d9      	mov	r9, fp
 80099d8:	4682      	mov	sl, r0
 80099da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80099de:	2e00      	cmp	r6, #0
 80099e0:	d158      	bne.n	8009a94 <_dtoa_r+0x4e4>
 80099e2:	4b7e      	ldr	r3, [pc, #504]	; (8009bdc <_dtoa_r+0x62c>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	4640      	mov	r0, r8
 80099e8:	4649      	mov	r1, r9
 80099ea:	f7f6 fc55 	bl	8000298 <__aeabi_dsub>
 80099ee:	4652      	mov	r2, sl
 80099f0:	465b      	mov	r3, fp
 80099f2:	4680      	mov	r8, r0
 80099f4:	4689      	mov	r9, r1
 80099f6:	f7f7 f897 	bl	8000b28 <__aeabi_dcmpgt>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	f040 8295 	bne.w	8009f2a <_dtoa_r+0x97a>
 8009a00:	4652      	mov	r2, sl
 8009a02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009a06:	4640      	mov	r0, r8
 8009a08:	4649      	mov	r1, r9
 8009a0a:	f7f7 f86f 	bl	8000aec <__aeabi_dcmplt>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f040 8289 	bne.w	8009f26 <_dtoa_r+0x976>
 8009a14:	ec5b ab19 	vmov	sl, fp, d9
 8009a18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f2c0 8148 	blt.w	8009cb0 <_dtoa_r+0x700>
 8009a20:	9a00      	ldr	r2, [sp, #0]
 8009a22:	2a0e      	cmp	r2, #14
 8009a24:	f300 8144 	bgt.w	8009cb0 <_dtoa_r+0x700>
 8009a28:	4b67      	ldr	r3, [pc, #412]	; (8009bc8 <_dtoa_r+0x618>)
 8009a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f280 80d5 	bge.w	8009be4 <_dtoa_r+0x634>
 8009a3a:	9b03      	ldr	r3, [sp, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f300 80d1 	bgt.w	8009be4 <_dtoa_r+0x634>
 8009a42:	f040 826f 	bne.w	8009f24 <_dtoa_r+0x974>
 8009a46:	4b65      	ldr	r3, [pc, #404]	; (8009bdc <_dtoa_r+0x62c>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	f7f6 fddb 	bl	8000608 <__aeabi_dmul>
 8009a52:	4652      	mov	r2, sl
 8009a54:	465b      	mov	r3, fp
 8009a56:	f7f7 f85d 	bl	8000b14 <__aeabi_dcmpge>
 8009a5a:	9e03      	ldr	r6, [sp, #12]
 8009a5c:	4637      	mov	r7, r6
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	f040 8245 	bne.w	8009eee <_dtoa_r+0x93e>
 8009a64:	9d01      	ldr	r5, [sp, #4]
 8009a66:	2331      	movs	r3, #49	; 0x31
 8009a68:	f805 3b01 	strb.w	r3, [r5], #1
 8009a6c:	9b00      	ldr	r3, [sp, #0]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	e240      	b.n	8009ef6 <_dtoa_r+0x946>
 8009a74:	07f2      	lsls	r2, r6, #31
 8009a76:	d505      	bpl.n	8009a84 <_dtoa_r+0x4d4>
 8009a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7c:	f7f6 fdc4 	bl	8000608 <__aeabi_dmul>
 8009a80:	3501      	adds	r5, #1
 8009a82:	2301      	movs	r3, #1
 8009a84:	1076      	asrs	r6, r6, #1
 8009a86:	3708      	adds	r7, #8
 8009a88:	e777      	b.n	800997a <_dtoa_r+0x3ca>
 8009a8a:	2502      	movs	r5, #2
 8009a8c:	e779      	b.n	8009982 <_dtoa_r+0x3d2>
 8009a8e:	9f00      	ldr	r7, [sp, #0]
 8009a90:	9e03      	ldr	r6, [sp, #12]
 8009a92:	e794      	b.n	80099be <_dtoa_r+0x40e>
 8009a94:	9901      	ldr	r1, [sp, #4]
 8009a96:	4b4c      	ldr	r3, [pc, #304]	; (8009bc8 <_dtoa_r+0x618>)
 8009a98:	4431      	add	r1, r6
 8009a9a:	910d      	str	r1, [sp, #52]	; 0x34
 8009a9c:	9908      	ldr	r1, [sp, #32]
 8009a9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009aa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009aa6:	2900      	cmp	r1, #0
 8009aa8:	d043      	beq.n	8009b32 <_dtoa_r+0x582>
 8009aaa:	494d      	ldr	r1, [pc, #308]	; (8009be0 <_dtoa_r+0x630>)
 8009aac:	2000      	movs	r0, #0
 8009aae:	f7f6 fed5 	bl	800085c <__aeabi_ddiv>
 8009ab2:	4652      	mov	r2, sl
 8009ab4:	465b      	mov	r3, fp
 8009ab6:	f7f6 fbef 	bl	8000298 <__aeabi_dsub>
 8009aba:	9d01      	ldr	r5, [sp, #4]
 8009abc:	4682      	mov	sl, r0
 8009abe:	468b      	mov	fp, r1
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	4640      	mov	r0, r8
 8009ac4:	f7f7 f850 	bl	8000b68 <__aeabi_d2iz>
 8009ac8:	4606      	mov	r6, r0
 8009aca:	f7f6 fd33 	bl	8000534 <__aeabi_i2d>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	4649      	mov	r1, r9
 8009ad6:	f7f6 fbdf 	bl	8000298 <__aeabi_dsub>
 8009ada:	3630      	adds	r6, #48	; 0x30
 8009adc:	f805 6b01 	strb.w	r6, [r5], #1
 8009ae0:	4652      	mov	r2, sl
 8009ae2:	465b      	mov	r3, fp
 8009ae4:	4680      	mov	r8, r0
 8009ae6:	4689      	mov	r9, r1
 8009ae8:	f7f7 f800 	bl	8000aec <__aeabi_dcmplt>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d163      	bne.n	8009bb8 <_dtoa_r+0x608>
 8009af0:	4642      	mov	r2, r8
 8009af2:	464b      	mov	r3, r9
 8009af4:	4936      	ldr	r1, [pc, #216]	; (8009bd0 <_dtoa_r+0x620>)
 8009af6:	2000      	movs	r0, #0
 8009af8:	f7f6 fbce 	bl	8000298 <__aeabi_dsub>
 8009afc:	4652      	mov	r2, sl
 8009afe:	465b      	mov	r3, fp
 8009b00:	f7f6 fff4 	bl	8000aec <__aeabi_dcmplt>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	f040 80b5 	bne.w	8009c74 <_dtoa_r+0x6c4>
 8009b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b0c:	429d      	cmp	r5, r3
 8009b0e:	d081      	beq.n	8009a14 <_dtoa_r+0x464>
 8009b10:	4b30      	ldr	r3, [pc, #192]	; (8009bd4 <_dtoa_r+0x624>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	4650      	mov	r0, sl
 8009b16:	4659      	mov	r1, fp
 8009b18:	f7f6 fd76 	bl	8000608 <__aeabi_dmul>
 8009b1c:	4b2d      	ldr	r3, [pc, #180]	; (8009bd4 <_dtoa_r+0x624>)
 8009b1e:	4682      	mov	sl, r0
 8009b20:	468b      	mov	fp, r1
 8009b22:	4640      	mov	r0, r8
 8009b24:	4649      	mov	r1, r9
 8009b26:	2200      	movs	r2, #0
 8009b28:	f7f6 fd6e 	bl	8000608 <__aeabi_dmul>
 8009b2c:	4680      	mov	r8, r0
 8009b2e:	4689      	mov	r9, r1
 8009b30:	e7c6      	b.n	8009ac0 <_dtoa_r+0x510>
 8009b32:	4650      	mov	r0, sl
 8009b34:	4659      	mov	r1, fp
 8009b36:	f7f6 fd67 	bl	8000608 <__aeabi_dmul>
 8009b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b3c:	9d01      	ldr	r5, [sp, #4]
 8009b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b40:	4682      	mov	sl, r0
 8009b42:	468b      	mov	fp, r1
 8009b44:	4649      	mov	r1, r9
 8009b46:	4640      	mov	r0, r8
 8009b48:	f7f7 f80e 	bl	8000b68 <__aeabi_d2iz>
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	f7f6 fcf1 	bl	8000534 <__aeabi_i2d>
 8009b52:	3630      	adds	r6, #48	; 0x30
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4640      	mov	r0, r8
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	f7f6 fb9c 	bl	8000298 <__aeabi_dsub>
 8009b60:	f805 6b01 	strb.w	r6, [r5], #1
 8009b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b66:	429d      	cmp	r5, r3
 8009b68:	4680      	mov	r8, r0
 8009b6a:	4689      	mov	r9, r1
 8009b6c:	f04f 0200 	mov.w	r2, #0
 8009b70:	d124      	bne.n	8009bbc <_dtoa_r+0x60c>
 8009b72:	4b1b      	ldr	r3, [pc, #108]	; (8009be0 <_dtoa_r+0x630>)
 8009b74:	4650      	mov	r0, sl
 8009b76:	4659      	mov	r1, fp
 8009b78:	f7f6 fb90 	bl	800029c <__adddf3>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	f7f6 ffd0 	bl	8000b28 <__aeabi_dcmpgt>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d173      	bne.n	8009c74 <_dtoa_r+0x6c4>
 8009b8c:	4652      	mov	r2, sl
 8009b8e:	465b      	mov	r3, fp
 8009b90:	4913      	ldr	r1, [pc, #76]	; (8009be0 <_dtoa_r+0x630>)
 8009b92:	2000      	movs	r0, #0
 8009b94:	f7f6 fb80 	bl	8000298 <__aeabi_dsub>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	f7f6 ffa4 	bl	8000aec <__aeabi_dcmplt>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	f43f af35 	beq.w	8009a14 <_dtoa_r+0x464>
 8009baa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bac:	1e6b      	subs	r3, r5, #1
 8009bae:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bb4:	2b30      	cmp	r3, #48	; 0x30
 8009bb6:	d0f8      	beq.n	8009baa <_dtoa_r+0x5fa>
 8009bb8:	9700      	str	r7, [sp, #0]
 8009bba:	e049      	b.n	8009c50 <_dtoa_r+0x6a0>
 8009bbc:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <_dtoa_r+0x624>)
 8009bbe:	f7f6 fd23 	bl	8000608 <__aeabi_dmul>
 8009bc2:	4680      	mov	r8, r0
 8009bc4:	4689      	mov	r9, r1
 8009bc6:	e7bd      	b.n	8009b44 <_dtoa_r+0x594>
 8009bc8:	0800d7c0 	.word	0x0800d7c0
 8009bcc:	0800d798 	.word	0x0800d798
 8009bd0:	3ff00000 	.word	0x3ff00000
 8009bd4:	40240000 	.word	0x40240000
 8009bd8:	401c0000 	.word	0x401c0000
 8009bdc:	40140000 	.word	0x40140000
 8009be0:	3fe00000 	.word	0x3fe00000
 8009be4:	9d01      	ldr	r5, [sp, #4]
 8009be6:	4656      	mov	r6, sl
 8009be8:	465f      	mov	r7, fp
 8009bea:	4642      	mov	r2, r8
 8009bec:	464b      	mov	r3, r9
 8009bee:	4630      	mov	r0, r6
 8009bf0:	4639      	mov	r1, r7
 8009bf2:	f7f6 fe33 	bl	800085c <__aeabi_ddiv>
 8009bf6:	f7f6 ffb7 	bl	8000b68 <__aeabi_d2iz>
 8009bfa:	4682      	mov	sl, r0
 8009bfc:	f7f6 fc9a 	bl	8000534 <__aeabi_i2d>
 8009c00:	4642      	mov	r2, r8
 8009c02:	464b      	mov	r3, r9
 8009c04:	f7f6 fd00 	bl	8000608 <__aeabi_dmul>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	4639      	mov	r1, r7
 8009c10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009c14:	f7f6 fb40 	bl	8000298 <__aeabi_dsub>
 8009c18:	f805 6b01 	strb.w	r6, [r5], #1
 8009c1c:	9e01      	ldr	r6, [sp, #4]
 8009c1e:	9f03      	ldr	r7, [sp, #12]
 8009c20:	1bae      	subs	r6, r5, r6
 8009c22:	42b7      	cmp	r7, r6
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	d135      	bne.n	8009c96 <_dtoa_r+0x6e6>
 8009c2a:	f7f6 fb37 	bl	800029c <__adddf3>
 8009c2e:	4642      	mov	r2, r8
 8009c30:	464b      	mov	r3, r9
 8009c32:	4606      	mov	r6, r0
 8009c34:	460f      	mov	r7, r1
 8009c36:	f7f6 ff77 	bl	8000b28 <__aeabi_dcmpgt>
 8009c3a:	b9d0      	cbnz	r0, 8009c72 <_dtoa_r+0x6c2>
 8009c3c:	4642      	mov	r2, r8
 8009c3e:	464b      	mov	r3, r9
 8009c40:	4630      	mov	r0, r6
 8009c42:	4639      	mov	r1, r7
 8009c44:	f7f6 ff48 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c48:	b110      	cbz	r0, 8009c50 <_dtoa_r+0x6a0>
 8009c4a:	f01a 0f01 	tst.w	sl, #1
 8009c4e:	d110      	bne.n	8009c72 <_dtoa_r+0x6c2>
 8009c50:	4620      	mov	r0, r4
 8009c52:	ee18 1a10 	vmov	r1, s16
 8009c56:	f001 f89f 	bl	800ad98 <_Bfree>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9800      	ldr	r0, [sp, #0]
 8009c5e:	702b      	strb	r3, [r5, #0]
 8009c60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c62:	3001      	adds	r0, #1
 8009c64:	6018      	str	r0, [r3, #0]
 8009c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f43f acf1 	beq.w	8009650 <_dtoa_r+0xa0>
 8009c6e:	601d      	str	r5, [r3, #0]
 8009c70:	e4ee      	b.n	8009650 <_dtoa_r+0xa0>
 8009c72:	9f00      	ldr	r7, [sp, #0]
 8009c74:	462b      	mov	r3, r5
 8009c76:	461d      	mov	r5, r3
 8009c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c7c:	2a39      	cmp	r2, #57	; 0x39
 8009c7e:	d106      	bne.n	8009c8e <_dtoa_r+0x6de>
 8009c80:	9a01      	ldr	r2, [sp, #4]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d1f7      	bne.n	8009c76 <_dtoa_r+0x6c6>
 8009c86:	9901      	ldr	r1, [sp, #4]
 8009c88:	2230      	movs	r2, #48	; 0x30
 8009c8a:	3701      	adds	r7, #1
 8009c8c:	700a      	strb	r2, [r1, #0]
 8009c8e:	781a      	ldrb	r2, [r3, #0]
 8009c90:	3201      	adds	r2, #1
 8009c92:	701a      	strb	r2, [r3, #0]
 8009c94:	e790      	b.n	8009bb8 <_dtoa_r+0x608>
 8009c96:	4ba6      	ldr	r3, [pc, #664]	; (8009f30 <_dtoa_r+0x980>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f7f6 fcb5 	bl	8000608 <__aeabi_dmul>
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	460f      	mov	r7, r1
 8009ca6:	f7f6 ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d09d      	beq.n	8009bea <_dtoa_r+0x63a>
 8009cae:	e7cf      	b.n	8009c50 <_dtoa_r+0x6a0>
 8009cb0:	9a08      	ldr	r2, [sp, #32]
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	f000 80d7 	beq.w	8009e66 <_dtoa_r+0x8b6>
 8009cb8:	9a06      	ldr	r2, [sp, #24]
 8009cba:	2a01      	cmp	r2, #1
 8009cbc:	f300 80ba 	bgt.w	8009e34 <_dtoa_r+0x884>
 8009cc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cc2:	2a00      	cmp	r2, #0
 8009cc4:	f000 80b2 	beq.w	8009e2c <_dtoa_r+0x87c>
 8009cc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ccc:	9e07      	ldr	r6, [sp, #28]
 8009cce:	9d04      	ldr	r5, [sp, #16]
 8009cd0:	9a04      	ldr	r2, [sp, #16]
 8009cd2:	441a      	add	r2, r3
 8009cd4:	9204      	str	r2, [sp, #16]
 8009cd6:	9a05      	ldr	r2, [sp, #20]
 8009cd8:	2101      	movs	r1, #1
 8009cda:	441a      	add	r2, r3
 8009cdc:	4620      	mov	r0, r4
 8009cde:	9205      	str	r2, [sp, #20]
 8009ce0:	f001 f95c 	bl	800af9c <__i2b>
 8009ce4:	4607      	mov	r7, r0
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	dd0c      	ble.n	8009d04 <_dtoa_r+0x754>
 8009cea:	9b05      	ldr	r3, [sp, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dd09      	ble.n	8009d04 <_dtoa_r+0x754>
 8009cf0:	42ab      	cmp	r3, r5
 8009cf2:	9a04      	ldr	r2, [sp, #16]
 8009cf4:	bfa8      	it	ge
 8009cf6:	462b      	movge	r3, r5
 8009cf8:	1ad2      	subs	r2, r2, r3
 8009cfa:	9204      	str	r2, [sp, #16]
 8009cfc:	9a05      	ldr	r2, [sp, #20]
 8009cfe:	1aed      	subs	r5, r5, r3
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	9305      	str	r3, [sp, #20]
 8009d04:	9b07      	ldr	r3, [sp, #28]
 8009d06:	b31b      	cbz	r3, 8009d50 <_dtoa_r+0x7a0>
 8009d08:	9b08      	ldr	r3, [sp, #32]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 80af 	beq.w	8009e6e <_dtoa_r+0x8be>
 8009d10:	2e00      	cmp	r6, #0
 8009d12:	dd13      	ble.n	8009d3c <_dtoa_r+0x78c>
 8009d14:	4639      	mov	r1, r7
 8009d16:	4632      	mov	r2, r6
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f001 f9ff 	bl	800b11c <__pow5mult>
 8009d1e:	ee18 2a10 	vmov	r2, s16
 8009d22:	4601      	mov	r1, r0
 8009d24:	4607      	mov	r7, r0
 8009d26:	4620      	mov	r0, r4
 8009d28:	f001 f94e 	bl	800afc8 <__multiply>
 8009d2c:	ee18 1a10 	vmov	r1, s16
 8009d30:	4680      	mov	r8, r0
 8009d32:	4620      	mov	r0, r4
 8009d34:	f001 f830 	bl	800ad98 <_Bfree>
 8009d38:	ee08 8a10 	vmov	s16, r8
 8009d3c:	9b07      	ldr	r3, [sp, #28]
 8009d3e:	1b9a      	subs	r2, r3, r6
 8009d40:	d006      	beq.n	8009d50 <_dtoa_r+0x7a0>
 8009d42:	ee18 1a10 	vmov	r1, s16
 8009d46:	4620      	mov	r0, r4
 8009d48:	f001 f9e8 	bl	800b11c <__pow5mult>
 8009d4c:	ee08 0a10 	vmov	s16, r0
 8009d50:	2101      	movs	r1, #1
 8009d52:	4620      	mov	r0, r4
 8009d54:	f001 f922 	bl	800af9c <__i2b>
 8009d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	f340 8088 	ble.w	8009e72 <_dtoa_r+0x8c2>
 8009d62:	461a      	mov	r2, r3
 8009d64:	4601      	mov	r1, r0
 8009d66:	4620      	mov	r0, r4
 8009d68:	f001 f9d8 	bl	800b11c <__pow5mult>
 8009d6c:	9b06      	ldr	r3, [sp, #24]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	4606      	mov	r6, r0
 8009d72:	f340 8081 	ble.w	8009e78 <_dtoa_r+0x8c8>
 8009d76:	f04f 0800 	mov.w	r8, #0
 8009d7a:	6933      	ldr	r3, [r6, #16]
 8009d7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d80:	6918      	ldr	r0, [r3, #16]
 8009d82:	f001 f8bb 	bl	800aefc <__hi0bits>
 8009d86:	f1c0 0020 	rsb	r0, r0, #32
 8009d8a:	9b05      	ldr	r3, [sp, #20]
 8009d8c:	4418      	add	r0, r3
 8009d8e:	f010 001f 	ands.w	r0, r0, #31
 8009d92:	f000 8092 	beq.w	8009eba <_dtoa_r+0x90a>
 8009d96:	f1c0 0320 	rsb	r3, r0, #32
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	f340 808a 	ble.w	8009eb4 <_dtoa_r+0x904>
 8009da0:	f1c0 001c 	rsb	r0, r0, #28
 8009da4:	9b04      	ldr	r3, [sp, #16]
 8009da6:	4403      	add	r3, r0
 8009da8:	9304      	str	r3, [sp, #16]
 8009daa:	9b05      	ldr	r3, [sp, #20]
 8009dac:	4403      	add	r3, r0
 8009dae:	4405      	add	r5, r0
 8009db0:	9305      	str	r3, [sp, #20]
 8009db2:	9b04      	ldr	r3, [sp, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	dd07      	ble.n	8009dc8 <_dtoa_r+0x818>
 8009db8:	ee18 1a10 	vmov	r1, s16
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f001 fa06 	bl	800b1d0 <__lshift>
 8009dc4:	ee08 0a10 	vmov	s16, r0
 8009dc8:	9b05      	ldr	r3, [sp, #20]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	dd05      	ble.n	8009dda <_dtoa_r+0x82a>
 8009dce:	4631      	mov	r1, r6
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f001 f9fc 	bl	800b1d0 <__lshift>
 8009dd8:	4606      	mov	r6, r0
 8009dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d06e      	beq.n	8009ebe <_dtoa_r+0x90e>
 8009de0:	ee18 0a10 	vmov	r0, s16
 8009de4:	4631      	mov	r1, r6
 8009de6:	f001 fa63 	bl	800b2b0 <__mcmp>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	da67      	bge.n	8009ebe <_dtoa_r+0x90e>
 8009dee:	9b00      	ldr	r3, [sp, #0]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	ee18 1a10 	vmov	r1, s16
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	220a      	movs	r2, #10
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f000 ffed 	bl	800addc <__multadd>
 8009e02:	9b08      	ldr	r3, [sp, #32]
 8009e04:	ee08 0a10 	vmov	s16, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 81b1 	beq.w	800a170 <_dtoa_r+0xbc0>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4639      	mov	r1, r7
 8009e12:	220a      	movs	r2, #10
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 ffe1 	bl	800addc <__multadd>
 8009e1a:	9b02      	ldr	r3, [sp, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	4607      	mov	r7, r0
 8009e20:	f300 808e 	bgt.w	8009f40 <_dtoa_r+0x990>
 8009e24:	9b06      	ldr	r3, [sp, #24]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	dc51      	bgt.n	8009ece <_dtoa_r+0x91e>
 8009e2a:	e089      	b.n	8009f40 <_dtoa_r+0x990>
 8009e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e32:	e74b      	b.n	8009ccc <_dtoa_r+0x71c>
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	1e5e      	subs	r6, r3, #1
 8009e38:	9b07      	ldr	r3, [sp, #28]
 8009e3a:	42b3      	cmp	r3, r6
 8009e3c:	bfbf      	itttt	lt
 8009e3e:	9b07      	ldrlt	r3, [sp, #28]
 8009e40:	9607      	strlt	r6, [sp, #28]
 8009e42:	1af2      	sublt	r2, r6, r3
 8009e44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e46:	bfb6      	itet	lt
 8009e48:	189b      	addlt	r3, r3, r2
 8009e4a:	1b9e      	subge	r6, r3, r6
 8009e4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	bfb8      	it	lt
 8009e52:	2600      	movlt	r6, #0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	bfb7      	itett	lt
 8009e58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009e5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009e60:	1a9d      	sublt	r5, r3, r2
 8009e62:	2300      	movlt	r3, #0
 8009e64:	e734      	b.n	8009cd0 <_dtoa_r+0x720>
 8009e66:	9e07      	ldr	r6, [sp, #28]
 8009e68:	9d04      	ldr	r5, [sp, #16]
 8009e6a:	9f08      	ldr	r7, [sp, #32]
 8009e6c:	e73b      	b.n	8009ce6 <_dtoa_r+0x736>
 8009e6e:	9a07      	ldr	r2, [sp, #28]
 8009e70:	e767      	b.n	8009d42 <_dtoa_r+0x792>
 8009e72:	9b06      	ldr	r3, [sp, #24]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	dc18      	bgt.n	8009eaa <_dtoa_r+0x8fa>
 8009e78:	f1ba 0f00 	cmp.w	sl, #0
 8009e7c:	d115      	bne.n	8009eaa <_dtoa_r+0x8fa>
 8009e7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e82:	b993      	cbnz	r3, 8009eaa <_dtoa_r+0x8fa>
 8009e84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e88:	0d1b      	lsrs	r3, r3, #20
 8009e8a:	051b      	lsls	r3, r3, #20
 8009e8c:	b183      	cbz	r3, 8009eb0 <_dtoa_r+0x900>
 8009e8e:	9b04      	ldr	r3, [sp, #16]
 8009e90:	3301      	adds	r3, #1
 8009e92:	9304      	str	r3, [sp, #16]
 8009e94:	9b05      	ldr	r3, [sp, #20]
 8009e96:	3301      	adds	r3, #1
 8009e98:	9305      	str	r3, [sp, #20]
 8009e9a:	f04f 0801 	mov.w	r8, #1
 8009e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f47f af6a 	bne.w	8009d7a <_dtoa_r+0x7ca>
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	e76f      	b.n	8009d8a <_dtoa_r+0x7da>
 8009eaa:	f04f 0800 	mov.w	r8, #0
 8009eae:	e7f6      	b.n	8009e9e <_dtoa_r+0x8ee>
 8009eb0:	4698      	mov	r8, r3
 8009eb2:	e7f4      	b.n	8009e9e <_dtoa_r+0x8ee>
 8009eb4:	f43f af7d 	beq.w	8009db2 <_dtoa_r+0x802>
 8009eb8:	4618      	mov	r0, r3
 8009eba:	301c      	adds	r0, #28
 8009ebc:	e772      	b.n	8009da4 <_dtoa_r+0x7f4>
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dc37      	bgt.n	8009f34 <_dtoa_r+0x984>
 8009ec4:	9b06      	ldr	r3, [sp, #24]
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	dd34      	ble.n	8009f34 <_dtoa_r+0x984>
 8009eca:	9b03      	ldr	r3, [sp, #12]
 8009ecc:	9302      	str	r3, [sp, #8]
 8009ece:	9b02      	ldr	r3, [sp, #8]
 8009ed0:	b96b      	cbnz	r3, 8009eee <_dtoa_r+0x93e>
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	2205      	movs	r2, #5
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 ff80 	bl	800addc <__multadd>
 8009edc:	4601      	mov	r1, r0
 8009ede:	4606      	mov	r6, r0
 8009ee0:	ee18 0a10 	vmov	r0, s16
 8009ee4:	f001 f9e4 	bl	800b2b0 <__mcmp>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	f73f adbb 	bgt.w	8009a64 <_dtoa_r+0x4b4>
 8009eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef0:	9d01      	ldr	r5, [sp, #4]
 8009ef2:	43db      	mvns	r3, r3
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	f04f 0800 	mov.w	r8, #0
 8009efa:	4631      	mov	r1, r6
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 ff4b 	bl	800ad98 <_Bfree>
 8009f02:	2f00      	cmp	r7, #0
 8009f04:	f43f aea4 	beq.w	8009c50 <_dtoa_r+0x6a0>
 8009f08:	f1b8 0f00 	cmp.w	r8, #0
 8009f0c:	d005      	beq.n	8009f1a <_dtoa_r+0x96a>
 8009f0e:	45b8      	cmp	r8, r7
 8009f10:	d003      	beq.n	8009f1a <_dtoa_r+0x96a>
 8009f12:	4641      	mov	r1, r8
 8009f14:	4620      	mov	r0, r4
 8009f16:	f000 ff3f 	bl	800ad98 <_Bfree>
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 ff3b 	bl	800ad98 <_Bfree>
 8009f22:	e695      	b.n	8009c50 <_dtoa_r+0x6a0>
 8009f24:	2600      	movs	r6, #0
 8009f26:	4637      	mov	r7, r6
 8009f28:	e7e1      	b.n	8009eee <_dtoa_r+0x93e>
 8009f2a:	9700      	str	r7, [sp, #0]
 8009f2c:	4637      	mov	r7, r6
 8009f2e:	e599      	b.n	8009a64 <_dtoa_r+0x4b4>
 8009f30:	40240000 	.word	0x40240000
 8009f34:	9b08      	ldr	r3, [sp, #32]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 80ca 	beq.w	800a0d0 <_dtoa_r+0xb20>
 8009f3c:	9b03      	ldr	r3, [sp, #12]
 8009f3e:	9302      	str	r3, [sp, #8]
 8009f40:	2d00      	cmp	r5, #0
 8009f42:	dd05      	ble.n	8009f50 <_dtoa_r+0x9a0>
 8009f44:	4639      	mov	r1, r7
 8009f46:	462a      	mov	r2, r5
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f001 f941 	bl	800b1d0 <__lshift>
 8009f4e:	4607      	mov	r7, r0
 8009f50:	f1b8 0f00 	cmp.w	r8, #0
 8009f54:	d05b      	beq.n	800a00e <_dtoa_r+0xa5e>
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 fedd 	bl	800ad18 <_Balloc>
 8009f5e:	4605      	mov	r5, r0
 8009f60:	b928      	cbnz	r0, 8009f6e <_dtoa_r+0x9be>
 8009f62:	4b87      	ldr	r3, [pc, #540]	; (800a180 <_dtoa_r+0xbd0>)
 8009f64:	4602      	mov	r2, r0
 8009f66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f6a:	f7ff bb3b 	b.w	80095e4 <_dtoa_r+0x34>
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	3202      	adds	r2, #2
 8009f72:	0092      	lsls	r2, r2, #2
 8009f74:	f107 010c 	add.w	r1, r7, #12
 8009f78:	300c      	adds	r0, #12
 8009f7a:	f7fd fb07 	bl	800758c <memcpy>
 8009f7e:	2201      	movs	r2, #1
 8009f80:	4629      	mov	r1, r5
 8009f82:	4620      	mov	r0, r4
 8009f84:	f001 f924 	bl	800b1d0 <__lshift>
 8009f88:	9b01      	ldr	r3, [sp, #4]
 8009f8a:	f103 0901 	add.w	r9, r3, #1
 8009f8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009f92:	4413      	add	r3, r2
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	f00a 0301 	and.w	r3, sl, #1
 8009f9a:	46b8      	mov	r8, r7
 8009f9c:	9304      	str	r3, [sp, #16]
 8009f9e:	4607      	mov	r7, r0
 8009fa0:	4631      	mov	r1, r6
 8009fa2:	ee18 0a10 	vmov	r0, s16
 8009fa6:	f7ff fa76 	bl	8009496 <quorem>
 8009faa:	4641      	mov	r1, r8
 8009fac:	9002      	str	r0, [sp, #8]
 8009fae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009fb2:	ee18 0a10 	vmov	r0, s16
 8009fb6:	f001 f97b 	bl	800b2b0 <__mcmp>
 8009fba:	463a      	mov	r2, r7
 8009fbc:	9003      	str	r0, [sp, #12]
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f001 f991 	bl	800b2e8 <__mdiff>
 8009fc6:	68c2      	ldr	r2, [r0, #12]
 8009fc8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009fcc:	4605      	mov	r5, r0
 8009fce:	bb02      	cbnz	r2, 800a012 <_dtoa_r+0xa62>
 8009fd0:	4601      	mov	r1, r0
 8009fd2:	ee18 0a10 	vmov	r0, s16
 8009fd6:	f001 f96b 	bl	800b2b0 <__mcmp>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4620      	mov	r0, r4
 8009fe0:	9207      	str	r2, [sp, #28]
 8009fe2:	f000 fed9 	bl	800ad98 <_Bfree>
 8009fe6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009fea:	ea43 0102 	orr.w	r1, r3, r2
 8009fee:	9b04      	ldr	r3, [sp, #16]
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	464d      	mov	r5, r9
 8009ff4:	d10f      	bne.n	800a016 <_dtoa_r+0xa66>
 8009ff6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ffa:	d02a      	beq.n	800a052 <_dtoa_r+0xaa2>
 8009ffc:	9b03      	ldr	r3, [sp, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	dd02      	ble.n	800a008 <_dtoa_r+0xa58>
 800a002:	9b02      	ldr	r3, [sp, #8]
 800a004:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a008:	f88b a000 	strb.w	sl, [fp]
 800a00c:	e775      	b.n	8009efa <_dtoa_r+0x94a>
 800a00e:	4638      	mov	r0, r7
 800a010:	e7ba      	b.n	8009f88 <_dtoa_r+0x9d8>
 800a012:	2201      	movs	r2, #1
 800a014:	e7e2      	b.n	8009fdc <_dtoa_r+0xa2c>
 800a016:	9b03      	ldr	r3, [sp, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	db04      	blt.n	800a026 <_dtoa_r+0xa76>
 800a01c:	9906      	ldr	r1, [sp, #24]
 800a01e:	430b      	orrs	r3, r1
 800a020:	9904      	ldr	r1, [sp, #16]
 800a022:	430b      	orrs	r3, r1
 800a024:	d122      	bne.n	800a06c <_dtoa_r+0xabc>
 800a026:	2a00      	cmp	r2, #0
 800a028:	ddee      	ble.n	800a008 <_dtoa_r+0xa58>
 800a02a:	ee18 1a10 	vmov	r1, s16
 800a02e:	2201      	movs	r2, #1
 800a030:	4620      	mov	r0, r4
 800a032:	f001 f8cd 	bl	800b1d0 <__lshift>
 800a036:	4631      	mov	r1, r6
 800a038:	ee08 0a10 	vmov	s16, r0
 800a03c:	f001 f938 	bl	800b2b0 <__mcmp>
 800a040:	2800      	cmp	r0, #0
 800a042:	dc03      	bgt.n	800a04c <_dtoa_r+0xa9c>
 800a044:	d1e0      	bne.n	800a008 <_dtoa_r+0xa58>
 800a046:	f01a 0f01 	tst.w	sl, #1
 800a04a:	d0dd      	beq.n	800a008 <_dtoa_r+0xa58>
 800a04c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a050:	d1d7      	bne.n	800a002 <_dtoa_r+0xa52>
 800a052:	2339      	movs	r3, #57	; 0x39
 800a054:	f88b 3000 	strb.w	r3, [fp]
 800a058:	462b      	mov	r3, r5
 800a05a:	461d      	mov	r5, r3
 800a05c:	3b01      	subs	r3, #1
 800a05e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a062:	2a39      	cmp	r2, #57	; 0x39
 800a064:	d071      	beq.n	800a14a <_dtoa_r+0xb9a>
 800a066:	3201      	adds	r2, #1
 800a068:	701a      	strb	r2, [r3, #0]
 800a06a:	e746      	b.n	8009efa <_dtoa_r+0x94a>
 800a06c:	2a00      	cmp	r2, #0
 800a06e:	dd07      	ble.n	800a080 <_dtoa_r+0xad0>
 800a070:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a074:	d0ed      	beq.n	800a052 <_dtoa_r+0xaa2>
 800a076:	f10a 0301 	add.w	r3, sl, #1
 800a07a:	f88b 3000 	strb.w	r3, [fp]
 800a07e:	e73c      	b.n	8009efa <_dtoa_r+0x94a>
 800a080:	9b05      	ldr	r3, [sp, #20]
 800a082:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a086:	4599      	cmp	r9, r3
 800a088:	d047      	beq.n	800a11a <_dtoa_r+0xb6a>
 800a08a:	ee18 1a10 	vmov	r1, s16
 800a08e:	2300      	movs	r3, #0
 800a090:	220a      	movs	r2, #10
 800a092:	4620      	mov	r0, r4
 800a094:	f000 fea2 	bl	800addc <__multadd>
 800a098:	45b8      	cmp	r8, r7
 800a09a:	ee08 0a10 	vmov	s16, r0
 800a09e:	f04f 0300 	mov.w	r3, #0
 800a0a2:	f04f 020a 	mov.w	r2, #10
 800a0a6:	4641      	mov	r1, r8
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	d106      	bne.n	800a0ba <_dtoa_r+0xb0a>
 800a0ac:	f000 fe96 	bl	800addc <__multadd>
 800a0b0:	4680      	mov	r8, r0
 800a0b2:	4607      	mov	r7, r0
 800a0b4:	f109 0901 	add.w	r9, r9, #1
 800a0b8:	e772      	b.n	8009fa0 <_dtoa_r+0x9f0>
 800a0ba:	f000 fe8f 	bl	800addc <__multadd>
 800a0be:	4639      	mov	r1, r7
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	220a      	movs	r2, #10
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 fe88 	bl	800addc <__multadd>
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	e7f1      	b.n	800a0b4 <_dtoa_r+0xb04>
 800a0d0:	9b03      	ldr	r3, [sp, #12]
 800a0d2:	9302      	str	r3, [sp, #8]
 800a0d4:	9d01      	ldr	r5, [sp, #4]
 800a0d6:	ee18 0a10 	vmov	r0, s16
 800a0da:	4631      	mov	r1, r6
 800a0dc:	f7ff f9db 	bl	8009496 <quorem>
 800a0e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a0e4:	9b01      	ldr	r3, [sp, #4]
 800a0e6:	f805 ab01 	strb.w	sl, [r5], #1
 800a0ea:	1aea      	subs	r2, r5, r3
 800a0ec:	9b02      	ldr	r3, [sp, #8]
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	dd09      	ble.n	800a106 <_dtoa_r+0xb56>
 800a0f2:	ee18 1a10 	vmov	r1, s16
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	220a      	movs	r2, #10
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f000 fe6e 	bl	800addc <__multadd>
 800a100:	ee08 0a10 	vmov	s16, r0
 800a104:	e7e7      	b.n	800a0d6 <_dtoa_r+0xb26>
 800a106:	9b02      	ldr	r3, [sp, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	bfc8      	it	gt
 800a10c:	461d      	movgt	r5, r3
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	bfd8      	it	le
 800a112:	2501      	movle	r5, #1
 800a114:	441d      	add	r5, r3
 800a116:	f04f 0800 	mov.w	r8, #0
 800a11a:	ee18 1a10 	vmov	r1, s16
 800a11e:	2201      	movs	r2, #1
 800a120:	4620      	mov	r0, r4
 800a122:	f001 f855 	bl	800b1d0 <__lshift>
 800a126:	4631      	mov	r1, r6
 800a128:	ee08 0a10 	vmov	s16, r0
 800a12c:	f001 f8c0 	bl	800b2b0 <__mcmp>
 800a130:	2800      	cmp	r0, #0
 800a132:	dc91      	bgt.n	800a058 <_dtoa_r+0xaa8>
 800a134:	d102      	bne.n	800a13c <_dtoa_r+0xb8c>
 800a136:	f01a 0f01 	tst.w	sl, #1
 800a13a:	d18d      	bne.n	800a058 <_dtoa_r+0xaa8>
 800a13c:	462b      	mov	r3, r5
 800a13e:	461d      	mov	r5, r3
 800a140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a144:	2a30      	cmp	r2, #48	; 0x30
 800a146:	d0fa      	beq.n	800a13e <_dtoa_r+0xb8e>
 800a148:	e6d7      	b.n	8009efa <_dtoa_r+0x94a>
 800a14a:	9a01      	ldr	r2, [sp, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d184      	bne.n	800a05a <_dtoa_r+0xaaa>
 800a150:	9b00      	ldr	r3, [sp, #0]
 800a152:	3301      	adds	r3, #1
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	2331      	movs	r3, #49	; 0x31
 800a158:	7013      	strb	r3, [r2, #0]
 800a15a:	e6ce      	b.n	8009efa <_dtoa_r+0x94a>
 800a15c:	4b09      	ldr	r3, [pc, #36]	; (800a184 <_dtoa_r+0xbd4>)
 800a15e:	f7ff ba95 	b.w	800968c <_dtoa_r+0xdc>
 800a162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a164:	2b00      	cmp	r3, #0
 800a166:	f47f aa6e 	bne.w	8009646 <_dtoa_r+0x96>
 800a16a:	4b07      	ldr	r3, [pc, #28]	; (800a188 <_dtoa_r+0xbd8>)
 800a16c:	f7ff ba8e 	b.w	800968c <_dtoa_r+0xdc>
 800a170:	9b02      	ldr	r3, [sp, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	dcae      	bgt.n	800a0d4 <_dtoa_r+0xb24>
 800a176:	9b06      	ldr	r3, [sp, #24]
 800a178:	2b02      	cmp	r3, #2
 800a17a:	f73f aea8 	bgt.w	8009ece <_dtoa_r+0x91e>
 800a17e:	e7a9      	b.n	800a0d4 <_dtoa_r+0xb24>
 800a180:	0800d648 	.word	0x0800d648
 800a184:	0800d449 	.word	0x0800d449
 800a188:	0800d5c9 	.word	0x0800d5c9

0800a18c <__sflush_r>:
 800a18c:	898a      	ldrh	r2, [r1, #12]
 800a18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a192:	4605      	mov	r5, r0
 800a194:	0710      	lsls	r0, r2, #28
 800a196:	460c      	mov	r4, r1
 800a198:	d458      	bmi.n	800a24c <__sflush_r+0xc0>
 800a19a:	684b      	ldr	r3, [r1, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	dc05      	bgt.n	800a1ac <__sflush_r+0x20>
 800a1a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	dc02      	bgt.n	800a1ac <__sflush_r+0x20>
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1ae:	2e00      	cmp	r6, #0
 800a1b0:	d0f9      	beq.n	800a1a6 <__sflush_r+0x1a>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1b8:	682f      	ldr	r7, [r5, #0]
 800a1ba:	602b      	str	r3, [r5, #0]
 800a1bc:	d032      	beq.n	800a224 <__sflush_r+0x98>
 800a1be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	075a      	lsls	r2, r3, #29
 800a1c4:	d505      	bpl.n	800a1d2 <__sflush_r+0x46>
 800a1c6:	6863      	ldr	r3, [r4, #4]
 800a1c8:	1ac0      	subs	r0, r0, r3
 800a1ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1cc:	b10b      	cbz	r3, 800a1d2 <__sflush_r+0x46>
 800a1ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1d0:	1ac0      	subs	r0, r0, r3
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1d8:	6a21      	ldr	r1, [r4, #32]
 800a1da:	4628      	mov	r0, r5
 800a1dc:	47b0      	blx	r6
 800a1de:	1c43      	adds	r3, r0, #1
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	d106      	bne.n	800a1f2 <__sflush_r+0x66>
 800a1e4:	6829      	ldr	r1, [r5, #0]
 800a1e6:	291d      	cmp	r1, #29
 800a1e8:	d82c      	bhi.n	800a244 <__sflush_r+0xb8>
 800a1ea:	4a2a      	ldr	r2, [pc, #168]	; (800a294 <__sflush_r+0x108>)
 800a1ec:	40ca      	lsrs	r2, r1
 800a1ee:	07d6      	lsls	r6, r2, #31
 800a1f0:	d528      	bpl.n	800a244 <__sflush_r+0xb8>
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	6062      	str	r2, [r4, #4]
 800a1f6:	04d9      	lsls	r1, r3, #19
 800a1f8:	6922      	ldr	r2, [r4, #16]
 800a1fa:	6022      	str	r2, [r4, #0]
 800a1fc:	d504      	bpl.n	800a208 <__sflush_r+0x7c>
 800a1fe:	1c42      	adds	r2, r0, #1
 800a200:	d101      	bne.n	800a206 <__sflush_r+0x7a>
 800a202:	682b      	ldr	r3, [r5, #0]
 800a204:	b903      	cbnz	r3, 800a208 <__sflush_r+0x7c>
 800a206:	6560      	str	r0, [r4, #84]	; 0x54
 800a208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a20a:	602f      	str	r7, [r5, #0]
 800a20c:	2900      	cmp	r1, #0
 800a20e:	d0ca      	beq.n	800a1a6 <__sflush_r+0x1a>
 800a210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a214:	4299      	cmp	r1, r3
 800a216:	d002      	beq.n	800a21e <__sflush_r+0x92>
 800a218:	4628      	mov	r0, r5
 800a21a:	f001 fa55 	bl	800b6c8 <_free_r>
 800a21e:	2000      	movs	r0, #0
 800a220:	6360      	str	r0, [r4, #52]	; 0x34
 800a222:	e7c1      	b.n	800a1a8 <__sflush_r+0x1c>
 800a224:	6a21      	ldr	r1, [r4, #32]
 800a226:	2301      	movs	r3, #1
 800a228:	4628      	mov	r0, r5
 800a22a:	47b0      	blx	r6
 800a22c:	1c41      	adds	r1, r0, #1
 800a22e:	d1c7      	bne.n	800a1c0 <__sflush_r+0x34>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0c4      	beq.n	800a1c0 <__sflush_r+0x34>
 800a236:	2b1d      	cmp	r3, #29
 800a238:	d001      	beq.n	800a23e <__sflush_r+0xb2>
 800a23a:	2b16      	cmp	r3, #22
 800a23c:	d101      	bne.n	800a242 <__sflush_r+0xb6>
 800a23e:	602f      	str	r7, [r5, #0]
 800a240:	e7b1      	b.n	800a1a6 <__sflush_r+0x1a>
 800a242:	89a3      	ldrh	r3, [r4, #12]
 800a244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	e7ad      	b.n	800a1a8 <__sflush_r+0x1c>
 800a24c:	690f      	ldr	r7, [r1, #16]
 800a24e:	2f00      	cmp	r7, #0
 800a250:	d0a9      	beq.n	800a1a6 <__sflush_r+0x1a>
 800a252:	0793      	lsls	r3, r2, #30
 800a254:	680e      	ldr	r6, [r1, #0]
 800a256:	bf08      	it	eq
 800a258:	694b      	ldreq	r3, [r1, #20]
 800a25a:	600f      	str	r7, [r1, #0]
 800a25c:	bf18      	it	ne
 800a25e:	2300      	movne	r3, #0
 800a260:	eba6 0807 	sub.w	r8, r6, r7
 800a264:	608b      	str	r3, [r1, #8]
 800a266:	f1b8 0f00 	cmp.w	r8, #0
 800a26a:	dd9c      	ble.n	800a1a6 <__sflush_r+0x1a>
 800a26c:	6a21      	ldr	r1, [r4, #32]
 800a26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a270:	4643      	mov	r3, r8
 800a272:	463a      	mov	r2, r7
 800a274:	4628      	mov	r0, r5
 800a276:	47b0      	blx	r6
 800a278:	2800      	cmp	r0, #0
 800a27a:	dc06      	bgt.n	800a28a <__sflush_r+0xfe>
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	e78e      	b.n	800a1a8 <__sflush_r+0x1c>
 800a28a:	4407      	add	r7, r0
 800a28c:	eba8 0800 	sub.w	r8, r8, r0
 800a290:	e7e9      	b.n	800a266 <__sflush_r+0xda>
 800a292:	bf00      	nop
 800a294:	20400001 	.word	0x20400001

0800a298 <_fflush_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	690b      	ldr	r3, [r1, #16]
 800a29c:	4605      	mov	r5, r0
 800a29e:	460c      	mov	r4, r1
 800a2a0:	b913      	cbnz	r3, 800a2a8 <_fflush_r+0x10>
 800a2a2:	2500      	movs	r5, #0
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	b118      	cbz	r0, 800a2b2 <_fflush_r+0x1a>
 800a2aa:	6983      	ldr	r3, [r0, #24]
 800a2ac:	b90b      	cbnz	r3, 800a2b2 <_fflush_r+0x1a>
 800a2ae:	f000 f887 	bl	800a3c0 <__sinit>
 800a2b2:	4b14      	ldr	r3, [pc, #80]	; (800a304 <_fflush_r+0x6c>)
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	d11b      	bne.n	800a2f0 <_fflush_r+0x58>
 800a2b8:	686c      	ldr	r4, [r5, #4]
 800a2ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d0ef      	beq.n	800a2a2 <_fflush_r+0xa>
 800a2c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2c4:	07d0      	lsls	r0, r2, #31
 800a2c6:	d404      	bmi.n	800a2d2 <_fflush_r+0x3a>
 800a2c8:	0599      	lsls	r1, r3, #22
 800a2ca:	d402      	bmi.n	800a2d2 <_fflush_r+0x3a>
 800a2cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ce:	f000 fc88 	bl	800abe2 <__retarget_lock_acquire_recursive>
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	f7ff ff59 	bl	800a18c <__sflush_r>
 800a2da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2dc:	07da      	lsls	r2, r3, #31
 800a2de:	4605      	mov	r5, r0
 800a2e0:	d4e0      	bmi.n	800a2a4 <_fflush_r+0xc>
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	059b      	lsls	r3, r3, #22
 800a2e6:	d4dd      	bmi.n	800a2a4 <_fflush_r+0xc>
 800a2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ea:	f000 fc7b 	bl	800abe4 <__retarget_lock_release_recursive>
 800a2ee:	e7d9      	b.n	800a2a4 <_fflush_r+0xc>
 800a2f0:	4b05      	ldr	r3, [pc, #20]	; (800a308 <_fflush_r+0x70>)
 800a2f2:	429c      	cmp	r4, r3
 800a2f4:	d101      	bne.n	800a2fa <_fflush_r+0x62>
 800a2f6:	68ac      	ldr	r4, [r5, #8]
 800a2f8:	e7df      	b.n	800a2ba <_fflush_r+0x22>
 800a2fa:	4b04      	ldr	r3, [pc, #16]	; (800a30c <_fflush_r+0x74>)
 800a2fc:	429c      	cmp	r4, r3
 800a2fe:	bf08      	it	eq
 800a300:	68ec      	ldreq	r4, [r5, #12]
 800a302:	e7da      	b.n	800a2ba <_fflush_r+0x22>
 800a304:	0800d67c 	.word	0x0800d67c
 800a308:	0800d69c 	.word	0x0800d69c
 800a30c:	0800d65c 	.word	0x0800d65c

0800a310 <std>:
 800a310:	2300      	movs	r3, #0
 800a312:	b510      	push	{r4, lr}
 800a314:	4604      	mov	r4, r0
 800a316:	e9c0 3300 	strd	r3, r3, [r0]
 800a31a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a31e:	6083      	str	r3, [r0, #8]
 800a320:	8181      	strh	r1, [r0, #12]
 800a322:	6643      	str	r3, [r0, #100]	; 0x64
 800a324:	81c2      	strh	r2, [r0, #14]
 800a326:	6183      	str	r3, [r0, #24]
 800a328:	4619      	mov	r1, r3
 800a32a:	2208      	movs	r2, #8
 800a32c:	305c      	adds	r0, #92	; 0x5c
 800a32e:	f7fd f93b 	bl	80075a8 <memset>
 800a332:	4b05      	ldr	r3, [pc, #20]	; (800a348 <std+0x38>)
 800a334:	6263      	str	r3, [r4, #36]	; 0x24
 800a336:	4b05      	ldr	r3, [pc, #20]	; (800a34c <std+0x3c>)
 800a338:	62a3      	str	r3, [r4, #40]	; 0x28
 800a33a:	4b05      	ldr	r3, [pc, #20]	; (800a350 <std+0x40>)
 800a33c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a33e:	4b05      	ldr	r3, [pc, #20]	; (800a354 <std+0x44>)
 800a340:	6224      	str	r4, [r4, #32]
 800a342:	6323      	str	r3, [r4, #48]	; 0x30
 800a344:	bd10      	pop	{r4, pc}
 800a346:	bf00      	nop
 800a348:	0800bc59 	.word	0x0800bc59
 800a34c:	0800bc7b 	.word	0x0800bc7b
 800a350:	0800bcb3 	.word	0x0800bcb3
 800a354:	0800bcd7 	.word	0x0800bcd7

0800a358 <_cleanup_r>:
 800a358:	4901      	ldr	r1, [pc, #4]	; (800a360 <_cleanup_r+0x8>)
 800a35a:	f000 b8af 	b.w	800a4bc <_fwalk_reent>
 800a35e:	bf00      	nop
 800a360:	0800a299 	.word	0x0800a299

0800a364 <__sfmoreglue>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	2268      	movs	r2, #104	; 0x68
 800a368:	1e4d      	subs	r5, r1, #1
 800a36a:	4355      	muls	r5, r2
 800a36c:	460e      	mov	r6, r1
 800a36e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a372:	f001 fa15 	bl	800b7a0 <_malloc_r>
 800a376:	4604      	mov	r4, r0
 800a378:	b140      	cbz	r0, 800a38c <__sfmoreglue+0x28>
 800a37a:	2100      	movs	r1, #0
 800a37c:	e9c0 1600 	strd	r1, r6, [r0]
 800a380:	300c      	adds	r0, #12
 800a382:	60a0      	str	r0, [r4, #8]
 800a384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a388:	f7fd f90e 	bl	80075a8 <memset>
 800a38c:	4620      	mov	r0, r4
 800a38e:	bd70      	pop	{r4, r5, r6, pc}

0800a390 <__sfp_lock_acquire>:
 800a390:	4801      	ldr	r0, [pc, #4]	; (800a398 <__sfp_lock_acquire+0x8>)
 800a392:	f000 bc26 	b.w	800abe2 <__retarget_lock_acquire_recursive>
 800a396:	bf00      	nop
 800a398:	20000481 	.word	0x20000481

0800a39c <__sfp_lock_release>:
 800a39c:	4801      	ldr	r0, [pc, #4]	; (800a3a4 <__sfp_lock_release+0x8>)
 800a39e:	f000 bc21 	b.w	800abe4 <__retarget_lock_release_recursive>
 800a3a2:	bf00      	nop
 800a3a4:	20000481 	.word	0x20000481

0800a3a8 <__sinit_lock_acquire>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <__sinit_lock_acquire+0x8>)
 800a3aa:	f000 bc1a 	b.w	800abe2 <__retarget_lock_acquire_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	20000482 	.word	0x20000482

0800a3b4 <__sinit_lock_release>:
 800a3b4:	4801      	ldr	r0, [pc, #4]	; (800a3bc <__sinit_lock_release+0x8>)
 800a3b6:	f000 bc15 	b.w	800abe4 <__retarget_lock_release_recursive>
 800a3ba:	bf00      	nop
 800a3bc:	20000482 	.word	0x20000482

0800a3c0 <__sinit>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	f7ff fff0 	bl	800a3a8 <__sinit_lock_acquire>
 800a3c8:	69a3      	ldr	r3, [r4, #24]
 800a3ca:	b11b      	cbz	r3, 800a3d4 <__sinit+0x14>
 800a3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d0:	f7ff bff0 	b.w	800a3b4 <__sinit_lock_release>
 800a3d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3d8:	6523      	str	r3, [r4, #80]	; 0x50
 800a3da:	4b13      	ldr	r3, [pc, #76]	; (800a428 <__sinit+0x68>)
 800a3dc:	4a13      	ldr	r2, [pc, #76]	; (800a42c <__sinit+0x6c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3e2:	42a3      	cmp	r3, r4
 800a3e4:	bf04      	itt	eq
 800a3e6:	2301      	moveq	r3, #1
 800a3e8:	61a3      	streq	r3, [r4, #24]
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 f820 	bl	800a430 <__sfp>
 800a3f0:	6060      	str	r0, [r4, #4]
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f000 f81c 	bl	800a430 <__sfp>
 800a3f8:	60a0      	str	r0, [r4, #8]
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 f818 	bl	800a430 <__sfp>
 800a400:	2200      	movs	r2, #0
 800a402:	60e0      	str	r0, [r4, #12]
 800a404:	2104      	movs	r1, #4
 800a406:	6860      	ldr	r0, [r4, #4]
 800a408:	f7ff ff82 	bl	800a310 <std>
 800a40c:	68a0      	ldr	r0, [r4, #8]
 800a40e:	2201      	movs	r2, #1
 800a410:	2109      	movs	r1, #9
 800a412:	f7ff ff7d 	bl	800a310 <std>
 800a416:	68e0      	ldr	r0, [r4, #12]
 800a418:	2202      	movs	r2, #2
 800a41a:	2112      	movs	r1, #18
 800a41c:	f7ff ff78 	bl	800a310 <std>
 800a420:	2301      	movs	r3, #1
 800a422:	61a3      	str	r3, [r4, #24]
 800a424:	e7d2      	b.n	800a3cc <__sinit+0xc>
 800a426:	bf00      	nop
 800a428:	0800d424 	.word	0x0800d424
 800a42c:	0800a359 	.word	0x0800a359

0800a430 <__sfp>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	4607      	mov	r7, r0
 800a434:	f7ff ffac 	bl	800a390 <__sfp_lock_acquire>
 800a438:	4b1e      	ldr	r3, [pc, #120]	; (800a4b4 <__sfp+0x84>)
 800a43a:	681e      	ldr	r6, [r3, #0]
 800a43c:	69b3      	ldr	r3, [r6, #24]
 800a43e:	b913      	cbnz	r3, 800a446 <__sfp+0x16>
 800a440:	4630      	mov	r0, r6
 800a442:	f7ff ffbd 	bl	800a3c0 <__sinit>
 800a446:	3648      	adds	r6, #72	; 0x48
 800a448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	d503      	bpl.n	800a458 <__sfp+0x28>
 800a450:	6833      	ldr	r3, [r6, #0]
 800a452:	b30b      	cbz	r3, 800a498 <__sfp+0x68>
 800a454:	6836      	ldr	r6, [r6, #0]
 800a456:	e7f7      	b.n	800a448 <__sfp+0x18>
 800a458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a45c:	b9d5      	cbnz	r5, 800a494 <__sfp+0x64>
 800a45e:	4b16      	ldr	r3, [pc, #88]	; (800a4b8 <__sfp+0x88>)
 800a460:	60e3      	str	r3, [r4, #12]
 800a462:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a466:	6665      	str	r5, [r4, #100]	; 0x64
 800a468:	f000 fbba 	bl	800abe0 <__retarget_lock_init_recursive>
 800a46c:	f7ff ff96 	bl	800a39c <__sfp_lock_release>
 800a470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a478:	6025      	str	r5, [r4, #0]
 800a47a:	61a5      	str	r5, [r4, #24]
 800a47c:	2208      	movs	r2, #8
 800a47e:	4629      	mov	r1, r5
 800a480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a484:	f7fd f890 	bl	80075a8 <memset>
 800a488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a48c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a490:	4620      	mov	r0, r4
 800a492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a494:	3468      	adds	r4, #104	; 0x68
 800a496:	e7d9      	b.n	800a44c <__sfp+0x1c>
 800a498:	2104      	movs	r1, #4
 800a49a:	4638      	mov	r0, r7
 800a49c:	f7ff ff62 	bl	800a364 <__sfmoreglue>
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	6030      	str	r0, [r6, #0]
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d1d5      	bne.n	800a454 <__sfp+0x24>
 800a4a8:	f7ff ff78 	bl	800a39c <__sfp_lock_release>
 800a4ac:	230c      	movs	r3, #12
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	e7ee      	b.n	800a490 <__sfp+0x60>
 800a4b2:	bf00      	nop
 800a4b4:	0800d424 	.word	0x0800d424
 800a4b8:	ffff0001 	.word	0xffff0001

0800a4bc <_fwalk_reent>:
 800a4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	4688      	mov	r8, r1
 800a4c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4c8:	2700      	movs	r7, #0
 800a4ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4ce:	f1b9 0901 	subs.w	r9, r9, #1
 800a4d2:	d505      	bpl.n	800a4e0 <_fwalk_reent+0x24>
 800a4d4:	6824      	ldr	r4, [r4, #0]
 800a4d6:	2c00      	cmp	r4, #0
 800a4d8:	d1f7      	bne.n	800a4ca <_fwalk_reent+0xe>
 800a4da:	4638      	mov	r0, r7
 800a4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4e0:	89ab      	ldrh	r3, [r5, #12]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d907      	bls.n	800a4f6 <_fwalk_reent+0x3a>
 800a4e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	d003      	beq.n	800a4f6 <_fwalk_reent+0x3a>
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	47c0      	blx	r8
 800a4f4:	4307      	orrs	r7, r0
 800a4f6:	3568      	adds	r5, #104	; 0x68
 800a4f8:	e7e9      	b.n	800a4ce <_fwalk_reent+0x12>

0800a4fa <rshift>:
 800a4fa:	6903      	ldr	r3, [r0, #16]
 800a4fc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a504:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a508:	f100 0414 	add.w	r4, r0, #20
 800a50c:	dd45      	ble.n	800a59a <rshift+0xa0>
 800a50e:	f011 011f 	ands.w	r1, r1, #31
 800a512:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a516:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a51a:	d10c      	bne.n	800a536 <rshift+0x3c>
 800a51c:	f100 0710 	add.w	r7, r0, #16
 800a520:	4629      	mov	r1, r5
 800a522:	42b1      	cmp	r1, r6
 800a524:	d334      	bcc.n	800a590 <rshift+0x96>
 800a526:	1a9b      	subs	r3, r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	1eea      	subs	r2, r5, #3
 800a52c:	4296      	cmp	r6, r2
 800a52e:	bf38      	it	cc
 800a530:	2300      	movcc	r3, #0
 800a532:	4423      	add	r3, r4
 800a534:	e015      	b.n	800a562 <rshift+0x68>
 800a536:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a53a:	f1c1 0820 	rsb	r8, r1, #32
 800a53e:	40cf      	lsrs	r7, r1
 800a540:	f105 0e04 	add.w	lr, r5, #4
 800a544:	46a1      	mov	r9, r4
 800a546:	4576      	cmp	r6, lr
 800a548:	46f4      	mov	ip, lr
 800a54a:	d815      	bhi.n	800a578 <rshift+0x7e>
 800a54c:	1a9a      	subs	r2, r3, r2
 800a54e:	0092      	lsls	r2, r2, #2
 800a550:	3a04      	subs	r2, #4
 800a552:	3501      	adds	r5, #1
 800a554:	42ae      	cmp	r6, r5
 800a556:	bf38      	it	cc
 800a558:	2200      	movcc	r2, #0
 800a55a:	18a3      	adds	r3, r4, r2
 800a55c:	50a7      	str	r7, [r4, r2]
 800a55e:	b107      	cbz	r7, 800a562 <rshift+0x68>
 800a560:	3304      	adds	r3, #4
 800a562:	1b1a      	subs	r2, r3, r4
 800a564:	42a3      	cmp	r3, r4
 800a566:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a56a:	bf08      	it	eq
 800a56c:	2300      	moveq	r3, #0
 800a56e:	6102      	str	r2, [r0, #16]
 800a570:	bf08      	it	eq
 800a572:	6143      	streq	r3, [r0, #20]
 800a574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a578:	f8dc c000 	ldr.w	ip, [ip]
 800a57c:	fa0c fc08 	lsl.w	ip, ip, r8
 800a580:	ea4c 0707 	orr.w	r7, ip, r7
 800a584:	f849 7b04 	str.w	r7, [r9], #4
 800a588:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a58c:	40cf      	lsrs	r7, r1
 800a58e:	e7da      	b.n	800a546 <rshift+0x4c>
 800a590:	f851 cb04 	ldr.w	ip, [r1], #4
 800a594:	f847 cf04 	str.w	ip, [r7, #4]!
 800a598:	e7c3      	b.n	800a522 <rshift+0x28>
 800a59a:	4623      	mov	r3, r4
 800a59c:	e7e1      	b.n	800a562 <rshift+0x68>

0800a59e <__hexdig_fun>:
 800a59e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5a2:	2b09      	cmp	r3, #9
 800a5a4:	d802      	bhi.n	800a5ac <__hexdig_fun+0xe>
 800a5a6:	3820      	subs	r0, #32
 800a5a8:	b2c0      	uxtb	r0, r0
 800a5aa:	4770      	bx	lr
 800a5ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5b0:	2b05      	cmp	r3, #5
 800a5b2:	d801      	bhi.n	800a5b8 <__hexdig_fun+0x1a>
 800a5b4:	3847      	subs	r0, #71	; 0x47
 800a5b6:	e7f7      	b.n	800a5a8 <__hexdig_fun+0xa>
 800a5b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5bc:	2b05      	cmp	r3, #5
 800a5be:	d801      	bhi.n	800a5c4 <__hexdig_fun+0x26>
 800a5c0:	3827      	subs	r0, #39	; 0x27
 800a5c2:	e7f1      	b.n	800a5a8 <__hexdig_fun+0xa>
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	4770      	bx	lr

0800a5c8 <__gethex>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	ed2d 8b02 	vpush	{d8}
 800a5d0:	b089      	sub	sp, #36	; 0x24
 800a5d2:	ee08 0a10 	vmov	s16, r0
 800a5d6:	9304      	str	r3, [sp, #16]
 800a5d8:	4bb4      	ldr	r3, [pc, #720]	; (800a8ac <__gethex+0x2e4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	468b      	mov	fp, r1
 800a5e2:	4690      	mov	r8, r2
 800a5e4:	f7f5 fdfc 	bl	80001e0 <strlen>
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	f8db 2000 	ldr.w	r2, [fp]
 800a5ee:	4403      	add	r3, r0
 800a5f0:	4682      	mov	sl, r0
 800a5f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a5f6:	9305      	str	r3, [sp, #20]
 800a5f8:	1c93      	adds	r3, r2, #2
 800a5fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a5fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a602:	32fe      	adds	r2, #254	; 0xfe
 800a604:	18d1      	adds	r1, r2, r3
 800a606:	461f      	mov	r7, r3
 800a608:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a60c:	9100      	str	r1, [sp, #0]
 800a60e:	2830      	cmp	r0, #48	; 0x30
 800a610:	d0f8      	beq.n	800a604 <__gethex+0x3c>
 800a612:	f7ff ffc4 	bl	800a59e <__hexdig_fun>
 800a616:	4604      	mov	r4, r0
 800a618:	2800      	cmp	r0, #0
 800a61a:	d13a      	bne.n	800a692 <__gethex+0xca>
 800a61c:	9901      	ldr	r1, [sp, #4]
 800a61e:	4652      	mov	r2, sl
 800a620:	4638      	mov	r0, r7
 800a622:	f001 fb5c 	bl	800bcde <strncmp>
 800a626:	4605      	mov	r5, r0
 800a628:	2800      	cmp	r0, #0
 800a62a:	d168      	bne.n	800a6fe <__gethex+0x136>
 800a62c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a630:	eb07 060a 	add.w	r6, r7, sl
 800a634:	f7ff ffb3 	bl	800a59e <__hexdig_fun>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d062      	beq.n	800a702 <__gethex+0x13a>
 800a63c:	4633      	mov	r3, r6
 800a63e:	7818      	ldrb	r0, [r3, #0]
 800a640:	2830      	cmp	r0, #48	; 0x30
 800a642:	461f      	mov	r7, r3
 800a644:	f103 0301 	add.w	r3, r3, #1
 800a648:	d0f9      	beq.n	800a63e <__gethex+0x76>
 800a64a:	f7ff ffa8 	bl	800a59e <__hexdig_fun>
 800a64e:	2301      	movs	r3, #1
 800a650:	fab0 f480 	clz	r4, r0
 800a654:	0964      	lsrs	r4, r4, #5
 800a656:	4635      	mov	r5, r6
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	463a      	mov	r2, r7
 800a65c:	4616      	mov	r6, r2
 800a65e:	3201      	adds	r2, #1
 800a660:	7830      	ldrb	r0, [r6, #0]
 800a662:	f7ff ff9c 	bl	800a59e <__hexdig_fun>
 800a666:	2800      	cmp	r0, #0
 800a668:	d1f8      	bne.n	800a65c <__gethex+0x94>
 800a66a:	9901      	ldr	r1, [sp, #4]
 800a66c:	4652      	mov	r2, sl
 800a66e:	4630      	mov	r0, r6
 800a670:	f001 fb35 	bl	800bcde <strncmp>
 800a674:	b980      	cbnz	r0, 800a698 <__gethex+0xd0>
 800a676:	b94d      	cbnz	r5, 800a68c <__gethex+0xc4>
 800a678:	eb06 050a 	add.w	r5, r6, sl
 800a67c:	462a      	mov	r2, r5
 800a67e:	4616      	mov	r6, r2
 800a680:	3201      	adds	r2, #1
 800a682:	7830      	ldrb	r0, [r6, #0]
 800a684:	f7ff ff8b 	bl	800a59e <__hexdig_fun>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d1f8      	bne.n	800a67e <__gethex+0xb6>
 800a68c:	1bad      	subs	r5, r5, r6
 800a68e:	00ad      	lsls	r5, r5, #2
 800a690:	e004      	b.n	800a69c <__gethex+0xd4>
 800a692:	2400      	movs	r4, #0
 800a694:	4625      	mov	r5, r4
 800a696:	e7e0      	b.n	800a65a <__gethex+0x92>
 800a698:	2d00      	cmp	r5, #0
 800a69a:	d1f7      	bne.n	800a68c <__gethex+0xc4>
 800a69c:	7833      	ldrb	r3, [r6, #0]
 800a69e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6a2:	2b50      	cmp	r3, #80	; 0x50
 800a6a4:	d13b      	bne.n	800a71e <__gethex+0x156>
 800a6a6:	7873      	ldrb	r3, [r6, #1]
 800a6a8:	2b2b      	cmp	r3, #43	; 0x2b
 800a6aa:	d02c      	beq.n	800a706 <__gethex+0x13e>
 800a6ac:	2b2d      	cmp	r3, #45	; 0x2d
 800a6ae:	d02e      	beq.n	800a70e <__gethex+0x146>
 800a6b0:	1c71      	adds	r1, r6, #1
 800a6b2:	f04f 0900 	mov.w	r9, #0
 800a6b6:	7808      	ldrb	r0, [r1, #0]
 800a6b8:	f7ff ff71 	bl	800a59e <__hexdig_fun>
 800a6bc:	1e43      	subs	r3, r0, #1
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b18      	cmp	r3, #24
 800a6c2:	d82c      	bhi.n	800a71e <__gethex+0x156>
 800a6c4:	f1a0 0210 	sub.w	r2, r0, #16
 800a6c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6cc:	f7ff ff67 	bl	800a59e <__hexdig_fun>
 800a6d0:	1e43      	subs	r3, r0, #1
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b18      	cmp	r3, #24
 800a6d6:	d91d      	bls.n	800a714 <__gethex+0x14c>
 800a6d8:	f1b9 0f00 	cmp.w	r9, #0
 800a6dc:	d000      	beq.n	800a6e0 <__gethex+0x118>
 800a6de:	4252      	negs	r2, r2
 800a6e0:	4415      	add	r5, r2
 800a6e2:	f8cb 1000 	str.w	r1, [fp]
 800a6e6:	b1e4      	cbz	r4, 800a722 <__gethex+0x15a>
 800a6e8:	9b00      	ldr	r3, [sp, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bf14      	ite	ne
 800a6ee:	2700      	movne	r7, #0
 800a6f0:	2706      	moveq	r7, #6
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	b009      	add	sp, #36	; 0x24
 800a6f6:	ecbd 8b02 	vpop	{d8}
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	463e      	mov	r6, r7
 800a700:	4625      	mov	r5, r4
 800a702:	2401      	movs	r4, #1
 800a704:	e7ca      	b.n	800a69c <__gethex+0xd4>
 800a706:	f04f 0900 	mov.w	r9, #0
 800a70a:	1cb1      	adds	r1, r6, #2
 800a70c:	e7d3      	b.n	800a6b6 <__gethex+0xee>
 800a70e:	f04f 0901 	mov.w	r9, #1
 800a712:	e7fa      	b.n	800a70a <__gethex+0x142>
 800a714:	230a      	movs	r3, #10
 800a716:	fb03 0202 	mla	r2, r3, r2, r0
 800a71a:	3a10      	subs	r2, #16
 800a71c:	e7d4      	b.n	800a6c8 <__gethex+0x100>
 800a71e:	4631      	mov	r1, r6
 800a720:	e7df      	b.n	800a6e2 <__gethex+0x11a>
 800a722:	1bf3      	subs	r3, r6, r7
 800a724:	3b01      	subs	r3, #1
 800a726:	4621      	mov	r1, r4
 800a728:	2b07      	cmp	r3, #7
 800a72a:	dc0b      	bgt.n	800a744 <__gethex+0x17c>
 800a72c:	ee18 0a10 	vmov	r0, s16
 800a730:	f000 faf2 	bl	800ad18 <_Balloc>
 800a734:	4604      	mov	r4, r0
 800a736:	b940      	cbnz	r0, 800a74a <__gethex+0x182>
 800a738:	4b5d      	ldr	r3, [pc, #372]	; (800a8b0 <__gethex+0x2e8>)
 800a73a:	4602      	mov	r2, r0
 800a73c:	21de      	movs	r1, #222	; 0xde
 800a73e:	485d      	ldr	r0, [pc, #372]	; (800a8b4 <__gethex+0x2ec>)
 800a740:	f7fc feca 	bl	80074d8 <__assert_func>
 800a744:	3101      	adds	r1, #1
 800a746:	105b      	asrs	r3, r3, #1
 800a748:	e7ee      	b.n	800a728 <__gethex+0x160>
 800a74a:	f100 0914 	add.w	r9, r0, #20
 800a74e:	f04f 0b00 	mov.w	fp, #0
 800a752:	f1ca 0301 	rsb	r3, sl, #1
 800a756:	f8cd 9008 	str.w	r9, [sp, #8]
 800a75a:	f8cd b000 	str.w	fp, [sp]
 800a75e:	9306      	str	r3, [sp, #24]
 800a760:	42b7      	cmp	r7, r6
 800a762:	d340      	bcc.n	800a7e6 <__gethex+0x21e>
 800a764:	9802      	ldr	r0, [sp, #8]
 800a766:	9b00      	ldr	r3, [sp, #0]
 800a768:	f840 3b04 	str.w	r3, [r0], #4
 800a76c:	eba0 0009 	sub.w	r0, r0, r9
 800a770:	1080      	asrs	r0, r0, #2
 800a772:	0146      	lsls	r6, r0, #5
 800a774:	6120      	str	r0, [r4, #16]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 fbc0 	bl	800aefc <__hi0bits>
 800a77c:	1a30      	subs	r0, r6, r0
 800a77e:	f8d8 6000 	ldr.w	r6, [r8]
 800a782:	42b0      	cmp	r0, r6
 800a784:	dd63      	ble.n	800a84e <__gethex+0x286>
 800a786:	1b87      	subs	r7, r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 ff64 	bl	800b658 <__any_on>
 800a790:	4682      	mov	sl, r0
 800a792:	b1a8      	cbz	r0, 800a7c0 <__gethex+0x1f8>
 800a794:	1e7b      	subs	r3, r7, #1
 800a796:	1159      	asrs	r1, r3, #5
 800a798:	f003 021f 	and.w	r2, r3, #31
 800a79c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a7a0:	f04f 0a01 	mov.w	sl, #1
 800a7a4:	fa0a f202 	lsl.w	r2, sl, r2
 800a7a8:	420a      	tst	r2, r1
 800a7aa:	d009      	beq.n	800a7c0 <__gethex+0x1f8>
 800a7ac:	4553      	cmp	r3, sl
 800a7ae:	dd05      	ble.n	800a7bc <__gethex+0x1f4>
 800a7b0:	1eb9      	subs	r1, r7, #2
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 ff50 	bl	800b658 <__any_on>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d145      	bne.n	800a848 <__gethex+0x280>
 800a7bc:	f04f 0a02 	mov.w	sl, #2
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f7ff fe99 	bl	800a4fa <rshift>
 800a7c8:	443d      	add	r5, r7
 800a7ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7ce:	42ab      	cmp	r3, r5
 800a7d0:	da4c      	bge.n	800a86c <__gethex+0x2a4>
 800a7d2:	ee18 0a10 	vmov	r0, s16
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	f000 fade 	bl	800ad98 <_Bfree>
 800a7dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7de:	2300      	movs	r3, #0
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	27a3      	movs	r7, #163	; 0xa3
 800a7e4:	e785      	b.n	800a6f2 <__gethex+0x12a>
 800a7e6:	1e73      	subs	r3, r6, #1
 800a7e8:	9a05      	ldr	r2, [sp, #20]
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d019      	beq.n	800a828 <__gethex+0x260>
 800a7f4:	f1bb 0f20 	cmp.w	fp, #32
 800a7f8:	d107      	bne.n	800a80a <__gethex+0x242>
 800a7fa:	9b02      	ldr	r3, [sp, #8]
 800a7fc:	9a00      	ldr	r2, [sp, #0]
 800a7fe:	f843 2b04 	str.w	r2, [r3], #4
 800a802:	9302      	str	r3, [sp, #8]
 800a804:	2300      	movs	r3, #0
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	469b      	mov	fp, r3
 800a80a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a80e:	f7ff fec6 	bl	800a59e <__hexdig_fun>
 800a812:	9b00      	ldr	r3, [sp, #0]
 800a814:	f000 000f 	and.w	r0, r0, #15
 800a818:	fa00 f00b 	lsl.w	r0, r0, fp
 800a81c:	4303      	orrs	r3, r0
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	f10b 0b04 	add.w	fp, fp, #4
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	e00d      	b.n	800a844 <__gethex+0x27c>
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	9a06      	ldr	r2, [sp, #24]
 800a82c:	4413      	add	r3, r2
 800a82e:	42bb      	cmp	r3, r7
 800a830:	d3e0      	bcc.n	800a7f4 <__gethex+0x22c>
 800a832:	4618      	mov	r0, r3
 800a834:	9901      	ldr	r1, [sp, #4]
 800a836:	9307      	str	r3, [sp, #28]
 800a838:	4652      	mov	r2, sl
 800a83a:	f001 fa50 	bl	800bcde <strncmp>
 800a83e:	9b07      	ldr	r3, [sp, #28]
 800a840:	2800      	cmp	r0, #0
 800a842:	d1d7      	bne.n	800a7f4 <__gethex+0x22c>
 800a844:	461e      	mov	r6, r3
 800a846:	e78b      	b.n	800a760 <__gethex+0x198>
 800a848:	f04f 0a03 	mov.w	sl, #3
 800a84c:	e7b8      	b.n	800a7c0 <__gethex+0x1f8>
 800a84e:	da0a      	bge.n	800a866 <__gethex+0x29e>
 800a850:	1a37      	subs	r7, r6, r0
 800a852:	4621      	mov	r1, r4
 800a854:	ee18 0a10 	vmov	r0, s16
 800a858:	463a      	mov	r2, r7
 800a85a:	f000 fcb9 	bl	800b1d0 <__lshift>
 800a85e:	1bed      	subs	r5, r5, r7
 800a860:	4604      	mov	r4, r0
 800a862:	f100 0914 	add.w	r9, r0, #20
 800a866:	f04f 0a00 	mov.w	sl, #0
 800a86a:	e7ae      	b.n	800a7ca <__gethex+0x202>
 800a86c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a870:	42a8      	cmp	r0, r5
 800a872:	dd72      	ble.n	800a95a <__gethex+0x392>
 800a874:	1b45      	subs	r5, r0, r5
 800a876:	42ae      	cmp	r6, r5
 800a878:	dc36      	bgt.n	800a8e8 <__gethex+0x320>
 800a87a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d02a      	beq.n	800a8d8 <__gethex+0x310>
 800a882:	2b03      	cmp	r3, #3
 800a884:	d02c      	beq.n	800a8e0 <__gethex+0x318>
 800a886:	2b01      	cmp	r3, #1
 800a888:	d11c      	bne.n	800a8c4 <__gethex+0x2fc>
 800a88a:	42ae      	cmp	r6, r5
 800a88c:	d11a      	bne.n	800a8c4 <__gethex+0x2fc>
 800a88e:	2e01      	cmp	r6, #1
 800a890:	d112      	bne.n	800a8b8 <__gethex+0x2f0>
 800a892:	9a04      	ldr	r2, [sp, #16]
 800a894:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	2301      	movs	r3, #1
 800a89c:	6123      	str	r3, [r4, #16]
 800a89e:	f8c9 3000 	str.w	r3, [r9]
 800a8a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8a4:	2762      	movs	r7, #98	; 0x62
 800a8a6:	601c      	str	r4, [r3, #0]
 800a8a8:	e723      	b.n	800a6f2 <__gethex+0x12a>
 800a8aa:	bf00      	nop
 800a8ac:	0800d724 	.word	0x0800d724
 800a8b0:	0800d648 	.word	0x0800d648
 800a8b4:	0800d6bc 	.word	0x0800d6bc
 800a8b8:	1e71      	subs	r1, r6, #1
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 fecc 	bl	800b658 <__any_on>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d1e6      	bne.n	800a892 <__gethex+0x2ca>
 800a8c4:	ee18 0a10 	vmov	r0, s16
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	f000 fa65 	bl	800ad98 <_Bfree>
 800a8ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	2750      	movs	r7, #80	; 0x50
 800a8d6:	e70c      	b.n	800a6f2 <__gethex+0x12a>
 800a8d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1f2      	bne.n	800a8c4 <__gethex+0x2fc>
 800a8de:	e7d8      	b.n	800a892 <__gethex+0x2ca>
 800a8e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1d5      	bne.n	800a892 <__gethex+0x2ca>
 800a8e6:	e7ed      	b.n	800a8c4 <__gethex+0x2fc>
 800a8e8:	1e6f      	subs	r7, r5, #1
 800a8ea:	f1ba 0f00 	cmp.w	sl, #0
 800a8ee:	d131      	bne.n	800a954 <__gethex+0x38c>
 800a8f0:	b127      	cbz	r7, 800a8fc <__gethex+0x334>
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f000 feaf 	bl	800b658 <__any_on>
 800a8fa:	4682      	mov	sl, r0
 800a8fc:	117b      	asrs	r3, r7, #5
 800a8fe:	2101      	movs	r1, #1
 800a900:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a904:	f007 071f 	and.w	r7, r7, #31
 800a908:	fa01 f707 	lsl.w	r7, r1, r7
 800a90c:	421f      	tst	r7, r3
 800a90e:	4629      	mov	r1, r5
 800a910:	4620      	mov	r0, r4
 800a912:	bf18      	it	ne
 800a914:	f04a 0a02 	orrne.w	sl, sl, #2
 800a918:	1b76      	subs	r6, r6, r5
 800a91a:	f7ff fdee 	bl	800a4fa <rshift>
 800a91e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a922:	2702      	movs	r7, #2
 800a924:	f1ba 0f00 	cmp.w	sl, #0
 800a928:	d048      	beq.n	800a9bc <__gethex+0x3f4>
 800a92a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d015      	beq.n	800a95e <__gethex+0x396>
 800a932:	2b03      	cmp	r3, #3
 800a934:	d017      	beq.n	800a966 <__gethex+0x39e>
 800a936:	2b01      	cmp	r3, #1
 800a938:	d109      	bne.n	800a94e <__gethex+0x386>
 800a93a:	f01a 0f02 	tst.w	sl, #2
 800a93e:	d006      	beq.n	800a94e <__gethex+0x386>
 800a940:	f8d9 0000 	ldr.w	r0, [r9]
 800a944:	ea4a 0a00 	orr.w	sl, sl, r0
 800a948:	f01a 0f01 	tst.w	sl, #1
 800a94c:	d10e      	bne.n	800a96c <__gethex+0x3a4>
 800a94e:	f047 0710 	orr.w	r7, r7, #16
 800a952:	e033      	b.n	800a9bc <__gethex+0x3f4>
 800a954:	f04f 0a01 	mov.w	sl, #1
 800a958:	e7d0      	b.n	800a8fc <__gethex+0x334>
 800a95a:	2701      	movs	r7, #1
 800a95c:	e7e2      	b.n	800a924 <__gethex+0x35c>
 800a95e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a960:	f1c3 0301 	rsb	r3, r3, #1
 800a964:	9315      	str	r3, [sp, #84]	; 0x54
 800a966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0f0      	beq.n	800a94e <__gethex+0x386>
 800a96c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a970:	f104 0314 	add.w	r3, r4, #20
 800a974:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a978:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a97c:	f04f 0c00 	mov.w	ip, #0
 800a980:	4618      	mov	r0, r3
 800a982:	f853 2b04 	ldr.w	r2, [r3], #4
 800a986:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a98a:	d01c      	beq.n	800a9c6 <__gethex+0x3fe>
 800a98c:	3201      	adds	r2, #1
 800a98e:	6002      	str	r2, [r0, #0]
 800a990:	2f02      	cmp	r7, #2
 800a992:	f104 0314 	add.w	r3, r4, #20
 800a996:	d13f      	bne.n	800aa18 <__gethex+0x450>
 800a998:	f8d8 2000 	ldr.w	r2, [r8]
 800a99c:	3a01      	subs	r2, #1
 800a99e:	42b2      	cmp	r2, r6
 800a9a0:	d10a      	bne.n	800a9b8 <__gethex+0x3f0>
 800a9a2:	1171      	asrs	r1, r6, #5
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9aa:	f006 061f 	and.w	r6, r6, #31
 800a9ae:	fa02 f606 	lsl.w	r6, r2, r6
 800a9b2:	421e      	tst	r6, r3
 800a9b4:	bf18      	it	ne
 800a9b6:	4617      	movne	r7, r2
 800a9b8:	f047 0720 	orr.w	r7, r7, #32
 800a9bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9be:	601c      	str	r4, [r3, #0]
 800a9c0:	9b04      	ldr	r3, [sp, #16]
 800a9c2:	601d      	str	r5, [r3, #0]
 800a9c4:	e695      	b.n	800a6f2 <__gethex+0x12a>
 800a9c6:	4299      	cmp	r1, r3
 800a9c8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9cc:	d8d8      	bhi.n	800a980 <__gethex+0x3b8>
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	459b      	cmp	fp, r3
 800a9d2:	db19      	blt.n	800aa08 <__gethex+0x440>
 800a9d4:	6861      	ldr	r1, [r4, #4]
 800a9d6:	ee18 0a10 	vmov	r0, s16
 800a9da:	3101      	adds	r1, #1
 800a9dc:	f000 f99c 	bl	800ad18 <_Balloc>
 800a9e0:	4681      	mov	r9, r0
 800a9e2:	b918      	cbnz	r0, 800a9ec <__gethex+0x424>
 800a9e4:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <__gethex+0x488>)
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	2184      	movs	r1, #132	; 0x84
 800a9ea:	e6a8      	b.n	800a73e <__gethex+0x176>
 800a9ec:	6922      	ldr	r2, [r4, #16]
 800a9ee:	3202      	adds	r2, #2
 800a9f0:	f104 010c 	add.w	r1, r4, #12
 800a9f4:	0092      	lsls	r2, r2, #2
 800a9f6:	300c      	adds	r0, #12
 800a9f8:	f7fc fdc8 	bl	800758c <memcpy>
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	ee18 0a10 	vmov	r0, s16
 800aa02:	f000 f9c9 	bl	800ad98 <_Bfree>
 800aa06:	464c      	mov	r4, r9
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	1c5a      	adds	r2, r3, #1
 800aa0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa10:	6122      	str	r2, [r4, #16]
 800aa12:	2201      	movs	r2, #1
 800aa14:	615a      	str	r2, [r3, #20]
 800aa16:	e7bb      	b.n	800a990 <__gethex+0x3c8>
 800aa18:	6922      	ldr	r2, [r4, #16]
 800aa1a:	455a      	cmp	r2, fp
 800aa1c:	dd0b      	ble.n	800aa36 <__gethex+0x46e>
 800aa1e:	2101      	movs	r1, #1
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7ff fd6a 	bl	800a4fa <rshift>
 800aa26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa2a:	3501      	adds	r5, #1
 800aa2c:	42ab      	cmp	r3, r5
 800aa2e:	f6ff aed0 	blt.w	800a7d2 <__gethex+0x20a>
 800aa32:	2701      	movs	r7, #1
 800aa34:	e7c0      	b.n	800a9b8 <__gethex+0x3f0>
 800aa36:	f016 061f 	ands.w	r6, r6, #31
 800aa3a:	d0fa      	beq.n	800aa32 <__gethex+0x46a>
 800aa3c:	4453      	add	r3, sl
 800aa3e:	f1c6 0620 	rsb	r6, r6, #32
 800aa42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa46:	f000 fa59 	bl	800aefc <__hi0bits>
 800aa4a:	42b0      	cmp	r0, r6
 800aa4c:	dbe7      	blt.n	800aa1e <__gethex+0x456>
 800aa4e:	e7f0      	b.n	800aa32 <__gethex+0x46a>
 800aa50:	0800d648 	.word	0x0800d648

0800aa54 <L_shift>:
 800aa54:	f1c2 0208 	rsb	r2, r2, #8
 800aa58:	0092      	lsls	r2, r2, #2
 800aa5a:	b570      	push	{r4, r5, r6, lr}
 800aa5c:	f1c2 0620 	rsb	r6, r2, #32
 800aa60:	6843      	ldr	r3, [r0, #4]
 800aa62:	6804      	ldr	r4, [r0, #0]
 800aa64:	fa03 f506 	lsl.w	r5, r3, r6
 800aa68:	432c      	orrs	r4, r5
 800aa6a:	40d3      	lsrs	r3, r2
 800aa6c:	6004      	str	r4, [r0, #0]
 800aa6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa72:	4288      	cmp	r0, r1
 800aa74:	d3f4      	bcc.n	800aa60 <L_shift+0xc>
 800aa76:	bd70      	pop	{r4, r5, r6, pc}

0800aa78 <__match>:
 800aa78:	b530      	push	{r4, r5, lr}
 800aa7a:	6803      	ldr	r3, [r0, #0]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa82:	b914      	cbnz	r4, 800aa8a <__match+0x12>
 800aa84:	6003      	str	r3, [r0, #0]
 800aa86:	2001      	movs	r0, #1
 800aa88:	bd30      	pop	{r4, r5, pc}
 800aa8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa92:	2d19      	cmp	r5, #25
 800aa94:	bf98      	it	ls
 800aa96:	3220      	addls	r2, #32
 800aa98:	42a2      	cmp	r2, r4
 800aa9a:	d0f0      	beq.n	800aa7e <__match+0x6>
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e7f3      	b.n	800aa88 <__match+0x10>

0800aaa0 <__hexnan>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	680b      	ldr	r3, [r1, #0]
 800aaa6:	115e      	asrs	r6, r3, #5
 800aaa8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aaac:	f013 031f 	ands.w	r3, r3, #31
 800aab0:	b087      	sub	sp, #28
 800aab2:	bf18      	it	ne
 800aab4:	3604      	addne	r6, #4
 800aab6:	2500      	movs	r5, #0
 800aab8:	1f37      	subs	r7, r6, #4
 800aaba:	4690      	mov	r8, r2
 800aabc:	6802      	ldr	r2, [r0, #0]
 800aabe:	9301      	str	r3, [sp, #4]
 800aac0:	4682      	mov	sl, r0
 800aac2:	f846 5c04 	str.w	r5, [r6, #-4]
 800aac6:	46b9      	mov	r9, r7
 800aac8:	463c      	mov	r4, r7
 800aaca:	9502      	str	r5, [sp, #8]
 800aacc:	46ab      	mov	fp, r5
 800aace:	7851      	ldrb	r1, [r2, #1]
 800aad0:	1c53      	adds	r3, r2, #1
 800aad2:	9303      	str	r3, [sp, #12]
 800aad4:	b341      	cbz	r1, 800ab28 <__hexnan+0x88>
 800aad6:	4608      	mov	r0, r1
 800aad8:	9205      	str	r2, [sp, #20]
 800aada:	9104      	str	r1, [sp, #16]
 800aadc:	f7ff fd5f 	bl	800a59e <__hexdig_fun>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d14f      	bne.n	800ab84 <__hexnan+0xe4>
 800aae4:	9904      	ldr	r1, [sp, #16]
 800aae6:	9a05      	ldr	r2, [sp, #20]
 800aae8:	2920      	cmp	r1, #32
 800aaea:	d818      	bhi.n	800ab1e <__hexnan+0x7e>
 800aaec:	9b02      	ldr	r3, [sp, #8]
 800aaee:	459b      	cmp	fp, r3
 800aaf0:	dd13      	ble.n	800ab1a <__hexnan+0x7a>
 800aaf2:	454c      	cmp	r4, r9
 800aaf4:	d206      	bcs.n	800ab04 <__hexnan+0x64>
 800aaf6:	2d07      	cmp	r5, #7
 800aaf8:	dc04      	bgt.n	800ab04 <__hexnan+0x64>
 800aafa:	462a      	mov	r2, r5
 800aafc:	4649      	mov	r1, r9
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7ff ffa8 	bl	800aa54 <L_shift>
 800ab04:	4544      	cmp	r4, r8
 800ab06:	d950      	bls.n	800abaa <__hexnan+0x10a>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f1a4 0904 	sub.w	r9, r4, #4
 800ab0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab12:	f8cd b008 	str.w	fp, [sp, #8]
 800ab16:	464c      	mov	r4, r9
 800ab18:	461d      	mov	r5, r3
 800ab1a:	9a03      	ldr	r2, [sp, #12]
 800ab1c:	e7d7      	b.n	800aace <__hexnan+0x2e>
 800ab1e:	2929      	cmp	r1, #41	; 0x29
 800ab20:	d156      	bne.n	800abd0 <__hexnan+0x130>
 800ab22:	3202      	adds	r2, #2
 800ab24:	f8ca 2000 	str.w	r2, [sl]
 800ab28:	f1bb 0f00 	cmp.w	fp, #0
 800ab2c:	d050      	beq.n	800abd0 <__hexnan+0x130>
 800ab2e:	454c      	cmp	r4, r9
 800ab30:	d206      	bcs.n	800ab40 <__hexnan+0xa0>
 800ab32:	2d07      	cmp	r5, #7
 800ab34:	dc04      	bgt.n	800ab40 <__hexnan+0xa0>
 800ab36:	462a      	mov	r2, r5
 800ab38:	4649      	mov	r1, r9
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff ff8a 	bl	800aa54 <L_shift>
 800ab40:	4544      	cmp	r4, r8
 800ab42:	d934      	bls.n	800abae <__hexnan+0x10e>
 800ab44:	f1a8 0204 	sub.w	r2, r8, #4
 800ab48:	4623      	mov	r3, r4
 800ab4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab4e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab52:	429f      	cmp	r7, r3
 800ab54:	d2f9      	bcs.n	800ab4a <__hexnan+0xaa>
 800ab56:	1b3b      	subs	r3, r7, r4
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	3401      	adds	r4, #1
 800ab60:	3e03      	subs	r6, #3
 800ab62:	42b4      	cmp	r4, r6
 800ab64:	bf88      	it	hi
 800ab66:	2304      	movhi	r3, #4
 800ab68:	4443      	add	r3, r8
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f843 2b04 	str.w	r2, [r3], #4
 800ab70:	429f      	cmp	r7, r3
 800ab72:	d2fb      	bcs.n	800ab6c <__hexnan+0xcc>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	b91b      	cbnz	r3, 800ab80 <__hexnan+0xe0>
 800ab78:	4547      	cmp	r7, r8
 800ab7a:	d127      	bne.n	800abcc <__hexnan+0x12c>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	603b      	str	r3, [r7, #0]
 800ab80:	2005      	movs	r0, #5
 800ab82:	e026      	b.n	800abd2 <__hexnan+0x132>
 800ab84:	3501      	adds	r5, #1
 800ab86:	2d08      	cmp	r5, #8
 800ab88:	f10b 0b01 	add.w	fp, fp, #1
 800ab8c:	dd06      	ble.n	800ab9c <__hexnan+0xfc>
 800ab8e:	4544      	cmp	r4, r8
 800ab90:	d9c3      	bls.n	800ab1a <__hexnan+0x7a>
 800ab92:	2300      	movs	r3, #0
 800ab94:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab98:	2501      	movs	r5, #1
 800ab9a:	3c04      	subs	r4, #4
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	f000 000f 	and.w	r0, r0, #15
 800aba2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aba6:	6022      	str	r2, [r4, #0]
 800aba8:	e7b7      	b.n	800ab1a <__hexnan+0x7a>
 800abaa:	2508      	movs	r5, #8
 800abac:	e7b5      	b.n	800ab1a <__hexnan+0x7a>
 800abae:	9b01      	ldr	r3, [sp, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d0df      	beq.n	800ab74 <__hexnan+0xd4>
 800abb4:	f04f 32ff 	mov.w	r2, #4294967295
 800abb8:	f1c3 0320 	rsb	r3, r3, #32
 800abbc:	fa22 f303 	lsr.w	r3, r2, r3
 800abc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abc4:	401a      	ands	r2, r3
 800abc6:	f846 2c04 	str.w	r2, [r6, #-4]
 800abca:	e7d3      	b.n	800ab74 <__hexnan+0xd4>
 800abcc:	3f04      	subs	r7, #4
 800abce:	e7d1      	b.n	800ab74 <__hexnan+0xd4>
 800abd0:	2004      	movs	r0, #4
 800abd2:	b007      	add	sp, #28
 800abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abd8 <_localeconv_r>:
 800abd8:	4800      	ldr	r0, [pc, #0]	; (800abdc <_localeconv_r+0x4>)
 800abda:	4770      	bx	lr
 800abdc:	2000016c 	.word	0x2000016c

0800abe0 <__retarget_lock_init_recursive>:
 800abe0:	4770      	bx	lr

0800abe2 <__retarget_lock_acquire_recursive>:
 800abe2:	4770      	bx	lr

0800abe4 <__retarget_lock_release_recursive>:
 800abe4:	4770      	bx	lr

0800abe6 <__swhatbuf_r>:
 800abe6:	b570      	push	{r4, r5, r6, lr}
 800abe8:	460e      	mov	r6, r1
 800abea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abee:	2900      	cmp	r1, #0
 800abf0:	b096      	sub	sp, #88	; 0x58
 800abf2:	4614      	mov	r4, r2
 800abf4:	461d      	mov	r5, r3
 800abf6:	da08      	bge.n	800ac0a <__swhatbuf_r+0x24>
 800abf8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	602a      	str	r2, [r5, #0]
 800ac00:	061a      	lsls	r2, r3, #24
 800ac02:	d410      	bmi.n	800ac26 <__swhatbuf_r+0x40>
 800ac04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac08:	e00e      	b.n	800ac28 <__swhatbuf_r+0x42>
 800ac0a:	466a      	mov	r2, sp
 800ac0c:	f001 f8aa 	bl	800bd64 <_fstat_r>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	dbf1      	blt.n	800abf8 <__swhatbuf_r+0x12>
 800ac14:	9a01      	ldr	r2, [sp, #4]
 800ac16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac1e:	425a      	negs	r2, r3
 800ac20:	415a      	adcs	r2, r3
 800ac22:	602a      	str	r2, [r5, #0]
 800ac24:	e7ee      	b.n	800ac04 <__swhatbuf_r+0x1e>
 800ac26:	2340      	movs	r3, #64	; 0x40
 800ac28:	2000      	movs	r0, #0
 800ac2a:	6023      	str	r3, [r4, #0]
 800ac2c:	b016      	add	sp, #88	; 0x58
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}

0800ac30 <__smakebuf_r>:
 800ac30:	898b      	ldrh	r3, [r1, #12]
 800ac32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac34:	079d      	lsls	r5, r3, #30
 800ac36:	4606      	mov	r6, r0
 800ac38:	460c      	mov	r4, r1
 800ac3a:	d507      	bpl.n	800ac4c <__smakebuf_r+0x1c>
 800ac3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	6123      	str	r3, [r4, #16]
 800ac44:	2301      	movs	r3, #1
 800ac46:	6163      	str	r3, [r4, #20]
 800ac48:	b002      	add	sp, #8
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	ab01      	add	r3, sp, #4
 800ac4e:	466a      	mov	r2, sp
 800ac50:	f7ff ffc9 	bl	800abe6 <__swhatbuf_r>
 800ac54:	9900      	ldr	r1, [sp, #0]
 800ac56:	4605      	mov	r5, r0
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f000 fda1 	bl	800b7a0 <_malloc_r>
 800ac5e:	b948      	cbnz	r0, 800ac74 <__smakebuf_r+0x44>
 800ac60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac64:	059a      	lsls	r2, r3, #22
 800ac66:	d4ef      	bmi.n	800ac48 <__smakebuf_r+0x18>
 800ac68:	f023 0303 	bic.w	r3, r3, #3
 800ac6c:	f043 0302 	orr.w	r3, r3, #2
 800ac70:	81a3      	strh	r3, [r4, #12]
 800ac72:	e7e3      	b.n	800ac3c <__smakebuf_r+0xc>
 800ac74:	4b0d      	ldr	r3, [pc, #52]	; (800acac <__smakebuf_r+0x7c>)
 800ac76:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	6020      	str	r0, [r4, #0]
 800ac7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	9b00      	ldr	r3, [sp, #0]
 800ac84:	6163      	str	r3, [r4, #20]
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	6120      	str	r0, [r4, #16]
 800ac8a:	b15b      	cbz	r3, 800aca4 <__smakebuf_r+0x74>
 800ac8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac90:	4630      	mov	r0, r6
 800ac92:	f001 f879 	bl	800bd88 <_isatty_r>
 800ac96:	b128      	cbz	r0, 800aca4 <__smakebuf_r+0x74>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f023 0303 	bic.w	r3, r3, #3
 800ac9e:	f043 0301 	orr.w	r3, r3, #1
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	89a0      	ldrh	r0, [r4, #12]
 800aca6:	4305      	orrs	r5, r0
 800aca8:	81a5      	strh	r5, [r4, #12]
 800acaa:	e7cd      	b.n	800ac48 <__smakebuf_r+0x18>
 800acac:	0800a359 	.word	0x0800a359

0800acb0 <malloc>:
 800acb0:	4b02      	ldr	r3, [pc, #8]	; (800acbc <malloc+0xc>)
 800acb2:	4601      	mov	r1, r0
 800acb4:	6818      	ldr	r0, [r3, #0]
 800acb6:	f000 bd73 	b.w	800b7a0 <_malloc_r>
 800acba:	bf00      	nop
 800acbc:	20000014 	.word	0x20000014

0800acc0 <__ascii_mbtowc>:
 800acc0:	b082      	sub	sp, #8
 800acc2:	b901      	cbnz	r1, 800acc6 <__ascii_mbtowc+0x6>
 800acc4:	a901      	add	r1, sp, #4
 800acc6:	b142      	cbz	r2, 800acda <__ascii_mbtowc+0x1a>
 800acc8:	b14b      	cbz	r3, 800acde <__ascii_mbtowc+0x1e>
 800acca:	7813      	ldrb	r3, [r2, #0]
 800accc:	600b      	str	r3, [r1, #0]
 800acce:	7812      	ldrb	r2, [r2, #0]
 800acd0:	1e10      	subs	r0, r2, #0
 800acd2:	bf18      	it	ne
 800acd4:	2001      	movne	r0, #1
 800acd6:	b002      	add	sp, #8
 800acd8:	4770      	bx	lr
 800acda:	4610      	mov	r0, r2
 800acdc:	e7fb      	b.n	800acd6 <__ascii_mbtowc+0x16>
 800acde:	f06f 0001 	mvn.w	r0, #1
 800ace2:	e7f8      	b.n	800acd6 <__ascii_mbtowc+0x16>

0800ace4 <memmove>:
 800ace4:	4288      	cmp	r0, r1
 800ace6:	b510      	push	{r4, lr}
 800ace8:	eb01 0402 	add.w	r4, r1, r2
 800acec:	d902      	bls.n	800acf4 <memmove+0x10>
 800acee:	4284      	cmp	r4, r0
 800acf0:	4623      	mov	r3, r4
 800acf2:	d807      	bhi.n	800ad04 <memmove+0x20>
 800acf4:	1e43      	subs	r3, r0, #1
 800acf6:	42a1      	cmp	r1, r4
 800acf8:	d008      	beq.n	800ad0c <memmove+0x28>
 800acfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad02:	e7f8      	b.n	800acf6 <memmove+0x12>
 800ad04:	4402      	add	r2, r0
 800ad06:	4601      	mov	r1, r0
 800ad08:	428a      	cmp	r2, r1
 800ad0a:	d100      	bne.n	800ad0e <memmove+0x2a>
 800ad0c:	bd10      	pop	{r4, pc}
 800ad0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad16:	e7f7      	b.n	800ad08 <memmove+0x24>

0800ad18 <_Balloc>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	460d      	mov	r5, r1
 800ad20:	b976      	cbnz	r6, 800ad40 <_Balloc+0x28>
 800ad22:	2010      	movs	r0, #16
 800ad24:	f7ff ffc4 	bl	800acb0 <malloc>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	6260      	str	r0, [r4, #36]	; 0x24
 800ad2c:	b920      	cbnz	r0, 800ad38 <_Balloc+0x20>
 800ad2e:	4b18      	ldr	r3, [pc, #96]	; (800ad90 <_Balloc+0x78>)
 800ad30:	4818      	ldr	r0, [pc, #96]	; (800ad94 <_Balloc+0x7c>)
 800ad32:	2166      	movs	r1, #102	; 0x66
 800ad34:	f7fc fbd0 	bl	80074d8 <__assert_func>
 800ad38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad3c:	6006      	str	r6, [r0, #0]
 800ad3e:	60c6      	str	r6, [r0, #12]
 800ad40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad42:	68f3      	ldr	r3, [r6, #12]
 800ad44:	b183      	cbz	r3, 800ad68 <_Balloc+0x50>
 800ad46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad4e:	b9b8      	cbnz	r0, 800ad80 <_Balloc+0x68>
 800ad50:	2101      	movs	r1, #1
 800ad52:	fa01 f605 	lsl.w	r6, r1, r5
 800ad56:	1d72      	adds	r2, r6, #5
 800ad58:	0092      	lsls	r2, r2, #2
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 fc9d 	bl	800b69a <_calloc_r>
 800ad60:	b160      	cbz	r0, 800ad7c <_Balloc+0x64>
 800ad62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad66:	e00e      	b.n	800ad86 <_Balloc+0x6e>
 800ad68:	2221      	movs	r2, #33	; 0x21
 800ad6a:	2104      	movs	r1, #4
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f000 fc94 	bl	800b69a <_calloc_r>
 800ad72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad74:	60f0      	str	r0, [r6, #12]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1e4      	bne.n	800ad46 <_Balloc+0x2e>
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}
 800ad80:	6802      	ldr	r2, [r0, #0]
 800ad82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad86:	2300      	movs	r3, #0
 800ad88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad8c:	e7f7      	b.n	800ad7e <_Balloc+0x66>
 800ad8e:	bf00      	nop
 800ad90:	0800d5d6 	.word	0x0800d5d6
 800ad94:	0800d738 	.word	0x0800d738

0800ad98 <_Bfree>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	b976      	cbnz	r6, 800adc0 <_Bfree+0x28>
 800ada2:	2010      	movs	r0, #16
 800ada4:	f7ff ff84 	bl	800acb0 <malloc>
 800ada8:	4602      	mov	r2, r0
 800adaa:	6268      	str	r0, [r5, #36]	; 0x24
 800adac:	b920      	cbnz	r0, 800adb8 <_Bfree+0x20>
 800adae:	4b09      	ldr	r3, [pc, #36]	; (800add4 <_Bfree+0x3c>)
 800adb0:	4809      	ldr	r0, [pc, #36]	; (800add8 <_Bfree+0x40>)
 800adb2:	218a      	movs	r1, #138	; 0x8a
 800adb4:	f7fc fb90 	bl	80074d8 <__assert_func>
 800adb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adbc:	6006      	str	r6, [r0, #0]
 800adbe:	60c6      	str	r6, [r0, #12]
 800adc0:	b13c      	cbz	r4, 800add2 <_Bfree+0x3a>
 800adc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800adc4:	6862      	ldr	r2, [r4, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800adcc:	6021      	str	r1, [r4, #0]
 800adce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800add2:	bd70      	pop	{r4, r5, r6, pc}
 800add4:	0800d5d6 	.word	0x0800d5d6
 800add8:	0800d738 	.word	0x0800d738

0800addc <__multadd>:
 800addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade0:	690d      	ldr	r5, [r1, #16]
 800ade2:	4607      	mov	r7, r0
 800ade4:	460c      	mov	r4, r1
 800ade6:	461e      	mov	r6, r3
 800ade8:	f101 0c14 	add.w	ip, r1, #20
 800adec:	2000      	movs	r0, #0
 800adee:	f8dc 3000 	ldr.w	r3, [ip]
 800adf2:	b299      	uxth	r1, r3
 800adf4:	fb02 6101 	mla	r1, r2, r1, r6
 800adf8:	0c1e      	lsrs	r6, r3, #16
 800adfa:	0c0b      	lsrs	r3, r1, #16
 800adfc:	fb02 3306 	mla	r3, r2, r6, r3
 800ae00:	b289      	uxth	r1, r1
 800ae02:	3001      	adds	r0, #1
 800ae04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae08:	4285      	cmp	r5, r0
 800ae0a:	f84c 1b04 	str.w	r1, [ip], #4
 800ae0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae12:	dcec      	bgt.n	800adee <__multadd+0x12>
 800ae14:	b30e      	cbz	r6, 800ae5a <__multadd+0x7e>
 800ae16:	68a3      	ldr	r3, [r4, #8]
 800ae18:	42ab      	cmp	r3, r5
 800ae1a:	dc19      	bgt.n	800ae50 <__multadd+0x74>
 800ae1c:	6861      	ldr	r1, [r4, #4]
 800ae1e:	4638      	mov	r0, r7
 800ae20:	3101      	adds	r1, #1
 800ae22:	f7ff ff79 	bl	800ad18 <_Balloc>
 800ae26:	4680      	mov	r8, r0
 800ae28:	b928      	cbnz	r0, 800ae36 <__multadd+0x5a>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	4b0c      	ldr	r3, [pc, #48]	; (800ae60 <__multadd+0x84>)
 800ae2e:	480d      	ldr	r0, [pc, #52]	; (800ae64 <__multadd+0x88>)
 800ae30:	21b5      	movs	r1, #181	; 0xb5
 800ae32:	f7fc fb51 	bl	80074d8 <__assert_func>
 800ae36:	6922      	ldr	r2, [r4, #16]
 800ae38:	3202      	adds	r2, #2
 800ae3a:	f104 010c 	add.w	r1, r4, #12
 800ae3e:	0092      	lsls	r2, r2, #2
 800ae40:	300c      	adds	r0, #12
 800ae42:	f7fc fba3 	bl	800758c <memcpy>
 800ae46:	4621      	mov	r1, r4
 800ae48:	4638      	mov	r0, r7
 800ae4a:	f7ff ffa5 	bl	800ad98 <_Bfree>
 800ae4e:	4644      	mov	r4, r8
 800ae50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae54:	3501      	adds	r5, #1
 800ae56:	615e      	str	r6, [r3, #20]
 800ae58:	6125      	str	r5, [r4, #16]
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae60:	0800d648 	.word	0x0800d648
 800ae64:	0800d738 	.word	0x0800d738

0800ae68 <__s2b>:
 800ae68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	4615      	mov	r5, r2
 800ae70:	461f      	mov	r7, r3
 800ae72:	2209      	movs	r2, #9
 800ae74:	3308      	adds	r3, #8
 800ae76:	4606      	mov	r6, r0
 800ae78:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	2201      	movs	r2, #1
 800ae80:	429a      	cmp	r2, r3
 800ae82:	db09      	blt.n	800ae98 <__s2b+0x30>
 800ae84:	4630      	mov	r0, r6
 800ae86:	f7ff ff47 	bl	800ad18 <_Balloc>
 800ae8a:	b940      	cbnz	r0, 800ae9e <__s2b+0x36>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	4b19      	ldr	r3, [pc, #100]	; (800aef4 <__s2b+0x8c>)
 800ae90:	4819      	ldr	r0, [pc, #100]	; (800aef8 <__s2b+0x90>)
 800ae92:	21ce      	movs	r1, #206	; 0xce
 800ae94:	f7fc fb20 	bl	80074d8 <__assert_func>
 800ae98:	0052      	lsls	r2, r2, #1
 800ae9a:	3101      	adds	r1, #1
 800ae9c:	e7f0      	b.n	800ae80 <__s2b+0x18>
 800ae9e:	9b08      	ldr	r3, [sp, #32]
 800aea0:	6143      	str	r3, [r0, #20]
 800aea2:	2d09      	cmp	r5, #9
 800aea4:	f04f 0301 	mov.w	r3, #1
 800aea8:	6103      	str	r3, [r0, #16]
 800aeaa:	dd16      	ble.n	800aeda <__s2b+0x72>
 800aeac:	f104 0909 	add.w	r9, r4, #9
 800aeb0:	46c8      	mov	r8, r9
 800aeb2:	442c      	add	r4, r5
 800aeb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aeb8:	4601      	mov	r1, r0
 800aeba:	3b30      	subs	r3, #48	; 0x30
 800aebc:	220a      	movs	r2, #10
 800aebe:	4630      	mov	r0, r6
 800aec0:	f7ff ff8c 	bl	800addc <__multadd>
 800aec4:	45a0      	cmp	r8, r4
 800aec6:	d1f5      	bne.n	800aeb4 <__s2b+0x4c>
 800aec8:	f1a5 0408 	sub.w	r4, r5, #8
 800aecc:	444c      	add	r4, r9
 800aece:	1b2d      	subs	r5, r5, r4
 800aed0:	1963      	adds	r3, r4, r5
 800aed2:	42bb      	cmp	r3, r7
 800aed4:	db04      	blt.n	800aee0 <__s2b+0x78>
 800aed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeda:	340a      	adds	r4, #10
 800aedc:	2509      	movs	r5, #9
 800aede:	e7f6      	b.n	800aece <__s2b+0x66>
 800aee0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aee4:	4601      	mov	r1, r0
 800aee6:	3b30      	subs	r3, #48	; 0x30
 800aee8:	220a      	movs	r2, #10
 800aeea:	4630      	mov	r0, r6
 800aeec:	f7ff ff76 	bl	800addc <__multadd>
 800aef0:	e7ee      	b.n	800aed0 <__s2b+0x68>
 800aef2:	bf00      	nop
 800aef4:	0800d648 	.word	0x0800d648
 800aef8:	0800d738 	.word	0x0800d738

0800aefc <__hi0bits>:
 800aefc:	0c03      	lsrs	r3, r0, #16
 800aefe:	041b      	lsls	r3, r3, #16
 800af00:	b9d3      	cbnz	r3, 800af38 <__hi0bits+0x3c>
 800af02:	0400      	lsls	r0, r0, #16
 800af04:	2310      	movs	r3, #16
 800af06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af0a:	bf04      	itt	eq
 800af0c:	0200      	lsleq	r0, r0, #8
 800af0e:	3308      	addeq	r3, #8
 800af10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af14:	bf04      	itt	eq
 800af16:	0100      	lsleq	r0, r0, #4
 800af18:	3304      	addeq	r3, #4
 800af1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af1e:	bf04      	itt	eq
 800af20:	0080      	lsleq	r0, r0, #2
 800af22:	3302      	addeq	r3, #2
 800af24:	2800      	cmp	r0, #0
 800af26:	db05      	blt.n	800af34 <__hi0bits+0x38>
 800af28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af2c:	f103 0301 	add.w	r3, r3, #1
 800af30:	bf08      	it	eq
 800af32:	2320      	moveq	r3, #32
 800af34:	4618      	mov	r0, r3
 800af36:	4770      	bx	lr
 800af38:	2300      	movs	r3, #0
 800af3a:	e7e4      	b.n	800af06 <__hi0bits+0xa>

0800af3c <__lo0bits>:
 800af3c:	6803      	ldr	r3, [r0, #0]
 800af3e:	f013 0207 	ands.w	r2, r3, #7
 800af42:	4601      	mov	r1, r0
 800af44:	d00b      	beq.n	800af5e <__lo0bits+0x22>
 800af46:	07da      	lsls	r2, r3, #31
 800af48:	d423      	bmi.n	800af92 <__lo0bits+0x56>
 800af4a:	0798      	lsls	r0, r3, #30
 800af4c:	bf49      	itett	mi
 800af4e:	085b      	lsrmi	r3, r3, #1
 800af50:	089b      	lsrpl	r3, r3, #2
 800af52:	2001      	movmi	r0, #1
 800af54:	600b      	strmi	r3, [r1, #0]
 800af56:	bf5c      	itt	pl
 800af58:	600b      	strpl	r3, [r1, #0]
 800af5a:	2002      	movpl	r0, #2
 800af5c:	4770      	bx	lr
 800af5e:	b298      	uxth	r0, r3
 800af60:	b9a8      	cbnz	r0, 800af8e <__lo0bits+0x52>
 800af62:	0c1b      	lsrs	r3, r3, #16
 800af64:	2010      	movs	r0, #16
 800af66:	b2da      	uxtb	r2, r3
 800af68:	b90a      	cbnz	r2, 800af6e <__lo0bits+0x32>
 800af6a:	3008      	adds	r0, #8
 800af6c:	0a1b      	lsrs	r3, r3, #8
 800af6e:	071a      	lsls	r2, r3, #28
 800af70:	bf04      	itt	eq
 800af72:	091b      	lsreq	r3, r3, #4
 800af74:	3004      	addeq	r0, #4
 800af76:	079a      	lsls	r2, r3, #30
 800af78:	bf04      	itt	eq
 800af7a:	089b      	lsreq	r3, r3, #2
 800af7c:	3002      	addeq	r0, #2
 800af7e:	07da      	lsls	r2, r3, #31
 800af80:	d403      	bmi.n	800af8a <__lo0bits+0x4e>
 800af82:	085b      	lsrs	r3, r3, #1
 800af84:	f100 0001 	add.w	r0, r0, #1
 800af88:	d005      	beq.n	800af96 <__lo0bits+0x5a>
 800af8a:	600b      	str	r3, [r1, #0]
 800af8c:	4770      	bx	lr
 800af8e:	4610      	mov	r0, r2
 800af90:	e7e9      	b.n	800af66 <__lo0bits+0x2a>
 800af92:	2000      	movs	r0, #0
 800af94:	4770      	bx	lr
 800af96:	2020      	movs	r0, #32
 800af98:	4770      	bx	lr
	...

0800af9c <__i2b>:
 800af9c:	b510      	push	{r4, lr}
 800af9e:	460c      	mov	r4, r1
 800afa0:	2101      	movs	r1, #1
 800afa2:	f7ff feb9 	bl	800ad18 <_Balloc>
 800afa6:	4602      	mov	r2, r0
 800afa8:	b928      	cbnz	r0, 800afb6 <__i2b+0x1a>
 800afaa:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <__i2b+0x24>)
 800afac:	4805      	ldr	r0, [pc, #20]	; (800afc4 <__i2b+0x28>)
 800afae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800afb2:	f7fc fa91 	bl	80074d8 <__assert_func>
 800afb6:	2301      	movs	r3, #1
 800afb8:	6144      	str	r4, [r0, #20]
 800afba:	6103      	str	r3, [r0, #16]
 800afbc:	bd10      	pop	{r4, pc}
 800afbe:	bf00      	nop
 800afc0:	0800d648 	.word	0x0800d648
 800afc4:	0800d738 	.word	0x0800d738

0800afc8 <__multiply>:
 800afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afcc:	4691      	mov	r9, r2
 800afce:	690a      	ldr	r2, [r1, #16]
 800afd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	bfb8      	it	lt
 800afd8:	460b      	movlt	r3, r1
 800afda:	460c      	mov	r4, r1
 800afdc:	bfbc      	itt	lt
 800afde:	464c      	movlt	r4, r9
 800afe0:	4699      	movlt	r9, r3
 800afe2:	6927      	ldr	r7, [r4, #16]
 800afe4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800afe8:	68a3      	ldr	r3, [r4, #8]
 800afea:	6861      	ldr	r1, [r4, #4]
 800afec:	eb07 060a 	add.w	r6, r7, sl
 800aff0:	42b3      	cmp	r3, r6
 800aff2:	b085      	sub	sp, #20
 800aff4:	bfb8      	it	lt
 800aff6:	3101      	addlt	r1, #1
 800aff8:	f7ff fe8e 	bl	800ad18 <_Balloc>
 800affc:	b930      	cbnz	r0, 800b00c <__multiply+0x44>
 800affe:	4602      	mov	r2, r0
 800b000:	4b44      	ldr	r3, [pc, #272]	; (800b114 <__multiply+0x14c>)
 800b002:	4845      	ldr	r0, [pc, #276]	; (800b118 <__multiply+0x150>)
 800b004:	f240 115d 	movw	r1, #349	; 0x15d
 800b008:	f7fc fa66 	bl	80074d8 <__assert_func>
 800b00c:	f100 0514 	add.w	r5, r0, #20
 800b010:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b014:	462b      	mov	r3, r5
 800b016:	2200      	movs	r2, #0
 800b018:	4543      	cmp	r3, r8
 800b01a:	d321      	bcc.n	800b060 <__multiply+0x98>
 800b01c:	f104 0314 	add.w	r3, r4, #20
 800b020:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b024:	f109 0314 	add.w	r3, r9, #20
 800b028:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b02c:	9202      	str	r2, [sp, #8]
 800b02e:	1b3a      	subs	r2, r7, r4
 800b030:	3a15      	subs	r2, #21
 800b032:	f022 0203 	bic.w	r2, r2, #3
 800b036:	3204      	adds	r2, #4
 800b038:	f104 0115 	add.w	r1, r4, #21
 800b03c:	428f      	cmp	r7, r1
 800b03e:	bf38      	it	cc
 800b040:	2204      	movcc	r2, #4
 800b042:	9201      	str	r2, [sp, #4]
 800b044:	9a02      	ldr	r2, [sp, #8]
 800b046:	9303      	str	r3, [sp, #12]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d80c      	bhi.n	800b066 <__multiply+0x9e>
 800b04c:	2e00      	cmp	r6, #0
 800b04e:	dd03      	ble.n	800b058 <__multiply+0x90>
 800b050:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b054:	2b00      	cmp	r3, #0
 800b056:	d05a      	beq.n	800b10e <__multiply+0x146>
 800b058:	6106      	str	r6, [r0, #16]
 800b05a:	b005      	add	sp, #20
 800b05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b060:	f843 2b04 	str.w	r2, [r3], #4
 800b064:	e7d8      	b.n	800b018 <__multiply+0x50>
 800b066:	f8b3 a000 	ldrh.w	sl, [r3]
 800b06a:	f1ba 0f00 	cmp.w	sl, #0
 800b06e:	d024      	beq.n	800b0ba <__multiply+0xf2>
 800b070:	f104 0e14 	add.w	lr, r4, #20
 800b074:	46a9      	mov	r9, r5
 800b076:	f04f 0c00 	mov.w	ip, #0
 800b07a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b07e:	f8d9 1000 	ldr.w	r1, [r9]
 800b082:	fa1f fb82 	uxth.w	fp, r2
 800b086:	b289      	uxth	r1, r1
 800b088:	fb0a 110b 	mla	r1, sl, fp, r1
 800b08c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b090:	f8d9 2000 	ldr.w	r2, [r9]
 800b094:	4461      	add	r1, ip
 800b096:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b09a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b09e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0a2:	b289      	uxth	r1, r1
 800b0a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0a8:	4577      	cmp	r7, lr
 800b0aa:	f849 1b04 	str.w	r1, [r9], #4
 800b0ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0b2:	d8e2      	bhi.n	800b07a <__multiply+0xb2>
 800b0b4:	9a01      	ldr	r2, [sp, #4]
 800b0b6:	f845 c002 	str.w	ip, [r5, r2]
 800b0ba:	9a03      	ldr	r2, [sp, #12]
 800b0bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	f1b9 0f00 	cmp.w	r9, #0
 800b0c6:	d020      	beq.n	800b10a <__multiply+0x142>
 800b0c8:	6829      	ldr	r1, [r5, #0]
 800b0ca:	f104 0c14 	add.w	ip, r4, #20
 800b0ce:	46ae      	mov	lr, r5
 800b0d0:	f04f 0a00 	mov.w	sl, #0
 800b0d4:	f8bc b000 	ldrh.w	fp, [ip]
 800b0d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b0dc:	fb09 220b 	mla	r2, r9, fp, r2
 800b0e0:	4492      	add	sl, r2
 800b0e2:	b289      	uxth	r1, r1
 800b0e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b0e8:	f84e 1b04 	str.w	r1, [lr], #4
 800b0ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b0f0:	f8be 1000 	ldrh.w	r1, [lr]
 800b0f4:	0c12      	lsrs	r2, r2, #16
 800b0f6:	fb09 1102 	mla	r1, r9, r2, r1
 800b0fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b0fe:	4567      	cmp	r7, ip
 800b100:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b104:	d8e6      	bhi.n	800b0d4 <__multiply+0x10c>
 800b106:	9a01      	ldr	r2, [sp, #4]
 800b108:	50a9      	str	r1, [r5, r2]
 800b10a:	3504      	adds	r5, #4
 800b10c:	e79a      	b.n	800b044 <__multiply+0x7c>
 800b10e:	3e01      	subs	r6, #1
 800b110:	e79c      	b.n	800b04c <__multiply+0x84>
 800b112:	bf00      	nop
 800b114:	0800d648 	.word	0x0800d648
 800b118:	0800d738 	.word	0x0800d738

0800b11c <__pow5mult>:
 800b11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b120:	4615      	mov	r5, r2
 800b122:	f012 0203 	ands.w	r2, r2, #3
 800b126:	4606      	mov	r6, r0
 800b128:	460f      	mov	r7, r1
 800b12a:	d007      	beq.n	800b13c <__pow5mult+0x20>
 800b12c:	4c25      	ldr	r4, [pc, #148]	; (800b1c4 <__pow5mult+0xa8>)
 800b12e:	3a01      	subs	r2, #1
 800b130:	2300      	movs	r3, #0
 800b132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b136:	f7ff fe51 	bl	800addc <__multadd>
 800b13a:	4607      	mov	r7, r0
 800b13c:	10ad      	asrs	r5, r5, #2
 800b13e:	d03d      	beq.n	800b1bc <__pow5mult+0xa0>
 800b140:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b142:	b97c      	cbnz	r4, 800b164 <__pow5mult+0x48>
 800b144:	2010      	movs	r0, #16
 800b146:	f7ff fdb3 	bl	800acb0 <malloc>
 800b14a:	4602      	mov	r2, r0
 800b14c:	6270      	str	r0, [r6, #36]	; 0x24
 800b14e:	b928      	cbnz	r0, 800b15c <__pow5mult+0x40>
 800b150:	4b1d      	ldr	r3, [pc, #116]	; (800b1c8 <__pow5mult+0xac>)
 800b152:	481e      	ldr	r0, [pc, #120]	; (800b1cc <__pow5mult+0xb0>)
 800b154:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b158:	f7fc f9be 	bl	80074d8 <__assert_func>
 800b15c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b160:	6004      	str	r4, [r0, #0]
 800b162:	60c4      	str	r4, [r0, #12]
 800b164:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b16c:	b94c      	cbnz	r4, 800b182 <__pow5mult+0x66>
 800b16e:	f240 2171 	movw	r1, #625	; 0x271
 800b172:	4630      	mov	r0, r6
 800b174:	f7ff ff12 	bl	800af9c <__i2b>
 800b178:	2300      	movs	r3, #0
 800b17a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b17e:	4604      	mov	r4, r0
 800b180:	6003      	str	r3, [r0, #0]
 800b182:	f04f 0900 	mov.w	r9, #0
 800b186:	07eb      	lsls	r3, r5, #31
 800b188:	d50a      	bpl.n	800b1a0 <__pow5mult+0x84>
 800b18a:	4639      	mov	r1, r7
 800b18c:	4622      	mov	r2, r4
 800b18e:	4630      	mov	r0, r6
 800b190:	f7ff ff1a 	bl	800afc8 <__multiply>
 800b194:	4639      	mov	r1, r7
 800b196:	4680      	mov	r8, r0
 800b198:	4630      	mov	r0, r6
 800b19a:	f7ff fdfd 	bl	800ad98 <_Bfree>
 800b19e:	4647      	mov	r7, r8
 800b1a0:	106d      	asrs	r5, r5, #1
 800b1a2:	d00b      	beq.n	800b1bc <__pow5mult+0xa0>
 800b1a4:	6820      	ldr	r0, [r4, #0]
 800b1a6:	b938      	cbnz	r0, 800b1b8 <__pow5mult+0x9c>
 800b1a8:	4622      	mov	r2, r4
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f7ff ff0b 	bl	800afc8 <__multiply>
 800b1b2:	6020      	str	r0, [r4, #0]
 800b1b4:	f8c0 9000 	str.w	r9, [r0]
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	e7e4      	b.n	800b186 <__pow5mult+0x6a>
 800b1bc:	4638      	mov	r0, r7
 800b1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1c2:	bf00      	nop
 800b1c4:	0800d888 	.word	0x0800d888
 800b1c8:	0800d5d6 	.word	0x0800d5d6
 800b1cc:	0800d738 	.word	0x0800d738

0800b1d0 <__lshift>:
 800b1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	6849      	ldr	r1, [r1, #4]
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1de:	68a3      	ldr	r3, [r4, #8]
 800b1e0:	4607      	mov	r7, r0
 800b1e2:	4691      	mov	r9, r2
 800b1e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1e8:	f108 0601 	add.w	r6, r8, #1
 800b1ec:	42b3      	cmp	r3, r6
 800b1ee:	db0b      	blt.n	800b208 <__lshift+0x38>
 800b1f0:	4638      	mov	r0, r7
 800b1f2:	f7ff fd91 	bl	800ad18 <_Balloc>
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	b948      	cbnz	r0, 800b20e <__lshift+0x3e>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	4b2a      	ldr	r3, [pc, #168]	; (800b2a8 <__lshift+0xd8>)
 800b1fe:	482b      	ldr	r0, [pc, #172]	; (800b2ac <__lshift+0xdc>)
 800b200:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b204:	f7fc f968 	bl	80074d8 <__assert_func>
 800b208:	3101      	adds	r1, #1
 800b20a:	005b      	lsls	r3, r3, #1
 800b20c:	e7ee      	b.n	800b1ec <__lshift+0x1c>
 800b20e:	2300      	movs	r3, #0
 800b210:	f100 0114 	add.w	r1, r0, #20
 800b214:	f100 0210 	add.w	r2, r0, #16
 800b218:	4618      	mov	r0, r3
 800b21a:	4553      	cmp	r3, sl
 800b21c:	db37      	blt.n	800b28e <__lshift+0xbe>
 800b21e:	6920      	ldr	r0, [r4, #16]
 800b220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b224:	f104 0314 	add.w	r3, r4, #20
 800b228:	f019 091f 	ands.w	r9, r9, #31
 800b22c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b230:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b234:	d02f      	beq.n	800b296 <__lshift+0xc6>
 800b236:	f1c9 0e20 	rsb	lr, r9, #32
 800b23a:	468a      	mov	sl, r1
 800b23c:	f04f 0c00 	mov.w	ip, #0
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	fa02 f209 	lsl.w	r2, r2, r9
 800b246:	ea42 020c 	orr.w	r2, r2, ip
 800b24a:	f84a 2b04 	str.w	r2, [sl], #4
 800b24e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b252:	4298      	cmp	r0, r3
 800b254:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b258:	d8f2      	bhi.n	800b240 <__lshift+0x70>
 800b25a:	1b03      	subs	r3, r0, r4
 800b25c:	3b15      	subs	r3, #21
 800b25e:	f023 0303 	bic.w	r3, r3, #3
 800b262:	3304      	adds	r3, #4
 800b264:	f104 0215 	add.w	r2, r4, #21
 800b268:	4290      	cmp	r0, r2
 800b26a:	bf38      	it	cc
 800b26c:	2304      	movcc	r3, #4
 800b26e:	f841 c003 	str.w	ip, [r1, r3]
 800b272:	f1bc 0f00 	cmp.w	ip, #0
 800b276:	d001      	beq.n	800b27c <__lshift+0xac>
 800b278:	f108 0602 	add.w	r6, r8, #2
 800b27c:	3e01      	subs	r6, #1
 800b27e:	4638      	mov	r0, r7
 800b280:	612e      	str	r6, [r5, #16]
 800b282:	4621      	mov	r1, r4
 800b284:	f7ff fd88 	bl	800ad98 <_Bfree>
 800b288:	4628      	mov	r0, r5
 800b28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b292:	3301      	adds	r3, #1
 800b294:	e7c1      	b.n	800b21a <__lshift+0x4a>
 800b296:	3904      	subs	r1, #4
 800b298:	f853 2b04 	ldr.w	r2, [r3], #4
 800b29c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2a0:	4298      	cmp	r0, r3
 800b2a2:	d8f9      	bhi.n	800b298 <__lshift+0xc8>
 800b2a4:	e7ea      	b.n	800b27c <__lshift+0xac>
 800b2a6:	bf00      	nop
 800b2a8:	0800d648 	.word	0x0800d648
 800b2ac:	0800d738 	.word	0x0800d738

0800b2b0 <__mcmp>:
 800b2b0:	b530      	push	{r4, r5, lr}
 800b2b2:	6902      	ldr	r2, [r0, #16]
 800b2b4:	690c      	ldr	r4, [r1, #16]
 800b2b6:	1b12      	subs	r2, r2, r4
 800b2b8:	d10e      	bne.n	800b2d8 <__mcmp+0x28>
 800b2ba:	f100 0314 	add.w	r3, r0, #20
 800b2be:	3114      	adds	r1, #20
 800b2c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b2c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b2cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b2d0:	42a5      	cmp	r5, r4
 800b2d2:	d003      	beq.n	800b2dc <__mcmp+0x2c>
 800b2d4:	d305      	bcc.n	800b2e2 <__mcmp+0x32>
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	4610      	mov	r0, r2
 800b2da:	bd30      	pop	{r4, r5, pc}
 800b2dc:	4283      	cmp	r3, r0
 800b2de:	d3f3      	bcc.n	800b2c8 <__mcmp+0x18>
 800b2e0:	e7fa      	b.n	800b2d8 <__mcmp+0x28>
 800b2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e6:	e7f7      	b.n	800b2d8 <__mcmp+0x28>

0800b2e8 <__mdiff>:
 800b2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	4690      	mov	r8, r2
 800b2f6:	f7ff ffdb 	bl	800b2b0 <__mcmp>
 800b2fa:	1e05      	subs	r5, r0, #0
 800b2fc:	d110      	bne.n	800b320 <__mdiff+0x38>
 800b2fe:	4629      	mov	r1, r5
 800b300:	4630      	mov	r0, r6
 800b302:	f7ff fd09 	bl	800ad18 <_Balloc>
 800b306:	b930      	cbnz	r0, 800b316 <__mdiff+0x2e>
 800b308:	4b3a      	ldr	r3, [pc, #232]	; (800b3f4 <__mdiff+0x10c>)
 800b30a:	4602      	mov	r2, r0
 800b30c:	f240 2132 	movw	r1, #562	; 0x232
 800b310:	4839      	ldr	r0, [pc, #228]	; (800b3f8 <__mdiff+0x110>)
 800b312:	f7fc f8e1 	bl	80074d8 <__assert_func>
 800b316:	2301      	movs	r3, #1
 800b318:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b31c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b320:	bfa4      	itt	ge
 800b322:	4643      	movge	r3, r8
 800b324:	46a0      	movge	r8, r4
 800b326:	4630      	mov	r0, r6
 800b328:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b32c:	bfa6      	itte	ge
 800b32e:	461c      	movge	r4, r3
 800b330:	2500      	movge	r5, #0
 800b332:	2501      	movlt	r5, #1
 800b334:	f7ff fcf0 	bl	800ad18 <_Balloc>
 800b338:	b920      	cbnz	r0, 800b344 <__mdiff+0x5c>
 800b33a:	4b2e      	ldr	r3, [pc, #184]	; (800b3f4 <__mdiff+0x10c>)
 800b33c:	4602      	mov	r2, r0
 800b33e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b342:	e7e5      	b.n	800b310 <__mdiff+0x28>
 800b344:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b348:	6926      	ldr	r6, [r4, #16]
 800b34a:	60c5      	str	r5, [r0, #12]
 800b34c:	f104 0914 	add.w	r9, r4, #20
 800b350:	f108 0514 	add.w	r5, r8, #20
 800b354:	f100 0e14 	add.w	lr, r0, #20
 800b358:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b35c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b360:	f108 0210 	add.w	r2, r8, #16
 800b364:	46f2      	mov	sl, lr
 800b366:	2100      	movs	r1, #0
 800b368:	f859 3b04 	ldr.w	r3, [r9], #4
 800b36c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b370:	fa1f f883 	uxth.w	r8, r3
 800b374:	fa11 f18b 	uxtah	r1, r1, fp
 800b378:	0c1b      	lsrs	r3, r3, #16
 800b37a:	eba1 0808 	sub.w	r8, r1, r8
 800b37e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b382:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b386:	fa1f f888 	uxth.w	r8, r8
 800b38a:	1419      	asrs	r1, r3, #16
 800b38c:	454e      	cmp	r6, r9
 800b38e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b392:	f84a 3b04 	str.w	r3, [sl], #4
 800b396:	d8e7      	bhi.n	800b368 <__mdiff+0x80>
 800b398:	1b33      	subs	r3, r6, r4
 800b39a:	3b15      	subs	r3, #21
 800b39c:	f023 0303 	bic.w	r3, r3, #3
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	3415      	adds	r4, #21
 800b3a4:	42a6      	cmp	r6, r4
 800b3a6:	bf38      	it	cc
 800b3a8:	2304      	movcc	r3, #4
 800b3aa:	441d      	add	r5, r3
 800b3ac:	4473      	add	r3, lr
 800b3ae:	469e      	mov	lr, r3
 800b3b0:	462e      	mov	r6, r5
 800b3b2:	4566      	cmp	r6, ip
 800b3b4:	d30e      	bcc.n	800b3d4 <__mdiff+0xec>
 800b3b6:	f10c 0203 	add.w	r2, ip, #3
 800b3ba:	1b52      	subs	r2, r2, r5
 800b3bc:	f022 0203 	bic.w	r2, r2, #3
 800b3c0:	3d03      	subs	r5, #3
 800b3c2:	45ac      	cmp	ip, r5
 800b3c4:	bf38      	it	cc
 800b3c6:	2200      	movcc	r2, #0
 800b3c8:	441a      	add	r2, r3
 800b3ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b3ce:	b17b      	cbz	r3, 800b3f0 <__mdiff+0x108>
 800b3d0:	6107      	str	r7, [r0, #16]
 800b3d2:	e7a3      	b.n	800b31c <__mdiff+0x34>
 800b3d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b3d8:	fa11 f288 	uxtah	r2, r1, r8
 800b3dc:	1414      	asrs	r4, r2, #16
 800b3de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b3e2:	b292      	uxth	r2, r2
 800b3e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b3e8:	f84e 2b04 	str.w	r2, [lr], #4
 800b3ec:	1421      	asrs	r1, r4, #16
 800b3ee:	e7e0      	b.n	800b3b2 <__mdiff+0xca>
 800b3f0:	3f01      	subs	r7, #1
 800b3f2:	e7ea      	b.n	800b3ca <__mdiff+0xe2>
 800b3f4:	0800d648 	.word	0x0800d648
 800b3f8:	0800d738 	.word	0x0800d738

0800b3fc <__ulp>:
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	ed8d 0b00 	vstr	d0, [sp]
 800b402:	9b01      	ldr	r3, [sp, #4]
 800b404:	4912      	ldr	r1, [pc, #72]	; (800b450 <__ulp+0x54>)
 800b406:	4019      	ands	r1, r3
 800b408:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b40c:	2900      	cmp	r1, #0
 800b40e:	dd05      	ble.n	800b41c <__ulp+0x20>
 800b410:	2200      	movs	r2, #0
 800b412:	460b      	mov	r3, r1
 800b414:	ec43 2b10 	vmov	d0, r2, r3
 800b418:	b002      	add	sp, #8
 800b41a:	4770      	bx	lr
 800b41c:	4249      	negs	r1, r1
 800b41e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b422:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b426:	f04f 0200 	mov.w	r2, #0
 800b42a:	f04f 0300 	mov.w	r3, #0
 800b42e:	da04      	bge.n	800b43a <__ulp+0x3e>
 800b430:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b434:	fa41 f300 	asr.w	r3, r1, r0
 800b438:	e7ec      	b.n	800b414 <__ulp+0x18>
 800b43a:	f1a0 0114 	sub.w	r1, r0, #20
 800b43e:	291e      	cmp	r1, #30
 800b440:	bfda      	itte	le
 800b442:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b446:	fa20 f101 	lsrle.w	r1, r0, r1
 800b44a:	2101      	movgt	r1, #1
 800b44c:	460a      	mov	r2, r1
 800b44e:	e7e1      	b.n	800b414 <__ulp+0x18>
 800b450:	7ff00000 	.word	0x7ff00000

0800b454 <__b2d>:
 800b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b456:	6905      	ldr	r5, [r0, #16]
 800b458:	f100 0714 	add.w	r7, r0, #20
 800b45c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b460:	1f2e      	subs	r6, r5, #4
 800b462:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b466:	4620      	mov	r0, r4
 800b468:	f7ff fd48 	bl	800aefc <__hi0bits>
 800b46c:	f1c0 0320 	rsb	r3, r0, #32
 800b470:	280a      	cmp	r0, #10
 800b472:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b4f0 <__b2d+0x9c>
 800b476:	600b      	str	r3, [r1, #0]
 800b478:	dc14      	bgt.n	800b4a4 <__b2d+0x50>
 800b47a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b47e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b482:	42b7      	cmp	r7, r6
 800b484:	ea41 030c 	orr.w	r3, r1, ip
 800b488:	bf34      	ite	cc
 800b48a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b48e:	2100      	movcs	r1, #0
 800b490:	3015      	adds	r0, #21
 800b492:	fa04 f000 	lsl.w	r0, r4, r0
 800b496:	fa21 f10e 	lsr.w	r1, r1, lr
 800b49a:	ea40 0201 	orr.w	r2, r0, r1
 800b49e:	ec43 2b10 	vmov	d0, r2, r3
 800b4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4a4:	42b7      	cmp	r7, r6
 800b4a6:	bf3a      	itte	cc
 800b4a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b4ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800b4b0:	2100      	movcs	r1, #0
 800b4b2:	380b      	subs	r0, #11
 800b4b4:	d017      	beq.n	800b4e6 <__b2d+0x92>
 800b4b6:	f1c0 0c20 	rsb	ip, r0, #32
 800b4ba:	fa04 f500 	lsl.w	r5, r4, r0
 800b4be:	42be      	cmp	r6, r7
 800b4c0:	fa21 f40c 	lsr.w	r4, r1, ip
 800b4c4:	ea45 0504 	orr.w	r5, r5, r4
 800b4c8:	bf8c      	ite	hi
 800b4ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b4ce:	2400      	movls	r4, #0
 800b4d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b4d4:	fa01 f000 	lsl.w	r0, r1, r0
 800b4d8:	fa24 f40c 	lsr.w	r4, r4, ip
 800b4dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b4e0:	ea40 0204 	orr.w	r2, r0, r4
 800b4e4:	e7db      	b.n	800b49e <__b2d+0x4a>
 800b4e6:	ea44 030c 	orr.w	r3, r4, ip
 800b4ea:	460a      	mov	r2, r1
 800b4ec:	e7d7      	b.n	800b49e <__b2d+0x4a>
 800b4ee:	bf00      	nop
 800b4f0:	3ff00000 	.word	0x3ff00000

0800b4f4 <__d2b>:
 800b4f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	4689      	mov	r9, r1
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	ec57 6b10 	vmov	r6, r7, d0
 800b500:	4690      	mov	r8, r2
 800b502:	f7ff fc09 	bl	800ad18 <_Balloc>
 800b506:	4604      	mov	r4, r0
 800b508:	b930      	cbnz	r0, 800b518 <__d2b+0x24>
 800b50a:	4602      	mov	r2, r0
 800b50c:	4b25      	ldr	r3, [pc, #148]	; (800b5a4 <__d2b+0xb0>)
 800b50e:	4826      	ldr	r0, [pc, #152]	; (800b5a8 <__d2b+0xb4>)
 800b510:	f240 310a 	movw	r1, #778	; 0x30a
 800b514:	f7fb ffe0 	bl	80074d8 <__assert_func>
 800b518:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b51c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b520:	bb35      	cbnz	r5, 800b570 <__d2b+0x7c>
 800b522:	2e00      	cmp	r6, #0
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	d028      	beq.n	800b57a <__d2b+0x86>
 800b528:	4668      	mov	r0, sp
 800b52a:	9600      	str	r6, [sp, #0]
 800b52c:	f7ff fd06 	bl	800af3c <__lo0bits>
 800b530:	9900      	ldr	r1, [sp, #0]
 800b532:	b300      	cbz	r0, 800b576 <__d2b+0x82>
 800b534:	9a01      	ldr	r2, [sp, #4]
 800b536:	f1c0 0320 	rsb	r3, r0, #32
 800b53a:	fa02 f303 	lsl.w	r3, r2, r3
 800b53e:	430b      	orrs	r3, r1
 800b540:	40c2      	lsrs	r2, r0
 800b542:	6163      	str	r3, [r4, #20]
 800b544:	9201      	str	r2, [sp, #4]
 800b546:	9b01      	ldr	r3, [sp, #4]
 800b548:	61a3      	str	r3, [r4, #24]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	bf14      	ite	ne
 800b54e:	2202      	movne	r2, #2
 800b550:	2201      	moveq	r2, #1
 800b552:	6122      	str	r2, [r4, #16]
 800b554:	b1d5      	cbz	r5, 800b58c <__d2b+0x98>
 800b556:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b55a:	4405      	add	r5, r0
 800b55c:	f8c9 5000 	str.w	r5, [r9]
 800b560:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b564:	f8c8 0000 	str.w	r0, [r8]
 800b568:	4620      	mov	r0, r4
 800b56a:	b003      	add	sp, #12
 800b56c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b574:	e7d5      	b.n	800b522 <__d2b+0x2e>
 800b576:	6161      	str	r1, [r4, #20]
 800b578:	e7e5      	b.n	800b546 <__d2b+0x52>
 800b57a:	a801      	add	r0, sp, #4
 800b57c:	f7ff fcde 	bl	800af3c <__lo0bits>
 800b580:	9b01      	ldr	r3, [sp, #4]
 800b582:	6163      	str	r3, [r4, #20]
 800b584:	2201      	movs	r2, #1
 800b586:	6122      	str	r2, [r4, #16]
 800b588:	3020      	adds	r0, #32
 800b58a:	e7e3      	b.n	800b554 <__d2b+0x60>
 800b58c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b590:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b594:	f8c9 0000 	str.w	r0, [r9]
 800b598:	6918      	ldr	r0, [r3, #16]
 800b59a:	f7ff fcaf 	bl	800aefc <__hi0bits>
 800b59e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5a2:	e7df      	b.n	800b564 <__d2b+0x70>
 800b5a4:	0800d648 	.word	0x0800d648
 800b5a8:	0800d738 	.word	0x0800d738

0800b5ac <__ratio>:
 800b5ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	4688      	mov	r8, r1
 800b5b2:	4669      	mov	r1, sp
 800b5b4:	4681      	mov	r9, r0
 800b5b6:	f7ff ff4d 	bl	800b454 <__b2d>
 800b5ba:	a901      	add	r1, sp, #4
 800b5bc:	4640      	mov	r0, r8
 800b5be:	ec55 4b10 	vmov	r4, r5, d0
 800b5c2:	f7ff ff47 	bl	800b454 <__b2d>
 800b5c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b5ce:	eba3 0c02 	sub.w	ip, r3, r2
 800b5d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b5d6:	1a9b      	subs	r3, r3, r2
 800b5d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b5dc:	ec51 0b10 	vmov	r0, r1, d0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	bfd6      	itet	le
 800b5e4:	460a      	movle	r2, r1
 800b5e6:	462a      	movgt	r2, r5
 800b5e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b5ec:	468b      	mov	fp, r1
 800b5ee:	462f      	mov	r7, r5
 800b5f0:	bfd4      	ite	le
 800b5f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b5f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	ee10 2a10 	vmov	r2, s0
 800b600:	465b      	mov	r3, fp
 800b602:	4639      	mov	r1, r7
 800b604:	f7f5 f92a 	bl	800085c <__aeabi_ddiv>
 800b608:	ec41 0b10 	vmov	d0, r0, r1
 800b60c:	b003      	add	sp, #12
 800b60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b612 <__copybits>:
 800b612:	3901      	subs	r1, #1
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	1149      	asrs	r1, r1, #5
 800b618:	6914      	ldr	r4, [r2, #16]
 800b61a:	3101      	adds	r1, #1
 800b61c:	f102 0314 	add.w	r3, r2, #20
 800b620:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b624:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b628:	1f05      	subs	r5, r0, #4
 800b62a:	42a3      	cmp	r3, r4
 800b62c:	d30c      	bcc.n	800b648 <__copybits+0x36>
 800b62e:	1aa3      	subs	r3, r4, r2
 800b630:	3b11      	subs	r3, #17
 800b632:	f023 0303 	bic.w	r3, r3, #3
 800b636:	3211      	adds	r2, #17
 800b638:	42a2      	cmp	r2, r4
 800b63a:	bf88      	it	hi
 800b63c:	2300      	movhi	r3, #0
 800b63e:	4418      	add	r0, r3
 800b640:	2300      	movs	r3, #0
 800b642:	4288      	cmp	r0, r1
 800b644:	d305      	bcc.n	800b652 <__copybits+0x40>
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	f853 6b04 	ldr.w	r6, [r3], #4
 800b64c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b650:	e7eb      	b.n	800b62a <__copybits+0x18>
 800b652:	f840 3b04 	str.w	r3, [r0], #4
 800b656:	e7f4      	b.n	800b642 <__copybits+0x30>

0800b658 <__any_on>:
 800b658:	f100 0214 	add.w	r2, r0, #20
 800b65c:	6900      	ldr	r0, [r0, #16]
 800b65e:	114b      	asrs	r3, r1, #5
 800b660:	4298      	cmp	r0, r3
 800b662:	b510      	push	{r4, lr}
 800b664:	db11      	blt.n	800b68a <__any_on+0x32>
 800b666:	dd0a      	ble.n	800b67e <__any_on+0x26>
 800b668:	f011 011f 	ands.w	r1, r1, #31
 800b66c:	d007      	beq.n	800b67e <__any_on+0x26>
 800b66e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b672:	fa24 f001 	lsr.w	r0, r4, r1
 800b676:	fa00 f101 	lsl.w	r1, r0, r1
 800b67a:	428c      	cmp	r4, r1
 800b67c:	d10b      	bne.n	800b696 <__any_on+0x3e>
 800b67e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b682:	4293      	cmp	r3, r2
 800b684:	d803      	bhi.n	800b68e <__any_on+0x36>
 800b686:	2000      	movs	r0, #0
 800b688:	bd10      	pop	{r4, pc}
 800b68a:	4603      	mov	r3, r0
 800b68c:	e7f7      	b.n	800b67e <__any_on+0x26>
 800b68e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b692:	2900      	cmp	r1, #0
 800b694:	d0f5      	beq.n	800b682 <__any_on+0x2a>
 800b696:	2001      	movs	r0, #1
 800b698:	e7f6      	b.n	800b688 <__any_on+0x30>

0800b69a <_calloc_r>:
 800b69a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b69c:	fba1 2402 	umull	r2, r4, r1, r2
 800b6a0:	b94c      	cbnz	r4, 800b6b6 <_calloc_r+0x1c>
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	9201      	str	r2, [sp, #4]
 800b6a6:	f000 f87b 	bl	800b7a0 <_malloc_r>
 800b6aa:	9a01      	ldr	r2, [sp, #4]
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	b930      	cbnz	r0, 800b6be <_calloc_r+0x24>
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	b003      	add	sp, #12
 800b6b4:	bd30      	pop	{r4, r5, pc}
 800b6b6:	220c      	movs	r2, #12
 800b6b8:	6002      	str	r2, [r0, #0]
 800b6ba:	2500      	movs	r5, #0
 800b6bc:	e7f8      	b.n	800b6b0 <_calloc_r+0x16>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	f7fb ff72 	bl	80075a8 <memset>
 800b6c4:	e7f4      	b.n	800b6b0 <_calloc_r+0x16>
	...

0800b6c8 <_free_r>:
 800b6c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ca:	2900      	cmp	r1, #0
 800b6cc:	d044      	beq.n	800b758 <_free_r+0x90>
 800b6ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6d2:	9001      	str	r0, [sp, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b6da:	bfb8      	it	lt
 800b6dc:	18e4      	addlt	r4, r4, r3
 800b6de:	f000 fb75 	bl	800bdcc <__malloc_lock>
 800b6e2:	4a1e      	ldr	r2, [pc, #120]	; (800b75c <_free_r+0x94>)
 800b6e4:	9801      	ldr	r0, [sp, #4]
 800b6e6:	6813      	ldr	r3, [r2, #0]
 800b6e8:	b933      	cbnz	r3, 800b6f8 <_free_r+0x30>
 800b6ea:	6063      	str	r3, [r4, #4]
 800b6ec:	6014      	str	r4, [r2, #0]
 800b6ee:	b003      	add	sp, #12
 800b6f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6f4:	f000 bb70 	b.w	800bdd8 <__malloc_unlock>
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	d908      	bls.n	800b70e <_free_r+0x46>
 800b6fc:	6825      	ldr	r5, [r4, #0]
 800b6fe:	1961      	adds	r1, r4, r5
 800b700:	428b      	cmp	r3, r1
 800b702:	bf01      	itttt	eq
 800b704:	6819      	ldreq	r1, [r3, #0]
 800b706:	685b      	ldreq	r3, [r3, #4]
 800b708:	1949      	addeq	r1, r1, r5
 800b70a:	6021      	streq	r1, [r4, #0]
 800b70c:	e7ed      	b.n	800b6ea <_free_r+0x22>
 800b70e:	461a      	mov	r2, r3
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	b10b      	cbz	r3, 800b718 <_free_r+0x50>
 800b714:	42a3      	cmp	r3, r4
 800b716:	d9fa      	bls.n	800b70e <_free_r+0x46>
 800b718:	6811      	ldr	r1, [r2, #0]
 800b71a:	1855      	adds	r5, r2, r1
 800b71c:	42a5      	cmp	r5, r4
 800b71e:	d10b      	bne.n	800b738 <_free_r+0x70>
 800b720:	6824      	ldr	r4, [r4, #0]
 800b722:	4421      	add	r1, r4
 800b724:	1854      	adds	r4, r2, r1
 800b726:	42a3      	cmp	r3, r4
 800b728:	6011      	str	r1, [r2, #0]
 800b72a:	d1e0      	bne.n	800b6ee <_free_r+0x26>
 800b72c:	681c      	ldr	r4, [r3, #0]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	6053      	str	r3, [r2, #4]
 800b732:	4421      	add	r1, r4
 800b734:	6011      	str	r1, [r2, #0]
 800b736:	e7da      	b.n	800b6ee <_free_r+0x26>
 800b738:	d902      	bls.n	800b740 <_free_r+0x78>
 800b73a:	230c      	movs	r3, #12
 800b73c:	6003      	str	r3, [r0, #0]
 800b73e:	e7d6      	b.n	800b6ee <_free_r+0x26>
 800b740:	6825      	ldr	r5, [r4, #0]
 800b742:	1961      	adds	r1, r4, r5
 800b744:	428b      	cmp	r3, r1
 800b746:	bf04      	itt	eq
 800b748:	6819      	ldreq	r1, [r3, #0]
 800b74a:	685b      	ldreq	r3, [r3, #4]
 800b74c:	6063      	str	r3, [r4, #4]
 800b74e:	bf04      	itt	eq
 800b750:	1949      	addeq	r1, r1, r5
 800b752:	6021      	streq	r1, [r4, #0]
 800b754:	6054      	str	r4, [r2, #4]
 800b756:	e7ca      	b.n	800b6ee <_free_r+0x26>
 800b758:	b003      	add	sp, #12
 800b75a:	bd30      	pop	{r4, r5, pc}
 800b75c:	20000484 	.word	0x20000484

0800b760 <sbrk_aligned>:
 800b760:	b570      	push	{r4, r5, r6, lr}
 800b762:	4e0e      	ldr	r6, [pc, #56]	; (800b79c <sbrk_aligned+0x3c>)
 800b764:	460c      	mov	r4, r1
 800b766:	6831      	ldr	r1, [r6, #0]
 800b768:	4605      	mov	r5, r0
 800b76a:	b911      	cbnz	r1, 800b772 <sbrk_aligned+0x12>
 800b76c:	f000 fa20 	bl	800bbb0 <_sbrk_r>
 800b770:	6030      	str	r0, [r6, #0]
 800b772:	4621      	mov	r1, r4
 800b774:	4628      	mov	r0, r5
 800b776:	f000 fa1b 	bl	800bbb0 <_sbrk_r>
 800b77a:	1c43      	adds	r3, r0, #1
 800b77c:	d00a      	beq.n	800b794 <sbrk_aligned+0x34>
 800b77e:	1cc4      	adds	r4, r0, #3
 800b780:	f024 0403 	bic.w	r4, r4, #3
 800b784:	42a0      	cmp	r0, r4
 800b786:	d007      	beq.n	800b798 <sbrk_aligned+0x38>
 800b788:	1a21      	subs	r1, r4, r0
 800b78a:	4628      	mov	r0, r5
 800b78c:	f000 fa10 	bl	800bbb0 <_sbrk_r>
 800b790:	3001      	adds	r0, #1
 800b792:	d101      	bne.n	800b798 <sbrk_aligned+0x38>
 800b794:	f04f 34ff 	mov.w	r4, #4294967295
 800b798:	4620      	mov	r0, r4
 800b79a:	bd70      	pop	{r4, r5, r6, pc}
 800b79c:	20000488 	.word	0x20000488

0800b7a0 <_malloc_r>:
 800b7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a4:	1ccd      	adds	r5, r1, #3
 800b7a6:	f025 0503 	bic.w	r5, r5, #3
 800b7aa:	3508      	adds	r5, #8
 800b7ac:	2d0c      	cmp	r5, #12
 800b7ae:	bf38      	it	cc
 800b7b0:	250c      	movcc	r5, #12
 800b7b2:	2d00      	cmp	r5, #0
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	db01      	blt.n	800b7bc <_malloc_r+0x1c>
 800b7b8:	42a9      	cmp	r1, r5
 800b7ba:	d905      	bls.n	800b7c8 <_malloc_r+0x28>
 800b7bc:	230c      	movs	r3, #12
 800b7be:	603b      	str	r3, [r7, #0]
 800b7c0:	2600      	movs	r6, #0
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c8:	4e2e      	ldr	r6, [pc, #184]	; (800b884 <_malloc_r+0xe4>)
 800b7ca:	f000 faff 	bl	800bdcc <__malloc_lock>
 800b7ce:	6833      	ldr	r3, [r6, #0]
 800b7d0:	461c      	mov	r4, r3
 800b7d2:	bb34      	cbnz	r4, 800b822 <_malloc_r+0x82>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	f7ff ffc2 	bl	800b760 <sbrk_aligned>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	4604      	mov	r4, r0
 800b7e0:	d14d      	bne.n	800b87e <_malloc_r+0xde>
 800b7e2:	6834      	ldr	r4, [r6, #0]
 800b7e4:	4626      	mov	r6, r4
 800b7e6:	2e00      	cmp	r6, #0
 800b7e8:	d140      	bne.n	800b86c <_malloc_r+0xcc>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	eb04 0803 	add.w	r8, r4, r3
 800b7f4:	f000 f9dc 	bl	800bbb0 <_sbrk_r>
 800b7f8:	4580      	cmp	r8, r0
 800b7fa:	d13a      	bne.n	800b872 <_malloc_r+0xd2>
 800b7fc:	6821      	ldr	r1, [r4, #0]
 800b7fe:	3503      	adds	r5, #3
 800b800:	1a6d      	subs	r5, r5, r1
 800b802:	f025 0503 	bic.w	r5, r5, #3
 800b806:	3508      	adds	r5, #8
 800b808:	2d0c      	cmp	r5, #12
 800b80a:	bf38      	it	cc
 800b80c:	250c      	movcc	r5, #12
 800b80e:	4629      	mov	r1, r5
 800b810:	4638      	mov	r0, r7
 800b812:	f7ff ffa5 	bl	800b760 <sbrk_aligned>
 800b816:	3001      	adds	r0, #1
 800b818:	d02b      	beq.n	800b872 <_malloc_r+0xd2>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	442b      	add	r3, r5
 800b81e:	6023      	str	r3, [r4, #0]
 800b820:	e00e      	b.n	800b840 <_malloc_r+0xa0>
 800b822:	6822      	ldr	r2, [r4, #0]
 800b824:	1b52      	subs	r2, r2, r5
 800b826:	d41e      	bmi.n	800b866 <_malloc_r+0xc6>
 800b828:	2a0b      	cmp	r2, #11
 800b82a:	d916      	bls.n	800b85a <_malloc_r+0xba>
 800b82c:	1961      	adds	r1, r4, r5
 800b82e:	42a3      	cmp	r3, r4
 800b830:	6025      	str	r5, [r4, #0]
 800b832:	bf18      	it	ne
 800b834:	6059      	strne	r1, [r3, #4]
 800b836:	6863      	ldr	r3, [r4, #4]
 800b838:	bf08      	it	eq
 800b83a:	6031      	streq	r1, [r6, #0]
 800b83c:	5162      	str	r2, [r4, r5]
 800b83e:	604b      	str	r3, [r1, #4]
 800b840:	4638      	mov	r0, r7
 800b842:	f104 060b 	add.w	r6, r4, #11
 800b846:	f000 fac7 	bl	800bdd8 <__malloc_unlock>
 800b84a:	f026 0607 	bic.w	r6, r6, #7
 800b84e:	1d23      	adds	r3, r4, #4
 800b850:	1af2      	subs	r2, r6, r3
 800b852:	d0b6      	beq.n	800b7c2 <_malloc_r+0x22>
 800b854:	1b9b      	subs	r3, r3, r6
 800b856:	50a3      	str	r3, [r4, r2]
 800b858:	e7b3      	b.n	800b7c2 <_malloc_r+0x22>
 800b85a:	6862      	ldr	r2, [r4, #4]
 800b85c:	42a3      	cmp	r3, r4
 800b85e:	bf0c      	ite	eq
 800b860:	6032      	streq	r2, [r6, #0]
 800b862:	605a      	strne	r2, [r3, #4]
 800b864:	e7ec      	b.n	800b840 <_malloc_r+0xa0>
 800b866:	4623      	mov	r3, r4
 800b868:	6864      	ldr	r4, [r4, #4]
 800b86a:	e7b2      	b.n	800b7d2 <_malloc_r+0x32>
 800b86c:	4634      	mov	r4, r6
 800b86e:	6876      	ldr	r6, [r6, #4]
 800b870:	e7b9      	b.n	800b7e6 <_malloc_r+0x46>
 800b872:	230c      	movs	r3, #12
 800b874:	603b      	str	r3, [r7, #0]
 800b876:	4638      	mov	r0, r7
 800b878:	f000 faae 	bl	800bdd8 <__malloc_unlock>
 800b87c:	e7a1      	b.n	800b7c2 <_malloc_r+0x22>
 800b87e:	6025      	str	r5, [r4, #0]
 800b880:	e7de      	b.n	800b840 <_malloc_r+0xa0>
 800b882:	bf00      	nop
 800b884:	20000484 	.word	0x20000484

0800b888 <_realloc_r>:
 800b888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88c:	4680      	mov	r8, r0
 800b88e:	4614      	mov	r4, r2
 800b890:	460e      	mov	r6, r1
 800b892:	b921      	cbnz	r1, 800b89e <_realloc_r+0x16>
 800b894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b898:	4611      	mov	r1, r2
 800b89a:	f7ff bf81 	b.w	800b7a0 <_malloc_r>
 800b89e:	b92a      	cbnz	r2, 800b8ac <_realloc_r+0x24>
 800b8a0:	f7ff ff12 	bl	800b6c8 <_free_r>
 800b8a4:	4625      	mov	r5, r4
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ac:	f000 fa9a 	bl	800bde4 <_malloc_usable_size_r>
 800b8b0:	4284      	cmp	r4, r0
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	d802      	bhi.n	800b8bc <_realloc_r+0x34>
 800b8b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8ba:	d812      	bhi.n	800b8e2 <_realloc_r+0x5a>
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4640      	mov	r0, r8
 800b8c0:	f7ff ff6e 	bl	800b7a0 <_malloc_r>
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d0ed      	beq.n	800b8a6 <_realloc_r+0x1e>
 800b8ca:	42bc      	cmp	r4, r7
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	bf28      	it	cs
 800b8d2:	463a      	movcs	r2, r7
 800b8d4:	f7fb fe5a 	bl	800758c <memcpy>
 800b8d8:	4631      	mov	r1, r6
 800b8da:	4640      	mov	r0, r8
 800b8dc:	f7ff fef4 	bl	800b6c8 <_free_r>
 800b8e0:	e7e1      	b.n	800b8a6 <_realloc_r+0x1e>
 800b8e2:	4635      	mov	r5, r6
 800b8e4:	e7df      	b.n	800b8a6 <_realloc_r+0x1e>

0800b8e6 <__ssputs_r>:
 800b8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ea:	688e      	ldr	r6, [r1, #8]
 800b8ec:	429e      	cmp	r6, r3
 800b8ee:	4682      	mov	sl, r0
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	4690      	mov	r8, r2
 800b8f4:	461f      	mov	r7, r3
 800b8f6:	d838      	bhi.n	800b96a <__ssputs_r+0x84>
 800b8f8:	898a      	ldrh	r2, [r1, #12]
 800b8fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8fe:	d032      	beq.n	800b966 <__ssputs_r+0x80>
 800b900:	6825      	ldr	r5, [r4, #0]
 800b902:	6909      	ldr	r1, [r1, #16]
 800b904:	eba5 0901 	sub.w	r9, r5, r1
 800b908:	6965      	ldr	r5, [r4, #20]
 800b90a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b90e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b912:	3301      	adds	r3, #1
 800b914:	444b      	add	r3, r9
 800b916:	106d      	asrs	r5, r5, #1
 800b918:	429d      	cmp	r5, r3
 800b91a:	bf38      	it	cc
 800b91c:	461d      	movcc	r5, r3
 800b91e:	0553      	lsls	r3, r2, #21
 800b920:	d531      	bpl.n	800b986 <__ssputs_r+0xa0>
 800b922:	4629      	mov	r1, r5
 800b924:	f7ff ff3c 	bl	800b7a0 <_malloc_r>
 800b928:	4606      	mov	r6, r0
 800b92a:	b950      	cbnz	r0, 800b942 <__ssputs_r+0x5c>
 800b92c:	230c      	movs	r3, #12
 800b92e:	f8ca 3000 	str.w	r3, [sl]
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b938:	81a3      	strh	r3, [r4, #12]
 800b93a:	f04f 30ff 	mov.w	r0, #4294967295
 800b93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b942:	6921      	ldr	r1, [r4, #16]
 800b944:	464a      	mov	r2, r9
 800b946:	f7fb fe21 	bl	800758c <memcpy>
 800b94a:	89a3      	ldrh	r3, [r4, #12]
 800b94c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b954:	81a3      	strh	r3, [r4, #12]
 800b956:	6126      	str	r6, [r4, #16]
 800b958:	6165      	str	r5, [r4, #20]
 800b95a:	444e      	add	r6, r9
 800b95c:	eba5 0509 	sub.w	r5, r5, r9
 800b960:	6026      	str	r6, [r4, #0]
 800b962:	60a5      	str	r5, [r4, #8]
 800b964:	463e      	mov	r6, r7
 800b966:	42be      	cmp	r6, r7
 800b968:	d900      	bls.n	800b96c <__ssputs_r+0x86>
 800b96a:	463e      	mov	r6, r7
 800b96c:	6820      	ldr	r0, [r4, #0]
 800b96e:	4632      	mov	r2, r6
 800b970:	4641      	mov	r1, r8
 800b972:	f7ff f9b7 	bl	800ace4 <memmove>
 800b976:	68a3      	ldr	r3, [r4, #8]
 800b978:	1b9b      	subs	r3, r3, r6
 800b97a:	60a3      	str	r3, [r4, #8]
 800b97c:	6823      	ldr	r3, [r4, #0]
 800b97e:	4433      	add	r3, r6
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	2000      	movs	r0, #0
 800b984:	e7db      	b.n	800b93e <__ssputs_r+0x58>
 800b986:	462a      	mov	r2, r5
 800b988:	f7ff ff7e 	bl	800b888 <_realloc_r>
 800b98c:	4606      	mov	r6, r0
 800b98e:	2800      	cmp	r0, #0
 800b990:	d1e1      	bne.n	800b956 <__ssputs_r+0x70>
 800b992:	6921      	ldr	r1, [r4, #16]
 800b994:	4650      	mov	r0, sl
 800b996:	f7ff fe97 	bl	800b6c8 <_free_r>
 800b99a:	e7c7      	b.n	800b92c <__ssputs_r+0x46>

0800b99c <_svfiprintf_r>:
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	4698      	mov	r8, r3
 800b9a2:	898b      	ldrh	r3, [r1, #12]
 800b9a4:	061b      	lsls	r3, r3, #24
 800b9a6:	b09d      	sub	sp, #116	; 0x74
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	460d      	mov	r5, r1
 800b9ac:	4614      	mov	r4, r2
 800b9ae:	d50e      	bpl.n	800b9ce <_svfiprintf_r+0x32>
 800b9b0:	690b      	ldr	r3, [r1, #16]
 800b9b2:	b963      	cbnz	r3, 800b9ce <_svfiprintf_r+0x32>
 800b9b4:	2140      	movs	r1, #64	; 0x40
 800b9b6:	f7ff fef3 	bl	800b7a0 <_malloc_r>
 800b9ba:	6028      	str	r0, [r5, #0]
 800b9bc:	6128      	str	r0, [r5, #16]
 800b9be:	b920      	cbnz	r0, 800b9ca <_svfiprintf_r+0x2e>
 800b9c0:	230c      	movs	r3, #12
 800b9c2:	603b      	str	r3, [r7, #0]
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c8:	e0d1      	b.n	800bb6e <_svfiprintf_r+0x1d2>
 800b9ca:	2340      	movs	r3, #64	; 0x40
 800b9cc:	616b      	str	r3, [r5, #20]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d2:	2320      	movs	r3, #32
 800b9d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9dc:	2330      	movs	r3, #48	; 0x30
 800b9de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb88 <_svfiprintf_r+0x1ec>
 800b9e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9e6:	f04f 0901 	mov.w	r9, #1
 800b9ea:	4623      	mov	r3, r4
 800b9ec:	469a      	mov	sl, r3
 800b9ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9f2:	b10a      	cbz	r2, 800b9f8 <_svfiprintf_r+0x5c>
 800b9f4:	2a25      	cmp	r2, #37	; 0x25
 800b9f6:	d1f9      	bne.n	800b9ec <_svfiprintf_r+0x50>
 800b9f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b9fc:	d00b      	beq.n	800ba16 <_svfiprintf_r+0x7a>
 800b9fe:	465b      	mov	r3, fp
 800ba00:	4622      	mov	r2, r4
 800ba02:	4629      	mov	r1, r5
 800ba04:	4638      	mov	r0, r7
 800ba06:	f7ff ff6e 	bl	800b8e6 <__ssputs_r>
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	f000 80aa 	beq.w	800bb64 <_svfiprintf_r+0x1c8>
 800ba10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba12:	445a      	add	r2, fp
 800ba14:	9209      	str	r2, [sp, #36]	; 0x24
 800ba16:	f89a 3000 	ldrb.w	r3, [sl]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 80a2 	beq.w	800bb64 <_svfiprintf_r+0x1c8>
 800ba20:	2300      	movs	r3, #0
 800ba22:	f04f 32ff 	mov.w	r2, #4294967295
 800ba26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba2a:	f10a 0a01 	add.w	sl, sl, #1
 800ba2e:	9304      	str	r3, [sp, #16]
 800ba30:	9307      	str	r3, [sp, #28]
 800ba32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba36:	931a      	str	r3, [sp, #104]	; 0x68
 800ba38:	4654      	mov	r4, sl
 800ba3a:	2205      	movs	r2, #5
 800ba3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba40:	4851      	ldr	r0, [pc, #324]	; (800bb88 <_svfiprintf_r+0x1ec>)
 800ba42:	f7f4 fbd5 	bl	80001f0 <memchr>
 800ba46:	9a04      	ldr	r2, [sp, #16]
 800ba48:	b9d8      	cbnz	r0, 800ba82 <_svfiprintf_r+0xe6>
 800ba4a:	06d0      	lsls	r0, r2, #27
 800ba4c:	bf44      	itt	mi
 800ba4e:	2320      	movmi	r3, #32
 800ba50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba54:	0711      	lsls	r1, r2, #28
 800ba56:	bf44      	itt	mi
 800ba58:	232b      	movmi	r3, #43	; 0x2b
 800ba5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba62:	2b2a      	cmp	r3, #42	; 0x2a
 800ba64:	d015      	beq.n	800ba92 <_svfiprintf_r+0xf6>
 800ba66:	9a07      	ldr	r2, [sp, #28]
 800ba68:	4654      	mov	r4, sl
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	f04f 0c0a 	mov.w	ip, #10
 800ba70:	4621      	mov	r1, r4
 800ba72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba76:	3b30      	subs	r3, #48	; 0x30
 800ba78:	2b09      	cmp	r3, #9
 800ba7a:	d94e      	bls.n	800bb1a <_svfiprintf_r+0x17e>
 800ba7c:	b1b0      	cbz	r0, 800baac <_svfiprintf_r+0x110>
 800ba7e:	9207      	str	r2, [sp, #28]
 800ba80:	e014      	b.n	800baac <_svfiprintf_r+0x110>
 800ba82:	eba0 0308 	sub.w	r3, r0, r8
 800ba86:	fa09 f303 	lsl.w	r3, r9, r3
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	9304      	str	r3, [sp, #16]
 800ba8e:	46a2      	mov	sl, r4
 800ba90:	e7d2      	b.n	800ba38 <_svfiprintf_r+0x9c>
 800ba92:	9b03      	ldr	r3, [sp, #12]
 800ba94:	1d19      	adds	r1, r3, #4
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	9103      	str	r1, [sp, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	bfbb      	ittet	lt
 800ba9e:	425b      	neglt	r3, r3
 800baa0:	f042 0202 	orrlt.w	r2, r2, #2
 800baa4:	9307      	strge	r3, [sp, #28]
 800baa6:	9307      	strlt	r3, [sp, #28]
 800baa8:	bfb8      	it	lt
 800baaa:	9204      	strlt	r2, [sp, #16]
 800baac:	7823      	ldrb	r3, [r4, #0]
 800baae:	2b2e      	cmp	r3, #46	; 0x2e
 800bab0:	d10c      	bne.n	800bacc <_svfiprintf_r+0x130>
 800bab2:	7863      	ldrb	r3, [r4, #1]
 800bab4:	2b2a      	cmp	r3, #42	; 0x2a
 800bab6:	d135      	bne.n	800bb24 <_svfiprintf_r+0x188>
 800bab8:	9b03      	ldr	r3, [sp, #12]
 800baba:	1d1a      	adds	r2, r3, #4
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	9203      	str	r2, [sp, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	bfb8      	it	lt
 800bac4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bac8:	3402      	adds	r4, #2
 800baca:	9305      	str	r3, [sp, #20]
 800bacc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb98 <_svfiprintf_r+0x1fc>
 800bad0:	7821      	ldrb	r1, [r4, #0]
 800bad2:	2203      	movs	r2, #3
 800bad4:	4650      	mov	r0, sl
 800bad6:	f7f4 fb8b 	bl	80001f0 <memchr>
 800bada:	b140      	cbz	r0, 800baee <_svfiprintf_r+0x152>
 800badc:	2340      	movs	r3, #64	; 0x40
 800bade:	eba0 000a 	sub.w	r0, r0, sl
 800bae2:	fa03 f000 	lsl.w	r0, r3, r0
 800bae6:	9b04      	ldr	r3, [sp, #16]
 800bae8:	4303      	orrs	r3, r0
 800baea:	3401      	adds	r4, #1
 800baec:	9304      	str	r3, [sp, #16]
 800baee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf2:	4826      	ldr	r0, [pc, #152]	; (800bb8c <_svfiprintf_r+0x1f0>)
 800baf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baf8:	2206      	movs	r2, #6
 800bafa:	f7f4 fb79 	bl	80001f0 <memchr>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d038      	beq.n	800bb74 <_svfiprintf_r+0x1d8>
 800bb02:	4b23      	ldr	r3, [pc, #140]	; (800bb90 <_svfiprintf_r+0x1f4>)
 800bb04:	bb1b      	cbnz	r3, 800bb4e <_svfiprintf_r+0x1b2>
 800bb06:	9b03      	ldr	r3, [sp, #12]
 800bb08:	3307      	adds	r3, #7
 800bb0a:	f023 0307 	bic.w	r3, r3, #7
 800bb0e:	3308      	adds	r3, #8
 800bb10:	9303      	str	r3, [sp, #12]
 800bb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb14:	4433      	add	r3, r6
 800bb16:	9309      	str	r3, [sp, #36]	; 0x24
 800bb18:	e767      	b.n	800b9ea <_svfiprintf_r+0x4e>
 800bb1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb1e:	460c      	mov	r4, r1
 800bb20:	2001      	movs	r0, #1
 800bb22:	e7a5      	b.n	800ba70 <_svfiprintf_r+0xd4>
 800bb24:	2300      	movs	r3, #0
 800bb26:	3401      	adds	r4, #1
 800bb28:	9305      	str	r3, [sp, #20]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	f04f 0c0a 	mov.w	ip, #10
 800bb30:	4620      	mov	r0, r4
 800bb32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb36:	3a30      	subs	r2, #48	; 0x30
 800bb38:	2a09      	cmp	r2, #9
 800bb3a:	d903      	bls.n	800bb44 <_svfiprintf_r+0x1a8>
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d0c5      	beq.n	800bacc <_svfiprintf_r+0x130>
 800bb40:	9105      	str	r1, [sp, #20]
 800bb42:	e7c3      	b.n	800bacc <_svfiprintf_r+0x130>
 800bb44:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb48:	4604      	mov	r4, r0
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e7f0      	b.n	800bb30 <_svfiprintf_r+0x194>
 800bb4e:	ab03      	add	r3, sp, #12
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	462a      	mov	r2, r5
 800bb54:	4b0f      	ldr	r3, [pc, #60]	; (800bb94 <_svfiprintf_r+0x1f8>)
 800bb56:	a904      	add	r1, sp, #16
 800bb58:	4638      	mov	r0, r7
 800bb5a:	f7fb ff27 	bl	80079ac <_printf_float>
 800bb5e:	1c42      	adds	r2, r0, #1
 800bb60:	4606      	mov	r6, r0
 800bb62:	d1d6      	bne.n	800bb12 <_svfiprintf_r+0x176>
 800bb64:	89ab      	ldrh	r3, [r5, #12]
 800bb66:	065b      	lsls	r3, r3, #25
 800bb68:	f53f af2c 	bmi.w	800b9c4 <_svfiprintf_r+0x28>
 800bb6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb6e:	b01d      	add	sp, #116	; 0x74
 800bb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb74:	ab03      	add	r3, sp, #12
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	462a      	mov	r2, r5
 800bb7a:	4b06      	ldr	r3, [pc, #24]	; (800bb94 <_svfiprintf_r+0x1f8>)
 800bb7c:	a904      	add	r1, sp, #16
 800bb7e:	4638      	mov	r0, r7
 800bb80:	f7fc f9b8 	bl	8007ef4 <_printf_i>
 800bb84:	e7eb      	b.n	800bb5e <_svfiprintf_r+0x1c2>
 800bb86:	bf00      	nop
 800bb88:	0800d428 	.word	0x0800d428
 800bb8c:	0800d432 	.word	0x0800d432
 800bb90:	080079ad 	.word	0x080079ad
 800bb94:	0800b8e7 	.word	0x0800b8e7
 800bb98:	0800d42e 	.word	0x0800d42e
 800bb9c:	00000000 	.word	0x00000000

0800bba0 <nan>:
 800bba0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bba8 <nan+0x8>
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	00000000 	.word	0x00000000
 800bbac:	7ff80000 	.word	0x7ff80000

0800bbb0 <_sbrk_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d06      	ldr	r5, [pc, #24]	; (800bbcc <_sbrk_r+0x1c>)
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	602b      	str	r3, [r5, #0]
 800bbbc:	f7f7 fc86 	bl	80034cc <_sbrk>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_sbrk_r+0x1a>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_sbrk_r+0x1a>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	2000048c 	.word	0x2000048c

0800bbd0 <_raise_r>:
 800bbd0:	291f      	cmp	r1, #31
 800bbd2:	b538      	push	{r3, r4, r5, lr}
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	460d      	mov	r5, r1
 800bbd8:	d904      	bls.n	800bbe4 <_raise_r+0x14>
 800bbda:	2316      	movs	r3, #22
 800bbdc:	6003      	str	r3, [r0, #0]
 800bbde:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe2:	bd38      	pop	{r3, r4, r5, pc}
 800bbe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbe6:	b112      	cbz	r2, 800bbee <_raise_r+0x1e>
 800bbe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbec:	b94b      	cbnz	r3, 800bc02 <_raise_r+0x32>
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f000 f830 	bl	800bc54 <_getpid_r>
 800bbf4:	462a      	mov	r2, r5
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbfe:	f000 b817 	b.w	800bc30 <_kill_r>
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d00a      	beq.n	800bc1c <_raise_r+0x4c>
 800bc06:	1c59      	adds	r1, r3, #1
 800bc08:	d103      	bne.n	800bc12 <_raise_r+0x42>
 800bc0a:	2316      	movs	r3, #22
 800bc0c:	6003      	str	r3, [r0, #0]
 800bc0e:	2001      	movs	r0, #1
 800bc10:	e7e7      	b.n	800bbe2 <_raise_r+0x12>
 800bc12:	2400      	movs	r4, #0
 800bc14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc18:	4628      	mov	r0, r5
 800bc1a:	4798      	blx	r3
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	e7e0      	b.n	800bbe2 <_raise_r+0x12>

0800bc20 <raise>:
 800bc20:	4b02      	ldr	r3, [pc, #8]	; (800bc2c <raise+0xc>)
 800bc22:	4601      	mov	r1, r0
 800bc24:	6818      	ldr	r0, [r3, #0]
 800bc26:	f7ff bfd3 	b.w	800bbd0 <_raise_r>
 800bc2a:	bf00      	nop
 800bc2c:	20000014 	.word	0x20000014

0800bc30 <_kill_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4d07      	ldr	r5, [pc, #28]	; (800bc50 <_kill_r+0x20>)
 800bc34:	2300      	movs	r3, #0
 800bc36:	4604      	mov	r4, r0
 800bc38:	4608      	mov	r0, r1
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	f7f7 fbbd 	bl	80033bc <_kill>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	d102      	bne.n	800bc4c <_kill_r+0x1c>
 800bc46:	682b      	ldr	r3, [r5, #0]
 800bc48:	b103      	cbz	r3, 800bc4c <_kill_r+0x1c>
 800bc4a:	6023      	str	r3, [r4, #0]
 800bc4c:	bd38      	pop	{r3, r4, r5, pc}
 800bc4e:	bf00      	nop
 800bc50:	2000048c 	.word	0x2000048c

0800bc54 <_getpid_r>:
 800bc54:	f7f7 bbaa 	b.w	80033ac <_getpid>

0800bc58 <__sread>:
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc60:	f000 f8c8 	bl	800bdf4 <_read_r>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	bfab      	itete	ge
 800bc68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc6a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc6c:	181b      	addge	r3, r3, r0
 800bc6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc72:	bfac      	ite	ge
 800bc74:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc76:	81a3      	strhlt	r3, [r4, #12]
 800bc78:	bd10      	pop	{r4, pc}

0800bc7a <__swrite>:
 800bc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc7e:	461f      	mov	r7, r3
 800bc80:	898b      	ldrh	r3, [r1, #12]
 800bc82:	05db      	lsls	r3, r3, #23
 800bc84:	4605      	mov	r5, r0
 800bc86:	460c      	mov	r4, r1
 800bc88:	4616      	mov	r6, r2
 800bc8a:	d505      	bpl.n	800bc98 <__swrite+0x1e>
 800bc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc90:	2302      	movs	r3, #2
 800bc92:	2200      	movs	r2, #0
 800bc94:	f000 f888 	bl	800bda8 <_lseek_r>
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bca2:	81a3      	strh	r3, [r4, #12]
 800bca4:	4632      	mov	r2, r6
 800bca6:	463b      	mov	r3, r7
 800bca8:	4628      	mov	r0, r5
 800bcaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcae:	f000 b837 	b.w	800bd20 <_write_r>

0800bcb2 <__sseek>:
 800bcb2:	b510      	push	{r4, lr}
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcba:	f000 f875 	bl	800bda8 <_lseek_r>
 800bcbe:	1c43      	adds	r3, r0, #1
 800bcc0:	89a3      	ldrh	r3, [r4, #12]
 800bcc2:	bf15      	itete	ne
 800bcc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcce:	81a3      	strheq	r3, [r4, #12]
 800bcd0:	bf18      	it	ne
 800bcd2:	81a3      	strhne	r3, [r4, #12]
 800bcd4:	bd10      	pop	{r4, pc}

0800bcd6 <__sclose>:
 800bcd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcda:	f000 b833 	b.w	800bd44 <_close_r>

0800bcde <strncmp>:
 800bcde:	b510      	push	{r4, lr}
 800bce0:	b17a      	cbz	r2, 800bd02 <strncmp+0x24>
 800bce2:	4603      	mov	r3, r0
 800bce4:	3901      	subs	r1, #1
 800bce6:	1884      	adds	r4, r0, r2
 800bce8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bcec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bcf0:	4290      	cmp	r0, r2
 800bcf2:	d101      	bne.n	800bcf8 <strncmp+0x1a>
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	d101      	bne.n	800bcfc <strncmp+0x1e>
 800bcf8:	1a80      	subs	r0, r0, r2
 800bcfa:	bd10      	pop	{r4, pc}
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d1f3      	bne.n	800bce8 <strncmp+0xa>
 800bd00:	e7fa      	b.n	800bcf8 <strncmp+0x1a>
 800bd02:	4610      	mov	r0, r2
 800bd04:	e7f9      	b.n	800bcfa <strncmp+0x1c>

0800bd06 <__ascii_wctomb>:
 800bd06:	b149      	cbz	r1, 800bd1c <__ascii_wctomb+0x16>
 800bd08:	2aff      	cmp	r2, #255	; 0xff
 800bd0a:	bf85      	ittet	hi
 800bd0c:	238a      	movhi	r3, #138	; 0x8a
 800bd0e:	6003      	strhi	r3, [r0, #0]
 800bd10:	700a      	strbls	r2, [r1, #0]
 800bd12:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd16:	bf98      	it	ls
 800bd18:	2001      	movls	r0, #1
 800bd1a:	4770      	bx	lr
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	4770      	bx	lr

0800bd20 <_write_r>:
 800bd20:	b538      	push	{r3, r4, r5, lr}
 800bd22:	4d07      	ldr	r5, [pc, #28]	; (800bd40 <_write_r+0x20>)
 800bd24:	4604      	mov	r4, r0
 800bd26:	4608      	mov	r0, r1
 800bd28:	4611      	mov	r1, r2
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	602a      	str	r2, [r5, #0]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	f7f7 fb7b 	bl	800342a <_write>
 800bd34:	1c43      	adds	r3, r0, #1
 800bd36:	d102      	bne.n	800bd3e <_write_r+0x1e>
 800bd38:	682b      	ldr	r3, [r5, #0]
 800bd3a:	b103      	cbz	r3, 800bd3e <_write_r+0x1e>
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	bd38      	pop	{r3, r4, r5, pc}
 800bd40:	2000048c 	.word	0x2000048c

0800bd44 <_close_r>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	4d06      	ldr	r5, [pc, #24]	; (800bd60 <_close_r+0x1c>)
 800bd48:	2300      	movs	r3, #0
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	4608      	mov	r0, r1
 800bd4e:	602b      	str	r3, [r5, #0]
 800bd50:	f7f7 fb87 	bl	8003462 <_close>
 800bd54:	1c43      	adds	r3, r0, #1
 800bd56:	d102      	bne.n	800bd5e <_close_r+0x1a>
 800bd58:	682b      	ldr	r3, [r5, #0]
 800bd5a:	b103      	cbz	r3, 800bd5e <_close_r+0x1a>
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	bd38      	pop	{r3, r4, r5, pc}
 800bd60:	2000048c 	.word	0x2000048c

0800bd64 <_fstat_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	4d07      	ldr	r5, [pc, #28]	; (800bd84 <_fstat_r+0x20>)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	4611      	mov	r1, r2
 800bd70:	602b      	str	r3, [r5, #0]
 800bd72:	f7f7 fb82 	bl	800347a <_fstat>
 800bd76:	1c43      	adds	r3, r0, #1
 800bd78:	d102      	bne.n	800bd80 <_fstat_r+0x1c>
 800bd7a:	682b      	ldr	r3, [r5, #0]
 800bd7c:	b103      	cbz	r3, 800bd80 <_fstat_r+0x1c>
 800bd7e:	6023      	str	r3, [r4, #0]
 800bd80:	bd38      	pop	{r3, r4, r5, pc}
 800bd82:	bf00      	nop
 800bd84:	2000048c 	.word	0x2000048c

0800bd88 <_isatty_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	4d06      	ldr	r5, [pc, #24]	; (800bda4 <_isatty_r+0x1c>)
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4604      	mov	r4, r0
 800bd90:	4608      	mov	r0, r1
 800bd92:	602b      	str	r3, [r5, #0]
 800bd94:	f7f7 fb81 	bl	800349a <_isatty>
 800bd98:	1c43      	adds	r3, r0, #1
 800bd9a:	d102      	bne.n	800bda2 <_isatty_r+0x1a>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	b103      	cbz	r3, 800bda2 <_isatty_r+0x1a>
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
 800bda4:	2000048c 	.word	0x2000048c

0800bda8 <_lseek_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d07      	ldr	r5, [pc, #28]	; (800bdc8 <_lseek_r+0x20>)
 800bdac:	4604      	mov	r4, r0
 800bdae:	4608      	mov	r0, r1
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	602a      	str	r2, [r5, #0]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f7f7 fb7a 	bl	80034b0 <_lseek>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d102      	bne.n	800bdc6 <_lseek_r+0x1e>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	b103      	cbz	r3, 800bdc6 <_lseek_r+0x1e>
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	2000048c 	.word	0x2000048c

0800bdcc <__malloc_lock>:
 800bdcc:	4801      	ldr	r0, [pc, #4]	; (800bdd4 <__malloc_lock+0x8>)
 800bdce:	f7fe bf08 	b.w	800abe2 <__retarget_lock_acquire_recursive>
 800bdd2:	bf00      	nop
 800bdd4:	20000480 	.word	0x20000480

0800bdd8 <__malloc_unlock>:
 800bdd8:	4801      	ldr	r0, [pc, #4]	; (800bde0 <__malloc_unlock+0x8>)
 800bdda:	f7fe bf03 	b.w	800abe4 <__retarget_lock_release_recursive>
 800bdde:	bf00      	nop
 800bde0:	20000480 	.word	0x20000480

0800bde4 <_malloc_usable_size_r>:
 800bde4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bde8:	1f18      	subs	r0, r3, #4
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	bfbc      	itt	lt
 800bdee:	580b      	ldrlt	r3, [r1, r0]
 800bdf0:	18c0      	addlt	r0, r0, r3
 800bdf2:	4770      	bx	lr

0800bdf4 <_read_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4d07      	ldr	r5, [pc, #28]	; (800be14 <_read_r+0x20>)
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	4608      	mov	r0, r1
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	2200      	movs	r2, #0
 800be00:	602a      	str	r2, [r5, #0]
 800be02:	461a      	mov	r2, r3
 800be04:	f7f7 faf4 	bl	80033f0 <_read>
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	d102      	bne.n	800be12 <_read_r+0x1e>
 800be0c:	682b      	ldr	r3, [r5, #0]
 800be0e:	b103      	cbz	r3, 800be12 <_read_r+0x1e>
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	2000048c 	.word	0x2000048c

0800be18 <log>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	ed2d 8b02 	vpush	{d8}
 800be1e:	ec55 4b10 	vmov	r4, r5, d0
 800be22:	f000 f8a9 	bl	800bf78 <__ieee754_log>
 800be26:	4622      	mov	r2, r4
 800be28:	462b      	mov	r3, r5
 800be2a:	4620      	mov	r0, r4
 800be2c:	4629      	mov	r1, r5
 800be2e:	eeb0 8a40 	vmov.f32	s16, s0
 800be32:	eef0 8a60 	vmov.f32	s17, s1
 800be36:	f7f4 fe81 	bl	8000b3c <__aeabi_dcmpun>
 800be3a:	b998      	cbnz	r0, 800be64 <log+0x4c>
 800be3c:	2200      	movs	r2, #0
 800be3e:	2300      	movs	r3, #0
 800be40:	4620      	mov	r0, r4
 800be42:	4629      	mov	r1, r5
 800be44:	f7f4 fe70 	bl	8000b28 <__aeabi_dcmpgt>
 800be48:	b960      	cbnz	r0, 800be64 <log+0x4c>
 800be4a:	2200      	movs	r2, #0
 800be4c:	2300      	movs	r3, #0
 800be4e:	4620      	mov	r0, r4
 800be50:	4629      	mov	r1, r5
 800be52:	f7f4 fe41 	bl	8000ad8 <__aeabi_dcmpeq>
 800be56:	b160      	cbz	r0, 800be72 <log+0x5a>
 800be58:	f7fb fb5c 	bl	8007514 <__errno>
 800be5c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800be88 <log+0x70>
 800be60:	2322      	movs	r3, #34	; 0x22
 800be62:	6003      	str	r3, [r0, #0]
 800be64:	eeb0 0a48 	vmov.f32	s0, s16
 800be68:	eef0 0a68 	vmov.f32	s1, s17
 800be6c:	ecbd 8b02 	vpop	{d8}
 800be70:	bd38      	pop	{r3, r4, r5, pc}
 800be72:	f7fb fb4f 	bl	8007514 <__errno>
 800be76:	ecbd 8b02 	vpop	{d8}
 800be7a:	2321      	movs	r3, #33	; 0x21
 800be7c:	6003      	str	r3, [r0, #0]
 800be7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be82:	4803      	ldr	r0, [pc, #12]	; (800be90 <log+0x78>)
 800be84:	f7ff be8c 	b.w	800bba0 <nan>
 800be88:	00000000 	.word	0x00000000
 800be8c:	fff00000 	.word	0xfff00000
 800be90:	0800d423 	.word	0x0800d423

0800be94 <pow>:
 800be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be96:	ed2d 8b02 	vpush	{d8}
 800be9a:	eeb0 8a40 	vmov.f32	s16, s0
 800be9e:	eef0 8a60 	vmov.f32	s17, s1
 800bea2:	ec55 4b11 	vmov	r4, r5, d1
 800bea6:	f000 fa23 	bl	800c2f0 <__ieee754_pow>
 800beaa:	4622      	mov	r2, r4
 800beac:	462b      	mov	r3, r5
 800beae:	4620      	mov	r0, r4
 800beb0:	4629      	mov	r1, r5
 800beb2:	ec57 6b10 	vmov	r6, r7, d0
 800beb6:	f7f4 fe41 	bl	8000b3c <__aeabi_dcmpun>
 800beba:	2800      	cmp	r0, #0
 800bebc:	d13b      	bne.n	800bf36 <pow+0xa2>
 800bebe:	ec51 0b18 	vmov	r0, r1, d8
 800bec2:	2200      	movs	r2, #0
 800bec4:	2300      	movs	r3, #0
 800bec6:	f7f4 fe07 	bl	8000ad8 <__aeabi_dcmpeq>
 800beca:	b1b8      	cbz	r0, 800befc <pow+0x68>
 800becc:	2200      	movs	r2, #0
 800bece:	2300      	movs	r3, #0
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	f7f4 fe00 	bl	8000ad8 <__aeabi_dcmpeq>
 800bed8:	2800      	cmp	r0, #0
 800beda:	d146      	bne.n	800bf6a <pow+0xd6>
 800bedc:	ec45 4b10 	vmov	d0, r4, r5
 800bee0:	f001 f81f 	bl	800cf22 <finite>
 800bee4:	b338      	cbz	r0, 800bf36 <pow+0xa2>
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	4620      	mov	r0, r4
 800beec:	4629      	mov	r1, r5
 800beee:	f7f4 fdfd 	bl	8000aec <__aeabi_dcmplt>
 800bef2:	b300      	cbz	r0, 800bf36 <pow+0xa2>
 800bef4:	f7fb fb0e 	bl	8007514 <__errno>
 800bef8:	2322      	movs	r3, #34	; 0x22
 800befa:	e01b      	b.n	800bf34 <pow+0xa0>
 800befc:	ec47 6b10 	vmov	d0, r6, r7
 800bf00:	f001 f80f 	bl	800cf22 <finite>
 800bf04:	b9e0      	cbnz	r0, 800bf40 <pow+0xac>
 800bf06:	eeb0 0a48 	vmov.f32	s0, s16
 800bf0a:	eef0 0a68 	vmov.f32	s1, s17
 800bf0e:	f001 f808 	bl	800cf22 <finite>
 800bf12:	b1a8      	cbz	r0, 800bf40 <pow+0xac>
 800bf14:	ec45 4b10 	vmov	d0, r4, r5
 800bf18:	f001 f803 	bl	800cf22 <finite>
 800bf1c:	b180      	cbz	r0, 800bf40 <pow+0xac>
 800bf1e:	4632      	mov	r2, r6
 800bf20:	463b      	mov	r3, r7
 800bf22:	4630      	mov	r0, r6
 800bf24:	4639      	mov	r1, r7
 800bf26:	f7f4 fe09 	bl	8000b3c <__aeabi_dcmpun>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d0e2      	beq.n	800bef4 <pow+0x60>
 800bf2e:	f7fb faf1 	bl	8007514 <__errno>
 800bf32:	2321      	movs	r3, #33	; 0x21
 800bf34:	6003      	str	r3, [r0, #0]
 800bf36:	ecbd 8b02 	vpop	{d8}
 800bf3a:	ec47 6b10 	vmov	d0, r6, r7
 800bf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf40:	2200      	movs	r2, #0
 800bf42:	2300      	movs	r3, #0
 800bf44:	4630      	mov	r0, r6
 800bf46:	4639      	mov	r1, r7
 800bf48:	f7f4 fdc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d0f2      	beq.n	800bf36 <pow+0xa2>
 800bf50:	eeb0 0a48 	vmov.f32	s0, s16
 800bf54:	eef0 0a68 	vmov.f32	s1, s17
 800bf58:	f000 ffe3 	bl	800cf22 <finite>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d0ea      	beq.n	800bf36 <pow+0xa2>
 800bf60:	ec45 4b10 	vmov	d0, r4, r5
 800bf64:	f000 ffdd 	bl	800cf22 <finite>
 800bf68:	e7c3      	b.n	800bef2 <pow+0x5e>
 800bf6a:	4f01      	ldr	r7, [pc, #4]	; (800bf70 <pow+0xdc>)
 800bf6c:	2600      	movs	r6, #0
 800bf6e:	e7e2      	b.n	800bf36 <pow+0xa2>
 800bf70:	3ff00000 	.word	0x3ff00000
 800bf74:	00000000 	.word	0x00000000

0800bf78 <__ieee754_log>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	ec51 0b10 	vmov	r0, r1, d0
 800bf80:	ed2d 8b04 	vpush	{d8-d9}
 800bf84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bf88:	b083      	sub	sp, #12
 800bf8a:	460d      	mov	r5, r1
 800bf8c:	da29      	bge.n	800bfe2 <__ieee754_log+0x6a>
 800bf8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf92:	4303      	orrs	r3, r0
 800bf94:	ee10 2a10 	vmov	r2, s0
 800bf98:	d10c      	bne.n	800bfb4 <__ieee754_log+0x3c>
 800bf9a:	49cf      	ldr	r1, [pc, #828]	; (800c2d8 <__ieee754_log+0x360>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	f7f4 fc5b 	bl	800085c <__aeabi_ddiv>
 800bfa6:	ec41 0b10 	vmov	d0, r0, r1
 800bfaa:	b003      	add	sp, #12
 800bfac:	ecbd 8b04 	vpop	{d8-d9}
 800bfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb4:	2900      	cmp	r1, #0
 800bfb6:	da05      	bge.n	800bfc4 <__ieee754_log+0x4c>
 800bfb8:	460b      	mov	r3, r1
 800bfba:	f7f4 f96d 	bl	8000298 <__aeabi_dsub>
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e7ee      	b.n	800bfa2 <__ieee754_log+0x2a>
 800bfc4:	4bc5      	ldr	r3, [pc, #788]	; (800c2dc <__ieee754_log+0x364>)
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f7f4 fb1e 	bl	8000608 <__aeabi_dmul>
 800bfcc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800bfd0:	460d      	mov	r5, r1
 800bfd2:	4ac3      	ldr	r2, [pc, #780]	; (800c2e0 <__ieee754_log+0x368>)
 800bfd4:	4295      	cmp	r5, r2
 800bfd6:	dd06      	ble.n	800bfe6 <__ieee754_log+0x6e>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	f7f4 f95e 	bl	800029c <__adddf3>
 800bfe0:	e7e1      	b.n	800bfa6 <__ieee754_log+0x2e>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	e7f5      	b.n	800bfd2 <__ieee754_log+0x5a>
 800bfe6:	152c      	asrs	r4, r5, #20
 800bfe8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bfec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bff0:	441c      	add	r4, r3
 800bff2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800bff6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800bffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bffe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c002:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c006:	ea42 0105 	orr.w	r1, r2, r5
 800c00a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c00e:	2200      	movs	r2, #0
 800c010:	4bb4      	ldr	r3, [pc, #720]	; (800c2e4 <__ieee754_log+0x36c>)
 800c012:	f7f4 f941 	bl	8000298 <__aeabi_dsub>
 800c016:	1cab      	adds	r3, r5, #2
 800c018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	4682      	mov	sl, r0
 800c020:	468b      	mov	fp, r1
 800c022:	f04f 0200 	mov.w	r2, #0
 800c026:	dc53      	bgt.n	800c0d0 <__ieee754_log+0x158>
 800c028:	2300      	movs	r3, #0
 800c02a:	f7f4 fd55 	bl	8000ad8 <__aeabi_dcmpeq>
 800c02e:	b1d0      	cbz	r0, 800c066 <__ieee754_log+0xee>
 800c030:	2c00      	cmp	r4, #0
 800c032:	f000 8122 	beq.w	800c27a <__ieee754_log+0x302>
 800c036:	4620      	mov	r0, r4
 800c038:	f7f4 fa7c 	bl	8000534 <__aeabi_i2d>
 800c03c:	a390      	add	r3, pc, #576	; (adr r3, 800c280 <__ieee754_log+0x308>)
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	4606      	mov	r6, r0
 800c044:	460f      	mov	r7, r1
 800c046:	f7f4 fadf 	bl	8000608 <__aeabi_dmul>
 800c04a:	a38f      	add	r3, pc, #572	; (adr r3, 800c288 <__ieee754_log+0x310>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	4604      	mov	r4, r0
 800c052:	460d      	mov	r5, r1
 800c054:	4630      	mov	r0, r6
 800c056:	4639      	mov	r1, r7
 800c058:	f7f4 fad6 	bl	8000608 <__aeabi_dmul>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4620      	mov	r0, r4
 800c062:	4629      	mov	r1, r5
 800c064:	e7ba      	b.n	800bfdc <__ieee754_log+0x64>
 800c066:	a38a      	add	r3, pc, #552	; (adr r3, 800c290 <__ieee754_log+0x318>)
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	4650      	mov	r0, sl
 800c06e:	4659      	mov	r1, fp
 800c070:	f7f4 faca 	bl	8000608 <__aeabi_dmul>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	2000      	movs	r0, #0
 800c07a:	499b      	ldr	r1, [pc, #620]	; (800c2e8 <__ieee754_log+0x370>)
 800c07c:	f7f4 f90c 	bl	8000298 <__aeabi_dsub>
 800c080:	4652      	mov	r2, sl
 800c082:	4606      	mov	r6, r0
 800c084:	460f      	mov	r7, r1
 800c086:	465b      	mov	r3, fp
 800c088:	4650      	mov	r0, sl
 800c08a:	4659      	mov	r1, fp
 800c08c:	f7f4 fabc 	bl	8000608 <__aeabi_dmul>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	4630      	mov	r0, r6
 800c096:	4639      	mov	r1, r7
 800c098:	f7f4 fab6 	bl	8000608 <__aeabi_dmul>
 800c09c:	4606      	mov	r6, r0
 800c09e:	460f      	mov	r7, r1
 800c0a0:	b914      	cbnz	r4, 800c0a8 <__ieee754_log+0x130>
 800c0a2:	4632      	mov	r2, r6
 800c0a4:	463b      	mov	r3, r7
 800c0a6:	e0a2      	b.n	800c1ee <__ieee754_log+0x276>
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f7f4 fa43 	bl	8000534 <__aeabi_i2d>
 800c0ae:	a374      	add	r3, pc, #464	; (adr r3, 800c280 <__ieee754_log+0x308>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	4680      	mov	r8, r0
 800c0b6:	4689      	mov	r9, r1
 800c0b8:	f7f4 faa6 	bl	8000608 <__aeabi_dmul>
 800c0bc:	a372      	add	r3, pc, #456	; (adr r3, 800c288 <__ieee754_log+0x310>)
 800c0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	460d      	mov	r5, r1
 800c0c6:	4640      	mov	r0, r8
 800c0c8:	4649      	mov	r1, r9
 800c0ca:	f7f4 fa9d 	bl	8000608 <__aeabi_dmul>
 800c0ce:	e0a7      	b.n	800c220 <__ieee754_log+0x2a8>
 800c0d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0d4:	f7f4 f8e2 	bl	800029c <__adddf3>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4650      	mov	r0, sl
 800c0de:	4659      	mov	r1, fp
 800c0e0:	f7f4 fbbc 	bl	800085c <__aeabi_ddiv>
 800c0e4:	ec41 0b18 	vmov	d8, r0, r1
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f7f4 fa23 	bl	8000534 <__aeabi_i2d>
 800c0ee:	ec53 2b18 	vmov	r2, r3, d8
 800c0f2:	ec41 0b19 	vmov	d9, r0, r1
 800c0f6:	ec51 0b18 	vmov	r0, r1, d8
 800c0fa:	f7f4 fa85 	bl	8000608 <__aeabi_dmul>
 800c0fe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c102:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	4602      	mov	r2, r0
 800c10a:	460b      	mov	r3, r1
 800c10c:	4680      	mov	r8, r0
 800c10e:	4689      	mov	r9, r1
 800c110:	f7f4 fa7a 	bl	8000608 <__aeabi_dmul>
 800c114:	a360      	add	r3, pc, #384	; (adr r3, 800c298 <__ieee754_log+0x320>)
 800c116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11a:	4606      	mov	r6, r0
 800c11c:	460f      	mov	r7, r1
 800c11e:	f7f4 fa73 	bl	8000608 <__aeabi_dmul>
 800c122:	a35f      	add	r3, pc, #380	; (adr r3, 800c2a0 <__ieee754_log+0x328>)
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 f8b8 	bl	800029c <__adddf3>
 800c12c:	4632      	mov	r2, r6
 800c12e:	463b      	mov	r3, r7
 800c130:	f7f4 fa6a 	bl	8000608 <__aeabi_dmul>
 800c134:	a35c      	add	r3, pc, #368	; (adr r3, 800c2a8 <__ieee754_log+0x330>)
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	f7f4 f8af 	bl	800029c <__adddf3>
 800c13e:	4632      	mov	r2, r6
 800c140:	463b      	mov	r3, r7
 800c142:	f7f4 fa61 	bl	8000608 <__aeabi_dmul>
 800c146:	a35a      	add	r3, pc, #360	; (adr r3, 800c2b0 <__ieee754_log+0x338>)
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	f7f4 f8a6 	bl	800029c <__adddf3>
 800c150:	4642      	mov	r2, r8
 800c152:	464b      	mov	r3, r9
 800c154:	f7f4 fa58 	bl	8000608 <__aeabi_dmul>
 800c158:	a357      	add	r3, pc, #348	; (adr r3, 800c2b8 <__ieee754_log+0x340>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	4680      	mov	r8, r0
 800c160:	4689      	mov	r9, r1
 800c162:	4630      	mov	r0, r6
 800c164:	4639      	mov	r1, r7
 800c166:	f7f4 fa4f 	bl	8000608 <__aeabi_dmul>
 800c16a:	a355      	add	r3, pc, #340	; (adr r3, 800c2c0 <__ieee754_log+0x348>)
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	f7f4 f894 	bl	800029c <__adddf3>
 800c174:	4632      	mov	r2, r6
 800c176:	463b      	mov	r3, r7
 800c178:	f7f4 fa46 	bl	8000608 <__aeabi_dmul>
 800c17c:	a352      	add	r3, pc, #328	; (adr r3, 800c2c8 <__ieee754_log+0x350>)
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	f7f4 f88b 	bl	800029c <__adddf3>
 800c186:	4632      	mov	r2, r6
 800c188:	463b      	mov	r3, r7
 800c18a:	f7f4 fa3d 	bl	8000608 <__aeabi_dmul>
 800c18e:	460b      	mov	r3, r1
 800c190:	4602      	mov	r2, r0
 800c192:	4649      	mov	r1, r9
 800c194:	4640      	mov	r0, r8
 800c196:	f7f4 f881 	bl	800029c <__adddf3>
 800c19a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	3551      	adds	r5, #81	; 0x51
 800c1a2:	431d      	orrs	r5, r3
 800c1a4:	2d00      	cmp	r5, #0
 800c1a6:	4680      	mov	r8, r0
 800c1a8:	4689      	mov	r9, r1
 800c1aa:	dd48      	ble.n	800c23e <__ieee754_log+0x2c6>
 800c1ac:	4b4e      	ldr	r3, [pc, #312]	; (800c2e8 <__ieee754_log+0x370>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4650      	mov	r0, sl
 800c1b2:	4659      	mov	r1, fp
 800c1b4:	f7f4 fa28 	bl	8000608 <__aeabi_dmul>
 800c1b8:	4652      	mov	r2, sl
 800c1ba:	465b      	mov	r3, fp
 800c1bc:	f7f4 fa24 	bl	8000608 <__aeabi_dmul>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	460f      	mov	r7, r1
 800c1c8:	4640      	mov	r0, r8
 800c1ca:	4649      	mov	r1, r9
 800c1cc:	f7f4 f866 	bl	800029c <__adddf3>
 800c1d0:	ec53 2b18 	vmov	r2, r3, d8
 800c1d4:	f7f4 fa18 	bl	8000608 <__aeabi_dmul>
 800c1d8:	4680      	mov	r8, r0
 800c1da:	4689      	mov	r9, r1
 800c1dc:	b964      	cbnz	r4, 800c1f8 <__ieee754_log+0x280>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	4639      	mov	r1, r7
 800c1e6:	f7f4 f857 	bl	8000298 <__aeabi_dsub>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	4650      	mov	r0, sl
 800c1f0:	4659      	mov	r1, fp
 800c1f2:	f7f4 f851 	bl	8000298 <__aeabi_dsub>
 800c1f6:	e6d6      	b.n	800bfa6 <__ieee754_log+0x2e>
 800c1f8:	a321      	add	r3, pc, #132	; (adr r3, 800c280 <__ieee754_log+0x308>)
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	ec51 0b19 	vmov	r0, r1, d9
 800c202:	f7f4 fa01 	bl	8000608 <__aeabi_dmul>
 800c206:	a320      	add	r3, pc, #128	; (adr r3, 800c288 <__ieee754_log+0x310>)
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	4604      	mov	r4, r0
 800c20e:	460d      	mov	r5, r1
 800c210:	ec51 0b19 	vmov	r0, r1, d9
 800c214:	f7f4 f9f8 	bl	8000608 <__aeabi_dmul>
 800c218:	4642      	mov	r2, r8
 800c21a:	464b      	mov	r3, r9
 800c21c:	f7f4 f83e 	bl	800029c <__adddf3>
 800c220:	4602      	mov	r2, r0
 800c222:	460b      	mov	r3, r1
 800c224:	4630      	mov	r0, r6
 800c226:	4639      	mov	r1, r7
 800c228:	f7f4 f836 	bl	8000298 <__aeabi_dsub>
 800c22c:	4652      	mov	r2, sl
 800c22e:	465b      	mov	r3, fp
 800c230:	f7f4 f832 	bl	8000298 <__aeabi_dsub>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	4620      	mov	r0, r4
 800c23a:	4629      	mov	r1, r5
 800c23c:	e7d9      	b.n	800c1f2 <__ieee754_log+0x27a>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4650      	mov	r0, sl
 800c244:	4659      	mov	r1, fp
 800c246:	f7f4 f827 	bl	8000298 <__aeabi_dsub>
 800c24a:	ec53 2b18 	vmov	r2, r3, d8
 800c24e:	f7f4 f9db 	bl	8000608 <__aeabi_dmul>
 800c252:	4606      	mov	r6, r0
 800c254:	460f      	mov	r7, r1
 800c256:	2c00      	cmp	r4, #0
 800c258:	f43f af23 	beq.w	800c0a2 <__ieee754_log+0x12a>
 800c25c:	a308      	add	r3, pc, #32	; (adr r3, 800c280 <__ieee754_log+0x308>)
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	ec51 0b19 	vmov	r0, r1, d9
 800c266:	f7f4 f9cf 	bl	8000608 <__aeabi_dmul>
 800c26a:	a307      	add	r3, pc, #28	; (adr r3, 800c288 <__ieee754_log+0x310>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	4604      	mov	r4, r0
 800c272:	460d      	mov	r5, r1
 800c274:	ec51 0b19 	vmov	r0, r1, d9
 800c278:	e727      	b.n	800c0ca <__ieee754_log+0x152>
 800c27a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c2d0 <__ieee754_log+0x358>
 800c27e:	e694      	b.n	800bfaa <__ieee754_log+0x32>
 800c280:	fee00000 	.word	0xfee00000
 800c284:	3fe62e42 	.word	0x3fe62e42
 800c288:	35793c76 	.word	0x35793c76
 800c28c:	3dea39ef 	.word	0x3dea39ef
 800c290:	55555555 	.word	0x55555555
 800c294:	3fd55555 	.word	0x3fd55555
 800c298:	df3e5244 	.word	0xdf3e5244
 800c29c:	3fc2f112 	.word	0x3fc2f112
 800c2a0:	96cb03de 	.word	0x96cb03de
 800c2a4:	3fc74664 	.word	0x3fc74664
 800c2a8:	94229359 	.word	0x94229359
 800c2ac:	3fd24924 	.word	0x3fd24924
 800c2b0:	55555593 	.word	0x55555593
 800c2b4:	3fe55555 	.word	0x3fe55555
 800c2b8:	d078c69f 	.word	0xd078c69f
 800c2bc:	3fc39a09 	.word	0x3fc39a09
 800c2c0:	1d8e78af 	.word	0x1d8e78af
 800c2c4:	3fcc71c5 	.word	0x3fcc71c5
 800c2c8:	9997fa04 	.word	0x9997fa04
 800c2cc:	3fd99999 	.word	0x3fd99999
	...
 800c2d8:	c3500000 	.word	0xc3500000
 800c2dc:	43500000 	.word	0x43500000
 800c2e0:	7fefffff 	.word	0x7fefffff
 800c2e4:	3ff00000 	.word	0x3ff00000
 800c2e8:	3fe00000 	.word	0x3fe00000
 800c2ec:	00000000 	.word	0x00000000

0800c2f0 <__ieee754_pow>:
 800c2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	ed2d 8b06 	vpush	{d8-d10}
 800c2f8:	b089      	sub	sp, #36	; 0x24
 800c2fa:	ed8d 1b00 	vstr	d1, [sp]
 800c2fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c302:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c306:	ea58 0102 	orrs.w	r1, r8, r2
 800c30a:	ec57 6b10 	vmov	r6, r7, d0
 800c30e:	d115      	bne.n	800c33c <__ieee754_pow+0x4c>
 800c310:	19b3      	adds	r3, r6, r6
 800c312:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c316:	4152      	adcs	r2, r2
 800c318:	4299      	cmp	r1, r3
 800c31a:	4b89      	ldr	r3, [pc, #548]	; (800c540 <__ieee754_pow+0x250>)
 800c31c:	4193      	sbcs	r3, r2
 800c31e:	f080 84d2 	bcs.w	800ccc6 <__ieee754_pow+0x9d6>
 800c322:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c326:	4630      	mov	r0, r6
 800c328:	4639      	mov	r1, r7
 800c32a:	f7f3 ffb7 	bl	800029c <__adddf3>
 800c32e:	ec41 0b10 	vmov	d0, r0, r1
 800c332:	b009      	add	sp, #36	; 0x24
 800c334:	ecbd 8b06 	vpop	{d8-d10}
 800c338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33c:	4b81      	ldr	r3, [pc, #516]	; (800c544 <__ieee754_pow+0x254>)
 800c33e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c342:	429c      	cmp	r4, r3
 800c344:	ee10 aa10 	vmov	sl, s0
 800c348:	463d      	mov	r5, r7
 800c34a:	dc06      	bgt.n	800c35a <__ieee754_pow+0x6a>
 800c34c:	d101      	bne.n	800c352 <__ieee754_pow+0x62>
 800c34e:	2e00      	cmp	r6, #0
 800c350:	d1e7      	bne.n	800c322 <__ieee754_pow+0x32>
 800c352:	4598      	cmp	r8, r3
 800c354:	dc01      	bgt.n	800c35a <__ieee754_pow+0x6a>
 800c356:	d10f      	bne.n	800c378 <__ieee754_pow+0x88>
 800c358:	b172      	cbz	r2, 800c378 <__ieee754_pow+0x88>
 800c35a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c35e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c362:	ea55 050a 	orrs.w	r5, r5, sl
 800c366:	d1dc      	bne.n	800c322 <__ieee754_pow+0x32>
 800c368:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c36c:	18db      	adds	r3, r3, r3
 800c36e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c372:	4152      	adcs	r2, r2
 800c374:	429d      	cmp	r5, r3
 800c376:	e7d0      	b.n	800c31a <__ieee754_pow+0x2a>
 800c378:	2d00      	cmp	r5, #0
 800c37a:	da3b      	bge.n	800c3f4 <__ieee754_pow+0x104>
 800c37c:	4b72      	ldr	r3, [pc, #456]	; (800c548 <__ieee754_pow+0x258>)
 800c37e:	4598      	cmp	r8, r3
 800c380:	dc51      	bgt.n	800c426 <__ieee754_pow+0x136>
 800c382:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c386:	4598      	cmp	r8, r3
 800c388:	f340 84ac 	ble.w	800cce4 <__ieee754_pow+0x9f4>
 800c38c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c390:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c394:	2b14      	cmp	r3, #20
 800c396:	dd0f      	ble.n	800c3b8 <__ieee754_pow+0xc8>
 800c398:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c39c:	fa22 f103 	lsr.w	r1, r2, r3
 800c3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	f040 849d 	bne.w	800cce4 <__ieee754_pow+0x9f4>
 800c3aa:	f001 0101 	and.w	r1, r1, #1
 800c3ae:	f1c1 0302 	rsb	r3, r1, #2
 800c3b2:	9304      	str	r3, [sp, #16]
 800c3b4:	b182      	cbz	r2, 800c3d8 <__ieee754_pow+0xe8>
 800c3b6:	e05f      	b.n	800c478 <__ieee754_pow+0x188>
 800c3b8:	2a00      	cmp	r2, #0
 800c3ba:	d15b      	bne.n	800c474 <__ieee754_pow+0x184>
 800c3bc:	f1c3 0314 	rsb	r3, r3, #20
 800c3c0:	fa48 f103 	asr.w	r1, r8, r3
 800c3c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c3c8:	4543      	cmp	r3, r8
 800c3ca:	f040 8488 	bne.w	800ccde <__ieee754_pow+0x9ee>
 800c3ce:	f001 0101 	and.w	r1, r1, #1
 800c3d2:	f1c1 0302 	rsb	r3, r1, #2
 800c3d6:	9304      	str	r3, [sp, #16]
 800c3d8:	4b5c      	ldr	r3, [pc, #368]	; (800c54c <__ieee754_pow+0x25c>)
 800c3da:	4598      	cmp	r8, r3
 800c3dc:	d132      	bne.n	800c444 <__ieee754_pow+0x154>
 800c3de:	f1b9 0f00 	cmp.w	r9, #0
 800c3e2:	f280 8478 	bge.w	800ccd6 <__ieee754_pow+0x9e6>
 800c3e6:	4959      	ldr	r1, [pc, #356]	; (800c54c <__ieee754_pow+0x25c>)
 800c3e8:	4632      	mov	r2, r6
 800c3ea:	463b      	mov	r3, r7
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	f7f4 fa35 	bl	800085c <__aeabi_ddiv>
 800c3f2:	e79c      	b.n	800c32e <__ieee754_pow+0x3e>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	9304      	str	r3, [sp, #16]
 800c3f8:	2a00      	cmp	r2, #0
 800c3fa:	d13d      	bne.n	800c478 <__ieee754_pow+0x188>
 800c3fc:	4b51      	ldr	r3, [pc, #324]	; (800c544 <__ieee754_pow+0x254>)
 800c3fe:	4598      	cmp	r8, r3
 800c400:	d1ea      	bne.n	800c3d8 <__ieee754_pow+0xe8>
 800c402:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c406:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c40a:	ea53 030a 	orrs.w	r3, r3, sl
 800c40e:	f000 845a 	beq.w	800ccc6 <__ieee754_pow+0x9d6>
 800c412:	4b4f      	ldr	r3, [pc, #316]	; (800c550 <__ieee754_pow+0x260>)
 800c414:	429c      	cmp	r4, r3
 800c416:	dd08      	ble.n	800c42a <__ieee754_pow+0x13a>
 800c418:	f1b9 0f00 	cmp.w	r9, #0
 800c41c:	f2c0 8457 	blt.w	800ccce <__ieee754_pow+0x9de>
 800c420:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c424:	e783      	b.n	800c32e <__ieee754_pow+0x3e>
 800c426:	2302      	movs	r3, #2
 800c428:	e7e5      	b.n	800c3f6 <__ieee754_pow+0x106>
 800c42a:	f1b9 0f00 	cmp.w	r9, #0
 800c42e:	f04f 0000 	mov.w	r0, #0
 800c432:	f04f 0100 	mov.w	r1, #0
 800c436:	f6bf af7a 	bge.w	800c32e <__ieee754_pow+0x3e>
 800c43a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c43e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c442:	e774      	b.n	800c32e <__ieee754_pow+0x3e>
 800c444:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c448:	d106      	bne.n	800c458 <__ieee754_pow+0x168>
 800c44a:	4632      	mov	r2, r6
 800c44c:	463b      	mov	r3, r7
 800c44e:	4630      	mov	r0, r6
 800c450:	4639      	mov	r1, r7
 800c452:	f7f4 f8d9 	bl	8000608 <__aeabi_dmul>
 800c456:	e76a      	b.n	800c32e <__ieee754_pow+0x3e>
 800c458:	4b3e      	ldr	r3, [pc, #248]	; (800c554 <__ieee754_pow+0x264>)
 800c45a:	4599      	cmp	r9, r3
 800c45c:	d10c      	bne.n	800c478 <__ieee754_pow+0x188>
 800c45e:	2d00      	cmp	r5, #0
 800c460:	db0a      	blt.n	800c478 <__ieee754_pow+0x188>
 800c462:	ec47 6b10 	vmov	d0, r6, r7
 800c466:	b009      	add	sp, #36	; 0x24
 800c468:	ecbd 8b06 	vpop	{d8-d10}
 800c46c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c470:	f000 bc6c 	b.w	800cd4c <__ieee754_sqrt>
 800c474:	2300      	movs	r3, #0
 800c476:	9304      	str	r3, [sp, #16]
 800c478:	ec47 6b10 	vmov	d0, r6, r7
 800c47c:	f000 fd48 	bl	800cf10 <fabs>
 800c480:	ec51 0b10 	vmov	r0, r1, d0
 800c484:	f1ba 0f00 	cmp.w	sl, #0
 800c488:	d129      	bne.n	800c4de <__ieee754_pow+0x1ee>
 800c48a:	b124      	cbz	r4, 800c496 <__ieee754_pow+0x1a6>
 800c48c:	4b2f      	ldr	r3, [pc, #188]	; (800c54c <__ieee754_pow+0x25c>)
 800c48e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c492:	429a      	cmp	r2, r3
 800c494:	d123      	bne.n	800c4de <__ieee754_pow+0x1ee>
 800c496:	f1b9 0f00 	cmp.w	r9, #0
 800c49a:	da05      	bge.n	800c4a8 <__ieee754_pow+0x1b8>
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	492a      	ldr	r1, [pc, #168]	; (800c54c <__ieee754_pow+0x25c>)
 800c4a4:	f7f4 f9da 	bl	800085c <__aeabi_ddiv>
 800c4a8:	2d00      	cmp	r5, #0
 800c4aa:	f6bf af40 	bge.w	800c32e <__ieee754_pow+0x3e>
 800c4ae:	9b04      	ldr	r3, [sp, #16]
 800c4b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c4b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c4b8:	4323      	orrs	r3, r4
 800c4ba:	d108      	bne.n	800c4ce <__ieee754_pow+0x1de>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	460b      	mov	r3, r1
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	f7f3 fee8 	bl	8000298 <__aeabi_dsub>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	e78f      	b.n	800c3ee <__ieee754_pow+0xfe>
 800c4ce:	9b04      	ldr	r3, [sp, #16]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	f47f af2c 	bne.w	800c32e <__ieee754_pow+0x3e>
 800c4d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4da:	4619      	mov	r1, r3
 800c4dc:	e727      	b.n	800c32e <__ieee754_pow+0x3e>
 800c4de:	0feb      	lsrs	r3, r5, #31
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	9306      	str	r3, [sp, #24]
 800c4e4:	9a06      	ldr	r2, [sp, #24]
 800c4e6:	9b04      	ldr	r3, [sp, #16]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	d102      	bne.n	800c4f2 <__ieee754_pow+0x202>
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	463b      	mov	r3, r7
 800c4f0:	e7e6      	b.n	800c4c0 <__ieee754_pow+0x1d0>
 800c4f2:	4b19      	ldr	r3, [pc, #100]	; (800c558 <__ieee754_pow+0x268>)
 800c4f4:	4598      	cmp	r8, r3
 800c4f6:	f340 80fb 	ble.w	800c6f0 <__ieee754_pow+0x400>
 800c4fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c4fe:	4598      	cmp	r8, r3
 800c500:	4b13      	ldr	r3, [pc, #76]	; (800c550 <__ieee754_pow+0x260>)
 800c502:	dd0c      	ble.n	800c51e <__ieee754_pow+0x22e>
 800c504:	429c      	cmp	r4, r3
 800c506:	dc0f      	bgt.n	800c528 <__ieee754_pow+0x238>
 800c508:	f1b9 0f00 	cmp.w	r9, #0
 800c50c:	da0f      	bge.n	800c52e <__ieee754_pow+0x23e>
 800c50e:	2000      	movs	r0, #0
 800c510:	b009      	add	sp, #36	; 0x24
 800c512:	ecbd 8b06 	vpop	{d8-d10}
 800c516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51a:	f000 bcf0 	b.w	800cefe <__math_oflow>
 800c51e:	429c      	cmp	r4, r3
 800c520:	dbf2      	blt.n	800c508 <__ieee754_pow+0x218>
 800c522:	4b0a      	ldr	r3, [pc, #40]	; (800c54c <__ieee754_pow+0x25c>)
 800c524:	429c      	cmp	r4, r3
 800c526:	dd19      	ble.n	800c55c <__ieee754_pow+0x26c>
 800c528:	f1b9 0f00 	cmp.w	r9, #0
 800c52c:	dcef      	bgt.n	800c50e <__ieee754_pow+0x21e>
 800c52e:	2000      	movs	r0, #0
 800c530:	b009      	add	sp, #36	; 0x24
 800c532:	ecbd 8b06 	vpop	{d8-d10}
 800c536:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53a:	f000 bcd7 	b.w	800ceec <__math_uflow>
 800c53e:	bf00      	nop
 800c540:	fff00000 	.word	0xfff00000
 800c544:	7ff00000 	.word	0x7ff00000
 800c548:	433fffff 	.word	0x433fffff
 800c54c:	3ff00000 	.word	0x3ff00000
 800c550:	3fefffff 	.word	0x3fefffff
 800c554:	3fe00000 	.word	0x3fe00000
 800c558:	41e00000 	.word	0x41e00000
 800c55c:	4b60      	ldr	r3, [pc, #384]	; (800c6e0 <__ieee754_pow+0x3f0>)
 800c55e:	2200      	movs	r2, #0
 800c560:	f7f3 fe9a 	bl	8000298 <__aeabi_dsub>
 800c564:	a354      	add	r3, pc, #336	; (adr r3, 800c6b8 <__ieee754_pow+0x3c8>)
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	4604      	mov	r4, r0
 800c56c:	460d      	mov	r5, r1
 800c56e:	f7f4 f84b 	bl	8000608 <__aeabi_dmul>
 800c572:	a353      	add	r3, pc, #332	; (adr r3, 800c6c0 <__ieee754_pow+0x3d0>)
 800c574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c578:	4606      	mov	r6, r0
 800c57a:	460f      	mov	r7, r1
 800c57c:	4620      	mov	r0, r4
 800c57e:	4629      	mov	r1, r5
 800c580:	f7f4 f842 	bl	8000608 <__aeabi_dmul>
 800c584:	4b57      	ldr	r3, [pc, #348]	; (800c6e4 <__ieee754_pow+0x3f4>)
 800c586:	4682      	mov	sl, r0
 800c588:	468b      	mov	fp, r1
 800c58a:	2200      	movs	r2, #0
 800c58c:	4620      	mov	r0, r4
 800c58e:	4629      	mov	r1, r5
 800c590:	f7f4 f83a 	bl	8000608 <__aeabi_dmul>
 800c594:	4602      	mov	r2, r0
 800c596:	460b      	mov	r3, r1
 800c598:	a14b      	add	r1, pc, #300	; (adr r1, 800c6c8 <__ieee754_pow+0x3d8>)
 800c59a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c59e:	f7f3 fe7b 	bl	8000298 <__aeabi_dsub>
 800c5a2:	4622      	mov	r2, r4
 800c5a4:	462b      	mov	r3, r5
 800c5a6:	f7f4 f82f 	bl	8000608 <__aeabi_dmul>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	494d      	ldr	r1, [pc, #308]	; (800c6e8 <__ieee754_pow+0x3f8>)
 800c5b2:	f7f3 fe71 	bl	8000298 <__aeabi_dsub>
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	4680      	mov	r8, r0
 800c5ba:	4689      	mov	r9, r1
 800c5bc:	462b      	mov	r3, r5
 800c5be:	4620      	mov	r0, r4
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	f7f4 f821 	bl	8000608 <__aeabi_dmul>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4640      	mov	r0, r8
 800c5cc:	4649      	mov	r1, r9
 800c5ce:	f7f4 f81b 	bl	8000608 <__aeabi_dmul>
 800c5d2:	a33f      	add	r3, pc, #252	; (adr r3, 800c6d0 <__ieee754_pow+0x3e0>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f4 f816 	bl	8000608 <__aeabi_dmul>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4650      	mov	r0, sl
 800c5e2:	4659      	mov	r1, fp
 800c5e4:	f7f3 fe58 	bl	8000298 <__aeabi_dsub>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4680      	mov	r8, r0
 800c5ee:	4689      	mov	r9, r1
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	4639      	mov	r1, r7
 800c5f4:	f7f3 fe52 	bl	800029c <__adddf3>
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	4632      	mov	r2, r6
 800c5fc:	463b      	mov	r3, r7
 800c5fe:	4604      	mov	r4, r0
 800c600:	460d      	mov	r5, r1
 800c602:	f7f3 fe49 	bl	8000298 <__aeabi_dsub>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	4640      	mov	r0, r8
 800c60c:	4649      	mov	r1, r9
 800c60e:	f7f3 fe43 	bl	8000298 <__aeabi_dsub>
 800c612:	9b04      	ldr	r3, [sp, #16]
 800c614:	9a06      	ldr	r2, [sp, #24]
 800c616:	3b01      	subs	r3, #1
 800c618:	4313      	orrs	r3, r2
 800c61a:	4682      	mov	sl, r0
 800c61c:	468b      	mov	fp, r1
 800c61e:	f040 81e7 	bne.w	800c9f0 <__ieee754_pow+0x700>
 800c622:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c6d8 <__ieee754_pow+0x3e8>
 800c626:	eeb0 8a47 	vmov.f32	s16, s14
 800c62a:	eef0 8a67 	vmov.f32	s17, s15
 800c62e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c632:	2600      	movs	r6, #0
 800c634:	4632      	mov	r2, r6
 800c636:	463b      	mov	r3, r7
 800c638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c63c:	f7f3 fe2c 	bl	8000298 <__aeabi_dsub>
 800c640:	4622      	mov	r2, r4
 800c642:	462b      	mov	r3, r5
 800c644:	f7f3 ffe0 	bl	8000608 <__aeabi_dmul>
 800c648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c64c:	4680      	mov	r8, r0
 800c64e:	4689      	mov	r9, r1
 800c650:	4650      	mov	r0, sl
 800c652:	4659      	mov	r1, fp
 800c654:	f7f3 ffd8 	bl	8000608 <__aeabi_dmul>
 800c658:	4602      	mov	r2, r0
 800c65a:	460b      	mov	r3, r1
 800c65c:	4640      	mov	r0, r8
 800c65e:	4649      	mov	r1, r9
 800c660:	f7f3 fe1c 	bl	800029c <__adddf3>
 800c664:	4632      	mov	r2, r6
 800c666:	463b      	mov	r3, r7
 800c668:	4680      	mov	r8, r0
 800c66a:	4689      	mov	r9, r1
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f3 ffca 	bl	8000608 <__aeabi_dmul>
 800c674:	460b      	mov	r3, r1
 800c676:	4604      	mov	r4, r0
 800c678:	460d      	mov	r5, r1
 800c67a:	4602      	mov	r2, r0
 800c67c:	4649      	mov	r1, r9
 800c67e:	4640      	mov	r0, r8
 800c680:	f7f3 fe0c 	bl	800029c <__adddf3>
 800c684:	4b19      	ldr	r3, [pc, #100]	; (800c6ec <__ieee754_pow+0x3fc>)
 800c686:	4299      	cmp	r1, r3
 800c688:	ec45 4b19 	vmov	d9, r4, r5
 800c68c:	4606      	mov	r6, r0
 800c68e:	460f      	mov	r7, r1
 800c690:	468b      	mov	fp, r1
 800c692:	f340 82f1 	ble.w	800cc78 <__ieee754_pow+0x988>
 800c696:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c69a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c69e:	4303      	orrs	r3, r0
 800c6a0:	f000 81e4 	beq.w	800ca6c <__ieee754_pow+0x77c>
 800c6a4:	ec51 0b18 	vmov	r0, r1, d8
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f7f4 fa1e 	bl	8000aec <__aeabi_dcmplt>
 800c6b0:	3800      	subs	r0, #0
 800c6b2:	bf18      	it	ne
 800c6b4:	2001      	movne	r0, #1
 800c6b6:	e72b      	b.n	800c510 <__ieee754_pow+0x220>
 800c6b8:	60000000 	.word	0x60000000
 800c6bc:	3ff71547 	.word	0x3ff71547
 800c6c0:	f85ddf44 	.word	0xf85ddf44
 800c6c4:	3e54ae0b 	.word	0x3e54ae0b
 800c6c8:	55555555 	.word	0x55555555
 800c6cc:	3fd55555 	.word	0x3fd55555
 800c6d0:	652b82fe 	.word	0x652b82fe
 800c6d4:	3ff71547 	.word	0x3ff71547
 800c6d8:	00000000 	.word	0x00000000
 800c6dc:	bff00000 	.word	0xbff00000
 800c6e0:	3ff00000 	.word	0x3ff00000
 800c6e4:	3fd00000 	.word	0x3fd00000
 800c6e8:	3fe00000 	.word	0x3fe00000
 800c6ec:	408fffff 	.word	0x408fffff
 800c6f0:	4bd5      	ldr	r3, [pc, #852]	; (800ca48 <__ieee754_pow+0x758>)
 800c6f2:	402b      	ands	r3, r5
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	b92b      	cbnz	r3, 800c704 <__ieee754_pow+0x414>
 800c6f8:	4bd4      	ldr	r3, [pc, #848]	; (800ca4c <__ieee754_pow+0x75c>)
 800c6fa:	f7f3 ff85 	bl	8000608 <__aeabi_dmul>
 800c6fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c702:	460c      	mov	r4, r1
 800c704:	1523      	asrs	r3, r4, #20
 800c706:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c70a:	4413      	add	r3, r2
 800c70c:	9305      	str	r3, [sp, #20]
 800c70e:	4bd0      	ldr	r3, [pc, #832]	; (800ca50 <__ieee754_pow+0x760>)
 800c710:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c714:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c718:	429c      	cmp	r4, r3
 800c71a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c71e:	dd08      	ble.n	800c732 <__ieee754_pow+0x442>
 800c720:	4bcc      	ldr	r3, [pc, #816]	; (800ca54 <__ieee754_pow+0x764>)
 800c722:	429c      	cmp	r4, r3
 800c724:	f340 8162 	ble.w	800c9ec <__ieee754_pow+0x6fc>
 800c728:	9b05      	ldr	r3, [sp, #20]
 800c72a:	3301      	adds	r3, #1
 800c72c:	9305      	str	r3, [sp, #20]
 800c72e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c732:	2400      	movs	r4, #0
 800c734:	00e3      	lsls	r3, r4, #3
 800c736:	9307      	str	r3, [sp, #28]
 800c738:	4bc7      	ldr	r3, [pc, #796]	; (800ca58 <__ieee754_pow+0x768>)
 800c73a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c73e:	ed93 7b00 	vldr	d7, [r3]
 800c742:	4629      	mov	r1, r5
 800c744:	ec53 2b17 	vmov	r2, r3, d7
 800c748:	eeb0 9a47 	vmov.f32	s18, s14
 800c74c:	eef0 9a67 	vmov.f32	s19, s15
 800c750:	4682      	mov	sl, r0
 800c752:	f7f3 fda1 	bl	8000298 <__aeabi_dsub>
 800c756:	4652      	mov	r2, sl
 800c758:	4606      	mov	r6, r0
 800c75a:	460f      	mov	r7, r1
 800c75c:	462b      	mov	r3, r5
 800c75e:	ec51 0b19 	vmov	r0, r1, d9
 800c762:	f7f3 fd9b 	bl	800029c <__adddf3>
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	2000      	movs	r0, #0
 800c76c:	49bb      	ldr	r1, [pc, #748]	; (800ca5c <__ieee754_pow+0x76c>)
 800c76e:	f7f4 f875 	bl	800085c <__aeabi_ddiv>
 800c772:	ec41 0b1a 	vmov	d10, r0, r1
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4630      	mov	r0, r6
 800c77c:	4639      	mov	r1, r7
 800c77e:	f7f3 ff43 	bl	8000608 <__aeabi_dmul>
 800c782:	2300      	movs	r3, #0
 800c784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c788:	9302      	str	r3, [sp, #8]
 800c78a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c78e:	46ab      	mov	fp, r5
 800c790:	106d      	asrs	r5, r5, #1
 800c792:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c796:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c79a:	ec41 0b18 	vmov	d8, r0, r1
 800c79e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	4614      	mov	r4, r2
 800c7aa:	461d      	mov	r5, r3
 800c7ac:	f7f3 ff2c 	bl	8000608 <__aeabi_dmul>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	4639      	mov	r1, r7
 800c7b8:	f7f3 fd6e 	bl	8000298 <__aeabi_dsub>
 800c7bc:	ec53 2b19 	vmov	r2, r3, d9
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	460f      	mov	r7, r1
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	f7f3 fd66 	bl	8000298 <__aeabi_dsub>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4650      	mov	r0, sl
 800c7d2:	4659      	mov	r1, fp
 800c7d4:	f7f3 fd60 	bl	8000298 <__aeabi_dsub>
 800c7d8:	4642      	mov	r2, r8
 800c7da:	464b      	mov	r3, r9
 800c7dc:	f7f3 ff14 	bl	8000608 <__aeabi_dmul>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	4639      	mov	r1, r7
 800c7e8:	f7f3 fd56 	bl	8000298 <__aeabi_dsub>
 800c7ec:	ec53 2b1a 	vmov	r2, r3, d10
 800c7f0:	f7f3 ff0a 	bl	8000608 <__aeabi_dmul>
 800c7f4:	ec53 2b18 	vmov	r2, r3, d8
 800c7f8:	ec41 0b19 	vmov	d9, r0, r1
 800c7fc:	ec51 0b18 	vmov	r0, r1, d8
 800c800:	f7f3 ff02 	bl	8000608 <__aeabi_dmul>
 800c804:	a37c      	add	r3, pc, #496	; (adr r3, 800c9f8 <__ieee754_pow+0x708>)
 800c806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80a:	4604      	mov	r4, r0
 800c80c:	460d      	mov	r5, r1
 800c80e:	f7f3 fefb 	bl	8000608 <__aeabi_dmul>
 800c812:	a37b      	add	r3, pc, #492	; (adr r3, 800ca00 <__ieee754_pow+0x710>)
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	f7f3 fd40 	bl	800029c <__adddf3>
 800c81c:	4622      	mov	r2, r4
 800c81e:	462b      	mov	r3, r5
 800c820:	f7f3 fef2 	bl	8000608 <__aeabi_dmul>
 800c824:	a378      	add	r3, pc, #480	; (adr r3, 800ca08 <__ieee754_pow+0x718>)
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	f7f3 fd37 	bl	800029c <__adddf3>
 800c82e:	4622      	mov	r2, r4
 800c830:	462b      	mov	r3, r5
 800c832:	f7f3 fee9 	bl	8000608 <__aeabi_dmul>
 800c836:	a376      	add	r3, pc, #472	; (adr r3, 800ca10 <__ieee754_pow+0x720>)
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	f7f3 fd2e 	bl	800029c <__adddf3>
 800c840:	4622      	mov	r2, r4
 800c842:	462b      	mov	r3, r5
 800c844:	f7f3 fee0 	bl	8000608 <__aeabi_dmul>
 800c848:	a373      	add	r3, pc, #460	; (adr r3, 800ca18 <__ieee754_pow+0x728>)
 800c84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84e:	f7f3 fd25 	bl	800029c <__adddf3>
 800c852:	4622      	mov	r2, r4
 800c854:	462b      	mov	r3, r5
 800c856:	f7f3 fed7 	bl	8000608 <__aeabi_dmul>
 800c85a:	a371      	add	r3, pc, #452	; (adr r3, 800ca20 <__ieee754_pow+0x730>)
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	f7f3 fd1c 	bl	800029c <__adddf3>
 800c864:	4622      	mov	r2, r4
 800c866:	4606      	mov	r6, r0
 800c868:	460f      	mov	r7, r1
 800c86a:	462b      	mov	r3, r5
 800c86c:	4620      	mov	r0, r4
 800c86e:	4629      	mov	r1, r5
 800c870:	f7f3 feca 	bl	8000608 <__aeabi_dmul>
 800c874:	4602      	mov	r2, r0
 800c876:	460b      	mov	r3, r1
 800c878:	4630      	mov	r0, r6
 800c87a:	4639      	mov	r1, r7
 800c87c:	f7f3 fec4 	bl	8000608 <__aeabi_dmul>
 800c880:	4642      	mov	r2, r8
 800c882:	4604      	mov	r4, r0
 800c884:	460d      	mov	r5, r1
 800c886:	464b      	mov	r3, r9
 800c888:	ec51 0b18 	vmov	r0, r1, d8
 800c88c:	f7f3 fd06 	bl	800029c <__adddf3>
 800c890:	ec53 2b19 	vmov	r2, r3, d9
 800c894:	f7f3 feb8 	bl	8000608 <__aeabi_dmul>
 800c898:	4622      	mov	r2, r4
 800c89a:	462b      	mov	r3, r5
 800c89c:	f7f3 fcfe 	bl	800029c <__adddf3>
 800c8a0:	4642      	mov	r2, r8
 800c8a2:	4682      	mov	sl, r0
 800c8a4:	468b      	mov	fp, r1
 800c8a6:	464b      	mov	r3, r9
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	f7f3 feac 	bl	8000608 <__aeabi_dmul>
 800c8b0:	4b6b      	ldr	r3, [pc, #428]	; (800ca60 <__ieee754_pow+0x770>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	460f      	mov	r7, r1
 800c8b8:	f7f3 fcf0 	bl	800029c <__adddf3>
 800c8bc:	4652      	mov	r2, sl
 800c8be:	465b      	mov	r3, fp
 800c8c0:	f7f3 fcec 	bl	800029c <__adddf3>
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	460d      	mov	r5, r1
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4640      	mov	r0, r8
 800c8d0:	4649      	mov	r1, r9
 800c8d2:	f7f3 fe99 	bl	8000608 <__aeabi_dmul>
 800c8d6:	4b62      	ldr	r3, [pc, #392]	; (800ca60 <__ieee754_pow+0x770>)
 800c8d8:	4680      	mov	r8, r0
 800c8da:	4689      	mov	r9, r1
 800c8dc:	2200      	movs	r2, #0
 800c8de:	4620      	mov	r0, r4
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	f7f3 fcd9 	bl	8000298 <__aeabi_dsub>
 800c8e6:	4632      	mov	r2, r6
 800c8e8:	463b      	mov	r3, r7
 800c8ea:	f7f3 fcd5 	bl	8000298 <__aeabi_dsub>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4650      	mov	r0, sl
 800c8f4:	4659      	mov	r1, fp
 800c8f6:	f7f3 fccf 	bl	8000298 <__aeabi_dsub>
 800c8fa:	ec53 2b18 	vmov	r2, r3, d8
 800c8fe:	f7f3 fe83 	bl	8000608 <__aeabi_dmul>
 800c902:	4622      	mov	r2, r4
 800c904:	4606      	mov	r6, r0
 800c906:	460f      	mov	r7, r1
 800c908:	462b      	mov	r3, r5
 800c90a:	ec51 0b19 	vmov	r0, r1, d9
 800c90e:	f7f3 fe7b 	bl	8000608 <__aeabi_dmul>
 800c912:	4602      	mov	r2, r0
 800c914:	460b      	mov	r3, r1
 800c916:	4630      	mov	r0, r6
 800c918:	4639      	mov	r1, r7
 800c91a:	f7f3 fcbf 	bl	800029c <__adddf3>
 800c91e:	4606      	mov	r6, r0
 800c920:	460f      	mov	r7, r1
 800c922:	4602      	mov	r2, r0
 800c924:	460b      	mov	r3, r1
 800c926:	4640      	mov	r0, r8
 800c928:	4649      	mov	r1, r9
 800c92a:	f7f3 fcb7 	bl	800029c <__adddf3>
 800c92e:	a33e      	add	r3, pc, #248	; (adr r3, 800ca28 <__ieee754_pow+0x738>)
 800c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c934:	2000      	movs	r0, #0
 800c936:	4604      	mov	r4, r0
 800c938:	460d      	mov	r5, r1
 800c93a:	f7f3 fe65 	bl	8000608 <__aeabi_dmul>
 800c93e:	4642      	mov	r2, r8
 800c940:	ec41 0b18 	vmov	d8, r0, r1
 800c944:	464b      	mov	r3, r9
 800c946:	4620      	mov	r0, r4
 800c948:	4629      	mov	r1, r5
 800c94a:	f7f3 fca5 	bl	8000298 <__aeabi_dsub>
 800c94e:	4602      	mov	r2, r0
 800c950:	460b      	mov	r3, r1
 800c952:	4630      	mov	r0, r6
 800c954:	4639      	mov	r1, r7
 800c956:	f7f3 fc9f 	bl	8000298 <__aeabi_dsub>
 800c95a:	a335      	add	r3, pc, #212	; (adr r3, 800ca30 <__ieee754_pow+0x740>)
 800c95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c960:	f7f3 fe52 	bl	8000608 <__aeabi_dmul>
 800c964:	a334      	add	r3, pc, #208	; (adr r3, 800ca38 <__ieee754_pow+0x748>)
 800c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96a:	4606      	mov	r6, r0
 800c96c:	460f      	mov	r7, r1
 800c96e:	4620      	mov	r0, r4
 800c970:	4629      	mov	r1, r5
 800c972:	f7f3 fe49 	bl	8000608 <__aeabi_dmul>
 800c976:	4602      	mov	r2, r0
 800c978:	460b      	mov	r3, r1
 800c97a:	4630      	mov	r0, r6
 800c97c:	4639      	mov	r1, r7
 800c97e:	f7f3 fc8d 	bl	800029c <__adddf3>
 800c982:	9a07      	ldr	r2, [sp, #28]
 800c984:	4b37      	ldr	r3, [pc, #220]	; (800ca64 <__ieee754_pow+0x774>)
 800c986:	4413      	add	r3, r2
 800c988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98c:	f7f3 fc86 	bl	800029c <__adddf3>
 800c990:	4682      	mov	sl, r0
 800c992:	9805      	ldr	r0, [sp, #20]
 800c994:	468b      	mov	fp, r1
 800c996:	f7f3 fdcd 	bl	8000534 <__aeabi_i2d>
 800c99a:	9a07      	ldr	r2, [sp, #28]
 800c99c:	4b32      	ldr	r3, [pc, #200]	; (800ca68 <__ieee754_pow+0x778>)
 800c99e:	4413      	add	r3, r2
 800c9a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9a4:	4606      	mov	r6, r0
 800c9a6:	460f      	mov	r7, r1
 800c9a8:	4652      	mov	r2, sl
 800c9aa:	465b      	mov	r3, fp
 800c9ac:	ec51 0b18 	vmov	r0, r1, d8
 800c9b0:	f7f3 fc74 	bl	800029c <__adddf3>
 800c9b4:	4642      	mov	r2, r8
 800c9b6:	464b      	mov	r3, r9
 800c9b8:	f7f3 fc70 	bl	800029c <__adddf3>
 800c9bc:	4632      	mov	r2, r6
 800c9be:	463b      	mov	r3, r7
 800c9c0:	f7f3 fc6c 	bl	800029c <__adddf3>
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	4632      	mov	r2, r6
 800c9c8:	463b      	mov	r3, r7
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	460d      	mov	r5, r1
 800c9ce:	f7f3 fc63 	bl	8000298 <__aeabi_dsub>
 800c9d2:	4642      	mov	r2, r8
 800c9d4:	464b      	mov	r3, r9
 800c9d6:	f7f3 fc5f 	bl	8000298 <__aeabi_dsub>
 800c9da:	ec53 2b18 	vmov	r2, r3, d8
 800c9de:	f7f3 fc5b 	bl	8000298 <__aeabi_dsub>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	4650      	mov	r0, sl
 800c9e8:	4659      	mov	r1, fp
 800c9ea:	e610      	b.n	800c60e <__ieee754_pow+0x31e>
 800c9ec:	2401      	movs	r4, #1
 800c9ee:	e6a1      	b.n	800c734 <__ieee754_pow+0x444>
 800c9f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ca40 <__ieee754_pow+0x750>
 800c9f4:	e617      	b.n	800c626 <__ieee754_pow+0x336>
 800c9f6:	bf00      	nop
 800c9f8:	4a454eef 	.word	0x4a454eef
 800c9fc:	3fca7e28 	.word	0x3fca7e28
 800ca00:	93c9db65 	.word	0x93c9db65
 800ca04:	3fcd864a 	.word	0x3fcd864a
 800ca08:	a91d4101 	.word	0xa91d4101
 800ca0c:	3fd17460 	.word	0x3fd17460
 800ca10:	518f264d 	.word	0x518f264d
 800ca14:	3fd55555 	.word	0x3fd55555
 800ca18:	db6fabff 	.word	0xdb6fabff
 800ca1c:	3fdb6db6 	.word	0x3fdb6db6
 800ca20:	33333303 	.word	0x33333303
 800ca24:	3fe33333 	.word	0x3fe33333
 800ca28:	e0000000 	.word	0xe0000000
 800ca2c:	3feec709 	.word	0x3feec709
 800ca30:	dc3a03fd 	.word	0xdc3a03fd
 800ca34:	3feec709 	.word	0x3feec709
 800ca38:	145b01f5 	.word	0x145b01f5
 800ca3c:	be3e2fe0 	.word	0xbe3e2fe0
 800ca40:	00000000 	.word	0x00000000
 800ca44:	3ff00000 	.word	0x3ff00000
 800ca48:	7ff00000 	.word	0x7ff00000
 800ca4c:	43400000 	.word	0x43400000
 800ca50:	0003988e 	.word	0x0003988e
 800ca54:	000bb679 	.word	0x000bb679
 800ca58:	0800d898 	.word	0x0800d898
 800ca5c:	3ff00000 	.word	0x3ff00000
 800ca60:	40080000 	.word	0x40080000
 800ca64:	0800d8b8 	.word	0x0800d8b8
 800ca68:	0800d8a8 	.word	0x0800d8a8
 800ca6c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cd44 <__ieee754_pow+0xa54>)
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	4640      	mov	r0, r8
 800ca74:	4649      	mov	r1, r9
 800ca76:	f7f3 fc11 	bl	800029c <__adddf3>
 800ca7a:	4622      	mov	r2, r4
 800ca7c:	ec41 0b1a 	vmov	d10, r0, r1
 800ca80:	462b      	mov	r3, r5
 800ca82:	4630      	mov	r0, r6
 800ca84:	4639      	mov	r1, r7
 800ca86:	f7f3 fc07 	bl	8000298 <__aeabi_dsub>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	ec51 0b1a 	vmov	r0, r1, d10
 800ca92:	f7f4 f849 	bl	8000b28 <__aeabi_dcmpgt>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	f47f ae04 	bne.w	800c6a4 <__ieee754_pow+0x3b4>
 800ca9c:	4aa4      	ldr	r2, [pc, #656]	; (800cd30 <__ieee754_pow+0xa40>)
 800ca9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800caa2:	4293      	cmp	r3, r2
 800caa4:	f340 8108 	ble.w	800ccb8 <__ieee754_pow+0x9c8>
 800caa8:	151b      	asrs	r3, r3, #20
 800caaa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800caae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cab2:	fa4a f303 	asr.w	r3, sl, r3
 800cab6:	445b      	add	r3, fp
 800cab8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cabc:	4e9d      	ldr	r6, [pc, #628]	; (800cd34 <__ieee754_pow+0xa44>)
 800cabe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cac2:	4116      	asrs	r6, r2
 800cac4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cac8:	2000      	movs	r0, #0
 800caca:	ea23 0106 	bic.w	r1, r3, r6
 800cace:	f1c2 0214 	rsb	r2, r2, #20
 800cad2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cad6:	fa4a fa02 	asr.w	sl, sl, r2
 800cada:	f1bb 0f00 	cmp.w	fp, #0
 800cade:	4602      	mov	r2, r0
 800cae0:	460b      	mov	r3, r1
 800cae2:	4620      	mov	r0, r4
 800cae4:	4629      	mov	r1, r5
 800cae6:	bfb8      	it	lt
 800cae8:	f1ca 0a00 	rsblt	sl, sl, #0
 800caec:	f7f3 fbd4 	bl	8000298 <__aeabi_dsub>
 800caf0:	ec41 0b19 	vmov	d9, r0, r1
 800caf4:	4642      	mov	r2, r8
 800caf6:	464b      	mov	r3, r9
 800caf8:	ec51 0b19 	vmov	r0, r1, d9
 800cafc:	f7f3 fbce 	bl	800029c <__adddf3>
 800cb00:	a37b      	add	r3, pc, #492	; (adr r3, 800ccf0 <__ieee754_pow+0xa00>)
 800cb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb06:	2000      	movs	r0, #0
 800cb08:	4604      	mov	r4, r0
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	f7f3 fd7c 	bl	8000608 <__aeabi_dmul>
 800cb10:	ec53 2b19 	vmov	r2, r3, d9
 800cb14:	4606      	mov	r6, r0
 800cb16:	460f      	mov	r7, r1
 800cb18:	4620      	mov	r0, r4
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	f7f3 fbbc 	bl	8000298 <__aeabi_dsub>
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	4640      	mov	r0, r8
 800cb26:	4649      	mov	r1, r9
 800cb28:	f7f3 fbb6 	bl	8000298 <__aeabi_dsub>
 800cb2c:	a372      	add	r3, pc, #456	; (adr r3, 800ccf8 <__ieee754_pow+0xa08>)
 800cb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb32:	f7f3 fd69 	bl	8000608 <__aeabi_dmul>
 800cb36:	a372      	add	r3, pc, #456	; (adr r3, 800cd00 <__ieee754_pow+0xa10>)
 800cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3c:	4680      	mov	r8, r0
 800cb3e:	4689      	mov	r9, r1
 800cb40:	4620      	mov	r0, r4
 800cb42:	4629      	mov	r1, r5
 800cb44:	f7f3 fd60 	bl	8000608 <__aeabi_dmul>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	4640      	mov	r0, r8
 800cb4e:	4649      	mov	r1, r9
 800cb50:	f7f3 fba4 	bl	800029c <__adddf3>
 800cb54:	4604      	mov	r4, r0
 800cb56:	460d      	mov	r5, r1
 800cb58:	4602      	mov	r2, r0
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	4639      	mov	r1, r7
 800cb60:	f7f3 fb9c 	bl	800029c <__adddf3>
 800cb64:	4632      	mov	r2, r6
 800cb66:	463b      	mov	r3, r7
 800cb68:	4680      	mov	r8, r0
 800cb6a:	4689      	mov	r9, r1
 800cb6c:	f7f3 fb94 	bl	8000298 <__aeabi_dsub>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4620      	mov	r0, r4
 800cb76:	4629      	mov	r1, r5
 800cb78:	f7f3 fb8e 	bl	8000298 <__aeabi_dsub>
 800cb7c:	4642      	mov	r2, r8
 800cb7e:	4606      	mov	r6, r0
 800cb80:	460f      	mov	r7, r1
 800cb82:	464b      	mov	r3, r9
 800cb84:	4640      	mov	r0, r8
 800cb86:	4649      	mov	r1, r9
 800cb88:	f7f3 fd3e 	bl	8000608 <__aeabi_dmul>
 800cb8c:	a35e      	add	r3, pc, #376	; (adr r3, 800cd08 <__ieee754_pow+0xa18>)
 800cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb92:	4604      	mov	r4, r0
 800cb94:	460d      	mov	r5, r1
 800cb96:	f7f3 fd37 	bl	8000608 <__aeabi_dmul>
 800cb9a:	a35d      	add	r3, pc, #372	; (adr r3, 800cd10 <__ieee754_pow+0xa20>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	f7f3 fb7a 	bl	8000298 <__aeabi_dsub>
 800cba4:	4622      	mov	r2, r4
 800cba6:	462b      	mov	r3, r5
 800cba8:	f7f3 fd2e 	bl	8000608 <__aeabi_dmul>
 800cbac:	a35a      	add	r3, pc, #360	; (adr r3, 800cd18 <__ieee754_pow+0xa28>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fb73 	bl	800029c <__adddf3>
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	462b      	mov	r3, r5
 800cbba:	f7f3 fd25 	bl	8000608 <__aeabi_dmul>
 800cbbe:	a358      	add	r3, pc, #352	; (adr r3, 800cd20 <__ieee754_pow+0xa30>)
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	f7f3 fb68 	bl	8000298 <__aeabi_dsub>
 800cbc8:	4622      	mov	r2, r4
 800cbca:	462b      	mov	r3, r5
 800cbcc:	f7f3 fd1c 	bl	8000608 <__aeabi_dmul>
 800cbd0:	a355      	add	r3, pc, #340	; (adr r3, 800cd28 <__ieee754_pow+0xa38>)
 800cbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd6:	f7f3 fb61 	bl	800029c <__adddf3>
 800cbda:	4622      	mov	r2, r4
 800cbdc:	462b      	mov	r3, r5
 800cbde:	f7f3 fd13 	bl	8000608 <__aeabi_dmul>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	4649      	mov	r1, r9
 800cbea:	f7f3 fb55 	bl	8000298 <__aeabi_dsub>
 800cbee:	4604      	mov	r4, r0
 800cbf0:	460d      	mov	r5, r1
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4640      	mov	r0, r8
 800cbf8:	4649      	mov	r1, r9
 800cbfa:	f7f3 fd05 	bl	8000608 <__aeabi_dmul>
 800cbfe:	2200      	movs	r2, #0
 800cc00:	ec41 0b19 	vmov	d9, r0, r1
 800cc04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc08:	4620      	mov	r0, r4
 800cc0a:	4629      	mov	r1, r5
 800cc0c:	f7f3 fb44 	bl	8000298 <__aeabi_dsub>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	ec51 0b19 	vmov	r0, r1, d9
 800cc18:	f7f3 fe20 	bl	800085c <__aeabi_ddiv>
 800cc1c:	4632      	mov	r2, r6
 800cc1e:	4604      	mov	r4, r0
 800cc20:	460d      	mov	r5, r1
 800cc22:	463b      	mov	r3, r7
 800cc24:	4640      	mov	r0, r8
 800cc26:	4649      	mov	r1, r9
 800cc28:	f7f3 fcee 	bl	8000608 <__aeabi_dmul>
 800cc2c:	4632      	mov	r2, r6
 800cc2e:	463b      	mov	r3, r7
 800cc30:	f7f3 fb34 	bl	800029c <__adddf3>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	4620      	mov	r0, r4
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	f7f3 fb2c 	bl	8000298 <__aeabi_dsub>
 800cc40:	4642      	mov	r2, r8
 800cc42:	464b      	mov	r3, r9
 800cc44:	f7f3 fb28 	bl	8000298 <__aeabi_dsub>
 800cc48:	460b      	mov	r3, r1
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	493a      	ldr	r1, [pc, #232]	; (800cd38 <__ieee754_pow+0xa48>)
 800cc4e:	2000      	movs	r0, #0
 800cc50:	f7f3 fb22 	bl	8000298 <__aeabi_dsub>
 800cc54:	ec41 0b10 	vmov	d0, r0, r1
 800cc58:	ee10 3a90 	vmov	r3, s1
 800cc5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cc60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc64:	da2b      	bge.n	800ccbe <__ieee754_pow+0x9ce>
 800cc66:	4650      	mov	r0, sl
 800cc68:	f000 f966 	bl	800cf38 <scalbn>
 800cc6c:	ec51 0b10 	vmov	r0, r1, d0
 800cc70:	ec53 2b18 	vmov	r2, r3, d8
 800cc74:	f7ff bbed 	b.w	800c452 <__ieee754_pow+0x162>
 800cc78:	4b30      	ldr	r3, [pc, #192]	; (800cd3c <__ieee754_pow+0xa4c>)
 800cc7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cc7e:	429e      	cmp	r6, r3
 800cc80:	f77f af0c 	ble.w	800ca9c <__ieee754_pow+0x7ac>
 800cc84:	4b2e      	ldr	r3, [pc, #184]	; (800cd40 <__ieee754_pow+0xa50>)
 800cc86:	440b      	add	r3, r1
 800cc88:	4303      	orrs	r3, r0
 800cc8a:	d009      	beq.n	800cca0 <__ieee754_pow+0x9b0>
 800cc8c:	ec51 0b18 	vmov	r0, r1, d8
 800cc90:	2200      	movs	r2, #0
 800cc92:	2300      	movs	r3, #0
 800cc94:	f7f3 ff2a 	bl	8000aec <__aeabi_dcmplt>
 800cc98:	3800      	subs	r0, #0
 800cc9a:	bf18      	it	ne
 800cc9c:	2001      	movne	r0, #1
 800cc9e:	e447      	b.n	800c530 <__ieee754_pow+0x240>
 800cca0:	4622      	mov	r2, r4
 800cca2:	462b      	mov	r3, r5
 800cca4:	f7f3 faf8 	bl	8000298 <__aeabi_dsub>
 800cca8:	4642      	mov	r2, r8
 800ccaa:	464b      	mov	r3, r9
 800ccac:	f7f3 ff32 	bl	8000b14 <__aeabi_dcmpge>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	f43f aef3 	beq.w	800ca9c <__ieee754_pow+0x7ac>
 800ccb6:	e7e9      	b.n	800cc8c <__ieee754_pow+0x99c>
 800ccb8:	f04f 0a00 	mov.w	sl, #0
 800ccbc:	e71a      	b.n	800caf4 <__ieee754_pow+0x804>
 800ccbe:	ec51 0b10 	vmov	r0, r1, d0
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	e7d4      	b.n	800cc70 <__ieee754_pow+0x980>
 800ccc6:	491c      	ldr	r1, [pc, #112]	; (800cd38 <__ieee754_pow+0xa48>)
 800ccc8:	2000      	movs	r0, #0
 800ccca:	f7ff bb30 	b.w	800c32e <__ieee754_pow+0x3e>
 800ccce:	2000      	movs	r0, #0
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	f7ff bb2c 	b.w	800c32e <__ieee754_pow+0x3e>
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	4639      	mov	r1, r7
 800ccda:	f7ff bb28 	b.w	800c32e <__ieee754_pow+0x3e>
 800ccde:	9204      	str	r2, [sp, #16]
 800cce0:	f7ff bb7a 	b.w	800c3d8 <__ieee754_pow+0xe8>
 800cce4:	2300      	movs	r3, #0
 800cce6:	f7ff bb64 	b.w	800c3b2 <__ieee754_pow+0xc2>
 800ccea:	bf00      	nop
 800ccec:	f3af 8000 	nop.w
 800ccf0:	00000000 	.word	0x00000000
 800ccf4:	3fe62e43 	.word	0x3fe62e43
 800ccf8:	fefa39ef 	.word	0xfefa39ef
 800ccfc:	3fe62e42 	.word	0x3fe62e42
 800cd00:	0ca86c39 	.word	0x0ca86c39
 800cd04:	be205c61 	.word	0xbe205c61
 800cd08:	72bea4d0 	.word	0x72bea4d0
 800cd0c:	3e663769 	.word	0x3e663769
 800cd10:	c5d26bf1 	.word	0xc5d26bf1
 800cd14:	3ebbbd41 	.word	0x3ebbbd41
 800cd18:	af25de2c 	.word	0xaf25de2c
 800cd1c:	3f11566a 	.word	0x3f11566a
 800cd20:	16bebd93 	.word	0x16bebd93
 800cd24:	3f66c16c 	.word	0x3f66c16c
 800cd28:	5555553e 	.word	0x5555553e
 800cd2c:	3fc55555 	.word	0x3fc55555
 800cd30:	3fe00000 	.word	0x3fe00000
 800cd34:	000fffff 	.word	0x000fffff
 800cd38:	3ff00000 	.word	0x3ff00000
 800cd3c:	4090cbff 	.word	0x4090cbff
 800cd40:	3f6f3400 	.word	0x3f6f3400
 800cd44:	652b82fe 	.word	0x652b82fe
 800cd48:	3c971547 	.word	0x3c971547

0800cd4c <__ieee754_sqrt>:
 800cd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd50:	ec55 4b10 	vmov	r4, r5, d0
 800cd54:	4e55      	ldr	r6, [pc, #340]	; (800ceac <__ieee754_sqrt+0x160>)
 800cd56:	43ae      	bics	r6, r5
 800cd58:	ee10 0a10 	vmov	r0, s0
 800cd5c:	ee10 3a10 	vmov	r3, s0
 800cd60:	462a      	mov	r2, r5
 800cd62:	4629      	mov	r1, r5
 800cd64:	d110      	bne.n	800cd88 <__ieee754_sqrt+0x3c>
 800cd66:	ee10 2a10 	vmov	r2, s0
 800cd6a:	462b      	mov	r3, r5
 800cd6c:	f7f3 fc4c 	bl	8000608 <__aeabi_dmul>
 800cd70:	4602      	mov	r2, r0
 800cd72:	460b      	mov	r3, r1
 800cd74:	4620      	mov	r0, r4
 800cd76:	4629      	mov	r1, r5
 800cd78:	f7f3 fa90 	bl	800029c <__adddf3>
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	460d      	mov	r5, r1
 800cd80:	ec45 4b10 	vmov	d0, r4, r5
 800cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd88:	2d00      	cmp	r5, #0
 800cd8a:	dc10      	bgt.n	800cdae <__ieee754_sqrt+0x62>
 800cd8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd90:	4330      	orrs	r0, r6
 800cd92:	d0f5      	beq.n	800cd80 <__ieee754_sqrt+0x34>
 800cd94:	b15d      	cbz	r5, 800cdae <__ieee754_sqrt+0x62>
 800cd96:	ee10 2a10 	vmov	r2, s0
 800cd9a:	462b      	mov	r3, r5
 800cd9c:	ee10 0a10 	vmov	r0, s0
 800cda0:	f7f3 fa7a 	bl	8000298 <__aeabi_dsub>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	f7f3 fd58 	bl	800085c <__aeabi_ddiv>
 800cdac:	e7e6      	b.n	800cd7c <__ieee754_sqrt+0x30>
 800cdae:	1512      	asrs	r2, r2, #20
 800cdb0:	d074      	beq.n	800ce9c <__ieee754_sqrt+0x150>
 800cdb2:	07d4      	lsls	r4, r2, #31
 800cdb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cdb8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cdbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cdc0:	bf5e      	ittt	pl
 800cdc2:	0fda      	lsrpl	r2, r3, #31
 800cdc4:	005b      	lslpl	r3, r3, #1
 800cdc6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cdca:	2400      	movs	r4, #0
 800cdcc:	0fda      	lsrs	r2, r3, #31
 800cdce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cdd2:	107f      	asrs	r7, r7, #1
 800cdd4:	005b      	lsls	r3, r3, #1
 800cdd6:	2516      	movs	r5, #22
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cdde:	1886      	adds	r6, r0, r2
 800cde0:	428e      	cmp	r6, r1
 800cde2:	bfde      	ittt	le
 800cde4:	1b89      	suble	r1, r1, r6
 800cde6:	18b0      	addle	r0, r6, r2
 800cde8:	18a4      	addle	r4, r4, r2
 800cdea:	0049      	lsls	r1, r1, #1
 800cdec:	3d01      	subs	r5, #1
 800cdee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cdf2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cdf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cdfa:	d1f0      	bne.n	800cdde <__ieee754_sqrt+0x92>
 800cdfc:	462a      	mov	r2, r5
 800cdfe:	f04f 0e20 	mov.w	lr, #32
 800ce02:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ce06:	4281      	cmp	r1, r0
 800ce08:	eb06 0c05 	add.w	ip, r6, r5
 800ce0c:	dc02      	bgt.n	800ce14 <__ieee754_sqrt+0xc8>
 800ce0e:	d113      	bne.n	800ce38 <__ieee754_sqrt+0xec>
 800ce10:	459c      	cmp	ip, r3
 800ce12:	d811      	bhi.n	800ce38 <__ieee754_sqrt+0xec>
 800ce14:	f1bc 0f00 	cmp.w	ip, #0
 800ce18:	eb0c 0506 	add.w	r5, ip, r6
 800ce1c:	da43      	bge.n	800cea6 <__ieee754_sqrt+0x15a>
 800ce1e:	2d00      	cmp	r5, #0
 800ce20:	db41      	blt.n	800cea6 <__ieee754_sqrt+0x15a>
 800ce22:	f100 0801 	add.w	r8, r0, #1
 800ce26:	1a09      	subs	r1, r1, r0
 800ce28:	459c      	cmp	ip, r3
 800ce2a:	bf88      	it	hi
 800ce2c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ce30:	eba3 030c 	sub.w	r3, r3, ip
 800ce34:	4432      	add	r2, r6
 800ce36:	4640      	mov	r0, r8
 800ce38:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ce3c:	f1be 0e01 	subs.w	lr, lr, #1
 800ce40:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ce44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ce4c:	d1db      	bne.n	800ce06 <__ieee754_sqrt+0xba>
 800ce4e:	430b      	orrs	r3, r1
 800ce50:	d006      	beq.n	800ce60 <__ieee754_sqrt+0x114>
 800ce52:	1c50      	adds	r0, r2, #1
 800ce54:	bf13      	iteet	ne
 800ce56:	3201      	addne	r2, #1
 800ce58:	3401      	addeq	r4, #1
 800ce5a:	4672      	moveq	r2, lr
 800ce5c:	f022 0201 	bicne.w	r2, r2, #1
 800ce60:	1063      	asrs	r3, r4, #1
 800ce62:	0852      	lsrs	r2, r2, #1
 800ce64:	07e1      	lsls	r1, r4, #31
 800ce66:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ce6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ce6e:	bf48      	it	mi
 800ce70:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ce74:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ce78:	4614      	mov	r4, r2
 800ce7a:	e781      	b.n	800cd80 <__ieee754_sqrt+0x34>
 800ce7c:	0ad9      	lsrs	r1, r3, #11
 800ce7e:	3815      	subs	r0, #21
 800ce80:	055b      	lsls	r3, r3, #21
 800ce82:	2900      	cmp	r1, #0
 800ce84:	d0fa      	beq.n	800ce7c <__ieee754_sqrt+0x130>
 800ce86:	02cd      	lsls	r5, r1, #11
 800ce88:	d50a      	bpl.n	800cea0 <__ieee754_sqrt+0x154>
 800ce8a:	f1c2 0420 	rsb	r4, r2, #32
 800ce8e:	fa23 f404 	lsr.w	r4, r3, r4
 800ce92:	1e55      	subs	r5, r2, #1
 800ce94:	4093      	lsls	r3, r2
 800ce96:	4321      	orrs	r1, r4
 800ce98:	1b42      	subs	r2, r0, r5
 800ce9a:	e78a      	b.n	800cdb2 <__ieee754_sqrt+0x66>
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	e7f0      	b.n	800ce82 <__ieee754_sqrt+0x136>
 800cea0:	0049      	lsls	r1, r1, #1
 800cea2:	3201      	adds	r2, #1
 800cea4:	e7ef      	b.n	800ce86 <__ieee754_sqrt+0x13a>
 800cea6:	4680      	mov	r8, r0
 800cea8:	e7bd      	b.n	800ce26 <__ieee754_sqrt+0xda>
 800ceaa:	bf00      	nop
 800ceac:	7ff00000 	.word	0x7ff00000

0800ceb0 <with_errno>:
 800ceb0:	b570      	push	{r4, r5, r6, lr}
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	4616      	mov	r6, r2
 800ceb8:	f7fa fb2c 	bl	8007514 <__errno>
 800cebc:	4629      	mov	r1, r5
 800cebe:	6006      	str	r6, [r0, #0]
 800cec0:	4620      	mov	r0, r4
 800cec2:	bd70      	pop	{r4, r5, r6, pc}

0800cec4 <xflow>:
 800cec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cec6:	4614      	mov	r4, r2
 800cec8:	461d      	mov	r5, r3
 800ceca:	b108      	cbz	r0, 800ced0 <xflow+0xc>
 800cecc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ced0:	e9cd 2300 	strd	r2, r3, [sp]
 800ced4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ced8:	4620      	mov	r0, r4
 800ceda:	4629      	mov	r1, r5
 800cedc:	f7f3 fb94 	bl	8000608 <__aeabi_dmul>
 800cee0:	2222      	movs	r2, #34	; 0x22
 800cee2:	b003      	add	sp, #12
 800cee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cee8:	f7ff bfe2 	b.w	800ceb0 <with_errno>

0800ceec <__math_uflow>:
 800ceec:	b508      	push	{r3, lr}
 800ceee:	2200      	movs	r2, #0
 800cef0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cef4:	f7ff ffe6 	bl	800cec4 <xflow>
 800cef8:	ec41 0b10 	vmov	d0, r0, r1
 800cefc:	bd08      	pop	{r3, pc}

0800cefe <__math_oflow>:
 800cefe:	b508      	push	{r3, lr}
 800cf00:	2200      	movs	r2, #0
 800cf02:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cf06:	f7ff ffdd 	bl	800cec4 <xflow>
 800cf0a:	ec41 0b10 	vmov	d0, r0, r1
 800cf0e:	bd08      	pop	{r3, pc}

0800cf10 <fabs>:
 800cf10:	ec51 0b10 	vmov	r0, r1, d0
 800cf14:	ee10 2a10 	vmov	r2, s0
 800cf18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf1c:	ec43 2b10 	vmov	d0, r2, r3
 800cf20:	4770      	bx	lr

0800cf22 <finite>:
 800cf22:	b082      	sub	sp, #8
 800cf24:	ed8d 0b00 	vstr	d0, [sp]
 800cf28:	9801      	ldr	r0, [sp, #4]
 800cf2a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cf2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cf32:	0fc0      	lsrs	r0, r0, #31
 800cf34:	b002      	add	sp, #8
 800cf36:	4770      	bx	lr

0800cf38 <scalbn>:
 800cf38:	b570      	push	{r4, r5, r6, lr}
 800cf3a:	ec55 4b10 	vmov	r4, r5, d0
 800cf3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cf42:	4606      	mov	r6, r0
 800cf44:	462b      	mov	r3, r5
 800cf46:	b99a      	cbnz	r2, 800cf70 <scalbn+0x38>
 800cf48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cf4c:	4323      	orrs	r3, r4
 800cf4e:	d036      	beq.n	800cfbe <scalbn+0x86>
 800cf50:	4b39      	ldr	r3, [pc, #228]	; (800d038 <scalbn+0x100>)
 800cf52:	4629      	mov	r1, r5
 800cf54:	ee10 0a10 	vmov	r0, s0
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f7f3 fb55 	bl	8000608 <__aeabi_dmul>
 800cf5e:	4b37      	ldr	r3, [pc, #220]	; (800d03c <scalbn+0x104>)
 800cf60:	429e      	cmp	r6, r3
 800cf62:	4604      	mov	r4, r0
 800cf64:	460d      	mov	r5, r1
 800cf66:	da10      	bge.n	800cf8a <scalbn+0x52>
 800cf68:	a32b      	add	r3, pc, #172	; (adr r3, 800d018 <scalbn+0xe0>)
 800cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6e:	e03a      	b.n	800cfe6 <scalbn+0xae>
 800cf70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cf74:	428a      	cmp	r2, r1
 800cf76:	d10c      	bne.n	800cf92 <scalbn+0x5a>
 800cf78:	ee10 2a10 	vmov	r2, s0
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	4629      	mov	r1, r5
 800cf80:	f7f3 f98c 	bl	800029c <__adddf3>
 800cf84:	4604      	mov	r4, r0
 800cf86:	460d      	mov	r5, r1
 800cf88:	e019      	b.n	800cfbe <scalbn+0x86>
 800cf8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cf8e:	460b      	mov	r3, r1
 800cf90:	3a36      	subs	r2, #54	; 0x36
 800cf92:	4432      	add	r2, r6
 800cf94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cf98:	428a      	cmp	r2, r1
 800cf9a:	dd08      	ble.n	800cfae <scalbn+0x76>
 800cf9c:	2d00      	cmp	r5, #0
 800cf9e:	a120      	add	r1, pc, #128	; (adr r1, 800d020 <scalbn+0xe8>)
 800cfa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfa4:	da1c      	bge.n	800cfe0 <scalbn+0xa8>
 800cfa6:	a120      	add	r1, pc, #128	; (adr r1, 800d028 <scalbn+0xf0>)
 800cfa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfac:	e018      	b.n	800cfe0 <scalbn+0xa8>
 800cfae:	2a00      	cmp	r2, #0
 800cfb0:	dd08      	ble.n	800cfc4 <scalbn+0x8c>
 800cfb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cfb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cfba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cfbe:	ec45 4b10 	vmov	d0, r4, r5
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}
 800cfc4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cfc8:	da19      	bge.n	800cffe <scalbn+0xc6>
 800cfca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cfce:	429e      	cmp	r6, r3
 800cfd0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cfd4:	dd0a      	ble.n	800cfec <scalbn+0xb4>
 800cfd6:	a112      	add	r1, pc, #72	; (adr r1, 800d020 <scalbn+0xe8>)
 800cfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1e2      	bne.n	800cfa6 <scalbn+0x6e>
 800cfe0:	a30f      	add	r3, pc, #60	; (adr r3, 800d020 <scalbn+0xe8>)
 800cfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe6:	f7f3 fb0f 	bl	8000608 <__aeabi_dmul>
 800cfea:	e7cb      	b.n	800cf84 <scalbn+0x4c>
 800cfec:	a10a      	add	r1, pc, #40	; (adr r1, 800d018 <scalbn+0xe0>)
 800cfee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d0b8      	beq.n	800cf68 <scalbn+0x30>
 800cff6:	a10e      	add	r1, pc, #56	; (adr r1, 800d030 <scalbn+0xf8>)
 800cff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cffc:	e7b4      	b.n	800cf68 <scalbn+0x30>
 800cffe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d002:	3236      	adds	r2, #54	; 0x36
 800d004:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d008:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d00c:	4620      	mov	r0, r4
 800d00e:	4b0c      	ldr	r3, [pc, #48]	; (800d040 <scalbn+0x108>)
 800d010:	2200      	movs	r2, #0
 800d012:	e7e8      	b.n	800cfe6 <scalbn+0xae>
 800d014:	f3af 8000 	nop.w
 800d018:	c2f8f359 	.word	0xc2f8f359
 800d01c:	01a56e1f 	.word	0x01a56e1f
 800d020:	8800759c 	.word	0x8800759c
 800d024:	7e37e43c 	.word	0x7e37e43c
 800d028:	8800759c 	.word	0x8800759c
 800d02c:	fe37e43c 	.word	0xfe37e43c
 800d030:	c2f8f359 	.word	0xc2f8f359
 800d034:	81a56e1f 	.word	0x81a56e1f
 800d038:	43500000 	.word	0x43500000
 800d03c:	ffff3cb0 	.word	0xffff3cb0
 800d040:	3c900000 	.word	0x3c900000

0800d044 <_init>:
 800d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d046:	bf00      	nop
 800d048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04a:	bc08      	pop	{r3}
 800d04c:	469e      	mov	lr, r3
 800d04e:	4770      	bx	lr

0800d050 <_fini>:
 800d050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d052:	bf00      	nop
 800d054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d056:	bc08      	pop	{r3}
 800d058:	469e      	mov	lr, r3
 800d05a:	4770      	bx	lr
